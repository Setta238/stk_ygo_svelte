var _i=Object.defineProperty;var ki=(e,t,i)=>t in e?_i(e,t,{enumerable:!0,configurable:!0,writable:!0,value:i}):e[t]=i;var s=(e,t,i)=>ki(e,typeof t!="symbol"?t+"":t,i);import{j as Di}from"./json.js";class rn{constructor(t,i,a){s(this,"_dbname");s(this,"_dbversion");s(this,"dbPromise");s(this,"getTran",async(t,i)=>(await this.dbPromise).transaction(t,i));s(this,"reset",async()=>(await indexedDB.databases().then(t=>{console.log(t)}),await new Promise((t,i)=>{const a=indexedDB.deleteDatabase(this._dbname);a.onsuccess=()=>{console.log("onsuccess"),t()},a.onerror=r=>{console.log("onerror"),i(r)}})));s(this,"getAll",async t=>{const i=await this.dbPromise;return new Promise((a,r)=>{const o=i.transaction([t],"readonly").objectStore(t).getAll();o.onsuccess=()=>{a(o.result)},o.onerror=u=>{r(u)}})});s(this,"get",async(t,i)=>{const a=await this.dbPromise;return new Promise((r,n)=>{const u=a.transaction([t],"readonly").objectStore(t).get(i);u.onsuccess=()=>{r(u.result)},u.onerror=c=>{n(c)}})});s(this,"getMany",async(t,i)=>{const n=(await this.dbPromise).transaction([t],"readonly").objectStore(t),l=i.map(o=>new Promise((u,c)=>{const d=n.get(o);d.onsuccess=()=>{u(d.result)},d.onerror=p=>{c(p)}}));return await Promise.all(l)});s(this,"putRecords",async(t,i)=>{const r=(await this.dbPromise).transaction([t],"readwrite"),n=r.objectStore(t),l=i.map(o=>({record:o,request:n.put(o)}));return new Promise((o,u)=>{r.oncomplete=()=>o(l.map(c=>Object.assign({id:c.request.result},c.record))),r.onerror=c=>u(c)})});s(this,"deleteRecords",async(t,i)=>{const r=(await this.dbPromise).transaction([t],"readwrite"),n=r.objectStore(t),l=i.map(o=>({key:o,request:n.delete(o)}));return new Promise((o,u)=>{r.oncomplete=()=>{console.log(l.map(c=>c.request.result)),o()},r.onerror=c=>u(c)})});this._dbname=t,this._dbversion=i,this.dbPromise=new Promise((r,n)=>{const l=indexedDB.open(t,i);l.onsuccess=o=>{if(console.log(o),!o.target){console.log("event.target is undefined"),n("event.target is undefined");return}const u=o.target.result;if(!u){console.log("event.target.result is undefined"),n("event.target.result is undefined");return}u.onversionchange=c=>{console.log(c),u.close()},r(u)},l.onupgradeneeded=o=>{console.log("onupgradeneeded");const u=o.target.result;a.filter(c=>!u.objectStoreNames.contains(c)).map(c=>u.createObjectStore(c,{keyPath:"id",autoIncrement:!0}))},l.onerror=o=>{console.log(o),n(o)},l.onblocked=o=>{console.log(o),n(o)}}),console.log(this.dbPromise)}get dbversion(){return this._dbversion}}class O{constructor(){s(this,"handlers",[])}get length(){return this.handlers.length}append(t){this.handlers.push(t)}remove(t){this.handlers=this.handlers.filter(i=>i!==t)}trigger(t){this.handlers.slice(0).filter(i=>i(t)==="RemoveMe").forEach(i=>this.remove(i))}clear(){this.handlers.splice(0)}expose(){return this}}class et{constructor(){s(this,"handlers",[])}append(t){this.handlers.push(t)}remove(t){this.handlers=this.handlers.filter(i=>i!==t)}async trigger(t){(await Promise.all(this.handlers.slice(0).map(async a=>{const r=await a(t);return{h:a,result:r}}))).filter(a=>a.result==="RemoveMe").map(a=>a.h).forEach(a=>this.remove(a))}clear(){this.handlers.splice(0)}expose(){return this}}class tt{constructor(){s(this,"handler")}set(t){this.handler=t}async call(t){if(!this.handler)throw Error("illegal state error");return await this.handler(t)}expose(){return this}}class Qe{constructor(t,i,a,r){s(this,"_name");s(this,"_createVersion");s(this,"mountResolver",()=>{});s(this,"_indexedDb");s(this,"onInsertEvent",new O);s(this,"onBeforeInsertEvent",new tt);s(this,"onUpdateEvent",new O);s(this,"onBeforeUpdateEvent",new tt);s(this,"onDeleteEvent",new O);s(this,"prepareInitialRecords",()=>{const t=new Date;return this._prepareInitialRecords().map(i=>Object.assign(i,{createdAt:t,updatedAt:t,dbVersion:this._createVersion}))});s(this,"resolveMount",()=>this.mountResolver());s(this,"patchForInsert",(t,i)=>{t.newRecords.forEach(a=>{i[a.id]=a})});s(this,"patchForUpdate",(t,i)=>{t.recordPairs.forEach(a=>{i[a.newRecord.id]={...a.newRecord}})});s(this,"patchForDelete",(t,i)=>{t.oldRecords.forEach(a=>{delete i[a.id]})});this._indexedDb=t,this._name=i,this._createVersion=t.dbversion,this.getAll().then(n=>n.reduce((l,o)=>(l[o.id]=o,l),{})).then(n=>{console.log(this.name,n),this.onBeforeInsertEvent.set(a??(()=>Promise.resolve())),this.onBeforeUpdateEvent.set(r??(()=>Promise.resolve()))})}get name(){return this._name}get createVersion(){return this._createVersion}get oninsert(){return this.onInsertEvent.expose()}get onbeforeinsert(){return this.onBeforeInsertEvent.expose()}get onupdate(){return this.onUpdateEvent.expose()}get onbeforeupdate(){return this.onBeforeUpdateEvent.expose()}get ondelete(){return this.onDeleteEvent.expose()}getAll(){return this._indexedDb.getAll(this.name)}get(t){return this._indexedDb.get(this.name,t)}async insertMany(t){const i=new Date,a=t.map(n=>{const l={createdAt:i,updatedAt:i,dbVersion:this._createVersion};return Object.assign(n,l)});await this.onBeforeInsertEvent.call({sender:this,newRecords:a,timestamp:i});const r=await this._indexedDb.putRecords(this.name,a);return this.onInsertEvent.trigger({sender:this,newRecords:r,timestamp:i}),r}async insert(t){return(await this.insertMany([t]))[0]}async updateMany(t,i){const a=new Date,r=[];return(await this._indexedDb.getMany(this.name,t)).forEach(l=>{const o={...l},u={...o};r.push({newRecord:Object.assign(i(u),{updatedAt:a,dbVersion:this._createVersion}),oldRecord:o})}),await this.onBeforeUpdateEvent.call({sender:this,recordPairs:r,timestamp:a}),await this._indexedDb.putRecords(this.name,r.map(l=>l.newRecord)),this.onUpdateEvent.trigger({sender:this,recordPairs:r,timestamp:a}),r.map(l=>l.newRecord)}async update(t,i){return(await this.updateMany([t],i))[0]}async delete(t){const i=new Date,a=await this._indexedDb.getMany(this.name,t);await this._indexedDb.deleteRecords(this.name,t),this.onDeleteEvent.trigger({sender:this,oldRecords:a,timestamp:i})}}const nn=["Deck","ExtraDeck"],sn={Deck:"メインデッキ",ExtraDeck:"エクストラデッキ"},Pi=["Monster","Spell","Trap","XyzMaterial"],ln={Monster:"モンスター",Spell:"魔法",Trap:"罠",XyzMaterial:"XYZ素材"},Se=["Fusion","Syncro","Xyz","Link"],ht=[...Se,"SpecialSummon","Ritual"],gt=[...ht,"NormalSummonOnly","RegularSpecialSummonOnly","FreeReborn"],Mi=["Toon","Spirit","Union","Gemini","FlipEffect"],Ai=["Tuner","Effect","Normal","Pendulum","Token"],on=[...Mi,...Ai,...gt],cn={Syncro:"シンクロ",Fusion:"融合",Xyz:"エクシーズ",Link:"リンク",Ritual:"儀式",SpecialSummon:"特殊召喚",Toon:"トゥーン",Spirit:"スピリット",Union:"ユニオン",Gemini:"デュアル",FlipEffect:"リバース",Tuner:"チューナー",Effect:"効果",Normal:"通常",Pendulum:"ペンデュラム",Token:"トークン",FreeReborn:"特殊召喚モンスター（蘇生制限なし）",NormalSummonOnly:"特殊召喚不可",RegularSpecialSummonOnly:"正規の方法以外での特殊召喚不可"},un={Syncro:"🎵",Fusion:"🌀",Xyz:"📰",Link:"⛓️",Ritual:"📜",SpecialSummon:"🔯",Toon:"📖",Spirit:"👻",Union:"🚗",Gemini:"👫",FlipEffect:"🔄",Tuner:"🎶",Effect:"✨",Normal:"🔘",Pendulum:"💠",Token:"🐏",FreeReborn:"🆓",NormalSummonOnly:"🔲",RegularSpecialSummonOnly:"❗"},dn=["Light","Dark","Earth","Water","Fire","Wind","Divine"],pn={Light:"光",Dark:"闇",Earth:"地",Water:"水",Fire:"炎",Wind:"風",Divine:"神"},fn=["Aqua","Beast","BeastWarrior","CreatorGod","Cyberse","Dinosaur","DivineBeast","Dragon","Fairy","Fiend","Fish","Insect","Illusion","Machine","Plant","Psychic","Pyro","Reptile","Rock","SeaSerpent","Spellcaster","Thunder","Warrior","WingedBeast","Wyrm","Zombie"],hn=["Normal","Continuous","Field","QuickPlay","Equip","Ritual","PendulumScale"],gn={Normal:"通常",Continuous:"永続",Field:"フィールド",QuickPlay:"速攻",Equip:"装備",Ritual:"儀式",PendulumScale:"ペンデュラム"},yn=["Normal","Continuous","Counter"],vn={Normal:"通常",Continuous:"永続",Counter:"カウンター"},P=["Attack","Defense"],me={Attack:"攻撃表示",Defense:"守備表示",Set:"裏側守備表示"},yt=["level","rank","attack","defense","pendulumScaleR","pendulumScaleL"],mn={Aqua:"水",Beast:"獣",BeastWarrior:"獣戦士",CreatorGod:"創造神",Cyberse:"サイバース",Dinosaur:"恐竜",DivineBeast:"幻獣神",Dragon:"ドラゴン",Fairy:"天使",Fiend:"悪魔",Fish:"魚",Insect:"昆虫",Illusion:"幻想魔",Machine:"機械",Plant:"植物",Psychic:"サイキック",Pyro:"炎",Reptile:"爬虫類",Rock:"岩石",SeaSerpent:"海竜",Spellcaster:"魔法使い",Thunder:"雷",Warrior:"戦士",WingedBeast:"鳥獣",Wyrm:"幻竜",Zombie:"アンデット"},Sn={Aqua:"🚰",Beast:"🐅",BeastWarrior:"🦁",CreatorGod:"🔆",Cyberse:"💻️",Dinosaur:"🦖",DivineBeast:"💫",Dragon:"🐲",Fairy:"👼",Fiend:"👿",Fish:"🐟️",Insect:"🦋",Illusion:"🤡",Machine:"🤖",Plant:"🌱",Psychic:"👁️",Pyro:"🔥",Reptile:"🦎",Rock:"⛰",SeaSerpent:"🐍",Spellcaster:"🧙",Thunder:"⚡️",Warrior:"⚔️",WingedBeast:"🦅",Wyrm:"🐉",Zombie:"🦴"},xi=["TopLeft","TopCenter","TopRight","MiddleLeft","MiddleRight","BottomLeft","BottomCenter","BottomRight"],vt={TopLeft:{name:"左上",linkArrow:{offsetRow:-1,offsetColumn:-1}},TopCenter:{name:"上",linkArrow:{offsetRow:-1,offsetColumn:0}},TopRight:{name:"右上",linkArrow:{offsetRow:-1,offsetColumn:1}},MiddleLeft:{name:"左",linkArrow:{offsetRow:0,offsetColumn:-1}},MiddleRight:{name:"右",linkArrow:{offsetRow:0,offsetColumn:1}},BottomLeft:{name:"左下",linkArrow:{offsetRow:1,offsetColumn:-1}},BottomCenter:{name:"下",linkArrow:{offsetRow:1,offsetColumn:0}},BottomRight:{name:"右下",linkArrow:{offsetRow:1,offsetColumn:1}}};xi.reduce((e,t)=>(e[vt[t].name]=t,e),{});const Cn=e=>e.cardId??!1?`https://www.db.yugioh-card.com/yugiohdb/card_search.action?ope=2&cid=${e.cardId}`:`https://www.db.yugioh-card.com/yugiohdb/card_search.action?ope=1&sess=1&rp=10&mode=&sort=1&keyword=${e.name}&stype=1&ctype=&othercon=2&starfr=&starto=&pscalefr=&pscaleto=&linkmarkerfr=&linkmarkerto=&link_m=2&atkfr=&atkto=&deffr=&defto=&releaseDStart=1&releaseMStart=1&releaseYStart=1999&releaseDEnd=&releaseMEnd=&releaseYEnd=`,mt=(e,t)=>{const i=e.monsterCategories??[],a=t.monsterCategories??[];for(const r of Se.toReversed()){if(i.includes(r)&&!a.includes(r))return 1;if(!i.includes(r)&&a.includes(r))return-1}if(e.kind===t.kind){if(e.kind==="Monster"){if((e.link??0)!==(t.link??0))return(e.link??0)-(t.link??0);if((e.rank??0)!==(t.rank??0))return(e.rank??0)-(t.rank??0);if((e.level??0)!==(t.level??0))return(e.level??0)-(t.level??0);if((e.attack??0)!==(t.attack??0))return(e.attack??0)-(t.attack??0);if((e.defense??0)!==(t.defense??0))return(e.defense??0)-(t.defense??0)}return e.name.localeCompare(t.name,"Ja")}for(const r of Pi){if(e.kind===r)return-1;if(t.kind===r)return 1}return e.name.localeCompare(t.name,"Ja")},St=["Deck","ExtraDeck"],Ct=["Graveyard","Banished"],Tt=[...St,...Ct],Fi=[...Tt,"Hand"],R=["MonsterZone","ExtraMonsterZone"],te=["SpellAndTrapZone","FieldSpellZone"],W=[...R,...te],wt=["XyzMaterialZone","Disable"],I=[...Fi,...W,...wt],qe={0:{0:"Hand"},1:{0:"Deck",1:"SpellAndTrapZone",2:"SpellAndTrapZone",3:"SpellAndTrapZone",4:"SpellAndTrapZone",5:"SpellAndTrapZone",6:"ExtraDeck"},2:{0:"Graveyard",1:"MonsterZone",2:"MonsterZone",3:"MonsterZone",4:"MonsterZone",5:"MonsterZone",6:"FieldSpellZone"},3:{0:"Banished",1:"XyzMaterialZone",2:"ExtraMonsterZone",3:"Disable",4:"ExtraMonsterZone",5:"XyzMaterialZone",6:"Banished"},4:{0:"FieldSpellZone",1:"MonsterZone",2:"MonsterZone",3:"MonsterZone",4:"MonsterZone",5:"MonsterZone",6:"Graveyard"},5:{0:"ExtraDeck",1:"SpellAndTrapZone",2:"SpellAndTrapZone",3:"SpellAndTrapZone",4:"SpellAndTrapZone",5:"SpellAndTrapZone",6:"Deck"},6:{0:"Hand"}};class Bi{constructor(t,i,a,r){s(this,"onUpdateEvent",new O);s(this,"field");s(this,"row");s(this,"column");s(this,"cellType");s(this,"_owner");s(this,"_requiresRecalcLinkArrows");s(this,"_linkArrowSources");s(this,"_needsShuffle",!1);s(this,"recalcLinkArrows",()=>{this.isMonsterZoneLikeCell&&(this._requiresRecalcLinkArrows=!1,this._linkArrowSources=this.neighbors.filter(t=>t.isMonsterZoneLikeCell).filter(t=>t.cardEntities.length).filter(t=>t.cardEntities[0].linkArrows.some(i=>this.row===t.row+i.offsetRow&&this.column===t.column+i.offsetColumn)).map(t=>t.cardEntities[0]))});s(this,"_entities");s(this,"releaseEntities",t=>{var i;return this._entities=this._entities.filter(a=>a!==t),this.isMonsterZoneLikeCell&&((i=t.origin.monsterCategories)!=null&&i.includes("Link"))&&(this._requiresRecalcLinkArrows=!0),this.onUpdateEvent.trigger(),t});s(this,"acceptEntities",(t,i)=>{var a;i==="Top"?this._entities.unshift(t):this._entities.push(t),i==="Random"&&(this._needsShuffle=!0),this._entities.forEach(r=>{r.fieldCell=this}),this.isMonsterZoneLikeCell&&((a=t.origin.monsterCategories)!=null&&a.includes("Link"))&&(this._requiresRecalcLinkArrows=!0),this.onUpdateEvent.trigger()});s(this,"shuffle",()=>{this._entities=this.entities.shuffle(),this._needsShuffle=!1,this.field.duel.log.info("デッキをシャッフル。",this.owner)});s(this,"toString",()=>this.isMonsterZoneLikeCell||this.cellType==="SpellAndTrapZone"?`${this.cellType}(${this.row},${this.column})`:this.cellType);this.field=t,this.row=i,this.column=a,this.cellType=qe[i][a],this._owner=r,this._entities=[],this._linkArrowSources=[],this._requiresRecalcLinkArrows=!1}get onUpdate(){return this.onUpdateEvent.expose()}get owner(){var t;return this._owner||((t=this.cardEntities[0])==null?void 0:t.owner)}get requiresRecalcLinkArrows(){return this._requiresRecalcLinkArrows}get linkArrowSources(){return this._linkArrowSources}get needsShuffle(){return this._needsShuffle}get entities(){return this._entities}get visibleEntities(){return this._entities.filter(t=>rt.find(i=>i===t.entityType))}get cardEntities(){return this._entities.filter(t=>rt.find(i=>i===t.entityType)).filter(t=>t.kind!=="XyzMaterial")}get xyzMaterials(){return this._entities.filter(t=>t.kind==="XyzMaterial")}get targetForAttack(){return this.cellType==="Hand"?this._entities.find(t=>t.entityType==="Duelist"):this.cardEntities[0]}get isAvailable(){return this.cardEntities.length===0&&this._entities.filter(t=>ua.find(i=>i===t.entityType)).length===0}get isAvailableForPendulum(){return this.isAvailable&&this.isSpellTrapZoneLikeCell&&(this.column===1||this.column===5)}get isStackCell(){return Tt.some(t=>t===this.cellType)}get isPlayFieldCell(){return W.some(t=>t===this.cellType)}get isMonsterZoneLikeCell(){return R.some(t=>t===this.cellType)}get isSpellTrapZoneLikeCell(){return te.some(t=>t===this.cellType)}get isDisabledCell(){return wt.some(t=>t===this.cellType)}get isTrashCell(){return Ct.some(t=>t===this.cellType)}get neighbors(){const t=[this.row-1,this.row,this.row+1].filter(a=>a>=0&&a<=6),i=[this.column-1,this.column,this.column+1].filter(a=>a>=0&&a<=6);return t.flatMap(a=>i.map(r=>this.field.cells[a][r])).filter(a=>a.isMonsterZoneLikeCell).filter(a=>a!==this)}}Array.prototype.shuffle=function(){return this.map(t=>({item:t,seq:Math.random()})).toSorted((t,i)=>t.seq-i.seq).map(t=>t.item)};Array.prototype.randomPickMany=function(e){return this.shuffle().slice(0,e)};Array.prototype.randomPick=function(){return this.shuffle().slice(0,1)[0]};Array.prototype.reset=function(...e){this.splice(0),this.push(...e)};Array.prototype.union=function(e){return this.filter(t=>e.find(i=>t===i))};Array.prototype.getAllOnOffPattern=function(){const e=[];return this.forEach(t=>{if(e.length==0){e.push([t]),e.push([]);return}e.forEach(i=>e.push([...i,t]))}),e};Array.prototype.getDistinct=function(){return Array.from(new Set(this))};Array.prototype.distinct=function(){this.reset(...this.getDistinct())};class he{constructor(){s(this,"pooledOperators",[]);s(this,"bundles",[]);s(this,"excludesExpired",()=>{this.bundles=this.bundles.filter(t=>!t.entity.hasDisappeared),this.bundles.forEach(t=>t.excludesExpired()),this.pooledOperators=this.pooledOperators.filter(t=>t.validateAlive())});s(this,"append",t=>{this.bundles.push(t)});s(this,"push",t=>{if(!t.isContinuous)throw new m("staticへの追加は永続以外不可",t);this.excludesExpired(),this.distribute(t),this.pooledOperators.push(t)});s(this,"distributeAll",t=>(this.excludesExpired(),this.pooledOperators.flatMap(this.distribute).getDistinct().forEach(i=>i.operators.sort((a,r)=>a.seq-r.seq)),this.afterDistributeAll(t)));s(this,"distribute",t=>this.bundles.filter(i=>i.operators.every(a=>a.seq!==t.seq)).filter(i=>t.isApplicableTo(i.entity)).filter(i=>i.entity.canBeEffected(t.effectOwner,t.isSpawnedBy,t.actionAttr)).map(i=>(i.push(t),i)));s(this,"removeItem",t=>{this.pooledOperators=this.pooledOperators.filter(i=>i.seq!==t)})}}class ge{constructor(t,i){s(this,"pool");s(this,"entity");s(this,"_operators");s(this,"excludesExpired",()=>{this._operators=this._operators.filter(t=>{const i=t.validateAlive()&&t.isApplicableTo(this.entity);return i||(console.info(`before remove ${this.entity.toString} ${t.title}`),t.beforeRemove(this)),i})});s(this,"push",t=>{this.entity.procFilterBundle.effectiveOperators.filter(i=>i.procTypes.includes("Effect")).some(i=>!i.filter(i.effectOwner,i.isSpawnedBy,i.actionAttr,[]))||(this.beforePush(t),this._operators.push(t))});s(this,"removeItem",t=>{this._operators=this._operators.filter(i=>i.seq!==t?!0:(i.beforeRemove(this),!1))});this.pool=t,this.entity=i,this._operators=[],this.pool.append(this)}get operators(){return this._operators}get effectiveOperators(){return this.operators.filter(t=>t.isSpawnedBy.isEffective||!t.isContinuous)}}const _e=class _e{constructor(t,i,a,r,n,l){s(this,"seq");s(this,"title");s(this,"validateAlive");s(this,"isContinuous");s(this,"isSpawnedBy");s(this,"isSpawnedAt");s(this,"activateType");s(this,"actionAttr");s(this,"isApplicableTo");s(this,"effectOwner");this.seq=_e.nextSeq++,this.title=t,this.validateAlive=()=>i(this),this.isContinuous=a,this.isSpawnedBy=r,this.isSpawnedAt=r.duel.clock.getClone(),this.isApplicableTo=o=>l(this,o),this.actionAttr=n,this.activateType=this.actionAttr.playType?ka(this.actionAttr.playType):"NonActivate",this.effectOwner=this.isSpawnedBy.controller}get isEffective(){return!this.isContinuous||this.activateType==="NonActivate"?!0:this.isSpawnedBy.isEffective}};s(_e,"nextSeq",0);let ie=_e;class Oi extends he{constructor(){super(...arguments);s(this,"afterDistributeAll",()=>this.bundles.every(i=>i.applyEffectFilter()))}}class Li extends ge{constructor(){super(...arguments);s(this,"applyEffectFilter",()=>{const i=this.entity.allStickyEffectOperators.length,a=[];for(;;){const r=this.effectiveOperators.filter(n=>n.procTypes.includes("Effect")).filter(n=>n.isContinuous).find(n=>!a.includes(n.seq));if(!r)break;a.push(r.seq),r.eraseOperators(this.entity)}return this.entity.allStickyEffectOperators.length===i});s(this,"beforePush",i=>i.eraseOperators(this.entity))}}const le=class le extends ie{constructor(i,a,r,n,l,o,u,c){super(i,a,r,n,l,o);s(this,"beforeRemove",()=>{});s(this,"procTypes");s(this,"filter");s(this,"eraseOperators",i=>{if(!this.procTypes.includes("Effect"))return 0;const a=i.allStickyEffectOperators.filter(r=>r.isContinuous).filter(r=>!this.filter(r.effectOwner,r.isSpawnedBy,r.actionAttr,[])).map(r=>r.seq);return a.forEach(i.procFilterBundle.removeItem),a.forEach(i.statusOperatorBundle.removeItem),a.forEach(i.numericOprsBundle.removeItem),a.length});this.procTypes=u,this.filter=c}};s(le,"createContinuous",(i,a,r,n,l,o,u)=>new le(i,a,!0,r,n,l,o,u)),s(le,"createLingering",(i,a,r,n,l,o,u)=>new le(i,a,!1,r,n,l,o,u));let pe=le;const it={level:1,rank:1,attack:0,defense:0,pendulumScaleR:0,pendulumScaleL:0};class Ni extends he{constructor(){super(...arguments);s(this,"afterDistributeAll",i=>{if(this.bundles.forEach(r=>r.calcStateAll()),i.field.getMonstersOnFieldStrictly().flatMap(r=>r.numericOprsBundle).flatMap(r=>r.effectiveOperators).some(r=>r.targetStateGen==="calculated")){const n=i.field.getMonstersOnFieldStrictly().filter(l=>(l.atk??0)>=0).map(l=>l.atk??0).reduce((l,o)=>l>o?l:o,0);i.field.getMonstersOnFieldStrictly().forEach(l=>{l.numericOprsBundle.effectiveOperators.filter(o=>o.targetStateGen==="calculated").forEach(o=>{var u;if(!((u=l.status.monsterCategories)!=null&&u.includes("Link")&&o.targetState==="defense")){if(o.stateOperationType==="THE_DEVILS_AVATAR"){l.numericStatus.calculated[o.targetState]=n+100;return}l.numericStatus.calculated[o.targetState]=o.calcValue(l,l.numericStatus.calculated[o.targetState]??0)}})})}return!0})}}class qi extends ge{constructor(){super(...arguments);s(this,"beforePush",i=>{const a=this.effectiveOperators.filter(n=>n.targetState===i.targetState).filter(n=>n.isEffective);if(i.kind==="O-L-F"||i.kind==="O-C-F"?(a.filter(n=>n.kind==="O-L-F").forEach(n=>n.negate()),a.filter(n=>n.kind==="L-F").forEach(n=>n.negate())):i.kind==="L-F"||i.kind==="C-F"?a.filter(n=>n.kind==="L-F"||n.kind==="L-A").forEach(n=>n.negate()):i.kind==="X-C-X"&&a.filter(n=>!n.isContinuous).forEach(n=>n.negate()),a.filter(n=>n.isEffective).some(n=>n.kind==="X-C-X")&&!i.isContinuous)return;if(i.stateOperationType!=="Addition"&&i.targetStateGen==="wip"&&a.filter(n=>!n.isContinuous).forEach(n=>n.negate()),i.stateOperationType==="THE_DEVILS_AVATAR"||i.stateOperationType==="Gradius'_Option"){this.entity.numericStatus.calculated[i.targetState]=-Number.MAX_VALUE;return}const r=this.entity.numericStatus.calculated[i.targetState]??0;if(i.stateOperationType==="THE_DEVILS_DREAD-ROOT"){this.entity.numericStatus.calculated[i.targetState]=i.calcValue(this.entity,r);return}if(i.kind==="L-F"){this.entity.numericStatus.wip[i.targetState]=i.calcValue(this.entity,r);return}});s(this,"calcStateAll",()=>yt.forEach(this.calcState));s(this,"calcState",i=>{if(this.entity.kind!=="Monster"&&!this.entity.isPendulumScale){this.entity.numericStatus.calculated[i]=void 0;return}if(!this.entity.status.monsterCategories){this.entity.numericStatus.calculated[i]=void 0;return}if(this.entity.status.monsterCategories.includes("Link")&&i!=="attack"){this.entity.numericStatus.calculated[i]=void 0;return}if(this.entity.status.monsterCategories.includes("Xyz")&&i==="level"){this.entity.numericStatus.calculated[i]=void 0;return}if(!this.entity.status.monsterCategories.includes("Xyz")&&i==="rank"){this.entity.numericStatus.calculated[i]=void 0;return}if(!this.entity.status.monsterCategories.includes("Pendulum")&&(i==="pendulumScaleL"||i==="pendulumScaleR")){this.entity.numericStatus.calculated[i]=void 0;return}if(i!=="level"&&!this.entity.isOnFieldStrictly){this.entity.numericStatus.origin[i]=this.entity.origin[i],this.entity.numericStatus.wip[i]=this.entity.origin[i],this.entity.numericStatus.calculated[i]=this.entity.origin[i];return}const a=this.entity.origin[i]??0,r=this.entity.numericStatus.wip[i]??0,n=this._operators.filter(d=>d.targetState===i).filter(d=>d.isEffective);if(n.some(d=>d.stateOperationType==="THE_DEVILS_AVATAR"||d.stateOperationType==="Gradius'_Option")&&this.entity.isEffective){this.entity.numericStatus.calculated[i]=-Number.MAX_VALUE;return}const l=n.filter(d=>d.targetState===i).findLast(d=>d.targetStateGen==="origin"),o=l?l.calcValue(this.entity,a??0):a;this.entity.numericStatus.origin[i]=o;let u=o;const c=n.filter(d=>d.targetState===i).filter(d=>d.targetStateGen==="wip").findLast(d=>d.stateOperationType==="Fixation");if(!c)u=n.filter(d=>d.stateOperationType==="Addition").reduce((d,p)=>p.calcValue(this.entity,d),u),this.entity.numericStatus.wip[i]=u;else if(c.isContinuous)u=c.calcValue(this.entity,u),u=n.filter(d=>d.stateOperationType==="Addition").reduce((d,p)=>p.calcValue(this.entity,d),u),this.entity.numericStatus.wip[i]=u;else{let d=!1;u=n.filter(p=>(d=d||p===c,d&&p!==c)).filter(p=>p.stateOperationType==="Addition").reduce((p,h)=>h.calcValue(this.entity,p),r)}u<it[i]&&(u=it[i]),this.entity.numericStatus.calculated[i]=u})}}const j=class j extends ie{constructor(i,a,r,n,l,o,u,c,d,p){super(i,a,r,n,l,o);s(this,"beforeRemove",()=>{});s(this,"targetState");s(this,"targetStateGen");s(this,"stateOperationType");s(this,"calcValue");s(this,"_isEffective");s(this,"negate",()=>{this._isEffective=!1});this._isEffective=!0,this.targetState=u,this.targetStateGen=c,this.stateOperationType=d,this.calcValue=(h,g)=>p(this.isSpawnedBy,h,g)}get isEffective(){return this._isEffective&&super.isEffective}get kind(){if(this.targetStateGen==="origin"){if(this.stateOperationType==="Fixation")return this.isContinuous?"O-C-F":"O-L-F";throw new m("矛盾したプロパティ",this)}if(this.targetStateGen==="wip"){if(this.stateOperationType==="Addition")return this.isContinuous?"C-A":"L-A";if(this.stateOperationType==="Fixation")return this.isContinuous?"C-F":"L-F";throw new m("矛盾したプロパティ",this)}if(this.stateOperationType==="THE_DEVILS_DREAD-ROOT")return"X-C-F";if(this.stateOperationType==="THE_DEVILS_AVATAR"||this.stateOperationType==="Gradius'_Option")return"X-C-X";throw new m("矛盾したプロパティ",this)}};s(j,"createContinuous",(i,a,r,n,l,o,u,c)=>new j(i,a,!0,r,{},n,l,o,u,c)),s(j,"createLingering",(i,a,r,n,l,o,u)=>new j(i,a,!1,r,n,(c,d)=>d.isOnFieldAsMonsterStrictly,l,"wip",o,u)),s(j,"createLingeringFixation",(i,a,r,n,l,o)=>j.createLingering(i,a,r,n,l,"Fixation",o)),s(j,"createLingeringAddition",(i,a,r,n,l,o)=>j.createLingering(i,a,r,n,l,"Addition",o));let H=j;const Ri=e=>Object.keys(e),Hi={draw:"ドローフェイズ",standby:"スタンバイフェイズ",main1:"メインフェイズ１",battle1:"バトルフェイズ",battle2:"バトルフェイズ（追加）",main2:"メインフェイズ２",end:"エンドフェイズ"},Zi={start:"スタートステップ",battle:"バトルステップ",damage:"ダメージステップ",end:"エンドステップ"},$i={start:"ダメージステップ開始時",beforeDmgCalc:"ダメージ計算前",dmgCalc:"ダメージ計算時",afterDmgCalc:"ダメージ計算後",end:"ダメージステップ終了時"},_=["draw","stanby","main1","b1Start","b1Battle","b1End","b2Start","b2Battle","b2End","main2","end"],F=["b1DStart","b1DBeforeDmgCalc","b1DAfterDmgCalc","b1DEnd","b2DStart","b2DBeforeDmgCalc","b2DAfterDmgCalc","b2DEnd"],Gi=["b1DDmgCalc","b2DDmgCalc"],z=[..._,...F,...Gi],at={draw:{phase:"draw",step:void 0,stage:void 0},stanby:{phase:"standby",step:void 0,stage:void 0},main1:{phase:"main1",step:void 0,stage:void 0},b1Start:{phase:"battle1",step:"start",stage:void 0},b1Battle:{phase:"battle1",step:"battle",stage:void 0},b1DStart:{phase:"battle1",step:"battle",stage:"start"},b1DBeforeDmgCalc:{phase:"battle1",step:"battle",stage:"beforeDmgCalc"},b1DDmgCalc:{phase:"battle1",step:"battle",stage:"dmgCalc"},b1DAfterDmgCalc:{phase:"battle1",step:"battle",stage:"afterDmgCalc"},b1DEnd:{phase:"battle1",step:"battle",stage:"end"},b1End:{phase:"battle1",step:"end",stage:void 0},b2Start:{phase:"battle2",step:"start",stage:void 0},b2Battle:{phase:"battle2",step:"battle",stage:void 0},b2DStart:{phase:"battle2",step:"battle",stage:"start"},b2DBeforeDmgCalc:{phase:"battle2",step:"battle",stage:"beforeDmgCalc"},b2DDmgCalc:{phase:"battle2",step:"battle",stage:"dmgCalc"},b2DAfterDmgCalc:{phase:"battle2",step:"battle",stage:"afterDmgCalc"},b2DEnd:{phase:"battle2",step:"battle",stage:"end"},b2End:{phase:"battle2",step:"end",stage:void 0},main2:{phase:"main2",step:void 0,stage:void 0},end:{phase:"end",step:void 0,stage:void 0}},Ui=e=>e.stage?$i[e.stage]:e.step?Zi[e.step]:Hi[e.phase],J=Ri(at).reduce((e,t)=>(e[t].key=t,e[t].name=Ui(e[t]),e),at),ke=class ke{constructor(t,i){s(this,"entity");s(this,"isRegular");s(this,"_isStarted");s(this,"info");s(this,"continuousEffectBase");s(this,"updateState",async()=>{if(this.hasToStart!==this.isStarted){if(this.isStarted){if(!this.info)throw new m("illegal state");this._isStarted=!1,await this.continuousEffectBase.finish(this.entity,this.info),this.info=void 0;return}this.info=await this.continuousEffectBase.start(this.entity),this._isStarted=!0}});this._isStarted=!1,this.entity=t,this.continuousEffectBase=i,this.isRegular=this.appliableCellTypes.every(a=>W.find(r=>r===a))&&this.faceList.length===1&&this.faceList[0]==="FaceUp"}get isStarted(){return this._isStarted}get appliableCellTypes(){return this.continuousEffectBase.appliableCellTypes}get appliableDuelPeriodKeys(){return this.continuousEffectBase.appliableDuelPeriodKeys}get faceList(){return this.continuousEffectBase.faceList}get hasToStart(){return!this.appliableCellTypes.includes(this.entity.fieldCell.cellType)||!this.appliableDuelPeriodKeys.includes(this.entity.duel.clock.period.key)||!this.faceList.includes(this.entity.face)?!1:this.continuousEffectBase.canStart(this.entity)}};s(ke,"createNew",(t,i)=>new ke(t,i));let Re=ke;const ji=(e,t,i,a,r)=>({title:e,appliableCellTypes:t==="Monster"?["MonsterZone","ExtraMonsterZone"]:["FieldSpellZone","SpellAndTrapZone"],appliableDuelPeriodKeys:z,faceList:["FaceUp"],canStart:n=>!n.info.isPending&&!n.info.isDying&&i(n),start:async n=>{const l=a(n);return l.forEach(r(n).push),l.map(o=>o.seq)},finish:async(n,l)=>{l.forEach(o=>r(n).removeItem(o))}}),Me=(e,t,i,a,r,n)=>({title:e,appliableCellTypes:t==="Monster"?["MonsterZone","ExtraMonsterZone"]:["FieldSpellZone","SpellAndTrapZone"],appliableDuelPeriodKeys:z,faceList:["FaceUp"],canStart:l=>!l.info.isPending&&!l.info.isDying&&a(l),start:async l=>{const o=r(l),u=i(l);return console.info(`start : ${l.toString()} ⇒ ${u.map(c=>c.toString()).join(" ")} (${o.map(c=>c.title).join(" ")})`),u.map(n).forEach(c=>o.forEach(c.push)),{targets:u,seqList:o.map(c=>c.seq)}},finish:async(l,o)=>{o.targets.map(n).forEach(u=>o.seqList.forEach(c=>u.removeItem(c)))}}),Et=(e,t,i,a,r)=>Me(e,t,i,a,r,n=>n.procFilterBundle),Ce=(e,t,i,a)=>ji(e,t,i,a,r=>r.field.numericStateOperatorPool),ye=(e,t,i,a,r)=>Me(e,t,i,a,r,n=>n.numericOprsBundle),bt=(e,t,i,a,r)=>Me(e,t,i,a,r,n=>n.statusOperatorBundle),Vi=(e,t,i,a,r)=>Me(e,t,i,a,r,n=>n.damageFilterBundle),Te=(...e)=>e.length?e.reduce((t,i)=>t>i?t:i):-Number.MAX_VALUE,He=(...e)=>e.length?e.reduce((t,i)=>t<i?t:i):Number.MAX_VALUE,se=(e,t)=>{if((e[0]??Number.MAX_VALUE)>t)return 0;if(e.slice(-1)[0]<t)return e.length;let i=0,a=e.length-1;for(;;){const r=Math.round((i+a)/2);if(r===a||r===i)return e[i]<t?a:i;if(e[r]<t){i=r;continue}a=r}},U=[3,5,5,6,6,6,7,8,9,10,11,11,11,12,12,13,13,14,15,15,15,15,15,15,16,16,16,17,18,18,18,21,21,21,22,23,25,25,26,28,28,28,30,30,31,32,32,33,33,34,35,35,36,36,36,37,37,38,38,38,39,41,42,42,43,45,45,45,45,48,48,48,50,51,52,54,54,54,54,56,57,58,59,59,59,59,60,61,63,65,65,65,65,66,67,67,67,69,69,71,71,72,73,73,73,73,73,74,75,75,76,76,77,78,79,80,80,80,80,84,84,84,84,84,84,85,85,85,87,90,91,94,96,96,97,98,101,101,101,101,101];console.log(U.length);U.forEach((e,t)=>{((U[se(U,t)-1]||-Number.MAX_VALUE)>=t||(U[se(U,t)]||Number.MAX_VALUE)<t)&&console.log(t,se(U,t),(U[se(U,t)-1]||-Number.MAX_VALUE)<t,(U[se(U,t)]||Number.MAX_VALUE)>=t)});class zi{constructor(t){s(this,"_field");s(this,"_records",[]);s(this,"getIndexOfStartPoint",t=>se(this._records.map(i=>i.movedAt.totalProcSeq),t));s(this,"push",t=>{this._records.push(t)});s(this,"getCurrentTurnLog",()=>this.getTermLog("Current","turn"));s(this,"getPriviousChainLog",()=>this.getTermLog("Previous","chainSeq"));this._field=t}*getTermLog(t,i){const a=t==="Current"?this._field.duel.clock.currentStartPoints[i]:this._field.duel.clock.previousStartPoints[i];for(let r=this.getIndexOfStartPoint(a);r<this._records.length;r++)yield this._records[r]}}class Qi{constructor(t){s(this,"entity");s(this,"_records");s(this,"_push",t=>{this.entity.field.moveLog.push(t),this._records.push(t)});s(this,"pushForRuleAction",t=>{this._push({entity:this.entity,kind:this.entity.origin.kind,cell:this.entity.fieldCell,face:this.entity.face,orientation:this.entity.orientation,isPending:this.entity.info.isPending,movedAt:this.entity.duel.clock.getClone(),movedAs:[...t,"Rule"]})});s(this,"push",(t,i,a,r,n)=>{let l=this.entity.fieldCell;this.entity.kind==="XyzMaterial"&&(l=this.entity.controller.getXyzMaterialZone()),this._push({entity:this.entity,kind:t,cell:l,face:this.entity.face,orientation:this.entity.orientation,isPending:this.entity.info.isPending,movedAt:this.entity.duel.clock.getClone(),movedAs:i.getDistinct(),movedBy:a,actionOwner:r,chooser:n??r})});s(this,"finalize",()=>{if(!this.latestRecord.isPending)throw new m("想定されない状況");if(this.entity.info.isPending)throw new m("想定されない状況");this._push({...this.latestRecord,isPending:!1,movedAt:this.entity.duel.clock.getClone()})});s(this,"negateSummon",(t,i)=>{const a=this.records.slice(-1)[0];a.cell=this.entity.field.getCells("Disable")[0],a.movedBy=t,a.movedAs=["SummonNegated"],a.actionOwner=i});this.entity=t,this._records=[]}get records(){return this._records}get latestRecord(){return this.records.slice(-1)[0]}get previousPlaceRecord(){return this.records.findLast(t=>t.cell.cellType!==this.entity.fieldCell.cellType)??this._records[0]}get currentProcRecords(){return this.records.filter(t=>t.movedAt.totalProcSeq===this.entity.duel.clock.totalProcSeq)}}const Ze=["SpellCounter","KaijuCounter","NamelessCounter","IceCounter"],$e=["CycleFlip","SonicBarrier","SonicVerse","IntoTheVoid"],Wi=["GoldSarcophagus"],Xi=[...Ze,...$e,...Wi],Tn={SpellCounter:"🔮",KaijuCounter:"☢",NamelessCounter:"💠",IceCounter:"❄"};class Ki{constructor(t){s(this,"dic");s(this,"temporaryCounterNames");s(this,"entity");s(this,"add",(t,i=1,a)=>{this.dic[t]=[...this.dic[t]??[],...Array(i).fill(a)];const r=this.entity.status.maxCounterQty[t]??0;return r&&(this.dic[t]=this.dic[t].slice(0,r)),this.dic[t]});s(this,"setQty",(t,i=1,a)=>(this.dic[t]=[...Array(i).fill(a)],this.dic[t]));s(this,"remove",(t,i=1,a)=>{const r=this.dic[t].length;if(r===void 0)return[];if(i>=r)return delete this.dic[t],[];if(a){const n=this.dic[t].filter(o=>o===a),l=this.dic[t].filter(o=>o!==a);this.dic[t]=[...n.slice(i),...l]}else this.dic[t]=this.dic[t].slice(i);return this.dic[t]});s(this,"removeAll",(t,i)=>{if(i){const r=this.dic[t].filter(n=>n===i).length;return this.dic[t]=this.dic[t].filter(n=>n!==i),r}const a=this.dic[t];return delete this.dic[t],a});s(this,"getQty",(t,i)=>this.dic[t]?i?this.dic[t].filter(a=>a===i).length:this.dic[t].length??0:0);s(this,"incrementActionCountPerTurn",t=>{this.temporaryCounterNames.push(t.title),this.incrementActionCount(t)});s(this,"incrementActionCount",t=>{this.dic[t.title]=[t.entity,...this.dic[t.title]??[]]});s(this,"getActionCount",t=>this.dic[t.title]?this.dic[t.title].filter(i=>i===t.entity).length:0);s(this,"corpseDisposal",()=>{this.temporaryCounterNames.forEach(t=>delete this.dic[t]),this.temporaryCounterNames.reset(),$e.forEach(t=>delete this.dic[t])});s(this,"removeAllActualCounters",()=>{Ze.forEach(t=>delete this.dic[t])});s(this,"removeAllWhenfaceDown",()=>{this.temporaryCounterNames.forEach(t=>delete this.dic[t]),this.temporaryCounterNames.reset(),Ze.forEach(t=>delete this.dic[t])});s(this,"clear",()=>{$e.forEach(t=>delete this.dic[t]),this.temporaryCounterNames.forEach(t=>delete this.dic[t]),this.temporaryCounterNames.reset(),Xi.forEach(t=>delete this.dic[t])});this.dic={},this.temporaryCounterNames=[],this.entity=t}}class Ji extends he{constructor(){super(...arguments);s(this,"afterDistributeAll",i=>i.field.getAllEntities().map(a=>a.statusOperatorBundle).every(a=>a.calcStatus()))}}class Yi extends ge{constructor(){super(...arguments);s(this,"calcStatus",()=>{const i=this.entity.isEffective;return this.entity.resetStatus(),this.entity.status=this._operators.filter(a=>a.isSpawnedBy.isEffective||!a.isContinuous).reduce((a,r)=>({...a,...r.statusCalculator(r,a)}),this.entity.status),this.entity.isEffective===i});s(this,"beforePush",()=>{})}}class ue extends ie{constructor(i,a,r,n,l,o,u){super(i,a,r,n,l,o);s(this,"beforeRemove",()=>{});s(this,"statusCalculator");this.statusCalculator=u}}const De=class De{constructor(t,i,a){s(this,"seq");s(this,"entity");s(this,"_definition");s(this,"validateDuelist",t=>this.entity.controller===t?this.definition.executableDuelistTypes.includes("Controller"):this.definition.executableDuelistTypes.includes("Opponent"));this.seq=t==="AutoSeq"?De.nextSeq++:t,this.entity=i,this._definition=a}get definition(){return this._definition}get title(){return this.definition.title}get isMandatory(){return this.definition.isMandatory}get executableCells(){return this.definition.executableCells}get executablePeriods(){return this.definition.executablePeriods}get executableDuelistTypes(){return this.definition.executableDuelistTypes}get isOnlyNTimesPerDuel(){return this.definition.isOnlyNTimesPerDuel??0}get isOnlyNTimesPerTurn(){return this.definition.isOnlyNTimesPerTurn??0}get isOnlyNTimesPerTurnIfFaceup(){return this.definition.isOnlyNTimesPerTurnIfFaceup??0}get isOnlyNTimesIfFaceup(){return this.definition.isOnlyNTimesIfFaceup??0}get isOnlyNTimesPerChain(){return this.definition.isOnlyNTimesPerChain??0}get actionGroupName(){return this.definition.actionGroupName}get duel(){return this.entity.duel}};s(De,"nextSeq",0);let we=De;const de=class de extends we{constructor(){super(...arguments);s(this,"isApplicableTo",(i,a,r)=>{const n=this.entity.counterHolder.getActionCount(this);return this.isOnlyNTimesPerTurnIfFaceup>0&&n>=this.isOnlyNTimesPerTurnIfFaceup?this.entity.counterHolder.incrementActionCountPerTurn(this):this.isOnlyNTimesIfFaceup>0&&n>=this.isOnlyNTimesIfFaceup&&this.entity.counterHolder.incrementActionCount(this),this.definition.isApplicableTo(this,i,a,r)});s(this,"substitute",async(i,a,r)=>{const n=await this.definition.substitute(this,i,a,r);return this.isOnlyNTimesPerTurnIfFaceup>0?this.entity.counterHolder.incrementActionCountPerTurn(this):this.isOnlyNTimesIfFaceup>0&&this.entity.counterHolder.incrementActionCount(this),n});s(this,"getClone",()=>new de(this.seq,this.entity,this.definition))}get definition(){return super.definition}};s(de,"createNew",(i,a)=>new de("AutoSeq",i,a));let Ge=de;class Ii extends he{constructor(){super(...arguments);s(this,"afterDistributeAll",()=>!0)}}class ea extends ge{constructor(){super(...arguments);s(this,"beforePush",()=>{});s(this,"filter",(i,a,r,n,l,o,u)=>this.effectiveOperators.filter(c=>c.summonKinds.includes(a)).reduce((c,d)=>({...c,...d.filter(this.entity,i,l.summoner,[a,...r],n,l.monster,o,c.posList,c.cells,u)}),l))}}class ta extends ie{constructor(i,a,r,n,l,o,u,c){super(i,a,r,n,l,o);s(this,"beforeRemove",()=>{});s(this,"summonKinds");s(this,"filter");this.summonKinds=u,this.filter=(...d)=>c(this,...d)}}const D=class D{constructor(){}};s(D,"_tryMarkForDestory",(t,i)=>{if(t.info.isDying||t.kind==="XyzMaterial"||!t.isOnFieldStrictly&&t.fieldCell.cellType!=="Deck"&&t.fieldCell.cellType!=="Hand")return!1;const a=i.action.playType==="Battle"?"BattleDestroy":"EffectDestroy",r=a==="BattleDestroy"&&i.action.entity===t?i.selectedEntities[0]:i.action.entity;return t.info.isDying=t.validateDestory(a,i.activator,r,i.action),t.info.isDying&&(t.info.causeOfDeath=[a],t.info.isKilledBy=r,t.info.isKilledByWhom=i.activator,a==="BattleDestroy"&&(t.info.isKilledByWhom=r.controller)),t.info.isDying}),s(D,"releaseManyForTheSameReason",(t,i,a,r)=>t.length?(i.includes("Cost")&&r.writeInfoLog(`${t.map(n=>n.toString()).join(" ")}をリリースし――、`),D.bringManyToSameCellForTheSameReason("Graveyard","Top",t,"FaceUp","Vertical",["Release",...i],a,r)):Promise.resolve([])),s(D,"sendManyToGraveyardForTheSameReason",(t,i,a,r)=>t.length?(r&&i.includes("Cost")&&(i.includes("FusionMaterial")?r.writeInfoLog(`${t.map(n=>n.toString()).join(" ")}を融合素材とし――、`):i.includes("SyncroMaterial")?r.writeInfoLog(`${t.map(n=>n.toString()).join(" ")}をシンクロと素材し――、`):i.includes("LinkMaterial")?r.writeInfoLog(`${t.map(n=>n.toString()).join(" ")}をリンクマーカーにセッティング――、`):r.writeInfoLog(`${t.map(n=>n.toString()).join(" ")}を墓地に送り――、`)),D.bringManyToSameCellForTheSameReason("Graveyard","Top",t,"FaceUp","Vertical",i,a,r)):Promise.resolve([])),s(D,"addManyToHand",(t,i,a,r)=>t.length?D.bringManyToSameCellForTheSameReason("Hand","Bottom",t,"FaceDown","Vertical",i,a,r):Promise.resolve([])),s(D,"discardManyForTheSameReason",(t,i,a,r)=>t.length?(r&&i.includes("Cost")&&r.writeInfoLog(`${t.map(n=>n.toString()).join(" ")}を手札から捨て――、`),D.bringManyToSameCellForTheSameReason("Graveyard","Top",t,"FaceUp","Vertical",["Discard",...i],a,r)):Promise.resolve([])),s(D,"banishManyForTheSameReason",(t,i,a,r)=>t.length?(r&&i.includes("Cost")&&r.writeInfoLog(`${t.map(n=>n.toString()).join(" ")}をゲームから除外し――、`),D.bringManyToSameCellForTheSameReason("Banished","Top",t,"FaceUp","Vertical",i,a,r)):Promise.resolve([])),s(D,"returnManyToDeckForTheSameReason",(t,i,a,r,n)=>i.length?(n&&a.includes("Cost")&&n.writeInfoLog(`${i.map(l=>l.toString()).join(" ")}をデッキに戻し――、`),D.bringManyToSameCellForTheSameReason("Deck",t,i,"FaceDown","Vertical",a,r,n)):Promise.resolve([])),s(D,"returnManyToHandForTheSameReason",(t,i,a,r)=>t.length?(r&&i.includes("Cost")&&r.writeInfoLog(`${t.map(n=>n.toString()).join(" ")}を手札に戻し――、`),D.bringManyToSameCellForTheSameReason("Hand","Bottom",t,"FaceDown","Vertical",i,a,r)):Promise.resolve([])),s(D,"convertManyToXyzMaterials",(t,i,a,r)=>t.length?(r&&i.includes("Cost")&&r.writeInfoLog(`${t.map(n=>n.toString()).join(" ")}によって、オーバーレイネットワークを構築――、`),k.moveMany(t.map(n=>[n,n.fieldCell,"XyzMaterial","FaceUp","Vertical","Top",i,a,r,r]))):Promise.resolve()),s(D,"moveToXyzOwner",(t,i,a,r,n)=>i.length?(a.includes("Effect")&&n.writeInfoLog(`${i.map(l=>l.toString()).join(" ")}をXYZ素材として吸収。`),k.moveMany(i.map(l=>[l,t,"XyzMaterial","FaceUp","Vertical","Top",a,r,n,n]))):Promise.resolve()),s(D,"banishMany",(t,i)=>k.bringManyToSameCell("Banished","Top",t.map(a=>({...a,face:"FaceUp",orientation:"Vertical"})),i)),s(D,"bringManyToSameCellForTheSameReason",(t,i,a,r,n,l,o,u)=>k.bringManyToSameCell(t,i,a.map(c=>({entity:c,face:r,orientation:n,causedAs:l,causedBy:o,activator:u})))),s(D,"tryDestroy",async(t,i)=>{const a=await D.tryMarkForDestory(t,i);return await D.waitCorpseDisposal(i.activator.duel),a}),s(D,"waitCorpseDisposal",t=>k.sendManyToGraveyard([...t.field.getCardsOnFieldStrictly(),...t.field.getPendingCardsOnField()].filter(i=>i.info.isDying).map(i=>({entity:i,causedAs:i.info.causeOfDeath??[],causedBy:i.info.isKilledBy,activator:i.info.isKilledByWhom})))),s(D,"tryMarkForDestory",async(t,i)=>{let a=t.filter(o=>D._tryMarkForDestory(o,i));if(!a.length)return[];const r=i.action.playType==="Battle"?"BattleDestroy":"EffectDestroy";(await Promise.all(t[0].field.getAllEntities().flatMap(o=>o.substituteEffects.filter(u=>u.isMandatory).filter(u=>u.executableCells.includes(o.fieldCell.cellType)).filter(u=>u.isApplicableTo(r,t,i).length).flatMap(u=>u.substitute(r,t,i))))).flatMap(o=>o).forEach(o=>{o.resetCauseOfDeath()}),a=a.filter(o=>o.info.isDying);let n=t[0].field.getAllEntities().flatMap(o=>o.substituteEffects.filter(u=>!u.isMandatory).filter(u=>u.executableCells.includes(o.fieldCell.cellType)).filter(u=>u.isApplicableTo(r,t,i).length).map(u=>({chooser:o.owner,effect:u,sacrifice:o})));for(const o of n.map(u=>u.sacrifice.controller).getDistinct()){const u=n.filter(d=>d.sacrifice.controller===o),c=await o.duel.view.waitSelectAction(o,u.map(d=>({entity:d.sacrifice,title:d.effect.title,origin:d.effect})),"身代わり効果を適用する？",!0);if(c){if((await c.substitute(r,a,i)).forEach(d=>{d.resetCauseOfDeath()}),a=a.filter(d=>d.info.isDying),!a.length)return[];n=n.filter(d=>d.effect.isApplicableTo(r,t,i).length)}}const l=a.filter(o=>o.info.isDying);return l.forEach(o=>o.duel.log.info(`${o.toString()}を${ca[r]}。`,o.info.isKilledByWhom)),l}),s(D,"tryBanish",async(t,i,a)=>{const r=i.filter(n=>n.canBeBanished(t,a.activator,a.action.entity,a.action));return await D.banishManyForTheSameReason(r,["Effect"],a.action.entity,a.activator),r.filter(n=>n.fieldCell.cellType==="Banished").filter(n=>n.moveLog.latestRecord.movedBy===a.action.entity)}),s(D,"negateSummonMany",(t,i)=>{const a=i.duel.field.getPendingMonstersOnField();return a.forEach(r=>{r.info.summonKinds=[],r.info.materials=[],r.moveLog.negateSummon(t,i)}),i.writeInfoLog(`${a.map(r=>r.toString()).join(" ")}.の召喚は無効にされた。`),a}),s(D,"drawAtSameTime",async(t,i,a,r)=>{const n=[],l=[],o=[t.draw(a,i,t),t.getOpponentPlayer().draw(r,i,t)].map(u=>u.catch(c=>{c instanceof $?c.winner&&n.push(c.winner):l.push(c)}));if(await Promise.all(o),l.length)throw new m("ドロー処理で想定されない例外が発生した。",t,a,r,i,...l);if(n.length!==0)throw n.length===1?new $(n[0],"対戦相手がデッキからドローできなかった。"):new $(void 0,"お互いにデッキからカードをドローできなかった。")});let v=D;class ia extends he{constructor(){super(...arguments);s(this,"afterDistributeAll",()=>!0)}}class aa extends ge{constructor(){super(...arguments);s(this,"beforePush",()=>{})}}class ra extends ie{constructor(i,a,r,n,l,o,u,c){super(i,a,r,n,l,o);s(this,"beforeRemove",()=>{});s(this,"calcType");s(this,"filter");this.calcType=u,this.filter=(...d)=>c(this,...d)}}const xe=(e,t,...i)=>e.filter(a=>t.includes(a.calcType)).reduce((a,r)=>({...a,...r.filter(...i)}),{}),_t=(...e)=>{const[t,i,a,r,n,l,o]=e,u=[a.entity,r,n].filter(p=>!!p).flatMap(p=>p.damageFilterBundle.effectiveOperators);let c=xe(u,["double_typeA","eachOther_typeA","eachOther_typeB","asEffectDamage"],...e);const d={point:t,damageToOpponent1:0,damageToOpponent2:0,damageType:l};return c.double_typeA&&(d.point*=2),c.asEffectDamage&&(d.damageType="EffectDamage"),c={...xe(u,["heal","zero_typeA","half","double_typeB","fix"],d.point,i,a,r,n,d.damageType,o),...c},c.fix!==void 0?d.point=c.fix:c.zero_typeA?d.point=0:(c.half&&(d.point=Math.round(d.point/2)),c.double_typeA&&(d.point*=2)),c={...xe(u,["zero_typeB"],d.point,i,a,r,n,d.damageType,o),...c},c.zero_typeB&&(d.point=0),c.heal?d.damageType="Heal":(c.eachOther_typeA&&(d.damageToOpponent1=d.point),c.eachOther_typeB&&(d.damageToOpponent2=d.point,c.eachOther_typeB==="Substitude"&&(d.point=0))),d},na=(e,t,i)=>_t(e,t.activator,i,t.action.entity,void 0,"EffectDamage",t.action),sa=(e,t,i,a,r,n)=>_t(e,t,i,a,r.entityType==="Duelist"?void 0:r,"BattleDamage",n),kt=["FusionSummon","SyncroSummon","XyzSummon","PendulumSummon","LinkSummon","RitualSummon","FlipSummon"],la={FusionSummon:"融合召喚",SyncroSummon:"シンクロ召喚",XyzSummon:"エクシーズ召喚",PendulumSummon:"ペンデュラム召喚",LinkSummon:"リンク召喚",RitualSummon:"儀式召喚",FlipSummon:"反転召喚"},oa=[...kt,"AdvanceSummon","NormalSummon","SpecialSummon"],ca={BattleDestroy:"戦闘破壊",EffectDestroy:"効果破壊",RuleDestroy:"ルール破壊"},Dt=e=>e+"Summon",rt=["Card","Token","Avatar"],ua=["Duelist","Squatter"],wn=(e,t)=>mt(e.origin,t.origin),B=class B{constructor(t,i,a,r,n,l){s(this,"onBeforeMoveEvent",new et);s(this,"onAfterMoveEvent",new et);s(this,"seq");s(this,"origin");s(this,"entityType");s(this,"summonFilterBundle");s(this,"procFilterBundle");s(this,"numericOprsBundle");s(this,"statusOperatorBundle");s(this,"damageFilterBundle");s(this,"moveLog");s(this,"counterHolder");s(this,"face");s(this,"orientation");s(this,"owner");s(this,"fieldCell");s(this,"_status");s(this,"_numericStatus");s(this,"_info");s(this,"actions",[]);s(this,"continuousEffects",[]);s(this,"substituteEffects",[]);s(this,"canBeReleased",(t,i,a,r)=>!this.isInTrashCell&&this.procFilterBundle.effectiveOperators.filter(n=>n.procTypes.union(a).length).every(n=>n.filter(t,i,r,[this])));s(this,"canBeSentToGraveyard",(t,i,a,r)=>!this.info.willBeBanished&&!this.info.willReturnToDeck&&this.procFilterBundle.effectiveOperators.filter(n=>n.procTypes.includes(a)).every(n=>n.filter(t,i,r,[this])));s(this,"_hasDisappeared",!1);s(this,"definition");s(this,"toString",()=>this.entityType==="Card"?`《${this.nm}》`:this.nm);s(this,"onUsedAsMaterial",(t,i)=>{this.definition&&this.definition.onUsedAsMaterial&&this.definition.onUsedAsMaterial(t,i)});s(this,"setBattlePosition",async(t,i,a,r)=>{let n=`表示形式の変更：${this.toString()}（${this.battlePositionName}⇒${me[t]}）`;const l=[...i];this.battlePosition==="Set"&&(l.push("Flip"),i.includes("Rule")&&(this.info.isPending=!0,n=`${this.toString()}を反転召喚`,this.info.summonKinds.push("FlipSummon"),l.push("FlipSummon"),l.push("AttackSummon"))),this.duel.log.info(n,r),await this.moveAlone(this.fieldCell,"Monster",t==="Set"?"FaceDown":"FaceUp",t==="Attack"?"Vertical":"Horizontal","Top",l,a,r,r)});s(this,"activateAsPendulumScale",(t,i,a,r)=>this.moveAlone(t,"Spell","FaceUp","Vertical","Top",["CardActivation",...i],a,r,r));s(this,"setNonFieldMonsterPosition",async(t,i,a,r,n)=>{this.moveAlone(this.fieldCell,t,i==="FaceUp"?"FaceUp":"FaceDown","Vertical","Top",a,r,n,n)});s(this,"setAsSpellTrap",async(t,i,a,r,n)=>{await this.moveAlone(t,i,"FaceDown","Vertical","Top",[...a,"SpellTrapSet"],r,n,n)});s(this,"activateSpellTrapFromHand",async(t,i,a,r,n)=>{await this.moveAlone(t,i,"FaceUp","Vertical","Top",[...a,"CardActivation"],r,n,n)});s(this,"putDirectly",async(t,i,a,r,n)=>{await this.moveAlone(t,i,"FaceUp","Vertical","Top",[...a,"PutDirectly"],r,n,n)});s(this,"activateSpellTrapOnField",async(t,i,a,r)=>{await this.moveAlone(this.fieldCell,t,"FaceUp","Vertical","Top",[...i,"CardActivation"],a,r,r)});s(this,"draw",async(t,i,a)=>await this.addToHand([...t,"Draw"],i,a));s(this,"addToHand",async(t,i,a)=>await this.moveAlone(this.owner.getHandCell(),this.origin.kind,"FaceDown","Vertical","Bottom",[...t],i,a,a));s(this,"summon",(t,i,a,r,n,l,o)=>B.summonMany([{monster:this,dest:t,summoner:o??l,pos:i}],a,r,n,l));s(this,"moveForcibly",async(t,i,a,r,n,l,o)=>{await this.moveAlone(t,this.origin.kind,i,a,r,["Rule",...n],l,o,o)});s(this,"moveAlone",async(t,i,a,r,n,l,o,u,c)=>(await B.moveMany([[this,t,i,a,r,n,l,o,u,c]],void 0),this.fieldCell));s(this,"determine",()=>{this.info.isPending&&(this.info.isPending=!1,this.moveLog.finalize(),this.continuousEffects.forEach(t=>t.updateState()))});s(this,"_move",async(t,i,a,r,n,l,o,u,c)=>{if(!t)throw new Error("illegal argument: to");if(await this.onBeforeMoveEvent.trigger({entity:this,args:[t,i,a,r,n,l,o,u,c]}),this.face=a,this.orientation=r,t!==this.fieldCell){if(this.field.duel.clock.turn>0&&(this.duel.log.info(`移動：${this.toString()}  ${this.fieldCell.toString()} ⇒ ${t.toString()}`,u),await this.field.duel.view.waitAnimation({entity:this,to:t,index:n,count:0})),this.fieldCell.releaseEntities(this),this.fieldCell.isPlayFieldCell&&!t.isPlayFieldCell&&(this.counterHolder.clear(),this.resetCauseOfDeath(),this.entityType==="Token")){this._hasDisappeared=!0,this.field.duel.log.info(`${this.nm}は消滅した。`,this.controller);return}this.kind!=="XyzMaterial"&&(this.fieldCell.isMonsterZoneLikeCell&&!t.isMonsterZoneLikeCell||i!=="Monster")&&(this.info.equipEntities.filter(d=>d.isOnFieldAsSpellTrapStrictly).forEach(d=>{d.info.isDying=!0,d.info.causeOfDeath=["RuleDestroy"],this.controller.writeInfoLog(`装備対象${this.toString()}不在により${d.toString()}は破壊された。`)}),this.info.equipEntities=[],this.fieldCell.xyzMaterials.forEach(d=>{d.info.isDying=!0,d.info.causeOfDeath=["LostXyzOwner"],this.controller.writeInfoLog(`エクシーズモンスター${this.toString()}不在により${d.toString()}は墓地に送られた。`)}),this.resetNumericStatus(),this.info.willBeBanished=!1,this.info.willReturnToDeck=void 0,this.info.isEffectiveIn.push(...W)),this.fieldCell.cellType==="SpellAndTrapZone"&&t.cellType!=="SpellAndTrapZone"&&(this.info.equipedBy=void 0,this.info.equipedAs=void 0,this.info.willBeBanished=!1,this.info.willReturnToDeck=void 0,this.info.isEffectiveIn.push(...W)),t.acceptEntities(this,n),(t===this.isBelongTo||t.cellType==="Hand"||t.cellType==="Banished"&&this.face==="FaceDown")&&(this.counterHolder.clear(),this.resetInfoAll(),this.resetStatusAll())}return(this.isOnFieldStrictly&&this.face==="FaceDown"||i==="XyzMaterial")&&(this.info.equipEntities.forEach(d=>{d.info.isDying=!0,d.info.causeOfDeath=["RuleDestroy"],this.controller.writeInfoLog(`装備対象${this.toString()}不在により${d.toString()}は破壊された。`)}),this.counterHolder.removeAllWhenfaceDown(),this.info.materials=[],this._status.isEffective=!0,this.info.isEffectiveIn=[...I],this.info.willBeBanished=!1,this.info.willReturnToDeck=void 0,this.resetNumericStatus(),this.info.isSettingSickness=this.kind==="Trap"||this.status.spellCategory==="QuickPlay"),this._info.kind=i,this.moveLog.push(i,l,o,u,c),await this.onAfterMoveEvent.trigger(this),t});s(this,"initForTurn",()=>{this.info.isSettingSickness=!1,this.info.attackCount=0,this.info.battlePotisionChangeCount=0,this.counterHolder.corpseDisposal()});s(this,"resetInfoIfLeavesTheField",()=>{this._info={...this._info,isDying:!1,isPending:!1,causeOfDeath:[],isKilledBy:void 0,isKilledByWhom:void 0,effectTargets:{},attackCount:0,battlePotisionChangeCount:0,materials:[],equipedBy:void 0,equipedAs:void 0,equipEntities:[]},this._info.isEffectiveIn.push(...W),this._info.isEffectiveIn.distinct()});s(this,"resetInfoAll",()=>{var t;this._info={kind:this.origin.kind,isDying:!1,isPending:!1,isEffectiveIn:[...I],causeOfDeath:[],isKilledBy:void 0,isKilledByWhom:void 0,isVanished:!1,isRebornable:((t=this.origin.monsterCategories)==null?void 0:t.union(ht).length)===0,isSettingSickness:!1,summonKinds:[],materials:[],effectTargets:{},willBeBanished:!1,willReturnToDeck:void 0,attackCount:0,battlePotisionChangeCount:0,equipedBy:void 0,equipedAs:void 0,validateEquipOwner:()=>!0,equipEntities:[],battleLog:[]},this.counterHolder.clear()});s(this,"resetNumericStatus",()=>{const t=yt.reduce((i,a)=>(i[a]=this.origin[a],i),{});this._numericStatus={origin:{...t},wip:{...t},calculated:{...t}}});s(this,"resetStatus",()=>{this._status={...this.origin,canAttack:!0,isEffective:!0,canDirectAttack:!1,canActivateEffect:!0,isSelectableForAttack:!0,allowHandSyncro:!1,allowHandLink:!1,maxCounterQty:{},piercingTo:[]}});s(this,"resetStatusAll",()=>{this.resetNumericStatus(),this.resetStatus()});s(this,"resetCauseOfDeath",()=>{this.info.isDying=!1,this.info.causeOfDeath=[],this.info.isKilledBy=void 0,this.info.isKilledByWhom=void 0});this.seq=B.nextEntitySeq++,this.counterHolder=new Ki(this),this.definition=r,this.owner=t,this.fieldCell=i,this.entityType=a,this.origin=r.staticInfo,this._status=JSON.parse(JSON.stringify(r.staticInfo)),this._numericStatus=JSON.parse(JSON.stringify(r.staticInfo)),this.resetStatusAll(),this._info={kind:this.origin.kind,isEffectiveIn:[...I],attackCount:0,battlePotisionChangeCount:0,isDying:!1,isPending:!1,causeOfDeath:[],isKilledBy:void 0,isKilledByWhom:void 0,isVanished:!1,isRebornable:!0,isSettingSickness:!1,summonKinds:[],materials:[],effectTargets:{},willBeBanished:!1,willReturnToDeck:void 0,equipedBy:void 0,equipedAs:void 0,validateEquipOwner:()=>!0,equipEntities:[],battleLog:[]},this.resetInfoAll(),this.face=n,this.orientation=l,this.summonFilterBundle=new ea(i.field.summonFilterPool,this),this.procFilterBundle=new Li(i.field.procFilterPool,this),this.numericOprsBundle=new qi(i.field.numericStateOperatorPool,this),this.statusOperatorBundle=new Yi(i.field.statusOperatorPool,this),this.damageFilterBundle=new aa(i.field.damageFilterPool,this),i.acceptEntities(this,"Top"),this.moveLog=new Qi(this),this.moveLog.pushForRuleAction(["Spawn"]);let o=[],u=[];o=r.actions,u=r.continuousEffects??[],this.substituteEffects.push(...(r.substituteEffects??[]).map(c=>Ge.createNew(this,c))),this.origin.kind==="Monster"&&this.entityType==="Card"&&r.summonFilter&&this.summonFilterBundle.push(new ta("default",()=>!0,!0,this,{},()=>!0,oa,r.summonFilter)),r.defaultStatus&&this.statusOperatorBundle.push(new ue("default",()=>!0,!0,this,{},()=>!0,()=>r.defaultStatus??{})),this.actions.push(...o.map(c=>oe.createNew(this,c))),this.continuousEffects.push(...u.map(c=>Re.createNew(this,c)))}get onBeforeMove(){return this.onBeforeMoveEvent.expose()}get onAfterMove(){return this.onAfterMoveEvent.expose()}get isUnderControl(){return this.face==="FaceUp"||St.every(t=>t!==this.fieldCell.cellType)}get controller(){return this.fieldCell.owner??this.owner}get field(){return this.owner.duel.field}get duel(){return this.owner.duel.field.duel}get actionLogRecords(){return this.duel.chainBlockLog.records.filter(t=>t.chainBlockInfo.action.entity===this)}get status(){return this._status}set status(t){this._status={...t}}get numericStatus(){return this._numericStatus}get info(){return this._info}get kind(){return this.info.kind}get nm(){return this.status.name}get atk(){return this._numericStatus.calculated.attack}get def(){return this._numericStatus.calculated.defense}get lvl(){return this._numericStatus.calculated.level}get rank(){return this._numericStatus.calculated.rank}get attr(){return this.status.attributes??[]}get types(){return this.status.types??[]}get psL(){return this._numericStatus.calculated.pendulumScaleL}get psR(){return this._numericStatus.calculated.pendulumScaleR}get linkArrows(){let t=(this.origin.linkArrowKeys??[]).map(i=>vt[i].linkArrow);return this.controller.seat==="Above"&&(t=t.map(i=>({offsetColumn:i.offsetColumn*-1,offsetRow:i.offsetRow*-1}))),t}get linkArrowDests(){var t;return(t=this.origin.monsterCategories)!=null&&t.includes("Link")?this.isOnFieldAsMonsterStrictly?this.linkArrows.map(i=>[this.fieldCell.row+i.offsetRow,this.fieldCell.column+i.offsetColumn]).map(([i,a])=>this.field.cells[i][a]).filter(i=>i.isMonsterZoneLikeCell):[]:[]}get linkedEntities(){return this.isOnFieldAsMonsterStrictly?[...this.linkArrowDests.map(t=>t.cardEntities[0]).map(t=>t),...this.fieldCell.linkArrowSources].getDistinct():[]}get coLinkedEntities(){var t;return this.isOnFieldAsMonsterStrictly?(t=this.origin.monsterCategories)!=null&&t.includes("Link")?this.linkArrowDests.map(i=>i.cardEntities[0]).filter(i=>i).union(this.fieldCell.linkArrowSources):[]:[]}get isEffective(){return this.status.isEffective&&this.info.isEffectiveIn.includes(this.fieldCell.cellType)}get isEffectiveWeakly(){return this.status.isEffective}get battlePosition(){if(this.isOnFieldStrictly&&this.kind==="Monster")return this.orientation==="Vertical"?"Attack":this.face==="FaceUp"?"Defense":"Set"}get battlePositionName(){const t=this.battlePosition;if(t)return me[t]}get wasMovedAtCurrentProc(){return this.field.duel.clock.totalProcSeq===this.moveLog.latestRecord.movedAt.totalProcSeq}get wasMovedAtPreviousProc(){return this.field.duel.clock.totalProcSeq===this.moveLog.latestRecord.movedAt.totalProcSeq+1}get wasMovedAtCurrentTurn(){return this.field.duel.clock.isSameTurn(this.moveLog.latestRecord.movedAt)}get wasMovedAtCurrentChain(){return this.field.duel.clock.isSameChain(this.moveLog.latestRecord.movedAt)}get wasMovedAtPreviousChain(){return this.field.duel.clock.isPreviousChain(this.moveLog.latestRecord.movedAt)}get wasMovedAtPreviousTurn(){return this.field.duel.clock.isPreviousTurn(this.moveLog.latestRecord.movedAt)}get wasMovedFrom(){return this.moveLog.previousPlaceRecord.cell}get isPendulumScale(){var t;return!(!((t=this.origin.monsterCategories)!=null&&t.includes("Pendulum"))||!this.isOnField||!this.fieldCell.isSpellTrapZoneLikeCell||this.status.spellCategory)}get isOnField(){return this.fieldCell.isPlayFieldCell}get isOnFieldStrictly(){return this.isOnField&&!this.info.isPending&&this.kind!=="XyzMaterial"}get isOnFieldAsMonsterStrictly(){return this.fieldCell.isMonsterZoneLikeCell&&this.isOnFieldStrictly}get isOnFieldAsSpellTrapStrictly(){return this.fieldCell.isSpellTrapZoneLikeCell&&this.isOnFieldStrictly}get isInTrashCell(){return this.fieldCell.isTrashCell}get isLikeContinuousSpell(){return this.status.spellCategory==="Continuous"||this.status.spellCategory==="Field"||this.status.spellCategory==="Equip"||this.status.trapCategory==="Continuous"||(this.status.monsterCategories??[]).includes("Pendulum")}get isBelongTo(){return this.origin.monsterCategories&&this.origin.monsterCategories.union(Se).length?this.owner.getExtraDeck():this.owner.getDeckCell()}get hasDisappeared(){return this._hasDisappeared}get allStickyEffectOperators(){return[...this.procFilterBundle.effectiveOperators,...this.numericOprsBundle.effectiveOperators]}};s(B,"nextEntitySeq",0),s(B,"splitBattlePos",t=>({face:t==="Set"?"FaceDown":"FaceUp",orientation:t==="Attack"?"Vertical":"Horizontal"})),s(B,"recreateArray",(t,i)=>{if(!i.length)return[];const a=t.getAllCells().flatMap(r=>r.entities);return i.map(r=>r.seq).map(r=>a.find(n=>n.seq===r)).filter(r=>r!==void 0)}),s(B,"createPlayerEntity",t=>{const i=t.getHandCell();return new B(t,i,"Duelist",Jr(t),"FaceUp","Vertical")}),s(B,"createCardEntity",(t,i)=>{const a=i.staticInfo.monsterCategories&&i.staticInfo.monsterCategories.union(Se).length?t.getExtraDeck():t.getDeckCell();return new B(t,a,"Card",i,"FaceDown","Vertical")}),s(B,"moveMany",async(t,i)=>{if(!t.length)return;const a=t[0][0].duel,n=[...t.filter(([o,u])=>o.fieldCell!==u).map(([o])=>o).filter(o=>!(i??[]).includes(o)),...a.field.getCardsOnFieldStrictly().filter(o=>o.info.isDying)],l=new Map;for(t.forEach(([o,u,c,d,p,h,...g])=>{var Z;let y=u,M=c,f=d,x=h,N=p;o.info.willBeBanished?(y=o.owner.getBanished(),f="FaceUp",N="Vertical"):o.info.willReturnToDeck?(y=o.isBelongTo,f="FaceDown",x=o.info.willReturnToDeck,N="Vertical"):(Z=o.status.monsterCategories)!=null&&Z.includes("Pendulum")&&o.isOnFieldStrictly&&o.face==="FaceUp"&&u.isTrashCell&&(y=o.owner.getExtraDeck(),f="FaceUp",x="Top",N="Vertical"),y.cellType==="ExtraDeck"&&(x=f==="FaceUp"?"Top":"Bottom"),o.isBelongTo.cellType==="ExtraDeck"&&(y.cellType==="Hand"||y.cellType==="Deck")&&(y=o.isBelongTo,f="FaceDown",N="Vertical"),y.isPlayFieldCell||(M=o.origin.kind),y.isMonsterZoneLikeCell||(N="Vertical"),l.set(y,[[o,y,M,f,N,x,...g],...l.get(y)??[]])});;){const o=Array.from(l.values()).map(c=>c.pop()).filter(c=>c!==void 0).map(([c,...d])=>c._move(...d));if(!o.length)break;await Promise.all(o);const u=a.field.getCardsOnFieldStrictly().filter(c=>c.info.isDying).filter(c=>!n.includes(c)).map(c=>({entity:c,causedAs:c.info.causeOfDeath??[],causedBy:c.info.isKilledBy,activator:c.info.isKilledByWhom}));u.length&&await B.sendManyToGraveyard(u,n)}B.settleEntityMove(a)}),s(B,"summonMany",async(t,i,a,r,n)=>{if(!t.length)return;const l={Attack:"AttackSummon",Defense:"DefenseSummon",Set:"SetSummon"},o=t.map(({monster:u,dest:c,pos:d,summoner:p})=>{if(u.info.summonKinds=[i],i==="NormalSummon"||i==="AdvanceSummon"){u.info.summonKinds.push("NormalSummon");const y=i==="AdvanceSummon"?"アドバンス":"";d==="Attack"?u.field.duel.log.info(`${u.toString()}を${y}召喚`,p):u.duel.log.info(`${u.toString()}を${y}セット`,p),a.includes("Rule")?p.info.ruleNormalSummonCountQty++:p.info.effectNormalSummonCountQty++}else i==="SpecialSummon"?u.duel.log.info(`${u.toString()}を${me[d]}で特殊召喚`,p):(u.info.summonKinds.push("SpecialSummon"),u.duel.log.info(`${u.toString()}を${me[d]}で${la[i]}！`,p)),p.info.specialSummonCountQty++;u.info.summonKinds=u.info.summonKinds.getDistinct(),u.info.battlePotisionChangeCount=1;const{face:h,orientation:g}=B.splitBattlePos(d);return a.includes("Rule")&&(u.info.isPending=!0),{entity:u,args:[c,"Monster",h,g,"Top",[i,l[d],...a],r,n,p]}}).map(u=>u.entity._move(...u.args));await Promise.all(o),t.map(u=>u.summoner).forEach(u=>{i==="NormalSummon"||i==="AdvanceSummon"?a.includes("Rule")?u.info.ruleNormalSummonCount++:u.info.effectNormalSummonCount++:u.info.specialSummonCount++}),B.settleEntityMove(t[0].monster.duel)}),s(B,"sendManyToGraveyard",(t,i)=>B.bringManyToSameCell("Graveyard","Top",t.map(a=>({...a,face:"FaceUp",orientation:"Vertical"})),i)),s(B,"bringManyToSameCell",async(t,i,a,r)=>(await B.moveMany(a.map(n=>[n.entity,n.entity.field.getCells(t).filter(l=>l.owner===n.entity.owner)[0],n.entity.origin.kind,n.face,n.orientation,i,n.causedAs,n.causedBy,n.activator,n.activator]),r),a.map(n=>n.entity).filter(n=>n.fieldCell.cellType===t))),s(B,"settleEntityMove",t=>{t.field.recalcLinkArrows(),t.distributeOperators(t.clock);const i=t.field.getAllEntities().filter(a=>a.wasMovedAtCurrentProc);i.filter(a=>!a.isOnFieldStrictly&&!a.info.isPending).forEach(a=>a.resetInfoIfLeavesTheField()),i.filter(a=>a.face==="FaceDown").filter(a=>a.fieldCell===a.isBelongTo).forEach(a=>{a.resetInfoAll(),a.resetStatusAll()}),i.flatMap(a=>a.continuousEffects).forEach(a=>a.updateState()),t.field.getAllCells().filter(a=>a.needsShuffle).map(a=>a.shuffle())});let k=B;k.prototype.hasBeenSummonedNow=function(e,t=["Attack","Defense"]){const i=this,a=t.map(Dt),r=i.moveLog.latestRecord.movedAs;return!(!i.wasMovedAtPreviousChain||!r.union(e).length||!r.union(a).length)};k.prototype.hasBeenSummonedJustNow=function(e,t=["Attack","Defense"]){const i=this,a=t.map(Dt),r=i.moveLog.latestRecord.movedAs;return!(!i.wasMovedAtPreviousProc||!r.union(e).length||!r.union(a).length)};k.prototype.getAttackTargets=function(){if(!this.hasAttackRight())return[];const e=this.controller.getOpponentPlayer().getMonstersOnField().filter(t=>t.status.isSelectableForAttack);return console.log(this.toString(),this.status.canDirectAttack),(this.status.canDirectAttack||!e.length)&&e.push(this.controller.getOpponentPlayer().entity),e.filter(t=>t.canBeTargetOfBattle(this.controller,this)).filter(t=>this.procFilterBundle.effectiveOperators.filter(i=>i.procTypes.includes("BattleTarget")).every(i=>i.filter(this.controller,this,{},[t])))};k.prototype.canDirectAttack=function(){return this.getAttackTargets().some(e=>e.entityType==="Duelist")};k.prototype.canAttackToMonster=function(){return this.getAttackTargets().some(e=>e.entityType!=="Duelist")};k.prototype.hasAttackRight=function(){return this.battlePosition==="Attack"&&this.info.attackCount===0&&this.status.canAttack};k.prototype.canBeEffected=function(e,t,i){return this.procFilterBundle.effectiveOperators.filter(r=>r.procTypes.some(n=>n==="Effect")).every(r=>r.filter(e,t,i,[this]))};const Pt=(e,t,i,a,r)=>e.canBeEffected(i,a,r)&&e.procFilterBundle.effectiveOperators.filter(n=>n.procTypes.some(l=>l===t)).every(n=>n.filter(i,a,r,[e]));k.prototype.canBeTargetOfEffect=function(e){return Pt(this,"EffectTarget",e.activator,e.action.entity,e.action)};k.prototype.canBeBanished=function(e,t,i,a){return this.fieldCell.cellType==="Banished"?!1:Pt(this,e,t,i,a)};k.prototype.canBeTargetOfBattle=function(e,t){const i=this;return i.procFilterBundle.effectiveOperators.filter(a=>a.procTypes.some(r=>r==="BattleTarget")).every(a=>a.filter(e,t,{},[i]))};k.prototype.validateDestory=function(e,t,i,a){const r=this;let n=r.procFilterBundle.effectiveOperators.filter(l=>l.procTypes.includes(e)).every(l=>l.filter(t,i,a??{},[r]));return n&&e==="EffectDestroy"&&(n=r.canBeEffected(t,i,a)),n};k.prototype.getIndexInCell=function(){const e=this;if(e.info.isVanished)return-1;const t=e.fieldCell.cardEntities.indexOf(e);if(t<0)throw new m("エンティティとセルの状態が矛盾している。",[e,e.fieldCell]);return t};k.prototype.getXyzMaterials=function(){const e=this;return(e.status.monsterCategories??[]).includes("Xyz")?e.fieldCell.xyzMaterials:[]};k.prototype.wasMovedAfter=function(e){return this.moveLog.latestRecord.movedAt.totalProcSeq>e.totalProcSeq};k.prototype.hadArrivedToFieldAt=function(){let e=this.moveLog.latestRecord.movedAt;return this.moveLog.records.findLast(t=>!t.cell.isPlayFieldCell||t.isPending||t.kind!==this.kind||t.face==="FaceDown"?!0:(e=t.movedAt,!1)),e};k.prototype.release=async function(e,t,i){return await this.sendToGraveyard([...e,"Release"],t,i),this.info.isVanished?void 0:this.fieldCell};k.prototype.ruleDestory=async function(){return await this.sendToGraveyard(["RuleDestroy"],void 0,void 0),this.info.isVanished?void 0:this.fieldCell};k.prototype.sendToGraveyard=async function(e,t,i){await v.sendManyToGraveyardForTheSameReason([this],e,t,i)};k.prototype.discard=async function(e,t,i){await v.discardManyForTheSameReason([this],e,t,i)};k.prototype.returnToDeck=async function(e,t,i,a){await v.returnManyToDeckForTheSameReason(e,[this],t,i,a)};k.prototype.banish=async function(e,t,i){await v.banishManyForTheSameReason([this],e,t,i)};class da{constructor(t){s(this,"cells");s(this,"duel");s(this,"summonFilterPool");s(this,"procFilterPool");s(this,"numericStateOperatorPool");s(this,"statusOperatorPool");s(this,"damageFilterPool");s(this,"moveLog");s(this,"getAllCells",()=>this.cells.flat());s(this,"getCells",(...t)=>this.getAllCells().filter(i=>t.includes(i.cellType)));s(this,"getAvailableExtraMonsterZones",()=>this.getCells("ExtraMonsterZone").filter(t=>t.isAvailable));s(this,"getAllEntities",()=>this.getAllCells().map(t=>t.entities).flat());s(this,"getAllCardEntities",()=>this.getAllCells().map(t=>t.cardEntities).flat());s(this,"getCardsOnFieldStrictly",()=>this.getCells(...W).map(t=>t.cardEntities).filter(t=>t.length>0).map(t=>t[0]).filter(t=>t.isOnFieldStrictly));s(this,"getMonstersOnFieldStrictly",()=>this.getCardsOnFieldStrictly().filter(t=>t.isOnFieldAsMonsterStrictly));s(this,"getSpellTrapsOnFieldStrictly",()=>this.getCardsOnFieldStrictly().filter(t=>t.isOnFieldAsSpellTrapStrictly));s(this,"getPendulumScalesOnFieldStrictly",()=>this.getCardsOnFieldStrictly().filter(t=>{var i;return(i=t.origin.monsterCategories)==null?void 0:i.includes("Pendulum")}).filter(t=>t.isOnFieldAsSpellTrapStrictly).filter(t=>!t.status.spellCategory));s(this,"getPendingCardsOnField",()=>this.getCells(...W).map(t=>t.cardEntities).filter(t=>t.length>0).map(t=>t[0]).filter(t=>t.info.isPending));s(this,"getPendingMonstersOnField",()=>this.getPendingCardsOnField().filter(t=>t.kind==="Monster"));s(this,"getEntities",t=>this.getAllEntities().filter(i=>i.controller===t));s(this,"recalcLinkArrows",()=>{const t=this.getAllCells().filter(i=>i.isMonsterZoneLikeCell);t.some(i=>i.recalcLinkArrows)&&t.forEach(i=>i.recalcLinkArrows())});s(this,"canExtraLink",(t,i)=>{if(!t.linkArrows.length)return!1;const a=i.map(c=>c.material),r=this.getCells("ExtraMonsterZone").filter(c=>c.isAvailable||a.includes(c.cardEntities[0]));if(r.length!==1)return!1;const n=r[0],l=t.linkArrows.map(c=>this.cells[n.row+c.offsetRow][n.column+c.offsetColumn]);let o=n.linkArrowSources.filter(c=>!a.includes(c)).filter(c=>l.includes(c.fieldCell));if(!o.length)return!1;let u=-1;for(;u!==o.length;){const c=o.flatMap(d=>d.coLinkedEntities).filter(d=>!a.includes(d));if(c.some(d=>d.fieldCell.cellType==="ExtraMonsterZone"))return!0;o=[...o,...c].getDistinct(),u=o.length}return!1});s(this,"drawAtSameTime",async(t,i,a,r,n,l)=>{const o=[],u=[],c=[t.draw(i,n,l),a.draw(r,n,l)].map(d=>d.catch(p=>{p instanceof $?p.winner&&o.push(p.winner):u.push(p)}));if(await Promise.all(c),u.length)throw new m("ドロー処理で想定されない例外が発生した。",t,i,a,r,n,...u);if(o.length!==0)throw o.length===1?new $(o[0],"対戦相手がデッキからドローできなかった。"):new $(void 0,"お互いにデッキからカードをドローできなかった。")});s(this,"sendToGraveyard",async(t,i,a,r,n,l,o,u)=>{if(r>0&&a.length<r)return;const c=await this.duel.view.waitSelectEntities(i,{selectables:a,qty:r,validator:n,cancelable:u??!1},t);if(c)return await k.sendManyToGraveyard(c.map(d=>({entity:d,causedAs:l,causedBy:o,activator:i}))),this.duel.log.info(`${c.map(d=>d.status.name).join(", ")}を墓地に送った（${l.getDistinct().join(", ")}）。`,i),c});this.duel=t,this.cells=[...Array(7)].map(()=>[]);for(const i of Object.keys(qe).map(Number))for(const a of Object.keys(qe[i]).map(Number))this.cells[i][a]=new Bi(this,i,a,i<3?t.duelists.Above:i>3?t.duelists.Below:a<2?t.duelists.Above:a>4?t.duelists.Below:void 0);this.summonFilterPool=new Ii,this.procFilterPool=new Oi,this.numericStateOperatorPool=new Ni,this.statusOperatorPool=new Ji,this.damageFilterPool=new ia,this.moveLog=new zi(this)}}class pa{constructor(t){s(this,"onUpdateEvent",new O);s(this,"nextSeq");s(this,"records",[]);s(this,"duel");s(this,"dispose",()=>{this.onUpdateEvent.clear()});s(this,"error",t=>{console.error(t);const i=["エラー発生"];t instanceof Error?(t instanceof m&&(i.push("-- エラーメッセージ --"),i.push(t.message),i.push("-- 関連オブジェクト --"),t.items.forEach(a=>i.push(JSON.stringify(a))),console.error(t.items)),i.push("-- エラー名称 --"),i.push(t.name||"エラー名称取得失敗"),i.push("-- スタックトレース --"),i.push(t.stack||"スタックトレース取得失敗")):(i.push("-- エラー型特定失敗 --"),i.push(JSON.stringify(t))),this.write("error","System",i,void 0,void 0,void 0,void 0,void 0)});s(this,"warn",t=>{this.write("warn","System",["【注意】",t],void 0,void 0,void 0,void 0,void 0)});s(this,"info",(t,i)=>{this.write("info","Others",[t],i,void 0,void 0,void 0,void 0)});s(this,"pushMoveLog",(t,i,a,r)=>{this.write("info","EntityMove",["移動"],t,i,void 0,a,r)});s(this,"write",(t,i,a,r,n,l,o,u)=>{const c=a.join(`
`);this.records.push({seq:this.nextSeq++,lvl:t,type:i,clock:this.duel.clock.getClone(),text:c,duelist:r,mainEntity:n,subEntities:l??[],from:o,to:u}),this.onUpdateEvent.trigger(this.nextSeq-1)});this.nextSeq=0,this.duel=t}get onUpdate(){return this.onUpdateEvent.expose()}get lastRecord(){return this.records.slice(-1)[0]}}const fa=e=>new Promise(t=>setTimeout(t,e)),Mt=()=>{let e=()=>{},t=()=>{};return{promise:new Promise((a,r)=>{e=a,t=r}),resolve:e,reject:t}};class Fe{constructor(t){s(this,"onUpdateEvent",new O);s(this,"_state","Disable");s(this,"defaultArgs");s(this,"_args");s(this,"resolve",()=>{});s(this,"show",t=>{this._args=t,this._state="Shown",this.onUpdateEvent.trigger();const{promise:i,resolve:a}=Mt();return this.resolve=r=>{this._state="Disable",a(r),this.resolve=()=>{},this.onUpdateEvent.trigger()},i});s(this,"cancel",()=>{this._state!=="Disable"&&this.resolve(void 0),this.terminate()});s(this,"terminate",()=>{this._state="Disable",this._args=this.defaultArgs,this.resolve=()=>{}});this.defaultArgs=t,this._args=t}get onUpdate(){return this.onUpdateEvent.expose()}get state(){return this._state}get args(){return this._args}}class ha{constructor(t){s(this,"onUpdateEvent",new O);s(this,"actionSelector",new Fe({title:"カード操作を選択。",activator:void 0,dummyActionInfos:[],cancelable:!1}));s(this,"entitySelector",new Fe({title:"対象を選択",entitiesChoices:{selectables:[],validator:()=>!0,cancelable:!1},cancelable:!1,chainBlockInfos:[]}));s(this,"textSelector",new Fe({title:"カード操作を選択。",choises:[],cancelable:!1}));s(this,"modals",[this.actionSelector,this.entitySelector,this.textSelector]);s(this,"view");s(this,"terminateAll",()=>{this.modals.forEach(t=>t.terminate()),this.onUpdateEvent.trigger()});this.view=t,this.modals.forEach(i=>i.onUpdate.append(()=>this.onUpdateEvent.trigger()))}get onUpdate(){return this.onUpdateEvent.expose()}}const nt=e=>{let t=[];do{const i=e.qty&&e.qty>0?e.qty:Math.floor(Math.random()*e.selectables.length+1);t=e.selectables.randomPickMany(i)}while(!e.validator(t));return t},ga=[{seq:10,name:"Internet Explorer",key:"msie"},{seq:20,name:"Internet Explorer",key:"trident"},{seq:30,name:"Edge",key:"edge"},{seq:40,name:"Google Chrome",key:"chrome"},{seq:50,name:"Safari",key:"safari"},{seq:60,name:"Mozilla Firefox",key:"firefox"},{seq:70,name:"Opera",key:"opera"}],ya=[{seq:10,name:"Microsoft Windows",key:"windows nt"},{seq:20,name:"Android",key:"android"},{seq:30,name:"iOS",key:"iphone"},{seq:40,name:"iOS",key:"ipad"},{seq:50,name:"macOS",key:"mac os x"}],fe=window.navigator.userAgent.toLowerCase();var pt;const va=((pt=ga.find(e=>fe.indexOf(e.key)!==-1))==null?void 0:pt.name)??"Unknown Browser";var ft;const We=((ft=ya.find(e=>fe.indexOf(e.key)!==-1))==null?void 0:ft.name)??"Unknown OS",At=fe.indexOf("iphone")!==-1||We==="Android"&&fe.indexOf("mobile")!==-1,ma=fe.indexOf("ipad")!==-1||We==="Android"&&!At,st=At?"Smart Phone":ma?"Tablet Device":"PC",Be={canDragElement:st==="PC",text:`${st} ${We} ${va}`};class Sa{constructor(t){s(this,"onDuelUpdateEvent",new O);s(this,"requireUpdate",()=>{this.onDuelUpdateEvent.trigger()});s(this,"onWaitStartEvent",new O);s(this,"onWaitEndEvent",new O);s(this,"onDragStartEvent",new O);s(this,"onDragEndEvent",new O);s(this,"onAnimationStartEvent",new O);s(this,"onShowCardEntityEvent",new O);s(this,"duel");s(this,"modalController");s(this,"_message");s(this,"waitMode");s(this,"infoBoardState");s(this,"infoBoardCell");s(this,"getCell",(t,i)=>this.duel.field.cells[t][i]);s(this,"showCardInfo",(t,i)=>{this.onShowCardEntityEvent.trigger({card:t,mode:i})});s(this,"dispose",()=>{this.onDragStartEvent.clear(),this.onDragEndEvent.clear(),this.onDuelUpdateEvent.clear(),this.onWaitStartEvent.clear(),this.onWaitEndEvent.clear()});s(this,"waitFieldAction",async t=>{if(this.duel.getTurnPlayer().duelistType==="NPC"){const n=this.duel.getTurnPlayer().selectActionForNPC(t,[]);return n?{actionInfo:n}:{phaseChange:this.duel.nextPhaseList[0]}}const i=await this._waitDuelistAction(this.duel.getTurnPlayer(),t,"Free","",void 0,void 0,!1);if(!i.actionInfo)return{...i,actionInfo:void 0};const a={...i.actionInfo},r=t.find(n=>{var l;return((l=i.actionInfo)==null?void 0:l.originSeq)===n.originSeq});if(!r)throw new m("想定されない状態",t,i);return{...i,actionInfo:{dest:a.dest,battlePosition:a.battlePosition,action:r.action,originSeq:r.originSeq}}});s(this,"waitQuickEffect",async(t,i,a,r,n)=>{if(i.length===0)return;if(t.duelistType==="NPC")return t.selectActionForNPC(i,a);const l=[this.modalController.actionSelector.show({title:r,activator:t,dummyActionInfos:i,cancelable:n}),this._waitDuelistAction(t,i,"Modal",this.message,void 0,void 0,!1).then(c=>c.actionInfo)],o=await Promise.any(l);if(!o)return;this.infoBoardState="Log";const u=i.find(c=>o.originSeq===c.originSeq);if(!u)throw new m("想定されない状態",o);return{...u,dest:o.dest}});s(this,"waitSubAction",async(t,i,a,r=!1)=>{if(t.duelistType==="NPC")throw Error("Not implemented");const n=await this._waitDuelistAction(t,i,"Modal",a,void 0,void 0,r);if(n&&n.actionInfo)return n.actionInfo});s(this,"waitSelectEntities",async(t,i,a)=>{if(!i.selectables.length)return;if(i.qty&&i.selectables.length===i.qty)return[...i.selectables];if(t.duelistType==="NPC")return nt(i);let r;i.selectables.some(l=>l.entityType==="Duelist")&&(r={...i,selectables:i.selectables.filter(l=>l.entityType==="Duelist").map(l=>l.fieldCell),qty:1,validator:l=>l.length===1});const n=await this._waitDuelistAction(t,[],"Modal",a,i,r,i.cancelable);return[...n.selectedEntities??[],...(n.selectedCells??[]).flatMap(l=>l.entities).filter(l=>l.entityType==="Duelist")]});s(this,"waitSelectText",async(t,i,a,r=!1)=>{if(t.duelistType==="NPC")return i.randomPick();const n=await this.modalController.textSelector.show({title:a,choises:i,cancelable:r});if(n===void 0){if(!r)throw new L(t,i,a,r);return}return i.find(l=>l.seq===n)});s(this,"waitAnimation",async t=>(this._message="",this.waitMode="Animation",this.onDuelUpdateEvent.trigger(),new Promise(i=>this.onAnimationStartEvent.trigger({...t,resolve:i}))));s(this,"setDraggingActions",t=>{this.onDragStartEvent.trigger(t),this.requireUpdate()});s(this,"removeDraggingActions",()=>{this.onDragEndEvent.trigger()});s(this,"waitSelectAction",async(t,i,a,r)=>{var u;const n=i.map(c=>oe.createDummyAction(c.entity,c.title,[],void 0,c.origin)),l=await this._waitDammyAction(t,n,a,r);if(!l)return;const o=(u=i.find(c=>c.origin.seq===l.originSeq))==null?void 0:u.origin;if(!o)throw new m("想定されない状態",i,l);return o});s(this,"waitSelectSummonDestination",async(t,i,a,r,n)=>{const l=a.length>1&&Be.canDragElement?"カードを召喚先へドラッグ。":"表示形式を選択。";if(!a.length&&!r.length){if(n)return;throw new m("想定されない状態",t,i,a,r,n)}let o=[...r];for(;;){const u={dest:a.randomPick(),battlePosition:o[0]};if(o.length===1&&!Be.canDragElement){const p=await this.waitSelectCell(t,a,n,"召喚先を選択。");return p?{dest:p,battlePosition:r[0]}:void 0}const c=o.map(p=>oe.createDummyAction(i,p,a,p)),d=await this._waitDammyAction(t,c,l,n);if(!d)return;if(d.battlePosition&&(o=[d.battlePosition]),!(a.length>1&&!d.dest))return u.dest=d.dest??u.dest,u.battlePosition=d.battlePosition??u.battlePosition,u}});s(this,"waitSelectDestination",async(t,i,a,r,n,l=!1)=>{if(!a.length)return;if(a.length===1)return a[0];if(!Be.canDragElement)return await this.waitSelectCell(t,a,l,r);let o=a.randomPick();const u=[oe.createDummyAction(i,n,a,void 0)],c=await this._waitDammyAction(t,u,r,l);if(c)return o=c.dest??o,o});s(this,"_waitDammyAction",async(t,i,a,r=!1)=>{if(!i.length)return;const n=i.randomPick();let l={...n,dest:n.dest??n.dests.randomPick()};if(t.duelistType!=="NPC"){const o=[this.modalController.actionSelector.show({title:a,activator:t,dummyActionInfos:i,cancelable:!1}),this.duel.view.waitSubAction(t,i,a,r)],u=await Promise.any(o);if(!u&&!r)throw new L(u,o);if(!u)return;l=u??l}return l});s(this,"waitSelectCell",async(t,i,a,r)=>i.length?t.duelistType==="NPC"?i.randomPick():(await this.waitSelectCells(t,{selectables:i,qty:1,validator:l=>l.length===1,cancelable:a},r)??[])[0]:void 0);s(this,"waitSelectCells",async(t,i,a)=>{if(!i.selectables.length)return;if(t.duelistType==="NPC")return nt(i);const r=await this._waitDuelistAction(t,[],"Modal",a,void 0,i,i.cancelable);if((!r||!r.selectedCells)&&!i.cancelable)throw new L(t,i,a);return r.selectedCells});s(this,"_waitDuelistAction",async(t,i,a,r,n,l,o=!1)=>{for(this.waitMode=a,this._message=r;this.onDuelUpdateEvent.length<40;)await fa(1);this.onDuelUpdateEvent.trigger();const u=Mt(),c={resolve:u.resolve,activator:t,dummyActionInfos:i,chainBlockInfos:t.duel.chainBlockInfos,entitiesChoices:n,cellsChoices:l};this.onWaitStartEvent.trigger(c);const d=await u.promise;if(console.info("response",d),this.modalController.terminateAll(),this.waitMode="None",this.onWaitEndEvent.trigger(),d.surrender)throw new $(t.getOpponentPlayer(),`${t.profile.name}がサレンダーした。`);if(!o&&d.cancel)throw new m("キャンセル不可のアクションがキャンセルされた。",d,i,a,n,l);return this.infoBoardState="Log",d});this.duel=t,this._message="",this.waitMode="None",this.infoBoardState="Log",this.infoBoardCell=t.duelists.Below.getExtraDeck(),this.modalController=new ha(this)}get onDuelUpdate(){return this.onDuelUpdateEvent.expose()}get onWaitStart(){return this.onWaitStartEvent.expose()}get onWaitEnd(){return this.onWaitEndEvent.expose()}get onDragStart(){return this.onDragStartEvent.expose()}get onDragEnd(){return this.onDragEndEvent.expose()}get onAnimation(){return this.onAnimationStartEvent.expose()}get onShowCardEntity(){return this.onShowCardEntityEvent.expose()}get message(){var t;return(this._message||((t=this.duel.log.lastRecord)==null?void 0:t.text))??""}}const Ue=["turn","phaseSeq","stepSeq","stageSeq","chainSeq","chainBlockSeq","procSeq"];[...Ue];class Ca{constructor(){s(this,"onClockChangeEvents",{turn:new O,phaseSeq:new O,stepSeq:new O,stageSeq:new O,chainSeq:new O,chainBlockSeq:new O,procSeq:new O});s(this,"_turn",0);s(this,"_phaseSeq",0);s(this,"_stepSeq",0);s(this,"_stageSeq",0);s(this,"_chainSeq",0);s(this,"_chainBlockSeq",0);s(this,"_procSeq",0);s(this,"_totalProcSeq",0);s(this,"_periodKey");s(this,"_previousStartPoints",{turn:0,phaseSeq:0,stepSeq:0,stageSeq:0,chainSeq:0,chainBlockSeq:0,procSeq:0});s(this,"_currentStartPoints",{turn:0,phaseSeq:0,stepSeq:0,stageSeq:0,chainSeq:0,chainBlockSeq:0,procSeq:0});s(this,"setPhase",(t,i)=>{const a=Object.values(J).filter(r=>r.phase===i).find(r=>(r.step??"start")==="start");if(!a)throw new m("想定されない状態",this.period,i,J);i==="draw"?(this.turn>0&&t.log.info("ターン終了。",t.getTurnPlayer()),this._turn++,this._phaseSeq=0):(t.log.info(`フェイズ移行（${this.period.name}→${a.name}）`,t.getTurnPlayer()),this._phaseSeq++),this._stepSeq=0,this._stageSeq=0,this.periodKey=a.key});s(this,"setStep",(t,i)=>{const a=this.period.phase,r=Object.values(J).filter(n=>n.phase===a).find(n=>(n.step??"")===i);if(!r)throw new m("想定されない状態",this.period,i,J);this.period.name!==r.name&&(t.log.info(`ステップ移行（${this.period.name}→${r.name}）`,t.getTurnPlayer()),this._stepSeq++,this._stageSeq=0,this.periodKey=r.key)});s(this,"setStage",(t,i)=>{const a=this.period,r=Object.values(J).filter(n=>n.phase===a.phase).filter(n=>n.step===a.step).find(n=>(n.stage??"")===i);if(!r)throw new m("想定されない状態",this.period,i,J);t.log.info(`タイミング移行（${this.period.name}→${r.name}）`,t.getTurnPlayer()),this._stageSeq++,this.periodKey=r.key});s(this,"incrementChainSeq",()=>{this._chainSeq++,this._chainBlockSeq=0,this._procSeq=0,this.incrementTotalProcSeq()});s(this,"incrementChainBlockSeq",()=>{this._chainBlockSeq++,this._procSeq=0,this.incrementTotalProcSeq()});s(this,"incrementProcSeq",()=>{this._procSeq++,this.incrementTotalProcSeq()});s(this,"incrementTotalProcSeq",()=>{this._totalProcSeq++;let t=!1;Ue.toReversed().forEach(i=>{t&&(this._previousStartPoints[i]=this.currentStartPoints[i],this._currentStartPoints[i]=this.totalProcSeq),t=this[i]===0}),Ue.toReversed().filter(i=>this._currentStartPoints[i]=this.totalProcSeq).filter(i=>i!=="procSeq").forEach(i=>this.onClockChangeEvents[i].trigger(this)),this.onClockChangeEvents.procSeq.trigger(this)});s(this,"toString",()=>`${this.totalProcSeq}(t${this.turn}-phs${this.phaseSeq}-stp${this.stepSeq}-stg${this.stepSeq}-c${this.chainSeq}-cb${this.chainBlockSeq}-prc${this.procSeq})`);s(this,"getClone",()=>({turn:this.turn,phaseSeq:this.phaseSeq,stepSeq:this.stepSeq,stageSeq:this.stageSeq,chainSeq:this.chainSeq,chainBlockSeq:this.chainBlockSeq,procSeq:this.procSeq,totalProcSeq:this.totalProcSeq,period:this.period}));s(this,"isSameTurn",t=>this.turn===t.turn);s(this,"isSameChain",t=>this.turn===t.turn&&this.phaseSeq===t.phaseSeq&&this.stepSeq===t.stepSeq&&this.stageSeq===t.stageSeq&&this.chainSeq===t.chainSeq);s(this,"isPreviousChain",t=>this.turn===t.turn&&this.phaseSeq===t.phaseSeq&&this.stepSeq===t.stepSeq&&this.stageSeq===t.stageSeq&&this.chainSeq===t.chainSeq+1);s(this,"isPreviousStage",t=>this.turn===t.turn&&this.phaseSeq===t.phaseSeq&&this.stepSeq===t.stepSeq&&this.stageSeq===t.stageSeq+1);s(this,"isPreviousTurn",t=>this.turn===t.turn+1);s(this,"isPreviousProc",t=>this.totalProcSeq===t.totalProcSeq+1);s(this,"isUponAttackDeclaration",()=>this.period.step==="battle"&&this.chainSeq===1);this._periodKey="end"}get onTurnChange(){return this.onClockChangeEvents.turn.expose()}get onStageChange(){return this.onClockChangeEvents.stageSeq.expose()}get onProcSeqChange(){return this.onClockChangeEvents.procSeq.expose()}get previousStartPoints(){return this._previousStartPoints}get currentStartPoints(){return this._currentStartPoints}set periodKey(t){this._periodKey!==t&&(this._periodKey=t,this._chainSeq=0,this._chainBlockSeq=0,this._procSeq=0,this.incrementTotalProcSeq())}get periodKey(){return this._periodKey}get period(){return J[this.periodKey]}get turn(){return this._turn}get phaseSeq(){return this._phaseSeq}get stepSeq(){return this._stepSeq}get stageSeq(){return this._stageSeq}get chainSeq(){return this._chainSeq}get chainBlockSeq(){return this._chainBlockSeq}get procSeq(){return this._procSeq}get totalProcSeq(){return this._totalProcSeq}get isFirstChain(){return this.chainSeq===0}}class Ta{constructor(t){s(this,"nextSeq");s(this,"records",[]);s(this,"duel");s(this,"push",t=>{this.records.push({seq:this.nextSeq++,clock:this.duel.clock.getClone(),chainBlockInfo:t})});this.nextSeq=0,this.duel=t}}const wa=["PlayFirst","DrawFirst","Random"],En={PlayFirst:"先攻",DrawFirst:"後攻",Random:"ランダム"};class $ extends Error{constructor(i,a){super(i?`デュエルが終了した。勝者：${i.profile.name}`:"デュエルが終了した。ドロー。");s(this,"winner");s(this,"message");this.winner=i,this.message=a}}class m extends Error{constructor(i,...a){super(i);s(this,"message");s(this,"items");this.message=i,this.items=a}}class L extends m{constructor(...t){super("キャンセル不可のアクションがキャンセルされた。",...t)}}class bn{constructor(t,i,a,r=[],n,l,o,u=[],c="Random"){s(this,"onDuelEndEvent",new O);s(this,"view");s(this,"log");s(this,"chainBlockLog");s(this,"clock");s(this,"nextPhaseList");s(this,"field");s(this,"attackingMonster");s(this,"targetForAttack");s(this,"_chainBlockInfos");s(this,"duelists");s(this,"priorityHolder");s(this,"isEnded");s(this,"winner");s(this,"coin",!1);s(this,"startMode");s(this,"distributeOperators",t=>{console.info(`[totalProcSeq]:${t.totalProcSeq}`);let i=0;for(;;){if(i++,i>10)throw new m("無限ループ発生");if(this.field.procFilterPool.distributeAll(this)&&this.field.statusOperatorPool.distributeAll(this)&&this.field.numericStateOperatorPool.distributeAll(this)&&this.field.summonFilterPool.distributeAll(this))return}});s(this,"getTurnPlayer",()=>this.clock.turn%2===0?this.secondPlayer:this.firstPlayer);s(this,"getNonTurnPlayer",()=>this.clock.turn%2===0?this.firstPlayer:this.secondPlayer);s(this,"main",async()=>{console.info("main start!"),this.coin=this.startMode==="PlayFirst"?!0:this.startMode==="DrawFirst"?!1:Math.random()>.5,this.priorityHolder=this.firstPlayer;const t=Kr(...Object.values(this.duelists).flatMap(i=>i.deckInfo.cardNames).getDistinct()).reduce((i,a)=>(i[a.name]=a,{...i}),{});for(const i of Object.values(this.duelists))i.pushDeck(t),i.getDeckCell().shuffle(),i.initHand.length&&i.initHand.forEach(a=>{const r=i.getDeckCell().cardEntities.find(n=>n.origin.name===a);if(!r){this.log.info(`初手操作により${a}を手札に加えようとしたが、デッキに存在しない。`);return}r.addToHand(["System"],void 0,void 0),this.log.info(`初手操作により${r.toString()}を手札に加えた`,i)}),await i.draw(5-i.getHandCell().cardEntities.length,void 0,void 0);this.log.info(`【デュエル開始】${this.firstPlayer.profile.name} V.S. ${this.secondPlayer.profile.name}`),this.log.info(`先攻：${this.firstPlayer.profile.name} 後攻：${this.secondPlayer.profile.name}`),this.moveNextPhase("draw");try{for(const i of Object.values(this.duelists))for(const a of this.getEnableActions(i,["Exodia"],["Normal"],[]))await a.action.directExecute(i,void 0,!1);for(;!this.isEnded&&(this.clock.period.phase==="draw"?await this.procDrawPhase():this.phase==="standby"?await this.procStanbyPhase():this.phase==="main1"?await this.procMainPhase():this.phase==="battle1"?await this.procBattlePhase():this.phase==="battle2"?await this.procBattlePhase():this.phase==="main2"?await this.procMainPhase():this.phase==="end"&&await this.procEndPhase(),!(this.clock.turn>1e3)););}catch(i){i instanceof $?(this.clock.incrementChainSeq(),console.info(i),this.isEnded=!0,this.winner=i.winner,this.log.info(i.winner?`デュエル終了。勝者${i.winner.profile.name}。${i.message}`:`デュエル終了。引き分け。${i.message}`),this.onDuelEndEvent.trigger()):i instanceof Error&&this.log.error(i)}finally{this.log.dispose()}});s(this,"moveNextPhase",t=>{this.clock.setPhase(this,t),this.phase==="main2"||this.clock.turn===1?this.nextPhaseList=["end"]:this.phase==="battle1"||this.phase==="battle2"?this.nextPhaseList=["main2"]:this.phase==="main1"?this.nextPhaseList=["battle1","end"]:this.nextPhaseList=[]});s(this,"declareAnAttack",(t,i)=>{var r;this.attackingMonster=t,this.targetForAttack=i;let a=" ("+((r=i.battlePosition==="Attack"?i.atk:i.def)==null?void 0:r.toString())+")";i.face==="FaceDown"&&(a=" (????)"),i.entityType==="Duelist"&&(a=""),t.info.attackCount++,this.log.info(`攻撃宣言：${t.toString()} (${t.atk})⇒ ${i.toString()}${a}`,t.controller)});s(this,"procDrawPhase",async()=>{if(Object.values(this.duelists).forEach(t=>t.initForDrawPhase()),this.log.info("ドローフェイズ開始。",this.getTurnPlayer()),this.clock.turn===1)this.log.info("先攻プレイヤーはドローできない。",this.getTurnPlayer());else{await this.getTurnPlayer().draw(1,void 0,void 0);for(const t of this.getEnableActions(this.getTurnPlayer(),["Exodia"],["Normal"],[]))await t.action.directExecute(this.getTurnPlayer(),void 0,!1)}this.field.getCardsOnFieldStrictly().forEach(t=>t.initForTurn()),await this.procSpellSpeed1(),this.moveNextPhase("standby")});s(this,"procStanbyPhase",async()=>{await this.procSpellSpeed1(),this.moveNextPhase("main1")});s(this,"procMainPhase",async()=>{for(;;){this.priorityHolder=this.getTurnPlayer();const t=await this.view.waitFieldAction(this.getEnableActions(this.priorityHolder,["NormalSummon","SpellTrapSet","SpecialSummon","FlipSummon","ChangeBattlePosition","IgnitionEffect","QuickEffect","CardActivation"],["Normal","Quick","Counter"],[]));if(console.info("response",t),t&&t.actionInfo){if([..._a].includes(t.actionInfo.action.playType)){const a=await t.actionInfo.action.prepare(this.priorityHolder,t.actionInfo.dest,void 0,[],!0,!1);if(a===void 0)continue;await t.actionInfo.action.execute(a,this.chainBlockInfos),this.clock.incrementChainSeq()}else if(await this.procChainBlock({activator:this.priorityHolder,actionInfo:t.actionInfo},void 0)==="cancel")continue;await this.procFreeChain();continue}const i=t.phaseChange;if(i){this.priorityHolder=this.getNonTurnPlayer();let a="done";for(;;){const r=await this.view.waitQuickEffect(this.priorityHolder,this.getEnableActions(this.priorityHolder,["QuickEffect","TriggerEffect"],["Quick","Counter"],[]),[],"",!0);if(!r){this.moveNextPhase(i);return}if(a=await this.procChainBlock({activator:this.priorityHolder,actionInfo:r},void 0),a==="done")break}if(a==="done"){await this.procFreeChain();continue}}}});s(this,"procBattlePhase",async()=>{await this.procBattlePhaseStartStep(),await this.procBattlePhaseBattleStep(),await this.procBattlePhaseEndStep()});s(this,"procBattlePhaseStartStep",async()=>{this.clock.setStep(this,"start"),this.priorityHolder=this.getTurnPlayer(),this.attackingMonster=void 0,this.targetForAttack=void 0,await this.procSpellSpeed1()});s(this,"procBattlePhaseBattleStep",async()=>{for(;;){this.clock.setStep(this,"battle"),this.priorityHolder=this.getTurnPlayer();const t=await this.view.waitFieldAction(this.getEnableActions(this.priorityHolder,["Battle"],["Normal"],[]));if(t.phaseChange)break;if(t.actionInfo){const i=await t.actionInfo.action.prepare(this.priorityHolder,t.actionInfo.dest,void 0,[],!0,!1);if(!i)continue;await t.actionInfo.action.execute(i,[]),this.clock.incrementChainSeq();let a=!0;for(;;){const r=this.getNonTurnPlayer().getMonstersOnField().map(l=>[l.seq,l.moveLog.latestRecord.movedAt.totalProcSeq]);if(await this.procFreeChain(),!this.attackingMonster)throw new m("想定されない状態");this.attackingMonster.isOnFieldStrictly?this.attackingMonster.face==="FaceDown"?(this.log.info(`${this.attackingMonster.toString()}が裏側守備表示になったため、戦闘が中断された。`),a=!1):this.attackingMonster.orientation==="Horizontal"&&(this.log.info(`${this.attackingMonster.toString()}が守備表示になったため、戦闘が中断された。`),a=!1):(this.log.info(`${this.attackingMonster.toString()}がフィールドにいなくなったため、戦闘が中断された。`),a=!1);const n=this.getNonTurnPlayer().getMonstersOnField().map(l=>[l.seq,l.moveLog.latestRecord.movedAt.totalProcSeq]);if(r.length!==n.length)throw this.log.info("モンスターの数が増減したためバトルステップの巻き戻しが発生。"),new m("巻き戻し未実装");if(r.some(([l,o])=>n.every(([u,c])=>u!==l||c!==o)))throw this.log.info("モンスターの数が増減したためバトルステップの巻き戻しが発生。"),new m("巻き戻し未実装");break}if(!a)continue;await this.procBattlePhaseDamageStep(i)}}});s(this,"procBattlePhaseDamageStep",async t=>{if(!this.attackingMonster||!this.targetForAttack)throw new m("想定されない状態",this.attackingMonster,this.targetForAttack);if(this.targetForAttack.entityType!=="Duelist"&&!this.targetForAttack.isOnFieldAsMonsterStrictly)throw new m("想定されない状態",this.attackingMonster,this.targetForAttack);await this.procBattlePhaseDamageStep1(),await this.procBattlePhaseDamageStep2(this.attackingMonster,this.targetForAttack),await this.procBattlePhaseDamageStep3(t,this.attackingMonster,this.targetForAttack),await this.procBattlePhaseDamageStep4(),await this.procBattlePhaseDamageStep5()});s(this,"procBattlePhaseDamageStep1",async()=>{this.clock.setStage(this,"start"),await this.procFreeChain()});s(this,"procBattlePhaseDamageStep2",async(t,i)=>{this.clock.setStage(this,"beforeDmgCalc"),(i==null?void 0:i.battlePosition)==="Set"&&i.setBattlePosition("Defense",["Flip","FlipByBattle"],t,t.controller),await this.procFreeChain()});s(this,"procBattlePhaseDamageStep3",async(t,i,a)=>{if(i.atk===void 0)throw new m("想定されない状態",this.attackingMonster,this.targetForAttack);this.clock.setStage(this,"dmgCalc"),await this.procFreeChain();const r=i.atk,n=(a.battlePosition==="Attack"?a.atk:a.def)??0;a.entityType==="Duelist"?(t.activator.writeInfoLog(`ダメージ計算：${i.toString()} (${r}) ⇒ ${a.toString()}`),i.controller.getOpponentPlayer().battleDamage(r-n,i,a,t)):(t.activator.writeInfoLog(`ダメージ計算：${i.toString()} (${r}) ⇒ ${a.toString()} (${n})`),r>0&&r>n?a.battlePosition==="Attack"?i.controller.getOpponentPlayer().battleDamage(r-n,i,a,t):i.status.piercingTo.forEach(o=>o.battleDamage(r-n,i,a,t)):r<n&&i.controller.battleDamage(n-r,a,i,t),r>0&&(r>n||r===n&&a.battlePosition==="Attack")&&await v.tryMarkForDestory([a],t),a.battlePosition==="Attack"&&r<=n&&await v.tryMarkForDestory([i],t)),i.info.battleLog.push({enemy:a,timestamp:this.clock.getClone()}),a.info.battleLog.push({enemy:i,timestamp:this.clock.getClone()});const l=Object.values(this.duelists).filter(o=>o.lp<=0);if(l.length)throw l.length===1?new $(l[0].getOpponentPlayer(),"戦闘ダメージによって、相手のライフポイントをゼロにした。"):new $(void 0,"戦闘ダメージによって、お互いのライフポイントがゼロになった。")});s(this,"procBattlePhaseDamageStep4",async()=>{this.clock.setStage(this,"afterDmgCalc"),await this.procFreeChain()});s(this,"procBattlePhaseDamageStep5",async()=>{this.clock.setStage(this,"end"),await v.waitCorpseDisposal(this),this.clock.incrementChainSeq(),await this.procFreeChain()});s(this,"procBattlePhaseEndStep",async()=>{this.clock.setStep(this,"end"),this.priorityHolder=this.getTurnPlayer(),await this.procSpellSpeed1(),this.moveNextPhase("main2")});s(this,"procEndPhase",async()=>{for(await this.procSpellSpeed1();;){const i=this.getTurnPlayer().getHandCell().cardEntities.length;if(i<7)break;await this.getTurnPlayer().discard(i-6,["Rule"])}this.moveNextPhase("draw")});s(this,"procSpellSpeed1",async()=>{this.priorityHolder=this.getTurnPlayer();let t=0;const i={Above:Number.MAX_VALUE,Below:Number.MAX_VALUE};for(;Object.values(i).some(a=>a!==0);){const a=this.getEnableActions(this.priorityHolder,["IgnitionEffect","QuickEffect","CardActivation","LingeringEffect"],["Normal","Quick","Counter"],[]);i[this.priorityHolder.seat]=a.filter(o=>o.action.isMandatory).length;const r=a.find(o=>o.action.isMandatory);let n=r?{action:r.action,originSeq:r.action.seq}:void 0,l=!n;if(this.priorityHolder.isTurnPlayer?t===0&&(l=!0):i[this.priorityHolder.getOpponentPlayer().seat]>=0&&(l=!0),a.length&&(a.length>1||!n)&&(n=await this.view.waitQuickEffect(this.priorityHolder,a,[],l?"":"まだ発動しなければならない効果が残っている。",l)),n){if(Xe.some(o=>o===n.action.playType))await this.procChainBlock({activator:this.priorityHolder,actionInfo:n},void 0);else{console.log(n.dest);const o=await n.action.prepare(this.priorityHolder,n.dest,void 0,[],!0,!1);if(!o)continue;await n.action.execute(o,[]),await n.action.settle(o,[]),this.clock.incrementChainSeq()}await this.procFreeChain(),this.priorityHolder=this.getTurnPlayer(),t=0;continue}this.priorityHolder=this.priorityHolder.getOpponentPlayer(),t++}});s(this,"procFreeChain",async()=>{for(;await this.procChainBlock(void 0,void 0)!=="pass";);});s(this,"procChainBlock",async(t,i)=>{const a=this.chainBlockInfos.length===0;let r=t?[]:i??Object.values(this.duelists).flatMap(l=>this.getEnableActions(l,["TriggerEffect"],[this.chainBlockInfos.length?"Quick":"Normal"],this.chainBlockInfos).map(o=>({activator:l,actionInfo:o,targetChainBlock:this.chainBlockInfos.slice(-1)[0]}))),n;if(t)n={activator:t.activator,action:t.actionInfo.action,dest:t.actionInfo.dest,targetChainBlock:void 0},this.priorityHolder=n.activator;else if(r.length>0){const l=await this.selectTriggerEffect(r);l?(r=r.filter(o=>o!==l),n={...l,action:l.actionInfo.action},this.priorityHolder=n.activator):r=[]}if(!n){let l=0;for(;l<2;){this.priorityHolder=this.priorityHolder.getOpponentPlayer();const o=["Counter"];this.chainBlockInfos.every(d=>d.action.spellSpeed!=="Counter")&&o.push("Quick");const u=this.chainBlockInfos.length?"※メッセージ考え中※":"クイックエフェクト発動タイミング。効果を発動しますか？",c=await this.view.waitQuickEffect(this.priorityHolder,this.getEnableActions(this.priorityHolder,["QuickEffect","CardActivation"],o,this.chainBlockInfos),this.chainBlockInfos,u,!0);if(c){n={...c,activator:this.priorityHolder,targetChainBlock:this.chainBlockInfos.slice(-1)[0]};break}l++}}if(console.info("selected action: ",n),n){const l=n.activator;console.log(n.dest);const o=await n.action.prepare(l,n.dest,n.targetChainBlock,this.chainBlockInfos,a,!1);if(!o)return"cancel";this.chainBlockLog.push(o);const u=[...o.action.entity.info.isEffectiveIn];if(this._chainBlockInfos.push(o),this.clock.incrementProcSeq(),this.clock.incrementChainBlockSeq(),r=r.filter(c=>c.actionInfo.action.seq!==(n==null?void 0:n.action.seq)).filter(c=>c.actionInfo.action.validateCount(c.activator,this.chainBlockInfos)),await this.procChainBlock(void 0,r.length?r:void 0),o.chainNumber&&this.log.info(`チェーン${o.chainNumber}: ${o.action.toString()}の効果処理。`,l),o.isNegatedActivationBy)o.chainNumber&&this.log.info(`チェーン${o.chainNumber}: ${o.action.toString()}を${o.isNegatedActivationBy.toString()}によって発動を無効にした。`,o.activator);else{let c=o.action.entity.isEffective,d="";if(c){if(o.isNegatedEffectBy)d=`チェーン${o.chainNumber}: ${o.action.toString()}を${o.isNegatedEffectBy.toString()}によって効果を無効にした。`,c=!1;else if(!u.includes(o.isActivatedIn.cellType)){const p=o.action.entity.moveLog.records.findLast(h=>h.face==="FaceDown"&&h.orientation==="Horizontal");c=(p&&this.clock.isSameChain(p.movedAt))??!1}}if(c?(await o.action.execute(o,this.chainBlockInfos),o.state="done"):(o.state="failed",o.chainNumber&&(d=d||`チェーン${o.chainNumber}: カードの効果が無効となっているため${o.action.toString()}の効果処理を行えない。`),this.log.info(d,o.activator)),await n.action.settle(o,this.chainBlockInfos),o.state==="done")for(const p of[this.getTurnPlayer(),this.getNonTurnPlayer()]){for(const h of this.getEnableActions(p,["Exodia"],["Normal"],[o]))await h.action.directExecute(p,o,!1);for(const h of this.getEnableActions(p,["AfterChainBlock"],["Normal"],[o])){await h.action.directExecute(p,o,!1);for(const g of this.getEnableActions(p,["Exodia"],["Normal"],[o]))await g.action.directExecute(p,o,!1)}}}a?(await v.sendManyToGraveyardForTheSameReason(this._chainBlockInfos.filter(c=>c.action.playType==="CardActivation").filter(c=>!c.action.isLikeContinuousSpell).map(c=>c.action.entity).filter(c=>c.isOnFieldStrictly).filter(c=>c.face==="FaceUp"),["Rule"],void 0,void 0),this._chainBlockInfos.reset(),o.nextActionInfo&&await this.procChainBlock({activator:o.activator,actionInfo:o.nextActionInfo},void 0),this.clock.incrementChainSeq()):(o.nextActionInfo&&await o.nextActionInfo.action.directExecute(o.activator,void 0,!1),this.clock.incrementChainBlockSeq())}return n?"done":"pass"});s(this,"selectTriggerEffect",async t=>{if(t.length>0)for(const i of[!0,!1])for(const a of[this.getTurnPlayer(),this.getNonTurnPlayer()]){const r=t.filter(l=>l.actionInfo.action.isMandatory===i&&l.activator===a);if(r.length===0)continue;if(r.length===1&&i)return r[0];const n=await this.view.waitQuickEffect(a,r.map(l=>l.actionInfo),this.chainBlockInfos,"トリガーエフェクトを選択。",!i);if(n)return r.find(l=>l.actionInfo.action===n.action)}});s(this,"executeSystemPeriodActions",()=>{Object.values(this.duelists).flatMap(t=>this.getEnableActions(t,["SystemPeriodAction"],["Normal"],[]).map(i=>({duelist:t,action:i})))});s(this,"getEnableActions",(t,i,a,r)=>{var l;const n=((l=r.slice(-1)[0])==null?void 0:l.nextChainBlockFilter)??(()=>!0);return[...this.field.getAllCardEntities(),t.entity].flatMap(o=>o.actions).filter(o=>o.executableCells.includes(o.entity.fieldCell.cellType)).filter(o=>o.executablePeriods.includes(this.clock.period.key)).filter(o=>a.includes(o.spellSpeed)).filter(o=>o.validateDuelist(t)).filter(o=>i.includes(o.playType)).filter(o=>n(t,o)).map(o=>o.validate(t,r,!1)).filter(o=>o!==void 0)});this.clock=new Ca,this.nextPhaseList=[],this.isEnded=!1,this.startMode=c,this.duelists={Below:new Ee(this,"Below",t,i,a,r),Above:new Ee(this,"Above",n,l,o,u)},this.priorityHolder=this.firstPlayer,this._chainBlockInfos=[],this.field=new da(this),this.clock.onProcSeqChange.append(this.distributeOperators),this.clock.onStageChange.append(this.executeSystemPeriodActions),this.view=new Sa(this),this.log=new pa(this),this.chainBlockLog=new Ta(this)}get onDuelEnd(){return this.onDuelEndEvent.expose()}get phase(){return this.clock.period.phase}get step(){return this.clock.period.step}get stage(){return this.clock.period.stage}get chainBlockInfos(){return this._chainBlockInfos}get firstPlayer(){return this.coin?this.duelists.Below:this.duelists.Above}get secondPlayer(){return this.coin?this.duelists.Above:this.duelists.Below}}const G=class G{constructor(t){s(this,"id");s(this,"name");s(this,"description");s(this,"previousNpcId");s(this,"previousNpcDeckId");s(this,"previousStartMode");s(this,"save",async t=>{console.log(this.previousNpcDeckId,Number.MIN_SAFE_INTEGER);const i=t??{id:this.id,name:this.name,description:this.description,previousNpcId:this.previousNpcId,previousStartMode:this.previousStartMode,previousNpcDeckId:this.previousNpcDeckId>-1?this.previousNpcDeckId:Number.MIN_SAFE_INTEGER};console.log(this.previousNpcDeckId,Number.MIN_SAFE_INTEGER,i);const a=await G.tblHeader.update(this.id,r=>({...r,...i}));return console.log(this.previousNpcDeckId,Number.MIN_SAFE_INTEGER,i,a),new G(a)});var i;this.id=t.id,this.name=t.name,this.description=t.description,this.previousNpcId=((i=ot.find(a=>a.id===t.previousNpcId))==null?void 0:i.id)??He(...ot.map(a=>a.id)),this.previousStartMode=wa.includes(t.previousStartMode)?t.previousStartMode:"Random",this.previousNpcDeckId=t.previousNpcDeckId}get npcLvl(){return Number.MAX_VALUE}};s(G,"tblHeader"),s(G,"getOrCreateNew",async t=>{G.tblHeader||(G.tblHeader=new Ea(t));const i=await G.tblHeader.getAll();if(i.length)return console.log(i[0].previousNpcDeckId),new G(i[0]);const a=await G.tblHeader.insert({name:"あなた",description:"ここの文字列を何に使うかは未定。",previousNpcId:0,previousNpcDeckId:Number.MIN_SAFE_INTEGER,previousStartMode:"Random"});return new G(a)});let lt=G;class Ea extends Qe{constructor(i){super(i,"TblDuelistProfile");s(this,"_prepareInitialRecords",()=>[])}}let Oe=-1;const ot=[{id:Oe--,name:"サンドバッグくん棒立ち",description:"攻撃宣言なし、強制効果以外の効果の発動なし。",npcLvl:0},{id:Oe--,name:"サンドバッグくん非暴力",description:"攻撃宣言なし。",npcLvl:100},{id:Oe--,name:"サンドバッグくん白帯",description:"とくに制限なし。",npcLvl:200}],Pe=class Pe{constructor(t,i,a,r,n,l=[]){s(this,"duel");s(this,"seat");s(this,"profile");s(this,"deckInfo");s(this,"info");s(this,"infoOrigin");s(this,"status");s(this,"statusOrigin");s(this,"duelistType");s(this,"lifeLog");s(this,"actionBlackListForNPC");s(this,"_lp");s(this,"initHand");s(this,"writeInfoLog",t=>{this.duel.log.info(t,this)});s(this,"initForDrawPhase",()=>{this.info={...this.infoOrigin}});s(this,"canDiscard",t=>(this.status.canDiscardAsCost&&console.log(t),!0));s(this,"canSendToGraveyard",t=>(console.log(t),!0));s(this,"canRelease",t=>(console.log(t),!0));s(this,"canTryBanish",(t,i,a)=>this.entity.procFilterBundle.effectiveOperators.filter(r=>r.procTypes.includes(i)).every(r=>r.filter(this,this.entity,a,[t])));s(this,"battleDamage",(t,i,a,r)=>{const n=sa(t,r.activator,this,i,a,r.action);return this.damage(i,n)});s(this,"effectDamage",(t,i)=>{const a=na(t,i,this);return this.damage(i.action.entity,a)});s(this,"damage",(t,i)=>{const a=[];if(i.point){const r=i.damageType==="Heal"?i.point:i.point*-1;a.push(this.setLp(this._lp+r,t,i.damageType))}return i.damageToOpponent1&&a.push(this.getOpponentPlayer().setLp(this._lp-i.damageToOpponent1,t,i.damageType)),i.damageToOpponent2&&a.push(this.getOpponentPlayer().setLp(this._lp-i.damageToOpponent2,t,i.damageType)),a});s(this,"lostLp",(t,i)=>this.setLp(this._lp-t,i,"Lost"));s(this,"payLp",(t,i)=>this.setLp(this._lp-t,i,"Pay"));s(this,"heal",(t,i)=>this.setLp(this._lp+t,i,"Heal"));s(this,"setLp",(t,i,a)=>{const r={clock:this.duel.clock.getClone(),reason:a||"Set",beforeLp:this._lp,afterLp:t,entity:i};return this.lifeLog.push(r),this._lp=t,this.writeInfoLog(`ライフポイント変動：${r.afterLp-r.beforeLp}（${r.beforeLp} ⇒ ${r.afterLp}）`),r});s(this,"getOpponentPlayer",()=>this.duel.firstPlayer===this?this.duel.secondPlayer:this.duel.firstPlayer);s(this,"getHandCell",()=>this.duel.field.getCells("Hand").filter(t=>t.owner===this)[0]);s(this,"getDeckCell",()=>this.duel.field.getCells("Deck").filter(t=>t.owner===this)[0]);s(this,"getExtraDeck",()=>this.duel.field.getCells("ExtraDeck").filter(t=>t.owner===this)[0]);s(this,"getGraveyard",()=>this.duel.field.getCells("Graveyard").filter(t=>t.owner===this)[0]);s(this,"getFieldZone",()=>this.duel.field.getCells("FieldSpellZone").filter(t=>t.owner===this)[0]);s(this,"getBanished",()=>this.duel.field.getCells("Banished").filter(t=>t.owner===this)[0]);s(this,"getMonsterZones",()=>this.duel.field.getCells("MonsterZone").filter(t=>t.owner===this));s(this,"getExtraMonsterZones",()=>this.duel.field.getCells("ExtraMonsterZone").filter(t=>{var i;return((i=t.cardEntities[0])==null?void 0:i.controller)===this}));s(this,"getSpellTrapZones",()=>this.duel.field.getCells("SpellAndTrapZone").filter(t=>t.owner===this));s(this,"getXyzMaterialZone",()=>this.duel.field.getCells("XyzMaterialZone").filter(t=>t.owner===this)[0]);s(this,"getEmptyMonsterZones",()=>this.getMonsterZones().filter(t=>t.cardEntities.length===0));s(this,"getEmptyExtraZones",()=>this.getExtraMonsterZones().length===0?this.getMonsterZones().filter(t=>t.cardEntities.length===0):[]);s(this,"getAvailableMonsterZones",()=>this.getMonsterZones().filter(t=>t.isAvailable));s(this,"getAvailableExtraZones",()=>this.getExtraMonsterZones().length===0?this.duel.field.getCells("ExtraMonsterZone").filter(t=>t.isAvailable):[]);s(this,"getAvailableSpellTrapZones",()=>this.getSpellTrapZones().filter(t=>t.isAvailable));s(this,"getMonstersOnField",()=>this.duel.field.getMonstersOnFieldStrictly().filter(t=>t.controller===this));s(this,"getSpellTrapsOnField",()=>this.duel.field.getSpellTrapsOnFieldStrictly().filter(t=>t.controller===this));s(this,"getPendingMonstersOnField",()=>this.duel.field.getPendingMonstersOnField().filter(t=>t.controller===this));s(this,"getPendulumScaleMonsters",()=>this.duel.field.getCardsOnFieldStrictly().filter(t=>t.isPendulumScale).filter(t=>t.controller===this));s(this,"getPendulumScales",()=>{const t=this.getPendulumScaleMonsters();if(t.length<2)return;const i=t.find(l=>l.fieldCell.column===(this.seat==="Below"?1:5)),a=t.find(l=>l.fieldCell.column===(this.seat==="Below"?5:1));if(!i||!a)throw new m("想定されない状態",t);const r=i.psR,n=a.psL;if(r===void 0||n===void 0)throw new m("想定されない状態",t);return r>n?{upperBound:r,lowerBound:n}:{upperBound:n,lowerBound:r}});s(this,"getEntiteisOnField",()=>this.duel.field.getCardsOnFieldStrictly().filter(t=>t.controller===this));s(this,"pushDeck",t=>{this.deckInfo.cardNames.map(i=>t[i]).filter(i=>i).forEach(i=>k.createCardEntity(this,i)),this.duel.log.info(`デッキをセット。メイン${this.getDeckCell().cardEntities.length}枚。エクストラ${this.getExtraDeck().cardEntities.length}枚。`,this)});s(this,"draw",async(t,i,a)=>{var l;if(t<1)return;const r=this.getDeckCell(),n=[];this.writeInfoLog(`デッキからカードを${t}枚ドロー。`);for(const o of Array(t)){if(!r.cardEntities.length)throw this.writeInfoLog(n.length>0?`デッキからカードを${t}枚ドローしようとしたが、${n.length}枚しかドローできなかった。${n}`:"デッキからカードをドローできなかった。"),this.duel.isEnded=!0,this.setLp(0),new $(this.getOpponentPlayer(),"対戦相手がデッキからカードをドローできなかった。");const u=r.cardEntities[0];await u.draw(i?["Effect"]:["Rule"],i,a),n.push(((l=u.origin)==null?void 0:l.name)||"!名称取得失敗!")}});s(this,"summon",async(t,i,a,r,n,l,o,u)=>(await this.summonMany(this,t,i,a,[{monster:r,posList:n,cells:l}],o,!1,1,d=>d.length===1,u)??[])[0]);s(this,"waitSelectEntities",(t,i,a,r,n=!1)=>this.duel.view.waitSelectEntities(this,{selectables:t,qty:i,validator:a,cancelable:n},r));s(this,"waitSelectEntity",async(t,i,a=!1)=>{const r=await this.waitSelectEntities(t,1,n=>n.length===1,i,a);return r?r[0]:void 0});s(this,"waitSelectText",(t,i,a=!1)=>this.duel.view.waitSelectText(this,t,i,a));s(this,"discard",async(t,i,a,r,n,l)=>{const o=n||(()=>!0),u=this.getHandCell().cardEntities.filter(o);if(u.length<t)return[];let c=[];return(r||this).duelistType==="NPC"?c=u.randomPickMany(t):c=await this.duel.view.waitSelectEntities(r||this,{selectables:u,qty:t,validator:d=>d.length===t,cancelable:!1},`${t}枚カードを捨てる。`)||[],this.writeInfoLog(`手札からカードを${c.length}枚捨てた。${c.map(d=>{var p;return(p=d.origin)==null?void 0:p.name})}。`),await v.discardManyForTheSameReason(c,["Discard",...i],a,l),c});s(this,"getEnableSummonList",(t,i,a,r,n,l,o)=>{const u=this.duel.field.getCells("ExtraMonsterZone"),c=u.filter(p=>!l.map(h=>h.material).includes(p.cardEntities[0])).filter(p=>p.owner===this),d=[];return c.length&&d.push(...u.filter(p=>!c.includes(p)).filter(p=>p.isAvailable)),n.map(p=>({...p,summoner:this})).map(p=>{var h;return(i!=="LinkSummon"||!this.duel.field.canExtraLink(p.monster,l))&&(p.cells=p.cells.filter(g=>!d.includes(g))),(h=p.monster.status.monsterCategories)!=null&&h.includes("Link")&&(p.posList=p.posList.filter(g=>g==="Attack")),p}).map(p=>({...p,cells:p.cells.filter(h=>h.cardEntities.length===0||l.some(g=>g.material===h.cardEntities[0]))})).map(p=>{var h,g;if(p.monster.fieldCell.cellType==="ExtraDeck"){if((h=p.monster.status.monsterCategories)!=null&&h.includes("Link")||(g=p.monster.status.monsterCategories)!=null&&g.includes("Pendulum"))return{...p,cells:p.cells.filter(y=>y.cellType==="ExtraMonsterZone"||y.linkArrowSources.filter(M=>!l.map(f=>f.material).includes(M)).length)}}else return{...p,cells:p.cells.filter(y=>y.cellType!=="ExtraMonsterZone")};return p}).filter(p=>p.cells.length&&p.posList.length).map(p=>this.entity.summonFilterBundle.filter(t,i,a,r,p,l,o)).filter(p=>p.cells.length&&p.posList.length).map(p=>p.monster.summonFilterBundle.filter(t,i,a,r,p,l,o)).filter(p=>p.cells.length&&p.posList.length).map(p=>l.map(h=>h.material.summonFilterBundle).reduce((h,g)=>g.filter(t,i,a,r,h,l,o),p)).filter(p=>p.cells.length&&p.posList.length)});s(this,"prepareToSummonMany",async(t,i,a,r,n,l,o,u,c,d,p="特殊召喚するモンスターを選択。")=>{const h=this.getEnableSummonList(t,i,a,r,n,l,o);if(!h.length)return[];let g=h.map(M=>M.monster);(n.length!==1||c([]))&&(g=await this.duel.view.waitSelectEntities(this,{selectables:g,qty:u,validator:c,cancelable:d},p)??[]);const y=[];for(const M of h.filter(f=>g.includes(f.monster))){const f=M.cells.filter(Z=>!y.map(bi=>bi.dest).includes(Z));if(!f.length)continue;let x=[...M.posList].randomPick(),N=f.randomPick();if((f.length>1||M.posList.length>1)&&this.duelistType!=="NPC"){const Z=await this.duel.view.waitSelectSummonDestination(M.summoner,M.monster,f,M.posList,d);if(!Z)return[];N=Z.dest,x=Z.battlePosition}y.push({summoner:this,monster:M.monster,pos:x,dest:N})}return y});s(this,"summonAll",(t,i,a,r,n,l,o,u,c)=>this.summonMany(t,i,a,r,n,l,o,n.length,d=>d.length===n.length,u,c));s(this,"summonOne",async(t,i,a,r,n,l,o,u,c)=>{const d=await this.summonMany(t,i,a,r,n,l,o,1,p=>p.length===1,u,c);if(d)return d[0]});s(this,"summonMany",(t,i,a,r,n,l,o,u,c,d,p)=>Pe.summonMany(t,i,a,r,n.map(h=>({...h,summoner:this})),l,o,u,c,d,p));s(this,"selectAttackTargetForNPC",(t,i)=>{const a=t.atk??0,r=t.getAttackTargets();if(!r.length)return;const n=r.find(l=>l.entityType==="Duelist");return n&&(a>=He(1600,this.getOpponentPlayer().lp)||t.info.battlePotisionChangeCount>0)?n:r.find(l=>l.battlePosition==="Attack"?a>=(l.atk??0):a<(l.battlePosition==="Set"?1e3:l.def??0)?!1:l.validateDestory("BattleDestroy",this,t,i))});s(this,"selectActionForNPC",(t,i)=>{if(!t.length)return;const a=t.filter(f=>f.action.isMandatory);if(a.length)return a.randomPick();let r=t.filter(f=>!this.actionBlackListForNPC.includes(f.action.playType));console.log(r);const n=r.filter(f=>!Number.isNaN(f.action.priorityForNPC)).shuffle().sort((f,x)=>f.action.priorityForNPC-x.action.priorityForNPC);if(n.length)return n[0];const l=r.filter(f=>f.action.playType==="TriggerEffect");if(l.length)return l.randomPick();if(this.duel.phase!=="main1"&&this.duel.phase!=="main2"){const f=r.filter(x=>x.action.playType==="IgnitionEffect");if(f.length)return f.randomPick()}const o=r.filter(f=>f.action.playType==="Battle").sort((f,x)=>(f.action.entity.atk??0)-(x.action.entity.atk??0));if(o.length)return o.find(f=>this.selectAttackTargetForNPC(f.action.entity,f.action));r=r.filter(f=>f.action.playType!=="Battle");const u=r.length?i.slice(-1)[0]:void 0,c=r.filter(f=>f.action.negatePreviousBlock);if(u&&u.activator!==this&&c)return c.randomPick();if(r=r.filter(f=>!f.action.negatePreviousBlock),!r.length)return;const d=Te(...this.getOpponentPlayer().getMonstersOnField().filter(f=>f.battlePosition==="Attack").map(f=>f.atk??0),1600),p=He(...this.getOpponentPlayer().getMonstersOnField().map(f=>f.battlePosition==="Set"?1500:(f.battlePosition==="Attack"?f.atk:f.def)??0),1500),h=this.getMonstersOnField(),g=Te(...h.filter(f=>f.battlePosition==="Attack").map(f=>f.atk??0),0);let y=r.filter(f=>f.action.playType!=="ChangeBattlePosition").filter(f=>f.action.entity.battlePosition!=="Attack").filter(f=>(f.action.entity.atk??0)>=d||(f.action.entity.atk??0)>p&&(f.action.entity.atk??0)>2300);if(y.length)return y.randomPick();r=r.filter(f=>f.action.playType!=="ChangeBattlePosition").filter(f=>f.action.playType!=="SpellTrapSet").filter(f=>f.action.entity.actions.filter(x=>x.playType!=="NormalSummon"&&x.playType!=="SpecialSummon").flatMap(x=>x.executableCells).every(x=>x!=="Hand")||f.action.playType!=="NormalSummon"&&f.action.playType!=="SpecialSummon");const M=[...r.filter(f=>f.action.playType==="NormalSummon").filter(f=>(f.action.entity.lvl??12)<5),...r.filter(f=>f.action.playType==="SpecialSummon"),...r.filter(f=>f.action.playType==="NormalSummon").filter(f=>(f.action.entity.atk??0)>2600||(f.action.entity.atk??0)>2300&&(f.action.entity.lvl??12)<7).filter(f=>(f.action.entity.atk??0)>=g),...r.filter(f=>f.action.entity.face==="FaceUp").filter(f=>f.action.entity.isOnFieldStrictly)];if(M.length)return M.randomPick();if(r=r.filter(f=>f.action.playType!=="NormalSummon").filter(f=>f.action.playType!=="SpecialSummon"),this.duel.phase==="main2"){if(y=t.filter(f=>f.action.playType==="ChangeBattlePosition").filter(f=>f.action.entity.battlePosition==="Attack").filter(f=>(f.action.entity.atk??0)<d||(f.action.entity.atk??0)>p&&(f.action.entity.atk??0)>2300),y.length)return y.randomPick();if(this.getAvailableSpellTrapZones.length>1)return t.filter(f=>f.action.playType==="SpellTrapSet").filter(f=>f.action.entity.kind!=="Spell"||f.action.entity.status.spellCategory==="QuickPlay").randomPick()}if(console.log(r),Math.random()<r.length/4)return r.randomPick()});this.duel=t,this.seat=i,this.profile=a,this.duelistType=r,this.deckInfo=n,this.initHand=l,this.lifeLog=[],this.infoOrigin={maxRuleNormalSummonCount:1,ruleNormalSummonCount:0,ruleNormalSummonCountQty:0,effectNormalSummonCount:0,effectNormalSummonCountQty:0,specialSummonCount:0,specialSummonCountQty:0},this.info={...this.infoOrigin},this.statusOrigin={maxSpecialSummonCount:Number.MAX_VALUE,canDrawByEffect:!0,canSearchFromDeck:!0,canDiscardAsCost:!0,canDiscardAsEffect:!0},this.status={...this.statusOrigin},this._lp=8e3;const o=[];this.duelistType==="NPC"&&(this.profile.npcLvl<1&&o.push("CardActivation","IgnitionEffect","TriggerEffect","QuickEffect"),this.profile.npcLvl<101&&o.push("Battle")),this.actionBlackListForNPC=o}get entity(){const t=this.getHandCell().entities.find(i=>i.entityType==="Duelist");return t||k.createPlayerEntity(this)}get lp(){return this._lp}get isTurnPlayer(){return this.duel.getTurnPlayer()===this}get canDraw(){return!0}get canAddToHandFromDeck(){return!0}};s(Pe,"summonMany",async(t,i,a,r,n,l,o,u,c,d,p="特殊召喚するモンスターを選択。")=>{const h=n.map(y=>y.summoner).getDistinct(),g=[];for(const y of h){const M=await y.prepareToSummonMany(t,i,a,r,n.filter(f=>f.summoner===y),l,o,u,c,d,p);g.push(...M)}if(g.length)return g.forEach(y=>y.monster.info.materials.reset(...l)),await v.moveToXyzOwner(g[0].dest,l.map(y=>y.material).filter(y=>y.kind==="XyzMaterial"),["XyzMaterial","Rule"],g[0].monster,t),await k.summonMany(g,i,a,r.entity,t),g.map(y=>y.monster)});let Ee=Pe;const ba=["NormalSummon","SpecialSummon","FlipSummon"],Xe=["IgnitionEffect","TriggerEffect","QuickEffect","CardActivation"],_a=["ChangeBattlePosition","Battle","SpellTrapSet","LingeringEffect"],ka=e=>e==="CardActivation"?"CardActivation":Xe.some(t=>t===e)?"EffectActivation":"NonActivate",ct=["NormalSummon","AdvanceSummon","SpecialSummon","SpecialSummonFromDeck","SendToGraveyardFromDeck","Draw","SearchFromDeck","BanishFromDeck","BanishFromGraveyard","AddToHandFromGraveyard","ReturnToDeckFromGraveyard","SpecialSummonFromGraveyard","SpecialSummonFromBanished","ReturnToHandFromGraveyard","ReturnToHandFromField","BanishFromField","BanishFromHand","Destroy","DestroyMultiple","DestroyOnField","DestroyMultipleOnField","DestroyOnOpponentField","DestroyMultipleOnOpponentField","DestroyMonsterOnField","DestroyMonstersOnField","DestroySpellTrapOnField","DestroySpellTrapsOnField","SpecialSummonFromHand","SpecialSummonFromExtraDeck","IfNormarlSummonSucceed","IfSpecialSummonSucceed","DamageToOpponent","DamageToSelf","PayLifePoint","DiscordAsCost","DiscordAsEffect","RollDice","BounceToHand","NegateCardEffect","NegateCardActivation","NegateNormalSummon","NegateSpecialSummon"],Y=class Y extends we{constructor(i,a,r,n){super(i,a,r);s(this,"toString",()=>this.isWithChainBlock&&this.playType!=="CardActivation"?`${this.entity.toString()}の«${this.title}»`:`${this.entity.toString()}の${this.title}`);s(this,"addhocMaterialLimitation");s(this,"getClone",i=>new Y(this.seq,this.entity,this.definition,i));s(this,"getEnableMaterialPatterns",i=>{var a,r;return((r=(a=this.definition).getEnableMaterialPatterns)==null?void 0:r.call(a,i).filter(this.addhocMaterialLimitation))??[]});s(this,"validateCount",(i,a)=>{const r=a.filter(l=>this.isSameGroup(l.action)).length;if(this.isOnlyNTimesPerDuel>0&&this.entity.field.duel.chainBlockLog.records.filter(l=>!l.chainBlockInfo.isNegatedActivationBy).filter(l=>this.isSameGroup(l.chainBlockInfo.action)).filter(l=>l.chainBlockInfo.activator===i).length+r>=this.isOnlyNTimesPerDuel||this.isOnlyNTimesPerTurn>0&&this.entity.field.duel.chainBlockLog.records.filter(l=>!l.chainBlockInfo.isNegatedActivationBy).filter(l=>this.isSameGroup(l.chainBlockInfo.action)).filter(l=>l.clock.turn===this.entity.field.duel.clock.turn).filter(l=>l.chainBlockInfo.activator===i).length+r>=this.isOnlyNTimesPerTurn||this.isOnlyNTimesPerChain>0&&r>=this.isOnlyNTimesPerChain)return!1;const n=r+this.entity.counterHolder.getActionCount(this);return!(this.isOnlyNTimesPerTurnIfFaceup>0&&n>=this.isOnlyNTimesPerTurnIfFaceup||this.isOnlyNTimesIfFaceup>0&&n>=this.isOnlyNTimesIfFaceup)});s(this,"validate",(i,a,r)=>{if(this.playType==="CardActivation"&&this.entity.isOnFieldStrictly&&this.entity.face==="FaceUp"||this.isWithChainBlock&&!this.entity.status.canActivateEffect||r&&this.needsToPayCost||!this.validateCount(i,a))return;const n=Te(0,...a.map(u=>u.chainNumber??-1)),l={index:a.length,chainNumber:this.isWithChainBlock?n+1:void 0,action:this,activator:i,targetChainBlock:a.slice(-1)[0],isActivatedIn:this.entity.fieldCell,isActivatedAt:this.duel.clock.getClone(),costInfo:{},state:"unloaded",dest:void 0,ignoreCost:!1};if(this.definition.canPayCosts&&!r&&!this.definition.canPayCosts(l,this.playType==="AfterChainBlock"?[]:a))return;const o=this.definition.validate(l,this.playType==="AfterChainBlock"?[]:a);if(o)return{action:this,dests:o,originSeq:this.seq}});s(this,"prepare",async(i,a,r,n,l,o)=>{var y,M;let u=l;this.isLikeContinuousSpell&&(this.entity.info.isPending=!0);const c=this.isWithChainBlock?Te(0,...n.map(f=>f.chainNumber??-1))+1:void 0;let d="";if(c!==void 0&&(d+=`チェーン${c}: `),this.playType==="CardActivation"||this.playType==="SpellTrapSet")if(this.entity.fieldCell.cellType==="Hand"){let f=a?[a]:this.entity.status.spellCategory==="Field"?[i.getFieldZone()]:i.getAvailableSpellTrapZones();if(this.entity.status.spellCategory==="Field"){const N=i.getFieldZone().cardEntities;if(N.length){const Z=N[0];await v.sendManyToGraveyardForTheSameReason(i.getFieldZone().cardEntities,["Rule"],this.entity,i),i.writeInfoLog(`フィールド魔法の上書きにより、${Z.toString()}は墓地に送られた。`),u=!1}}(y=this.entity.status.monsterCategories)!=null&&y.includes("Pendulum")&&(f=f.filter(N=>N.isAvailableForPendulum));let x=f[0];if(f.length>1){x=f.randomPick();const N=this.playType==="SpellTrapSet"?"セット":"カードの発動",Z=await this.duel.view.waitSelectDestination(i,this.entity,f,"カードを移動先へドラッグ",N,u);if(!Z)return;x=Z}d+="手札から",this.playType==="SpellTrapSet"?d+="魔法・罠カードをセット。":d+=`${this.entity.toString()}を発動。`,i.writeInfoLog(d),(M=this.entity.status.monsterCategories)!=null&&M.includes("Pendulum")?await this.entity.activateAsPendulumScale(x,["CardActivation"],this.entity,i):this.playType==="CardActivation"?await this.entity.activateSpellTrapFromHand(x,this.entity.kind,["CardActivation"],this.entity,i):await this.entity.setAsSpellTrap(x,this.entity.kind,["SpellTrapSet"],this.entity,i),u=!1}else this.entity.isOnField&&this.entity.face==="FaceDown"&&(d+=`セットされていた${this.entity.toString()}を発動。`,i.writeInfoLog(d),await this.entity.setNonFieldMonsterPosition(this.entity.origin.kind,"FaceUp",["Rule"]),u=!1);else c!==void 0&&(d+=`${this.toString()}を発動。`,i.writeInfoLog(d));const p={index:n.length,chainNumber:c,action:this,activator:i,targetChainBlock:r,isActivatedIn:this.entity.fieldCell,isActivatedAt:this.duel.clock.getClone(),costInfo:{},state:"ready",dest:a,ignoreCost:!1};if(console.log(this.definition.payCosts,o),this.definition.payCosts&&!o){const f=await this.definition.payCosts(p,n,u);if(!f)return;p.costInfo=f,u=!1}const h=await this.definition.prepare(p,n,u);if(h===void 0)return;const g={...h};if(ba.some(f=>f===this.playType)){const f=h.nextChainBlockFilter??(()=>!0);g.nextChainBlockFilter=(x,N)=>N.negateSummon&&f(x,N)}return{...p,...g}});s(this,"execute",async(i,a)=>{if(i.action.isLikeContinuousSpell&&!i.action.entity.isOnField)return this.entity.info.isPending=!1,!1;const r=await this.definition.execute(i,a);return this.entity.determine(),r});s(this,"settle",(i,a)=>(this.isOnlyNTimesPerTurnIfFaceup>0?this.entity.counterHolder.incrementActionCountPerTurn(this):this.isOnlyNTimesIfFaceup>0&&this.entity.counterHolder.incrementActionCount(this),this.definition.settle(i,a)));s(this,"directExecute",async(i,a,r)=>{const n=await this.prepare(i,void 0,a,[],!1,r);if(!n)throw new m("想定されない状態",this,i,r);const l=await this.execute(n,[]);return await this.settle(n,[]),l});s(this,"isSame",i=>this.entity.origin.name===i.entity.origin.name&&this.title===i.title);s(this,"isSameGroup",i=>this.actionGroupName?this.entity.origin.name===i.entity.origin.name&&this.actionGroupName===i.actionGroupName:this.isSame(i));s(this,"calcChainBlockTagsForDestroy",(i,a)=>{if(!ct.length)return[];const r=["Destroy"];ct.length>1&&r.push("DestroyMultiple");const n=a.filter(c=>c.isOnFieldStrictly);n.length&&(r.push("DestroyOnField"),n.length>1&&r.push("DestroyMultipleOnField"));const l=n.filter(c=>c.kind==="Monster");l.length&&(r.push("DestroyMonsterOnField"),l.length>1&&r.push("DestroyMonstersOnField")),n.filter(c=>c.kind!=="Monster").length&&(r.push("DestroySpellTrapOnField"),l.length>1&&r.push("DestroySpellTrapsOnField"));const u=n.filter(c=>c.controller!==i);return u.length&&(r.push("DestroyOnOpponentField"),u.length>1&&r.push("DestroyMultipleOnOpponentField")),r});this.addhocMaterialLimitation=n??(()=>!0)}get definition(){return super.definition}get playType(){return this.definition.playType}get spellSpeed(){return this.definition.spellSpeed}get needsToPayCost(){return this.definition.needsToPayCost??!1}get hasToTargetCards(){return this.definition.hasToTargetCards??!1}get isWithChainBlock(){return Xe.some(i=>i===this.playType)}get isLikeContinuousSpell(){return this.definition.isLikeContinuousSpell||this.entity.isLikeContinuousSpell&&this.playType==="CardActivation"}get negatePreviousBlock(){return this.definition.negatePreviousBlock??!1}get negateSummon(){return this.definition.negateSummon??!1}get priorityForNPC(){return this.definition.priorityForNPC??Number.NaN}};s(Y,"createNew",(i,a)=>new Y("AutoSeq",i,a)),s(Y,"createDummyAction",(i,a,r,n,l)=>({action:Y.createNew(i,{title:a,isMandatory:!1,executableCells:[],executablePeriods:[],executableDuelistTypes:[],playType:"Dammy",spellSpeed:"Dammy",validate:()=>r,prepare:async()=>{},execute:async()=>!1,settle:async()=>!1}),dests:r,battlePosition:n,originSeq:(l==null?void 0:l.seq)??-1}));let oe=Y;const q=async()=>({selectedEntities:[],chainBlockTags:[],prepared:void 0}),Ke=async(e,t,i)=>(e.activator.payLp(i,e.action.entity),{lifePoint:i}),Da=e=>e.activator.canSendToGraveyard([e.action.entity])&&e.action.entity.canBeSentToGraveyard(e.activator,e.action.entity,"SendToGraveyardAsCost",e.action),Pa=async e=>(await e.action.entity.sendToGraveyard(["Cost"],e.action.entity,e.activator),{sendToGraveyard:[e.action.entity]}),ve=e=>e.activator.canTryBanish(e.action.entity,"BanishAsCost",e.action)&&e.action.entity.canBeBanished("BanishAsCost",e.activator,e.action.entity,e.action),Ae=async e=>(await e.action.entity.banish(["Cost"],e.action.entity,e.activator),{banish:[e.action.entity]}),Ma=(e,t,i=1)=>t.filter(a=>e.activator.canTryBanish(a,"BanishAsCost",e.action)).filter(a=>a.canBeBanished("BanishAsCost",e.activator,e.action.entity,e.action)).length>=i,Aa=async(e,t,i,a)=>{const r=t.filter(l=>e.activator.canTryBanish(l,"BanishAsCost",e.action)).filter(l=>l.canBeBanished("BanishAsCost",e.activator,e.action.entity,e.action)),n=await e.activator.waitSelectEntities(r,a,i,"コストとして除外するカードを選択",!1)??[];return await v.banishManyForTheSameReason(n,["Cost"],e.action.entity,e.activator),{banish:n}},ae=async(e,t,i=P,a=n=>n.length===1,r=1)=>{const n=e.activator.getMonsterZones(),l=e.activator.getEnableSummonList(e.activator,"SpecialSummon",["Effect"],e.action,t.filter(c=>c.kind==="Monster").filter(c=>c.canBeTargetOfEffect(e)).map(c=>({monster:c,posList:i,cells:n})),[],!1),o=await e.activator.waitSelectEntities(l.map(c=>c.monster),r,a,"特殊召喚するモンスターを選択",!1)??[];if(!o.length)throw new L(e);const u=o.map(c=>c.fieldCell.cellType).getDistinct().filter(c=>c==="Graveyard"||c==="Banished").map(c=>c==="Graveyard"?"SpecialSummonFromGraveyard":"SpecialSummonFromBanished");return{selectedEntities:o,chainBlockTags:u,prepared:void 0}},re=async(e,t=["Attack","Defense"],i=!0)=>{const a=e.activator.getMonsterZones(),r=e.selectedEntities.filter(n=>!n.wasMovedAfter(e.isActivatedAt)).map(n=>({monster:n,posList:t,cells:a}));return i&&(r.length!==e.selectedEntities.length||a.length<r.length)?!1:(await e.activator.summonAll(e.activator,"SpecialSummon",["Effect"],e.action,r,[],!1,!1),!0)},xa=async(e,t,i=["Attack","Defense"])=>{const a=e.activator.getMonsterZones(),r=t.map(n=>({monster:n,posList:i,cells:a}));return await e.activator.summonAll(e.activator,"SpecialSummon",["Effect"],e.action,r,[],!1,!1),!0},Fa=(e,t,i)=>({title:e,playType:"SystemPeriodAction",spellSpeed:"Normal",executableCells:I,executablePeriods:t,executableDuelistTypes:["Controller","Opponent"],isMandatory:!0,validate:i,prepare:q,execute:async()=>!0,settle:async()=>!0}),Ba=e=>{if(e.action.entity.status.spellCategory==="Field")return[e.activator.getFieldZone()];const t=e.activator.getAvailableSpellTrapZones();return t.length>0?t:void 0},C={title:"セット",playType:"SpellTrapSet",spellSpeed:"Normal",executableCells:["Hand"],executablePeriods:["main1","main2"],executableDuelistTypes:["Controller"],isMandatory:!1,validate:Ba,prepare:q,execute:async()=>!0,settle:async()=>!0},b=e=>{var i;if(e.action.entity.info.isPending||e.action.entity.info.isDying||e.action.entity.info.isSettingSickness)return;if(te.some(a=>a===e.action.entity.fieldCell.cellType))return e.action.entity.face==="FaceDown"?[]:void 0;if(e.action.spellSpeed==="Normal"&&!e.activator.isTurnPlayer||e.action.entity.fieldCell.cellType==="Hand"&&!e.activator.isTurnPlayer)return;if(e.action.entity.status.spellCategory==="Field")return[e.activator.getFieldZone()];let t=e.activator.getAvailableSpellTrapZones();return(i=e.action.entity.status.monsterCategories)!=null&&i.includes("Pendulum")&&(t=t.filter(a=>a.isAvailableForPendulum)),t.length>0?t:void 0},ne={title:"発動",isMandatory:!1,playType:"CardActivation",spellSpeed:"Normal",executableCells:["Hand","SpellAndTrapZone"],executablePeriods:["main1","main2"],executableDuelistTypes:["Controller"],validate:b,prepare:q,execute:async()=>!0,settle:async()=>!0},Oa=(e,t,i=()=>!0)=>e.action.entity.field.getMonstersOnFieldStrictly().filter(r=>r.face==="FaceUp").filter(r=>r.canBeTargetOfEffect(e)).filter(r=>i(r,e.action.entity)).length?b(e):void 0,La=async(e,t,i,a,r,n=()=>!0)=>{const l=e.action.entity.field.getMonstersOnFieldStrictly().filter(u=>u.face==="FaceUp").filter(u=>u.canBeTargetOfEffect(e)).filter(u=>n(u,e.action.entity)),o=await e.activator.waitSelectEntity(l,"装備対象モンスターを選択",i);if(o)return e.action.entity.info.equipedBy=o,e.action.entity.info.effectTargets[e.action.seq]=[o],{chainBlockTags:a??[],selectedEntities:[o],prepared:r}},xt=async(e,t,i=()=>!0)=>{const a=e.selectedEntities[0];return e.action.entity.info.equipedBy=a,e.action.entity.info.effectTargets[e.action.seq]=[a],i(a,e.action.entity)?(e.action.entity.info.equipedBy=a,e.action.entity.info.validateEquipOwner=i,a.info.equipEntities.push(e.action.entity),!0):(await e.action.entity.ruleDestory(),e.activator.writeInfoLog(`${a.toString()}が装備条件を満たさなくなったため、${e.action.entity.toString()}は破壊された。`),!1)},ce=(e=()=>!0)=>({title:"発動",isMandatory:!1,playType:"CardActivation",spellSpeed:"Normal",executableCells:["Hand","SpellAndTrapZone"],executablePeriods:["main1","main2"],executableDuelistTypes:["Controller"],validate:(t,i)=>Oa(t,i,e),prepare:(t,i,a)=>La(t,i,a,[],void 0,e),execute:xt,settle:async()=>!0});function*Na(){yield{name:"連合軍",actions:[ne,C],continuousEffects:[Ce("発動","Spell",e=>e.isOnFieldStrictly&&e.face==="FaceUp",e=>[H.createContinuous("発動",t=>t.isSpawnedBy.isOnFieldStrictly&&t.isSpawnedBy.face==="FaceUp",e,(t,i)=>i.controller===t.isSpawnedBy.controller&&i.types.includes("Warrior")&&i.isOnFieldStrictly&&i.face==="FaceUp","attack","wip","Addition",(t,i,a)=>{if(!t.isEffective||i.face==="FaceDown")return a;const r=t.controller.getMonstersOnField().filter(n=>n.face==="FaceUp").filter(n=>n.types.includes("Warrior")||n.types.includes("Spellcaster")).length;return a+r*200})])]}}const Ft=Object.freeze(Object.defineProperty({__proto__:null,default:Na},Symbol.toStringTag,{value:"Module"}));function*qa(){yield*[{name:"リビングデッドの呼び声",pos:"Attack",filter:()=>!0},{name:"エンジェル・リフト",pos:"Attack",filter:e=>(e.lvl??12)<3},{name:"正統なる血統",pos:"Attack",filter:e=>{var t;return(t=e.status.monsterCategories)==null?void 0:t.includes("Normal")}},{name:"蘇りし魂",pos:"Defense",filter:e=>{var t;return(t=e.status.monsterCategories)==null?void 0:t.includes("Normal")}},{name:"リミット・リバース",pos:"Attack",filter:e=>(e.atk??9999)<=1e3,onMonsterAfterMove:async(e,t)=>{if(!t.isOnFieldAsMonsterStrictly||t.face==="FaceDown")return"RemoveMe";if(e.action.entity.isEffective&&t.battlePosition==="Defense")return e.action.entity.controller.writeInfoLog(`${t.toString()}が守備表示になったため、${e.action.entity.toString()}とともに破壊される。`),await v.tryMarkForDestory([t,e.action.entity],e),"RemoveMe"}}].map(e=>({name:e.name,actions:[{title:"発動",isMandatory:!1,playType:"CardActivation",spellSpeed:"Quick",executableCells:["SpellAndTrapZone"],executablePeriods:_,executableDuelistTypes:["Controller"],validate:t=>{const i=t.activator.getMonsterZones();if(t.activator.getEnableSummonList(t.activator,"SpecialSummon",["Effect"],t.action,t.activator.getGraveyard().cardEntities.filter(r=>r.kind==="Monster").filter(e.filter).filter(r=>r.canBeTargetOfEffect(t)).map(r=>({monster:r,posList:["Attack"],cells:i})),[],!1).length)return b(t)},prepare:t=>ae(t,t.activator.getGraveyard().cardEntities.filter(i=>i.kind==="Monster").filter(e.filter).filter(i=>i.canBeTargetOfEffect(t)),["Attack"]),execute:async t=>{if(!await re(t,["Attack"])||!t.selectedEntities.length)return!1;t.action.entity.info.effectTargets[t.action.seq]=t.selectedEntities,t.action.entity.onBeforeMove.append(async r=>{if(r.entity.face!=="FaceUp"||!r.entity.isOnFieldAsSpellTrapStrictly)return"RemoveMe";const n=Object.values(r.entity.info.effectTargets).flatMap(u=>u),[l]=r.args;if(!n.length)return"RemoveMe";const o=n[0];return o.isOnFieldStrictly&&o.face==="FaceUp"&&r.entity.isEffective&&!l.isSpellTrapZoneLikeCell&&(r.entity.controller.writeInfoLog(`${t.action.entity.toString()}がフィールドを離れたため、対象モンスター${o.toString()}を破壊。`),await v.tryMarkForDestory([o],t)),"RemoveMe"});const a=t.selectedEntities[0];return a.onBeforeMove.append(async r=>{if(r.entity.face!=="FaceUp"||!r.entity.isOnFieldAsMonsterStrictly)return"RemoveMe";const[,,,,,n]=r.args;return t.action.entity.isOnFieldStrictly&&t.action.entity.face==="FaceUp"&&r.entity.isEffective&&n.union(["EffectDestroy","RuleDestroy"]).length&&(t.activator.writeInfoLog(`${r.entity.toString()}が破壊されたため、${t.action.entity.toString()}を破壊。`),await v.tryMarkForDestory([a],t)),"RemoveMe"}),a.onAfterMove.append(async r=>e.onMonsterAfterMove?await e.onMonsterAfterMove(t,r):"RemoveMe"),!0},settle:async()=>!0},C]}))}const Bt=Object.freeze(Object.defineProperty({__proto__:null,default:qa},Symbol.toStringTag,{value:"Module"}));function*Ra(){yield{name:"昇天の黒角笛",actions:[{title:"発動",isMandatory:!1,playType:"CardActivation",spellSpeed:"Counter",executableCells:["SpellAndTrapZone"],executablePeriods:z,executableDuelistTypes:["Controller"],negateSummon:!0,validate:e=>{if(e.targetChainBlock&&e.targetChainBlock.action.playType==="SpecialSummon"&&e.targetChainBlock.activator!==e.activator&&e.activator.duel.field.getPendingMonstersOnField().length===1)return b(e)},prepare:async()=>({selectedEntities:[],chainBlockTags:["NegateSpecialSummon"],prepared:void 0}),execute:async e=>{const t=v.negateSummonMany(e.action.entity,e.activator);return await v.tryDestroy(t,e),!0},settle:async()=>!0},C]}}const Ot=Object.freeze(Object.defineProperty({__proto__:null,default:Ra},Symbol.toStringTag,{value:"Module"}));function*Ha(){yield*[{name:"団結の力",kind:["Monster"],rate:800},{name:"魔導師の力",kind:["Spell","Trap"],rate:500}].map(e=>({name:e.name,actions:[ce(),C],continuousEffects:[ye(e.name,"Spell",t=>t.info.equipedBy?[t.info.equipedBy]:[],t=>t.isOnFieldStrictly&&t.face==="FaceUp",t=>["attack","defense"].map(i=>H.createContinuous("発動",a=>a.isSpawnedBy.isOnFieldStrictly&&a.isSpawnedBy.face==="FaceUp",t,(a,r)=>r.isOnFieldStrictly&&r.face==="FaceUp",i,"wip","Addition",(a,r,n)=>{if(!a.isEffective)return n;const l=a.controller.getEntiteisOnField().filter(o=>e.kind.includes(o.kind)).length;return n+l*e.rate})))]})),yield{name:"早すぎた埋葬",actions:[{title:"発動",isMandatory:!1,playType:"CardActivation",spellSpeed:"Normal",executableCells:["Hand","SpellAndTrapZone"],executablePeriods:["main1","main2"],executableDuelistTypes:["Controller"],hasToTargetCards:!0,canPayCosts:e=>e.activator.lp>=800,validate:e=>{const t=e.activator.getMonsterZones();if(e.activator.getEnableSummonList(e.activator,"SpecialSummon",["Effect"],e.action,e.activator.getGraveyard().cardEntities.filter(a=>a.kind==="Monster").filter(a=>a.canBeTargetOfEffect(e)).map(a=>({monster:a,posList:["Attack"],cells:t})),[],!1).length)return b(e)},payCosts:(e,t)=>Ke(e,t,800),prepare:async e=>{const t=await ae(e,e.activator.getGraveyard().cardEntities,["Attack"]);return t.chainBlockTags.push("PayLifePoint"),t},execute:async(e,t)=>e.action.entity.info.equipedBy?(await e.action.entity.ruleDestory(),!1):await re(e,["Attack"])?(e.action.entity.onBeforeMove.append(async a=>{if(a.entity.face!=="FaceUp"||!a.entity.isOnFieldAsSpellTrapStrictly)return"RemoveMe";const r=a.entity.info.equipedBy;if(!r)return"RemoveMe";const[,,,,,n]=a.args;return r.isOnFieldStrictly&&r.face==="FaceUp"&&a.entity.isEffective&&n.union(["EffectDestroy","RuleDestroy"]).length&&(a.entity.controller.writeInfoLog(`${e.action.entity.toString()}が破壊されたため、装備対象モンスター${r.toString()}を破壊。`),v.tryMarkForDestory([r],e)),"RemoveMe"}),xt(e,t,(a,r)=>{var n;return(n=r.info.effectTargets[e.action.seq])==null?void 0:n.includes(a)})):(await e.action.entity.ruleDestory(),!1),settle:async()=>!0},C]},yield{name:"幻惑の巻物",actions:[ce(),C],continuousEffects:[]}}const Lt=Object.freeze(Object.defineProperty({__proto__:null,default:Ha},Symbol.toStringTag,{value:"Module"}));function*Za(){yield*[{name:"伝説の剣",attr:void 0,monType:"Warrior",atk:200,def:200},{name:"秘術の書",attr:void 0,monType:"Spellcaster",atk:200,def:200},{name:"ポセイドンの力",attr:void 0,monType:"Aqua",atk:200,def:200},{name:"紫水晶",attr:void 0,monType:"Zombie",atk:200,def:200},{name:"猛獣の歯",attr:void 0,monType:"Beast",atk:200,def:200},{name:"機械改造工場",attr:void 0,monType:"Machine",atk:200,def:200},{name:"体温の上昇",attr:void 0,monType:"Reptile",atk:200,def:200},{name:"魔菌",attr:void 0,monType:"Plant",atk:200,def:200},{name:"闇・エネルギー",attr:void 0,monType:"Fiend",atk:200,def:200},{name:"レーザー砲機甲鎧",attr:void 0,monType:"Insect",atk:200,def:200},{name:"銀の弓矢",attr:void 0,monType:"Fairy",atk:200,def:200},{name:"電撃鞭",attr:void 0,monType:"Thunder",atk:200,def:200},{name:"ドラゴンの秘宝",attr:void 0,monType:"Dragon",atk:200,def:200},{name:"フォロー・ウィンド",attr:void 0,monType:"WingedBeast",atk:200,def:200},{name:"魔性の月",attr:void 0,monType:"BeastWarrior",atk:200,def:200},{name:"エルフの光",attr:"Light",monType:void 0,atk:400,def:-200},{name:"覚醒",attr:"Earth",monType:void 0,atk:400,def:-200},{name:"灼熱の槍",attr:"Fire",monType:void 0,atk:400,def:-200},{name:"突風の扇",attr:"Wind",monType:void 0,atk:400,def:-200},{name:"はがねの甲羅",attr:"Water",monType:void 0,atk:400,def:-200},{name:"闇の破神剣",attr:"Dark",monType:void 0,atk:400,def:-200},{name:"火器付機甲鎧",attr:void 0,monType:"Insect",atk:700,def:0},{name:"サラマンドラ",attr:"Fire",monType:void 0,atk:700,def:0},{name:"シャイン・キャッスル",attr:"Light",monType:void 0,atk:700,def:0}].map(e=>({name:e.name,actions:[ce(t=>(!e.attr||t.attr.includes(e.attr))&&(!e.monType||t.types.includes(e.monType))),C],continuousEffects:[ye(e.name,"Spell",t=>t.info.equipedBy?[t.info.equipedBy]:[],t=>t.isOnFieldStrictly&&t.face==="FaceUp",t=>{const i=[];return e.atk!==0&&i.push(["attack",e.atk]),e.def!==0&&i.push(["defense",e.def]),i.map(([a,r])=>H.createContinuous("発動",n=>n.isSpawnedBy.isOnFieldStrictly&&n.isSpawnedBy.face==="FaceUp",t,(n,l)=>l.isOnFieldStrictly&&l.face==="FaceUp"&&(!e.monType||l.types.includes(e.monType))&&(!e.attr||l.attr.includes(e.attr)),a,"wip","Addition",(n,l,o)=>n.isEffective?o+r:o))})]}))}const Nt=Object.freeze(Object.defineProperty({__proto__:null,default:Za},Symbol.toStringTag,{value:"Module"}));function*$a(){yield{name:"チキンレース",actions:[ne,C,{title:"②効果発動",isMandatory:!1,playType:"IgnitionEffect",spellSpeed:"Normal",executableCells:["FieldSpellZone"],executablePeriods:["main1","main2"],executableDuelistTypes:["Controller","Opponent"],isOnlyNTimesPerTurnIfFaceup:1,canPayCosts:e=>e.activator.lp>=1e3,validate:()=>[],payCosts:(e,t)=>Ke(e,t,1e3),prepare:async(e,t,i)=>{let a=[{seq:0,text:"●デッキから１枚ドローする。",tags:["Draw"]},{seq:1,text:"●このカードを破壊する。",tags:e.action.calcChainBlockTagsForDestroy(e.activator,[e.action.entity])},{seq:2,text:"●相手は1000LP回復する。",tags:[]}];e.activator.getDeckCell().cardEntities.length||(a=a.filter(n=>n.seq));const r=await e.activator.waitSelectText(a,"使用する効果を選択",i);if(r!==void 0)return{selectedEntities:[],chainBlockTags:r.tags,prepared:r.seq,nextChainBlockFilter:()=>!1}},execute:async e=>(e.prepared===0?await e.activator.draw(1,e.action.entity,e.activator):e.prepared===1?await v.tryDestroy([e.action.entity],e):e.prepared===2&&e.activator.getOpponentPlayer().heal(1e3,e.action.entity),!0),settle:async()=>!0}],continuousEffects:[Vi("①ダメージ無効","Spell",e=>[e.controller,e.controller.getOpponentPlayer()].map(t=>t.entity),()=>!0,e=>[new ra("①ダメージ無効",()=>!0,!0,e,{},()=>!0,"zero_typeA",(t,i,a,r)=>t.isSpawnedBy.fieldCell.cellType!=="FieldSpellZone"?{}:r.lp>=r.getOpponentPlayer().lp?{}:(a.writeInfoLog(`${r.profile.name}はチキンレースの効果でダメージを受けない。`),{zero_typeA:!0}))])]}}const qt=Object.freeze(Object.defineProperty({__proto__:null,default:$a},Symbol.toStringTag,{value:"Module"}));function*Ga(){yield*[{name:"草原",up:["Warrior","BeastWarrior"],down:[]},{name:"森",up:["Insect","Plant","Beast","BeastWarrior"],down:[]},{name:"山",up:["Dragon","WingedBeast","Thunder"],down:[]},{name:"荒野",up:["Dinosaur","Zombie","Rock"],down:[]},{name:"海",up:["Aqua","SeaSerpent","Fish"],down:["Machine","Pyro"]},{name:"闇",up:["Fiend","Spellcaster"],down:["Fairy"]}].map(e=>({name:e.name,actions:[ne,C],continuousEffects:[Ce("発動","Spell",t=>t.isOnFieldStrictly&&t.face==="FaceUp",t=>["attack","defense"].flatMap(i=>["up","down"].map(a=>H.createContinuous("発動",r=>r.isSpawnedBy.isOnFieldStrictly&&r.isSpawnedBy.face==="FaceUp",t,(r,n)=>n.isOnFieldStrictly&&n.face==="FaceUp"&&(n.status.monsterCategories??!1)&&e[a].union(n.types).length>0,i,"wip","Addition",(r,n,l)=>!r.isEffective||n.face==="FaceDown"?l:l+(a==="up"?200:-200)))))]})),yield*[{name:"バーニングブラッド",attr:"Fire"},{name:"ウォーターワールド",attr:"Water"},{name:"ガイアパワー",attr:"Earth"},{name:"シャインスパーク",attr:"Light"},{name:"ダークゾーン",attr:"Dark"},{name:"デザートストーム",attr:"Wind"}].map(e=>({name:e.name,actions:[ne,C],continuousEffects:[Ce("発動","Spell",t=>t.isOnFieldStrictly&&t.face==="FaceUp",t=>["attack","defense"].flatMap(i=>H.createContinuous("発動",a=>a.isSpawnedBy.isOnFieldStrictly&&a.isSpawnedBy.face==="FaceUp",t,(a,r)=>r.isOnFieldStrictly&&r.face==="FaceUp"&&r.attr.includes(e.attr),i,"wip","Addition",(a,r,n)=>!a.isEffective||r.face==="FaceDown"?n:n+(i==="attack"?500:-400))))]}))}const Rt=Object.freeze(Object.defineProperty({__proto__:null,default:Ga},Symbol.toStringTag,{value:"Module"})),Ua=e=>{if(!(e.activator.info.ruleNormalSummonCount>=e.activator.info.maxRuleNormalSummonCount)&&e.action.entity.lvl)if(e.action.entity.lvl<5){const t=e.activator.getEnableSummonList(e.activator,"NormalSummon",["Rule"],e.action,[{monster:e.action.entity,posList:["Attack","Set"],cells:e.activator.getMonsterZones()}],[],!1);return t.length?t.flatMap(i=>i.cells).getDistinct():void 0}else{const t=e.activator.getMonstersOnField().filter(r=>r.canBeReleased(e.activator,e.action.entity,["AdvanceSummonRelease"],e.action)),i=e.action.entity.lvl<7?1:2;if(t.length<i)return;if(t.getAllOnOffPattern().filter(r=>r.length===i).some(r=>e.activator.getEnableSummonList(e.activator,"AdvanceSummon",["Rule","NormalSummon"],e.action,[{monster:e.action.entity,posList:["Attack","Set"],cells:e.activator.getMonsterZones()}],r.map(n=>({material:n,cell:n.fieldCell})),!1).length))return[]}},ja=async(e,t,i)=>{if(!e.action.entity.lvl)return;if(e.action.entity.lvl<5)return{};const a=e.activator.getAvailableMonsterZones();let r=e.activator.getMonstersOnField().filter(c=>c.canBeReleased(e.activator,e.action.entity,["AdvanceSummonRelease"],e.action));const n=e.activator.getExtraMonsterZones(),l=e.action.entity.lvl<7?1:2;n.length>=l&&(r=r.filter(c=>c.fieldCell.cellType!=="ExtraMonsterZone"));const o=await e.activator.waitSelectEntities(r,l,c=>(i||c.length>0)&&(l<0||c.length===l)&&(a.length>0||c.some(d=>d.fieldCell.cellType==="ExtraMonsterZone")),"リリースするモンスターを選択",i??!1)??[];return o.length?(await v.releaseManyForTheSameReason(o,["Cost","AdvanceSummonRelease","Rule"],e.action.entity,e.activator),{summonMaterialInfos:o.map(c=>({material:c,cell:c.fieldCell}))}):void 0},Va=async e=>{var r;const t=["Rule","NormalSummon"];let i="NormalSummon";(r=e.costInfo.summonMaterialInfos)!=null&&r.length&&(i="AdvanceSummon",t.push("AdvanceSummon"));const a=e.dest?[e.dest]:e.activator.getAvailableMonsterZones();return X(e,i,t,["Attack","Set"],a)},X=async(e,t,i,a,r)=>{let n=r;return n||(n=e.activator.getMonsterZones(),e.action.entity.fieldCell.cellType==="ExtraDeck"&&n.push(...e.activator.duel.field.getCells("ExtraMonsterZone"))),await e.activator.summon(t,i,e.action,e.action.entity,a,n,e.costInfo.summonMaterialInfos??[],!1),{selectedEntities:[],chainBlockTags:[],prepared:void 0}},K=async e=>{var t,i;return e.action.entity.info.isRebornable=!((t=e.action.entity.origin.monsterCategories)!=null&&t.includes("RegularSpecialSummonOnly")),e.action.entity.determine(),(i=e.costInfo.summonMaterialInfos)==null||i.map(a=>a.material).forEach(a=>a.onUsedAsMaterial(e,e.action.entity)),!0},A={title:"通常召喚",isMandatory:!1,playType:"NormalSummon",spellSpeed:"Normal",executableCells:["Hand"],executablePeriods:["main1","main2"],executableDuelistTypes:["Controller"],validate:Ua,payCosts:ja,prepare:Va,execute:K,settle:async()=>!0},be=(e,t,i)=>{const a=e.activator.getMonsterZones();if(e.action.entity.fieldCell.cellType==="ExtraDeck"&&a.push(...e.activator.getAvailableExtraZones()),!!e.activator.getEnableSummonList(e.activator,"SpecialSummon",["Rule"],e.action,[{monster:e.action.entity,posList:t,cells:a}],i,!1).length)return i.length===0?a:[]},za=e=>{if(!e.activator.isTurnPlayer)return;const t=e.action.entity.getAttackTargets();return t.length?t.map(i=>i.fieldCell):void 0},Qa=async e=>{var a;if(e.action.entity.info.attackCount>0||e.action.entity.battlePosition!=="Attack")return;if((a=e.dest)!=null&&a.targetForAttack){const r=e.dest.entities.find(n=>n.entityType==="Duelist");return{selectedEntities:r?[r]:e.dest.cardEntities,chainBlockTags:[],prepared:void 0}}const t=e.action.entity.getAttackTargets();if(t.length===0)throw new m("想定されない状態",e);if(t.length===1)return{selectedEntities:t,chainBlockTags:[],prepared:void 0};if(e.activator.duelistType==="NPC"){let r=e.activator.selectAttackTargetForNPC(e.action.entity,e.action);return r||(e.activator.duel.log.warn("NPCの攻撃対象選択に失敗したため、ランダムに攻撃対象を選択。"),r=t.randomPick()),{selectedEntities:[r],chainBlockTags:[],prepared:void 0}}const i=await e.activator.waitSelectEntity(t,"攻撃対象を選択。",!0);if(i)return{selectedEntities:[i],chainBlockTags:[],prepared:void 0}},Wa=async e=>(e.action.entity.field.duel.declareAnAttack(e.action.entity,e.selectedEntities[0]),!0),S={title:"攻撃宣言",isMandatory:!1,playType:"Battle",spellSpeed:"Normal",executableCells:["MonsterZone","ExtraMonsterZone"],executablePeriods:["b1Battle","b2Battle"],executableDuelistTypes:["Controller"],validate:za,prepare:Qa,execute:Wa,settle:async()=>!0},Ht=async e=>{if(!(e.action.entity.info.battlePotisionChangeCount>0||!e.activator.isTurnPlayer))return await e.action.entity.setBattlePosition(e.action.entity.battlePosition==="Attack"?"Defense":"Attack",["Rule"],e.action.entity,e.activator),e.action.entity.info.battlePotisionChangeCount++,{selectedEntities:[],chainBlockTags:[],prepared:void 0}},w={title:"反転召喚",isMandatory:!1,playType:"FlipSummon",spellSpeed:"Normal",executableCells:["MonsterZone","ExtraMonsterZone"],executablePeriods:["main1","main2"],executableDuelistTypes:["Controller"],validate:e=>e.action.entity.info.battlePotisionChangeCount===0&&e.action.entity.info.attackCount===0&&e.activator.isTurnPlayer&&e.action.entity.face==="FaceDown"?[]:void 0,prepare:Ht,execute:async e=>(e.action.entity.determine(),!0),settle:async()=>!0},T={title:"表示形式変更",isMandatory:!1,playType:"ChangeBattlePosition",spellSpeed:"Normal",executableCells:["MonsterZone","ExtraMonsterZone"],executablePeriods:["main1","main2"],executableDuelistTypes:["Controller"],validate:e=>e.action.entity.info.battlePotisionChangeCount===0&&e.action.entity.info.attackCount===0&&e.activator.isTurnPlayer&&e.action.entity.face==="FaceUp"?[]:void 0,prepare:Ht,execute:async e=>(e.action.entity.determine(),!0),settle:async()=>!0},ee=async(e,t=["Attack","Defense"])=>{const i=e.activator.getMonsterZones();return e.action.entity.wasMovedAfter(e.isActivatedAt)?!1:(await e.activator.summon("SpecialSummon",["Effect"],e.action,e.action.entity,t,i,[],!1),!0)},Xa=[S,T,w,A],Ka=(e,t,i,a,r,n,l,o,u,c,d)=>{const p={posList:u,cells:c},h={posList:[],cells:[]};return t!==l||l.kind!=="Monster"||!l.origin.monsterCategories?p:l.origin.monsterCategories.includes("NormalSummonOnly")?r.includes("NormalSummon")||r.includes("AdvanceSummon")?p:h:l.origin.monsterCategories.includes("SpecialSummon")?l.isInTrashCell&&!l.origin.monsterCategories.includes("RegularSpecialSummonOnly")?l.info.isRebornable||l.origin.monsterCategories.includes("FreeReborn")?p:h:r.includes("PendulumSummon")&&l.origin.monsterCategories.includes("FreeReborn")?h:r.union(kt).length?p:l.origin.monsterCategories.includes("RegularSpecialSummonOnly")?d?p:h:p:p},Le={},Ja=e=>(Le[e]||(Le[e]={title:`戦闘破壊耐性(${e})`,isMandatory:!0,executableCells:["MonsterZone"],executablePeriods:["b1DDmgCalc","b2DDmgCalc"],executableDuelistTypes:["Controller"],isOnlyNTimesPerTurnIfFaceup:e,isApplicableTo:(t,i,a)=>a.includes(t.entity)?i!=="BattleDestroy"?[]:[t.entity]:[],substitute:async(t,i,a)=>a.includes(t.entity)?i!=="BattleDestroy"?[]:t.entity.isEffective?(t.entity.controller.writeInfoLog(`${t.entity.toString()}は１ターンに１度だけ戦闘では破壊されない。`),[t.entity]):[]:[]}),Le[e]),Je=e=>e.activator.canRelease([e.action.entity])&&e.action.entity.canBeReleased(e.activator,e.action.entity,["ReleaseAsCost"],e.action),Ye=async e=>(await e.action.entity.release(["Cost"],e.action.entity,e.activator),{release:[e.action.entity]}),Zt=e=>({title:"シンクロ召喚",isMandatory:!1,playType:"QuickEffect",spellSpeed:"Quick",executableCells:R,executablePeriods:["main1","main2"],executableDuelistTypes:["Controller"],isOnlyNTimesPerChain:1,validate:t=>t.activator.isTurnPlayer?void 0:t.activator.getExtraDeck().cardEntities.filter(a=>{var r;return(r=a.status.monsterCategories)==null?void 0:r.includes("Syncro")}).flatMap(a=>a.actions).filter(a=>a.playType==="SpecialSummon").map(a=>({index:-1,chainNumber:void 0,action:a,activator:t.activator,targetChainBlock:void 0,isActivatedIn:a.entity.fieldCell,isActivatedAt:t.isActivatedAt,costInfo:{},state:"unloaded",dest:void 0,ignoreCost:!1})).some(a=>a.action.getEnableMaterialPatterns(a).some(r=>{const n=r.map(l=>l.material);return n.every(l=>l.controller===t.activator)&&n.every(l=>l.isOnFieldAsMonsterStrictly)&&n.includes(t.action.entity)}))?[]:void 0,prepare:q,execute:async t=>{if(t.activator!==t.action.entity.controller||t.activator.getMonstersOnField().filter(l=>l.lvl!==void 0).length<2)return!1;const i=t.activator.getExtraDeck().cardEntities.filter(l=>{var o;return(o=l.status.monsterCategories)==null?void 0:o.includes("Syncro")}).flatMap(l=>l.actions).filter(l=>l.playType==="SpecialSummon").map(l=>({index:-1,chainNumber:void 0,action:l,activator:t.activator,targetChainBlock:void 0,isActivatedIn:l.entity.fieldCell,isActivatedAt:t.isActivatedAt,costInfo:{},state:"unloaded",dest:void 0,ignoreCost:!1})).filter(l=>l.action.getEnableMaterialPatterns(l).some(o=>{const u=o.map(c=>c.material);return u.every(c=>c.controller===t.activator)&&u.every(c=>c.isOnFieldAsMonsterStrictly)&&u.includes(t.action.entity)})).map(l=>l.action.entity).getDistinct();if(!i.length)return!1;const a=await t.activator.waitSelectEntities(i,1,l=>l.length===1,"シンクロ召喚するモンスターを選択。",!1)??[];if(!a.length)throw new m("想定されない状態",t);const r=a[0].actions.find(l=>l.playType==="SpecialSummon");if(!r)throw new m("想定されない状態",t);const n=r.getClone(l=>{const o=l.map(u=>u.material);return o.every(u=>u.controller===t.activator)&&o.every(u=>u.isOnFieldAsMonsterStrictly)&&o.includes(t.action.entity)});return t.nextActionInfo={action:n,originSeq:n.seq},!0},settle:async()=>!0,...e}),Ya=bt("直接攻撃","Monster",e=>[e],()=>!0,e=>[new ue("直接攻撃",()=>!0,!0,e,{},(t,i)=>t.isSpawnedBy===i,(t,i)=>({...i,canDirectAttack:!0}))]),Ia=(e,t,i,a)=>{if(!e.action.entity.origin.link||e.action.entity.origin.link<i.length)return;let r=i.map(l=>({material:l,cell:l.fieldCell,link:1}));if(e.action.entity.origin.link>i.length){if(i.every(u=>(u.origin.link??1)<2))return;const l=[r];i.filter(u=>(u.origin.link??1)>1).forEach(u=>{[...l].forEach(c=>{l.push([...c.filter(d=>d.material!==u),{material:u,cell:u.fieldCell,link:u.origin.link??1}])})});const o=l.find(u=>u.reduce((c,d)=>c+d.link,0)===e.action.entity.origin.link);if(!o)return;r=o}if(!a(i)||!e.activator.getEnableSummonList(e.activator,"LinkSummon",["Rule","SpecialSummon"],e.action,[{monster:e.action.entity,posList:["Attack"],cells:t}],r,!1).length)return;if(e.activator.getAvailableExtraZones().length)return r;const n=e.activator.duel.field.getCells("ExtraMonsterZone").map(l=>l.cardEntities[0]).filter(l=>l);if(n.filter(l=>l.controller===e.activator).length&&n.filter(l=>l.controller===e.activator).length===i.filter(l=>l.fieldCell.cellType==="ExtraMonsterZone").length||e.activator.getMonsterZones().flatMap(l=>l.linkArrowSources).some(l=>!i.includes(l))||e.activator.duel.field.canExtraLink(e.action.entity,r))return r},er=(e,t=()=>!0)=>{let i=[...e.activator.getMonstersOnField().filter(r=>r.battlePosition!=="Set"),...e.activator.getHandCell().entities.filter(r=>r.origin.kind==="Monster")];if(i.every(r=>!r.status.allowHandLink)&&(i=i.filter(r=>r.fieldCell.isPlayFieldCell)),i.length<1)return[];const a=[...e.activator.getMonsterZones(),...e.activator.duel.field.getAvailableExtraMonsterZones()];return i.getAllOnOffPattern().filter(r=>r.some(n=>n.status.allowHandLink)||r.every(n=>n.isOnFieldAsMonsterStrictly)).map(r=>Ia(e,a,r,t)??[]).filter(r=>r.length)},tr=async(e,t,i)=>{var u;const a=e.action.getEnableMaterialPatterns(e),r=a.map(c=>({infos:c,materialSeqList:c.map(d=>d.material.seq).sort()}));let n=a[0].map(c=>c.material);if(a.length>1){const c=a.flatMap(p=>p.map(h=>h.material)).getDistinct(),d=await e.action.entity.duel.view.waitSelectEntities(e.activator,{selectables:c,qty:void 0,validator:p=>{const h=p.map(g=>g.seq).sort();return r.some(g=>h.length===g.materialSeqList.length&&h.every((y,M)=>y===g.materialSeqList[M]))},cancelable:i},"リンク素材とするモンスターを選択");if(!d)return;n=d}const l=n.map(c=>c.seq).sort(),o=(u=r.find(c=>l.length===c.materialSeqList.length&&l.every((d,p)=>d===c.materialSeqList[p])))==null?void 0:u.infos;if(!o)throw new m("想定されない状態",e,n);return await v.sendManyToGraveyardForTheSameReason(n,["LinkMaterial","Cost","Rule","SpecialSummonMaterial"],e.action.entity,e.activator),{summonMaterialInfos:o}},Ie=(e=()=>!0)=>({title:"リンク召喚",isMandatory:!1,playType:"SpecialSummon",spellSpeed:"Normal",executableCells:["ExtraDeck"],executablePeriods:["main1","main2"],executableDuelistTypes:["Controller"],getEnableMaterialPatterns:t=>er(t,e),canPayCosts:t=>t.action.getEnableMaterialPatterns(t).length>0,validate:t=>!t.ignoreCost||t.activator.getAvailableExtraZones().length+t.activator.getAvailableMonsterZones().length>0?[]:void 0,payCosts:tr,prepare:t=>X(t,"LinkSummon",["Rule","SpecialSummon","LinkSummon"],["Attack"]),execute:K,settle:async()=>!0});function*ir(){yield*[{name:"ＬＡＮフォリンクス",validator:e=>e.length===2},{name:"トラフィックゴースト",validator:e=>e.length===3},{name:"天威の鬼神",validator:e=>e.length>1&&e.some(t=>{var i;return(i=t.status.monsterCategories)==null?void 0:i.includes("Link")})},{name:"天威の拳僧",validator:e=>e.every(t=>{var i,a;return((i=t.status.nameTags)==null?void 0:i.includes("天威"))&&!((a=t.status.monsterCategories)!=null&&a.includes("Link"))})},{name:"電影の騎士ガイアセイバー",validator:e=>e.length>1}].map(e=>({name:e.name,actions:[S,Ie(e.validator)]}))}const $t=Object.freeze(Object.defineProperty({__proto__:null,default:ir},Symbol.toStringTag,{value:"Module"}));function*ar(){yield*["サイバー・ドラゴン","六武衆のご隠居","アンノウン・シンクロン"].map(e=>({name:e,actions:[A,S,T,w,{title:"特殊召喚",isMandatory:!1,playType:"SpecialSummon",spellSpeed:"Normal",executableCells:["Hand"],executablePeriods:["main1","main2"],executableDuelistTypes:["Controller"],isOnlyNTimesPerDuel:e==="アンノウン・シンクロン"?1:void 0,validate:t=>{const i=t.action.entity.field.getMonstersOnFieldStrictly();if(!(i.length==0||i.some(a=>a.controller===t.activator)))return be(t,P,[])},prepare:t=>X(t,"SpecialSummon",["SpecialSummon","Rule"],P),execute:K,settle:async()=>!0}]})),yield{name:"ジャンク・フォアード",actions:[A,S,T,w,{title:"特殊召喚",isMandatory:!1,playType:"SpecialSummon",spellSpeed:"Normal",executableCells:["Hand"],executablePeriods:["main1","main2"],executableDuelistTypes:["Controller"],validate:e=>{if(!e.activator.getMonstersOnField().length)return be(e,P,[])},prepare:e=>X(e,"SpecialSummon",["SpecialSummon","Rule"],P),execute:K,settle:async()=>!0}]},yield{name:"Ｄ－ＨＥＲＯ ディアボリックガイ",actions:[A,S,T,w,{title:"①リクルート",isMandatory:!1,playType:"IgnitionEffect",spellSpeed:"Normal",executableCells:["Graveyard"],executablePeriods:["main1","main2"],executableDuelistTypes:["Controller"],priorityForNPC:10,canPayCosts:ve,validate:e=>e.activator.getDeckCell().cardEntities.filter(i=>i.nm==="Ｄ－ＨＥＲＯ ディアボリックガイ").length===0?void 0:e.activator.getAvailableMonsterZones().length>0?[]:void 0,payCosts:Ae,prepare:async()=>({selectedEntities:[],chainBlockTags:["SpecialSummonFromDeck"],prepared:void 0}),execute:async e=>{const t=e.activator.getDeckCell().cardEntities.find(i=>i.nm==="Ｄ－ＨＥＲＯ ディアボリックガイ");return t?xa(e,[t]):!1},settle:async()=>!0}]},yield{name:"ゾンビキャリア",actions:[A,S,T,w,{title:"①自己再生",isMandatory:!1,playType:"IgnitionEffect",spellSpeed:"Normal",executableCells:["Graveyard"],executablePeriods:["main1","main2"],executableDuelistTypes:["Controller"],canPayCosts:e=>e.activator.getHandCell().cardEntities.length>0,validate:e=>e.activator.getAvailableMonsterZones().length>0?[]:void 0,payCosts:async(e,t,i)=>{const a=e.activator.getHandCell().cardEntities,r=await e.activator.waitSelectEntity(a,"デッキトップに戻すカードを一枚選択。",i);if(!r)throw new L(e);return await r.returnToDeck("Top",["Cost"],e.action.entity,e.activator),{returnToDeck:[r]}},prepare:async()=>({selectedEntities:[],chainBlockTags:["SpecialSummonFromGraveyard"],prepared:void 0}),execute:async e=>(e.action.entity.info.willBeBanished=await ee(e),e.action.entity.info.willBeBanished),settle:async()=>!0}]},yield{name:"グローアップ・バルブ",actions:[A,S,T,w,{title:"①自己再生",isMandatory:!1,playType:"IgnitionEffect",spellSpeed:"Normal",executableCells:["Graveyard"],executablePeriods:["main1","main2"],executableDuelistTypes:["Controller"],isOnlyNTimesPerDuel:1,canPayCosts:e=>e.activator.getDeckCell().cardEntities.length>0,validate:e=>e.activator.getAvailableMonsterZones().length>0?[]:void 0,payCosts:async e=>{const t=e.activator.getDeckCell().cardEntities[0];return await e.activator.getDeckCell().cardEntities[0].sendToGraveyard(["Cost"],e.action.entity,e.activator),{sendToGraveyard:[t]}},prepare:async()=>({selectedEntities:[],chainBlockTags:["SpecialSummonFromGraveyard"],prepared:void 0}),execute:e=>ee(e),settle:async()=>!0}]},yield{name:"終末の騎士",actions:[A,S,T,w,{title:"①墓地送り",isMandatory:!1,playType:"TriggerEffect",spellSpeed:"Normal",executableCells:["MonsterZone"],executablePeriods:[..._,...F],executableDuelistTypes:["Controller"],validate:e=>{if(e.action.entity.hasBeenSummonedNow(["NormalSummon","SpecialSummon","FlipSummon"])&&e.activator.getDeckCell().cardEntities.filter(t=>t.attr.includes("Dark")).length!==0)return[]},prepare:async e=>{const t=["SendToGraveyardFromDeck"];return e.action.entity.moveLog.latestRecord.movedAs.includes("NormalSummon")?t.push("IfNormarlSummonSucceed"):t.push("IfSpecialSummonSucceed"),{selectedEntities:[],chainBlockTags:t,prepared:void 0}},execute:async e=>{const t=e.activator.getDeckCell().cardEntities.filter(i=>i.attr.includes("Dark"));return t.length===0?!1:(await e.action.entity.field.sendToGraveyard("墓地に送るモンスターを選択",e.activator,t,1,i=>i.length===1,["Effect"],e.action.entity,!1),e.activator.getDeckCell().shuffle(),!0)},settle:async()=>!0}]},yield{name:"マスマティシャン",actions:[A,S,T,w,{title:"①墓地送り",isMandatory:!1,playType:"TriggerEffect",spellSpeed:"Normal",executableCells:["MonsterZone"],executablePeriods:[..._,...F],executableDuelistTypes:["Controller"],validate:e=>{if(e.action.entity.hasBeenSummonedNow(["NormalSummon"])&&e.activator.getDeckCell().cardEntities.find(t=>(t.lvl??5)<5))return[]},prepare:async()=>({selectedEntities:[],chainBlockTags:["IfNormarlSummonSucceed","SendToGraveyardFromDeck"],prepared:void 0}),execute:async e=>{const t=e.activator.getDeckCell().cardEntities.filter(i=>(i.lvl??5)<5);return t.length===0?!1:(await e.action.entity.field.sendToGraveyard("墓地に送るモンスターを選択",e.activator,t,1,i=>i.length===1,["Effect"],e.action.entity,!1),e.activator.getDeckCell().shuffle(),!0)},settle:async()=>!0},{title:"②ドロー",isMandatory:!1,playType:"TriggerEffect",spellSpeed:"Normal",executableCells:["Graveyard"],executablePeriods:[..._,...F],executableDuelistTypes:["Controller"],validate:e=>{if(e.action.entity.face!=="FaceDown"&&e.action.entity.moveLog.latestRecord.movedAs.includes("BattleDestroy")&&e.action.entity.wasMovedAtPreviousChain&&e.activator.getDeckCell().cardEntities.length!==0)return[]},prepare:async()=>({selectedEntities:[],chainBlockTags:["Draw"],prepared:void 0}),execute:async e=>(await e.activator.draw(1,e.action.entity,e.activator),!0),settle:async()=>!0}]},yield{name:"ライトロード・ビースト ウォルフ",actions:[S,T,w,{title:"①自己再生",isMandatory:!0,playType:"TriggerEffect",spellSpeed:"Normal",executableCells:["Graveyard"],executablePeriods:[..._,...F],executableDuelistTypes:["Controller"],validate:e=>{if(!e.action.entity.wasMovedAtPreviousChain||e.action.entity.wasMovedFrom.cellType!=="Deck")return;const t=e.activator.getMonsterZones();return e.activator.getEnableSummonList(e.activator,"SpecialSummon",["Effect"],e.action,[{monster:e.action.entity,posList:P,cells:t}],[],!1).length?[]:void 0},prepare:async()=>({selectedEntities:[],chainBlockTags:["SpecialSummonFromGraveyard"],prepared:void 0}),execute:e=>ee(e),settle:async()=>!0}]},yield{name:"伝説の白石",actions:[S,T,w,A,{title:"①サーチ",isMandatory:!0,playType:"TriggerEffect",spellSpeed:"Normal",executableCells:["Graveyard"],executablePeriods:z,executableDuelistTypes:["Controller"],validate:e=>{if(e.action.entity.wasMovedAtPreviousChain&&e.action.entity.wasMovedFrom.cellType!=="Banished")return e.activator.getDeckCell().cardEntities.find(t=>t.nm==="青眼の白龍")?[]:void 0},prepare:async()=>({selectedEntities:[],chainBlockTags:["SearchFromDeck"],prepared:void 0}),execute:async e=>{const t=e.activator.getDeckCell().cardEntities.find(i=>i.nm==="青眼の白龍");return t?(await t.addToHand(["Effect"],e.action.entity,e.activator),e.activator.getDeckCell().shuffle(),!0):!1},settle:async()=>!0}]},yield*[{name:"灰流うらら",chainBlockTags:["Draw","SearchFromDeck","SendToGraveyardFromDeck","SpecialSummonFromDeck"]},{name:"屋敷わらし",chainBlockTags:["BanishFromGraveyard","SpecialSummonFromGraveyard","AddToHandFromGraveyard"]}].map(e=>({name:e.name,actions:[S,T,w,A,{title:"①無効化",isMandatory:!1,playType:"QuickEffect",spellSpeed:"Quick",executableCells:["Hand"],executablePeriods:_,executableDuelistTypes:["Controller"],isOnlyNTimesPerTurn:1,negatePreviousBlock:!0,canPayCosts:t=>t.activator.canDiscard([t.action.entity]),validate:(t,i)=>i.length===0?void 0:i[t.index-1].chainBlockTags.union(e.chainBlockTags).length>0?[]:void 0,payCosts:async t=>(await t.action.entity.discard(["Cost"],t.action.entity,t.activator),{sendToGraveyard:[t.action.entity]}),prepare:async()=>({selectedEntities:[],chainBlockTags:["NegateCardEffect"],prepared:void 0}),execute:async(t,i)=>{const a=i[t.index-1];return a.isNegatedEffectBy=t.action,!0},settle:async()=>!0}]})),yield*["翻弄するエルフの剣士","ロードランナー","氷結界の修験者"].map(e=>({name:e,actions:[S,T,w,A],continuousEffects:[Et("①戦闘破壊耐性","Monster",t=>[t],()=>!0,t=>[new pe("①戦闘破壊耐性",()=>!0,!0,t,{},()=>!0,["BattleDestroy"],(i,a)=>!t.isEffective||(a.atk??0)<1900?!0:(t.duel.log.info(`${t.toString()}は攻撃力1900以上のモンスターとの先頭では破壊されない。`,t.controller),!1))])]}))}const Gt=Object.freeze(Object.defineProperty({__proto__:null,default:ar},Symbol.toStringTag,{value:"Module"}));function*rr(){yield*["ラージマウス","レインボー・フラワー","レッグル","女王の影武者","人造人間７号"].map(e=>({name:e,actions:[S,T,w,A],continuousEffects:[Ya]}))}const Ut=Object.freeze(Object.defineProperty({__proto__:null,default:rr},Symbol.toStringTag,{value:"Module"}));function*nr(){yield*[{name:"キラー・ポテト",filter:e=>e.attr.includes("Dark")&&(e.atk??9999)<=1500,qtyList:[1],posList:["Attack"],destoryTypes:["EffectDestroy"],executableCells:["Graveyard"]},{name:"キラー・トマト",filter:e=>e.attr.includes("Dark")&&(e.atk??9999)<=1500,qtyList:[1],posList:["Attack"],destoryTypes:["BattleDestroy"],executableCells:["Graveyard"]},{name:"巨大ネズミ",filter:e=>e.attr.includes("Earth")&&(e.atk??9999)<=1500,qtyList:[1],posList:["Attack"],destoryTypes:["BattleDestroy"],executableCells:["Graveyard"]},{name:"グリズリーマザー",filter:e=>e.attr.includes("Water")&&(e.atk??9999)<=1500,qtyList:[1],posList:["Attack"],destoryTypes:["BattleDestroy"],executableCells:["Graveyard"]},{name:"シャインエンジェル",filter:e=>e.attr.includes("Light")&&(e.atk??9999)<=1500,qtyList:[1],posList:["Attack"],destoryTypes:["BattleDestroy"],executableCells:["Graveyard"]},{name:"ドラゴンフライ",filter:e=>e.attr.includes("Wind")&&(e.atk??9999)<=1500,qtyList:[1],posList:["Attack"],destoryTypes:["BattleDestroy"],executableCells:["Graveyard"]},{name:"ＵＦＯタートル",filter:e=>e.attr.includes("Fire")&&(e.atk??9999)<=1500,qtyList:[1],posList:["Attack"],destoryTypes:["BattleDestroy"],executableCells:["Graveyard"]},{name:"荒野の女戦士",filter:e=>e.attr.includes("Earth")&&e.types.includes("Warrior")&&(e.atk??9999)<=1500,qtyList:[1],posList:["Attack"],destoryTypes:["BattleDestroy"],executableCells:["Graveyard"]},{name:"リトル・トルーパー",filter:e=>e.types.includes("Warrior")&&(e.lvl??9999)<3,qtyList:[1],posList:["Set"],destoryTypes:["BattleDestroy"],executableCells:["Graveyard","Banished"]},{name:"破面竜",filter:e=>e.types.includes("Warrior")&&(e.def??9999)<=1500,qtyList:[1],posList:["Attack","Defense"],destoryTypes:["BattleDestroy"],executableCells:["Graveyard"]},{name:"共鳴虫",filter:e=>e.types.includes("Insect")&&(e.atk??9999)<=1500,qtyList:[1],posList:["Attack","Defense"],destoryTypes:["BattleDestroy"],executableCells:["Graveyard"]},{name:"ピラミッド・タートル",filter:e=>e.types.includes("Zombie")&&(e.def??9999)<=2e3,qtyList:[1],posList:["Attack","Defense"],destoryTypes:["BattleDestroy"],executableCells:["Graveyard"]},{name:"ユーフォロイド",filter:e=>e.types.includes("Machine")&&(e.atk??9999)<=1500,qtyList:[1],posList:["Attack"],destoryTypes:["BattleDestroy"],executableCells:["Graveyard"]},{name:"ヘル・セキュリティ",filter:e=>e.types.includes("Fiend")&&(e.lvl??9999)===1,qtyList:[1],posList:["Attack","Defense"],destoryTypes:["BattleDestroy"],executableCells:["Graveyard"]},{name:"ガスタ・イグル",filter:e=>(e.status.nameTags??[]).includes("ガスタ")&&(e.status.monsterCategories??[]).includes("Tuner"),qtyList:[1],posList:["Attack","Defense"],destoryTypes:["BattleDestroy"],executableCells:["Graveyard"]},{name:"幻影の魔術士",filter:e=>(e.status.nameTags??[]).includes("ＨＥＲＯ")&&(e.atk??9999)<=1e3,qtyList:[1],posList:["Defense"],destoryTypes:["BattleDestroy"],executableCells:["Graveyard"]},{name:"ジェネクス・サーチャー",filter:e=>(e.status.nameTags??[]).includes("ジェネクス")&&(e.atk??9999)<=1500,qtyList:[1],posList:["Attack"],destoryTypes:["BattleDestroy"],executableCells:["Graveyard"]},{name:"紫炎の足軽",filter:e=>(e.status.nameTags??[]).includes("六武衆")&&(e.lvl??12)<=3,qtyList:[1],posList:["Attack","Defense"],destoryTypes:["BattleDestroy"],executableCells:["Graveyard"]},{name:"スレイブ・エイプ",filter:e=>(e.status.nameTags??[]).includes("剣闘獣")&&(e.lvl??12)<=4,qtyList:[1],posList:["Attack","Defense"],destoryTypes:["BattleDestroy"],executableCells:["Graveyard"]},{name:"ゼンマイハニー",filter:e=>(e.status.nameTags??[]).includes("ゼンマイ")&&(e.lvl??12)<=4,qtyList:[1],posList:["Attack","Defense"],destoryTypes:["BattleDestroy"],executableCells:["Graveyard"]},{name:"ＸＸ－セイバー エマーズブレイド",filter:e=>(e.status.nameTags??[]).includes("Ｘ－セイバー")&&(e.lvl??12)<=4,qtyList:[1],posList:["Attack","Defense"],destoryTypes:["BattleDestroy"],executableCells:["Graveyard"]},{name:"軍隊竜",filter:e=>e.nm==="軍隊竜",qtyList:[1],posList:["Attack","Defense"],destoryTypes:["BattleDestroy"],executableCells:["Graveyard"]},{name:"アサルト・ガンドッグ",filter:e=>e.nm==="アサルト・ガンドッグ",qtyList:[1,2,3,4,5],posList:["Attack","Defense"],destoryTypes:["BattleDestroy"],executableCells:["Graveyard"]},{name:"ハイエナ",filter:e=>e.nm==="ハイエナ",qtyList:[1,2,3,4,5],posList:["Attack","Defense"],destoryTypes:["BattleDestroy"],executableCells:["Graveyard"]}].map(e=>({name:e.name,actions:[{title:"①リクルート",isMandatory:!1,playType:"TriggerEffect",spellSpeed:"Normal",executableCells:e.executableCells,executablePeriods:e.destoryTypes.includes("EffectDestroy")?[..._,...F]:["b1DEnd","b2DEnd"],executableDuelistTypes:["Controller"],validate:t=>{if(!t.action.entity.wasMovedAtPreviousChain)return;const i=t.activator.getMonsterZones();if(t.activator.getEnableSummonList(t.activator,"SpecialSummon",["Effect"],t.action,t.activator.getDeckCell().cardEntities.filter(e.filter).filter(r=>r.kind==="Monster").filter(r=>r.canBeTargetOfEffect(t)).map(r=>({monster:r,posList:e.posList,cells:i})),[],!1).length)return[]},prepare:async()=>({selectedEntities:[],chainBlockTags:["SpecialSummonFromDeck"],prepared:void 0}),execute:async t=>{const i=t.activator.getDeckCell().cardEntities.filter(e.filter),a=t.activator.getMonsterZones();return!!t.activator.summonMany(t.activator,"SpecialSummon",["Effect"],t.action,i.map(n=>({monster:n,posList:e.posList,cells:a})),[],!1,e.qtyList.length>1?void 0:e.qtyList[0],n=>e.qtyList.includes(n.length),!1)},settle:async()=>!0},S,T,w,A]}))}const jt=Object.freeze(Object.defineProperty({__proto__:null,default:nr},Symbol.toStringTag,{value:"Module"}));function*sr(){yield{name:"おろかな埋葬",actions:[{title:"発動",isMandatory:!1,playType:"CardActivation",spellSpeed:"Normal",executableCells:["Hand","SpellAndTrapZone"],executablePeriods:["main1","main2"],executableDuelistTypes:["Controller"],priorityForNPC:40,validate:e=>{if(e.activator.getDeckCell().cardEntities.filter(t=>t.kind==="Monster").length!==0)return b(e)},prepare:async()=>({selectedEntities:[],chainBlockTags:["SendToGraveyardFromDeck"],prepared:void 0}),execute:async e=>{const t=e.activator.getDeckCell().cardEntities.filter(a=>a.kind==="Monster");if(t.length===0)return!1;const i=await e.activator.waitSelectEntity(t,"墓地に送るモンスターを選択",!1);if(!i)throw new L(e);return await i.sendToGraveyard(["Effect"],e.action.entity,e.activator),await e.activator.getDeckCell().shuffle(),!0},settle:async()=>!0},C]},yield{name:"おろかな副葬",actions:[{title:"発動",isMandatory:!1,playType:"CardActivation",spellSpeed:"Normal",executableCells:["Hand","SpellAndTrapZone"],executablePeriods:["main1","main2"],executableDuelistTypes:["Controller"],isOnlyNTimesPerTurn:1,priorityForNPC:40,validate:e=>{if(e.activator.getDeckCell().cardEntities.filter(t=>t.kind!=="Monster").length!==0)return b(e)},prepare:async()=>({selectedEntities:[],chainBlockTags:["SendToGraveyardFromDeck"],prepared:void 0}),execute:async e=>{const t=e.activator.getDeckCell().cardEntities.filter(a=>a.kind!=="Monster");if(t.length===0)return!1;const i=await e.activator.waitSelectEntity(t,"墓地に送る魔法罠を選択",!1);if(!i)throw new L(e);return await i.sendToGraveyard(["Effect"],e.action.entity,e.activator),!0},settle:async()=>!0},C]},yield{name:"死者蘇生",actions:[{title:"発動",isMandatory:!1,playType:"CardActivation",spellSpeed:"Normal",executableCells:["Hand","SpellAndTrapZone"],executablePeriods:["main1","main2"],executableDuelistTypes:["Controller"],hasToTargetCards:!0,validate:e=>{const t=e.activator.getMonsterZones();if(e.activator.getEnableSummonList(e.activator,"SpecialSummon",["Effect"],e.action,e.activator.duel.field.getCells("Graveyard").flatMap(a=>a.cardEntities).filter(a=>a.kind==="Monster").filter(a=>a.canBeTargetOfEffect(e)).map(a=>({monster:a,posList:P,cells:t})),[],!1).length)return b(e)},prepare:e=>ae(e,e.activator.duel.field.getCells("Graveyard").flatMap(t=>t.cardEntities).filter(t=>t.kind==="Monster").filter(t=>t.canBeTargetOfEffect(e))),execute:async e=>re(e),settle:async()=>!0},C]},yield*[{name:"大嵐",cellTypes:te,isOnlyEnemies:!1},{name:"ハーピィの羽根帚",cellTypes:te,isOnlyEnemies:!0},{name:"ブラック・ホール",cellTypes:R,isOnlyEnemies:!1},{name:"サンダー・ボルト",cellTypes:R,isOnlyEnemies:!0}].map(e=>({name:e.name,actions:[{title:"発動",isMandatory:!1,playType:"CardActivation",spellSpeed:"Normal",executableCells:["Hand","SpellAndTrapZone"],executablePeriods:["main1","main2"],executableDuelistTypes:["Controller"],validate:t=>{let i=t.action.entity.field.getCells(...e.cellTypes).flatMap(a=>a.cardEntities).filter(a=>a!==t.action.entity);if(e.isOnlyEnemies&&(i=i.filter(a=>a.controller!==t.activator)),!!i.length)return b(t)},prepare:async t=>{let i=t.action.entity.field.getCells(...e.cellTypes).flatMap(a=>a.cardEntities).filter(a=>a!==t.action.entity);return e.isOnlyEnemies&&(i=i.filter(a=>a.controller!==t.activator)),{selectedEntities:[],chainBlockTags:t.action.calcChainBlockTagsForDestroy(t.activator,i),prepared:void 0}},execute:async t=>{let i=t.action.entity.field.getCells(...e.cellTypes).flatMap(a=>a.cardEntities).filter(a=>a!==t.action.entity);return e.isOnlyEnemies&&(i=i.filter(a=>a.controller!==t.activator)),await v.tryDestroy(i,t),!0},settle:async()=>!0},C]})),yield{name:"ハリケーン",actions:[{title:"発動",isMandatory:!1,playType:"CardActivation",spellSpeed:"Normal",executableCells:["Hand","SpellAndTrapZone"],executablePeriods:["main1","main2"],executableDuelistTypes:["Controller"],validate:e=>{if(e.action.entity.field.getCells("SpellAndTrapZone","FieldSpellZone").flatMap(i=>i.cardEntities).filter(i=>i!==e.action.entity).length)return b(e)},prepare:async()=>({selectedEntities:[],chainBlockTags:["BounceToHand"],prepared:void 0}),execute:async(e,t)=>{const i=t.map(r=>r.action).filter(r=>r.playType==="CardActivation").map(r=>r.entity).filter(r=>r.isOnFieldStrictly).filter(r=>r.face==="FaceUp").filter(r=>!r.isLikeContinuousSpell),a=e.action.entity.field.getCells("SpellAndTrapZone","FieldSpellZone").flatMap(r=>r.cardEntities).filter(r=>!i.includes(r));return await v.returnManyToHandForTheSameReason(a,["Effect"],e.action.entity,e.activator),!0},settle:async()=>!0},C]},yield{name:"光の援軍",actions:[{title:"発動",isMandatory:!1,playType:"CardActivation",spellSpeed:"Normal",executableCells:["Hand","SpellAndTrapZone"],executablePeriods:["main1","main2"],executableDuelistTypes:["Controller"],priorityForNPC:40,canPayCosts:e=>e.activator.getDeckCell().cardEntities.length>3,validate:e=>{if(e.activator.getDeckCell().cardEntities.filter(t=>t.kind==="Monster").filter(t=>(t.lvl??13)<5).filter(t=>t.status.nameTags&&t.status.nameTags.includes("ライトロード")).length!==0)return b(e)},payCosts:async e=>{const t=e.activator.getDeckCell().cardEntities.slice(0,3);return await v.sendManyToGraveyardForTheSameReason(t,["Cost"],e.action.entity,e.activator),{sendToGraveyard:t}},prepare:async()=>({selectedEntities:[],chainBlockTags:["SearchFromDeck"],prepared:void 0}),execute:async e=>{const t=e.activator.getDeckCell().cardEntities.filter(a=>a.kind==="Monster").filter(a=>(a.lvl??13)<5).filter(a=>a.status.nameTags&&a.status.nameTags.includes("ライトロード"));if(t.length===0)return!1;const i=await e.activator.waitSelectEntity(t,"手札に加えるモンスターを選択",!1);if(!i)throw new L(e);return await i.addToHand(["Effect"],e.action.entity,e.activator),!0},settle:async()=>!0},C]},yield{name:"ワン・フォー・ワン",actions:[{title:"発動",isMandatory:!1,playType:"CardActivation",spellSpeed:"Normal",executableCells:["Hand","SpellAndTrapZone"],executablePeriods:["main1","main2"],executableDuelistTypes:["Controller"],priorityForNPC:40,canPayCosts:e=>{if(e.activator.getDeckCell().cardEntities.every(t=>(t.lvl??12)>1)){if(e.activator.getHandCell().cardEntities.every(t=>(t.lvl??12)>1)||e.activator.getHandCell().cardEntities.filter(t=>t.kind==="Monster").length<2)return!1}else if(e.activator.getHandCell().cardEntities.filter(t=>t.kind==="Monster").length===0)return!1;return!0},validate:e=>{let t=[...e.activator.getDeckCell().cardEntities.filter(n=>(n.lvl??12)===1),...e.activator.getHandCell().cardEntities.filter(n=>(n.lvl??12)===1)];const i=e.activator.getHandCell().cardEntities;(i.length<2||!e.ignoreCost)&&(t=t.filter(n=>!i.includes(n)));const a=e.activator.getMonsterZones();if(e.activator.getEnableSummonList(e.activator,"SpecialSummon",["Effect"],e.action,t.map(n=>({monster:n,posList:P,cells:a})),[],!1).length)return b(e)},payCosts:async(e,t,i)=>{const a=[...e.activator.getDeckCell().cardEntities.filter(u=>(u.lvl??12)===1),...e.activator.getHandCell().cardEntities.filter(u=>(u.lvl??12)===1)],r=e.activator.getMonsterZones(),n=e.activator.getEnableSummonList(e.activator,"SpecialSummon",["Effect"],e.action,a.map(u=>({monster:u,posList:P,cells:r})),[],!1);let l=e.activator.getHandCell().cardEntities.filter(u=>u.kind==="Monster");n.length===1&&(l=l.filter(u=>!n.map(c=>c.monster).includes(u)));const o=await e.activator.waitSelectEntity(l,"墓地へ送るモンスターを選択",i);if(!o)throw new L(e);return await o.sendToGraveyard(["Cost"],e.action.entity,e.activator),{sendToGraveyard:[o]}},prepare:async()=>({selectedEntities:[],chainBlockTags:["SpecialSummonFromDeck"],prepared:void 0}),execute:async e=>{const t=[...e.activator.getDeckCell().cardEntities.filter(r=>r.lvl===1),...e.activator.getHandCell().cardEntities.filter(r=>r.lvl===1)],i=e.activator.getMonsterZones();return!!await e.activator.summonOne(e.activator,"SpecialSummon",["Effect"],e.action,t.map(r=>({monster:r,posList:P,cells:i})),[],!1,!1)},settle:async()=>!0},C]},yield{name:"封印の黄金櫃",actions:[{title:"発動",isMandatory:!1,playType:"CardActivation",spellSpeed:"Normal",executableCells:["Hand","SpellAndTrapZone"],executablePeriods:["main1","main2"],executableDuelistTypes:["Controller"],validate:e=>{if(!e.activator.getDeckCell().cardEntities.every(t=>!e.activator.canTryBanish(t,"BanishAsEffect",e.action)))return b(e)},prepare:async()=>({selectedEntities:[],chainBlockTags:["BanishFromDeck"],prepared:void 0}),execute:async e=>{const t=e.activator.getDeckCell().cardEntities.filter(r=>e.activator.canTryBanish(r,"BanishAsEffect",e.action)),i=await e.activator.waitSelectEntity(t,"除外するカードを選択。",!1);if(!i)throw new L(e);return(await v.tryBanish("BanishAsEffect",[i],e)).forEach(r=>r.counterHolder.removeAll("GoldSarcophagus")),!0},settle:async()=>!0},Fa("回収カウント進行",["stanby"],e=>{e.activator.isTurnPlayer&&e.action.entity.field.getCells("Banished").flatMap(t=>t.cardEntities).filter(t=>t.moveLog.latestRecord.movedBy===e.action.entity).filter(t=>t.moveLog.latestRecord.actionOwner===e.activator).forEach(t=>{t.counterHolder.add("GoldSarcophagus",1,e.action.entity);const i=t.counterHolder.getQty("GoldSarcophagus",e.action.entity);i<3&&e.activator.duel.log.info(`${t.toString()}のターンカウント：${i-1}⇒${i}`)})}),{title:"回収",isMandatory:!0,playType:"LingeringEffect",spellSpeed:"Normal",executableCells:I,executablePeriods:["stanby"],executableDuelistTypes:["Controller","Opponent"],validate:e=>{if(e.activator.isTurnPlayer)return e.action.entity.field.getCells("Banished").flatMap(t=>t.cardEntities).filter(t=>t.moveLog.latestRecord.movedBy===e.action.entity).filter(t=>t.moveLog.latestRecord.actionOwner===e.activator).some(t=>t.counterHolder.getQty("GoldSarcophagus")===2)?[]:void 0},prepare:q,execute:async e=>{const t=e.action.entity.field.getCells("Banished").flatMap(a=>a.cardEntities).filter(a=>a.moveLog.latestRecord.movedBy===e.action.entity).filter(a=>a.moveLog.latestRecord.actionOwner===e.activator).filter(a=>a.counterHolder.getQty("GoldSarcophagus")===2);if(!t.length)throw new m("想定されない状態",e);let i=t[0];if(t.length>1){const a=await e.activator.waitSelectEntity(t,"回収するカードを選択。",!1);if(!a)throw new L(e);i=a}return await i.addToHand(["Effect"],e.action.entity,e.activator),!0},settle:async()=>!0},C]}}const Vt=Object.freeze(Object.defineProperty({__proto__:null,default:sr},Symbol.toStringTag,{value:"Module"}));function*lr(){yield{name:"強欲な壺",actions:[{title:"発動",isMandatory:!1,playType:"CardActivation",spellSpeed:"Normal",executableCells:["Hand","SpellAndTrapZone"],executablePeriods:["main1","main2"],executableDuelistTypes:["Controller"],priorityForNPC:20,validate:e=>{if(!(e.activator.getDeckCell().cardEntities.length<2)&&e.activator.canDraw&&e.activator.canAddToHandFromDeck)return b(e)},prepare:async()=>({selectedEntities:[],chainBlockTags:["Draw"],prepared:void 0}),execute:async e=>(await e.activator.draw(2,e.action.entity,e.activator),!0),settle:async()=>!0},C]},yield{name:"貪欲な壺",actions:[{title:"発動",isMandatory:!1,playType:"CardActivation",spellSpeed:"Normal",executableCells:["Hand","SpellAndTrapZone"],executablePeriods:["main1","main2"],executableDuelistTypes:["Controller"],priorityForNPC:30,validate:e=>{if(!(e.activator.getGraveyard().cardEntities.filter(t=>t.kind==="Monster").filter(t=>t.canBeTargetOfEffect(e)).length<5)&&e.activator.canDraw&&e.activator.canAddToHandFromDeck)return b(e)},prepare:async e=>{const t=await e.activator.waitSelectEntities(e.activator.getGraveyard().cardEntities.filter(i=>i.kind==="Monster").filter(i=>i.canBeTargetOfEffect(e)),5,i=>i.length===5,"デッキに戻すモンスターを選択。",!1);if(t)return{selectedEntities:t,chainBlockTags:["Draw","ReturnToDeckFromGraveyard"],prepared:void 0}},execute:async e=>e.selectedEntities.some(t=>t.wasMovedAtCurrentChain)?!1:(await v.returnManyToDeckForTheSameReason("Random",e.selectedEntities,["Effect"],e.action.entity,e.activator),await e.activator.draw(2,e.action.entity,e.activator),!0),settle:async()=>!0},C]},yield{name:"天使の施し",actions:[{title:"発動",isMandatory:!1,playType:"CardActivation",spellSpeed:"Normal",executableCells:["Hand","SpellAndTrapZone"],executablePeriods:["main1","main2"],executableDuelistTypes:["Controller"],priorityForNPC:30,validate:e=>{if(!(e.activator.getDeckCell().cardEntities.length<3))return b(e)},prepare:async()=>({selectedEntities:[],chainBlockTags:["Draw","DiscordAsEffect"],prepared:void 0}),execute:async e=>(await e.activator.draw(3,e.action.entity,e.activator),await e.activator.discard(2,["Effect","Discard"],e.action.entity,e.activator,()=>!0,e.activator),!0),settle:async()=>!0},C]},yield{name:"成金ゴブリン",actions:[{title:"発動",isMandatory:!1,playType:"CardActivation",spellSpeed:"Normal",executableCells:["Hand","SpellAndTrapZone"],executablePeriods:["main1","main2"],executableDuelistTypes:["Controller"],priorityForNPC:20,validate:e=>{if(!(e.activator.getDeckCell().cardEntities.length<1))return b(e)},prepare:async()=>({selectedEntities:[],chainBlockTags:["Draw"],prepared:void 0}),execute:async e=>(await e.activator.draw(1,e.action.entity,e.activator),e.action.entity.field.duel.clock.incrementProcSeq(),e.activator.getOpponentPlayer().heal(1e3,e.action.entity),!0),settle:async()=>!0},C]},yield{name:"手札抹殺",actions:[{title:"発動",isMandatory:!1,playType:"CardActivation",spellSpeed:"Normal",executableCells:["Hand","SpellAndTrapZone"],executablePeriods:["main1","main2"],executableDuelistTypes:["Controller"],validate:e=>{if(!(e.activator.getDeckCell().cardEntities.length<e.activator.getHandCell().cardEntities.filter(t=>t.seq!==e.action.entity.seq).length)&&e.action.entity.field.getAllCells().filter(t=>t.cellType==="Hand").flatMap(t=>t.cardEntities).filter(t=>t.seq!==e.action.entity.seq).length!==0)return b(e)},prepare:async()=>({selectedEntities:[],chainBlockTags:["SearchFromDeck"],prepared:void 0}),execute:async e=>{const t=e.activator.getHandCell().cardEntities.length,i=e.activator.getOpponentPlayer().getHandCell().cardEntities.length;return await v.sendManyToGraveyardForTheSameReason(e.action.entity.field.getCells("Hand").flatMap(a=>a.cardEntities),["Effect","Discard"],e.action.entity,e.activator),e.activator.duel.clock.incrementProcSeq(),await v.drawAtSameTime(e.activator,e.action.entity,t,i),!0},settle:async()=>!0},C]},yield{name:"打ち出の小槌",actions:[{title:"発動",isMandatory:!1,playType:"CardActivation",spellSpeed:"Normal",executableCells:["Hand","SpellAndTrapZone"],executablePeriods:["main1","main2"],executableDuelistTypes:["Controller"],validate:e=>{if(e.activator.canDraw)return b(e)},prepare:async()=>({selectedEntities:[],chainBlockTags:["Draw"],prepared:void 0}),execute:async e=>{const t=e.activator.getHandCell().cardEntities;if(!t.length)return!1;const i=await e.activator.waitSelectEntities(t,void 0,a=>a.length>0,"デッキに戻すカードを選択。",!1);if(!i)throw new L(e);return await v.returnManyToDeckForTheSameReason("Random",i,["Effect"],e.action.entity,e.activator),e.activator.duel.clock.incrementTotalProcSeq(),await e.activator.draw(i.length,e.action.entity,e.activator),!0},settle:async()=>!0},C]}}const zt=Object.freeze(Object.defineProperty({__proto__:null,default:lr},Symbol.toStringTag,{value:"Module"}));function*or(){yield*[{name:"増援",filter:e=>e.origin.kind==="Monster"&&e.types.includes("Warrior")&&(e.origin.level??5)<5},{name:"化石調査",filter:e=>e.origin.kind==="Monster"&&e.types.includes("Dinosaur")&&(e.origin.level??6)<6},{name:"Ｅ－エマージェンシーコール",filter:e=>e.origin.kind==="Monster"&&(e.origin.nameTags??[]).includes("Ｅ・ＨＥＲＯ")},{name:"召集の聖刻印",filter:e=>e.origin.kind==="Monster"&&(e.origin.nameTags??[]).includes("聖刻")},{name:"召喚師のスキル",filter:e=>e.origin.kind==="Monster"&&(e.origin.monsterCategories??[]).includes("Normal")&&(e.origin.level??4)>4},{name:"トゥーンのもくじ",filter:e=>(e.origin.nameTags??[]).includes("トゥーン")},{name:"融合賢者",filter:e=>e.origin.name==="融合"},{name:"虹の架け橋",filter:e=>e.origin.kind!=="Monster"&&(e.origin.nameTags??[]).includes("宝玉")},{name:"紫炎の狼煙",filter:e=>e.origin.kind==="Monster"&&(e.origin.nameTags??[]).includes("六武衆")&&(e.origin.level??4)<4},{name:"テラ・フォーミング",filter:e=>e.origin.kind==="Spell"&&e.origin.spellCategory==="Field"},{name:"コール・リゾネーター",filter:e=>e.origin.kind==="Monster"&&(e.origin.nameTags??[]).includes("リゾネーター")}].map(e=>({name:e.name,actions:[{title:"発動",isMandatory:!1,playType:"CardActivation",spellSpeed:"Normal",executableCells:["Hand","SpellAndTrapZone"],executablePeriods:["main1","main2"],executableDuelistTypes:["Controller"],priorityForNPC:40,validate:t=>{if(t.activator.getDeckCell().cardEntities.filter(e.filter).length&&t.activator.canDraw)return b(t)},prepare:async()=>({selectedEntities:[],chainBlockTags:["SearchFromDeck"],prepared:void 0}),execute:async t=>{const i=t.activator.getDeckCell().cardEntities.filter(e.filter);if(!i.length)return!1;const a=await t.activator.waitSelectEntity(i,"手札に加えるカードを選択",!1);return a?(await a.addToHand(["Effect"],t.action.entity,t.activator),!0):!1},settle:async()=>!0},C]})),yield*[{name:"戦士の生還",filter:e=>e.kind==="Monster"&&e.types.includes("Warrior"),qty:1},{name:"ダーク・バースト",filter:e=>e.kind==="Monster"&&e.attr.includes("Dark")&&(e.atk??9999)<=1500,qty:1},{name:"悪夢再び",filter:e=>e.kind==="Monster"&&e.attr.includes("Dark")&&(e.def??9999)===0,qty:2},{name:"サルベージ",filter:e=>e.kind==="Monster"&&e.attr.includes("Water")&&(e.atk??9999)<=1500,qty:2},{name:"バッテリーリサイクル",filter:e=>e.kind==="Monster"&&e.types.includes("Thunder")&&(e.atk??9999)<=1500,qty:2},{name:"闇の量産工場",filter:e=>e.kind==="Monster"&&(e.status.monsterCategories??[]).includes("Normal"),qty:2}].map(e=>({name:e.name,actions:[{title:"発動",isMandatory:!1,playType:"CardActivation",spellSpeed:"Normal",executableCells:["Hand","SpellAndTrapZone"],executablePeriods:["main1","main2"],executableDuelistTypes:["Controller"],hasToTargetCards:!0,priorityForNPC:40,validate:t=>{if(!(t.activator.getGraveyard().cardEntities.filter(e.filter).length<e.qty))return b(t)},prepare:async()=>({selectedEntities:[],chainBlockTags:["AddToHandFromGraveyard"],prepared:void 0}),execute:async t=>{const i=t.activator.getGraveyard().cardEntities.filter(e.filter);if(i.length===0)return!1;const a=await t.activator.waitSelectEntities(i,e.qty,r=>r.length===e.qty,"手札に加えるカードを選択",!1);for(const r of a??[])await r.addToHand(["Effect"],t.action.entity,t.activator);return!0},settle:async()=>!0},C]})),yield*[{name:"トレード・イン",filter:e=>e.kind==="Monster"&&(e.lvl??0)===8},{name:"調和の宝札",filter:e=>e.kind==="Monster"&&(e.origin.monsterCategories??[]).includes("Tuner")&&e.types.includes("Dragon")&&(e.atk??9999)<=1e3},{name:"デステニー・ドロー",filter:e=>e.kind==="Monster"&&(e.origin.nameTags??[]).includes("Ｄ－ＨＥＲＯ")}].map(e=>({name:e.name,actions:[{title:"発動",isMandatory:!1,playType:"CardActivation",spellSpeed:"Normal",executableCells:["Hand","SpellAndTrapZone"],executablePeriods:["main1","main2"],executableDuelistTypes:["Controller"],priorityForNPC:40,canPayCosts:t=>t.activator.getHandCell().cardEntities.filter(e.filter).some(i=>t.activator.canDiscard([i])),validate:t=>{if(!(t.activator.getDeckCell().cardEntities.length<2))return b(t)},payCosts:async t=>({discard:await t.activator.discard(1,["Discard","Cost"],t.action.entity,t.activator,e.filter)}),prepare:async()=>({selectedEntities:[],chainBlockTags:["Draw"],prepared:void 0}),execute:async t=>(await t.activator.draw(2,t.action.entity,t.activator),!0),settle:async()=>!0},C]})),yield*[{name:"火の粉",calcHeal:()=>[0,-200]},{name:"雷鳴",calcHeal:()=>[0,-300]},{name:"ファイヤー・ボール",calcHeal:()=>[0,-500]},{name:"火あぶりの刑",calcHeal:()=>[0,-600]},{name:"昼夜の大火事",calcHeal:()=>[0,-800]},{name:"火炎地獄",calcHeal:()=>[-500,-1e3]},{name:"盗人ゴブリン",calcHeal:()=>[500,-500]},{name:"ブルー・ポーション",calcHeal:()=>[400,0]},{name:"レッド・ポーション",calcHeal:()=>[500,0]},{name:"ゴブリンの秘薬",calcHeal:()=>[600,0]},{name:"天使の生き血",calcHeal:()=>[800,0]},{name:"治療の神 ディアン・ケト",calcHeal:()=>[1e3,0]},{name:"恵みの雨",calcHeal:()=>[1e3,1e3]}].map(e=>({name:e.name,actions:[{title:"発動",isMandatory:!1,playType:"CardActivation",spellSpeed:"Normal",executableCells:["Hand","SpellAndTrapZone"],executablePeriods:["main1","main2"],executableDuelistTypes:["Controller"],validate:b,prepare:async()=>{const[t,i]=e.calcHeal(),a=[];return t<0&&a.push("DamageToSelf"),i<0&&a.push("DamageToOpponent"),{selectedEntities:[],chainBlockTags:a,prepared:void 0}},execute:async t=>{const[i,a]=e.calcHeal();return a>0?t.activator.getOpponentPlayer().heal(a,t.action.entity):a<0&&t.activator.getOpponentPlayer().effectDamage(Math.abs(a),t),i>0?t.activator.heal(i,t.action.entity):i<0&&t.activator.effectDamage(Math.abs(i),t),!0},settle:async()=>!0},C]}))}const Qt=Object.freeze(Object.defineProperty({__proto__:null,default:or},Symbol.toStringTag,{value:"Module"}));function*cr(){yield{name:"強欲な瓶",actions:[C,{title:"発動",isMandatory:!1,playType:"CardActivation",spellSpeed:"Quick",executableCells:["SpellAndTrapZone"],executablePeriods:_,executableDuelistTypes:["Controller"],validate:e=>{if(!(e.activator.getDeckCell().cardEntities.length<2)&&e.activator.canDraw&&e.activator.canAddToHandFromDeck)return b(e)},prepare:async()=>({selectedEntities:[],chainBlockTags:["Draw"],prepared:void 0}),execute:async e=>(await e.activator.draw(1,e.action.entity,e.activator),!0),settle:async()=>!0}]},yield{name:"戦線復帰",actions:[{title:"発動",isMandatory:!1,playType:"CardActivation",spellSpeed:"Quick",executableCells:["SpellAndTrapZone"],executablePeriods:_,executableDuelistTypes:["Controller"],hasToTargetCards:!0,validate:e=>{const t=e.activator.getMonsterZones();if(e.activator.getEnableSummonList(e.activator,"SpecialSummon",["Effect"],e.action,e.activator.getGraveyard().cardEntities.filter(a=>a.kind==="Monster").filter(a=>a.canBeTargetOfEffect(e)).map(a=>({monster:a,posList:["Defense"],cells:t})),[],!1).length)return b(e)},prepare:e=>ae(e,e.activator.getGraveyard().cardEntities.filter(t=>t.kind==="Monster").filter(t=>t.canBeTargetOfEffect(e)),["Defense"]),execute:async e=>re(e,["Defense"]),settle:async()=>!0},C]}}const Wt=Object.freeze(Object.defineProperty({__proto__:null,default:cr},Symbol.toStringTag,{value:"Module"}));function*ur(){yield*["炸裂装甲","次元幽閉"].map(e=>({name:e,actions:[C,{title:"発動",playType:"CardActivation",spellSpeed:"Quick",isMandatory:!1,executableCells:["SpellAndTrapZone"],executablePeriods:["b1Battle","b2Battle"],executableDuelistTypes:["Controller"],hasToTargetCards:!0,validate:t=>{if(!t.activator.duel.clock.isUponAttackDeclaration()||t.activator.isTurnPlayer)return;const i=t.activator.duel.attackingMonster;if(!i)throw new m("想定されない状態",t,i);if(i.canBeTargetOfEffect(t)&&!(e==="次元幽閉"&&!t.activator.canTryBanish(i,"BanishAsEffect",t.action)))return b(t)},prepare:async t=>{const i=t.activator.duel.attackingMonster;if(!i)throw new m("想定されない状態",t,i);const a=e==="炸裂装甲"?t.action.calcChainBlockTagsForDestroy(t.activator,[i]):["BanishFromField"];return{selectedEntities:[i],chainBlockTags:a,prepared:void 0}},execute:async t=>(e==="炸裂装甲"?await v.tryDestroy(t.selectedEntities,t):await v.tryBanish("BanishAsEffect",t.selectedEntities,t),!0),settle:async()=>!0}]}))}const Xt=Object.freeze(Object.defineProperty({__proto__:null,default:ur},Symbol.toStringTag,{value:"Module"}));function*dr(){yield{name:"ご隠居の猛毒薬",actions:[C,{title:"発動",isMandatory:!1,playType:"CardActivation",spellSpeed:"Quick",executableCells:["Hand","SpellAndTrapZone"],executablePeriods:_,executableDuelistTypes:["Controller"],validate:b,prepare:async(e,t,i)=>{const a=[{seq:0,text:"●自分は１２００ＬＰ回復する。",tags:[]},{seq:1,text:"●相手に８００ダメージを与える。",tags:["DamageToOpponent"]}],r=await e.activator.waitSelectText(a,"使用する効果を選択",i);if(r!==void 0)return{selectedEntities:[],chainBlockTags:r.tags,prepared:r.seq}},execute:async e=>e.prepared===1?(e.activator.getOpponentPlayer().effectDamage(800,e),!0):(e.activator.heal(1200,e.action.entity),!0),settle:async()=>!0}]},yield{name:"月の書",actions:[{title:"発動",isMandatory:!1,playType:"CardActivation",spellSpeed:"Quick",executableCells:["Hand","SpellAndTrapZone"],executablePeriods:_,executableDuelistTypes:["Controller"],hasToTargetCards:!0,validate:e=>{if(e.action.entity.field.getMonstersOnFieldStrictly().filter(i=>i.canBeTargetOfEffect(e)).filter(i=>i.face==="FaceUp").length)return b(e)},prepare:async(e,t,i)=>{const a=e.action.entity.field.getMonstersOnFieldStrictly().filter(n=>n.canBeTargetOfEffect(e)).filter(n=>n.face==="FaceUp"),r=await e.activator.waitSelectEntity(a,"対象とするモンスターを選択",i);if(r)return{selectedEntities:[r],chainBlockTags:[],prepared:void 0}},execute:async e=>{const t=e.selectedEntities[0];return!t.isOnFieldAsMonsterStrictly||t.battlePosition==="Set"?!1:t.canBeEffected(e.activator,e.action.entity,e.action)?(await t.setBattlePosition("Set",["Effect"],e.action.entity,e.activator),!0):(e.activator.duel.log.info(`${t.toString()}は${e.action.entity.toString()}の効果を受けない。`),!1)},settle:async()=>!0},C]},yield{name:"突進",actions:[{title:"発動",isMandatory:!1,playType:"CardActivation",spellSpeed:"Quick",executableCells:["Hand","SpellAndTrapZone"],executablePeriods:[..._,...F],executableDuelistTypes:["Controller"],hasToTargetCards:!0,validate:e=>{if(e.action.entity.field.getMonstersOnFieldStrictly().filter(i=>i.canBeTargetOfEffect(e)).length)return b(e)},prepare:async(e,t,i)=>{const a=e.action.entity.field.getMonstersOnFieldStrictly().filter(n=>n.canBeTargetOfEffect(e)),r=await e.activator.waitSelectEntity(a,"対象とするモンスターを選択",i);if(r)return{selectedEntities:[r],chainBlockTags:[],prepared:void 0}},execute:async e=>{const t=e.selectedEntities[0];return!t.isOnFieldAsMonsterStrictly||t.battlePosition==="Set"?!1:t.canBeEffected(e.activator,e.action.entity,e.action)?(t.numericOprsBundle.push(H.createLingeringAddition("攻撃力上昇",i=>i.effectOwner.duel.clock.isSameTurn(i.isSpawnedAt),e.action.entity,e.action,"attack",(i,a,r)=>r+700)),!0):(e.activator.duel.log.info(`${t.toString()}は${e.action.entity.toString()}の効果を受けない。`),!1)},settle:async()=>!0},C]},yield{name:"手札断殺",actions:[{title:"発動",isMandatory:!1,playType:"CardActivation",spellSpeed:"Quick",executableCells:["Hand","SpellAndTrapZone"],executablePeriods:[..._,...F],executableDuelistTypes:["Controller"],hasToTargetCards:!0,validate:e=>{for(const t of[e.activator,e.activator.getOpponentPlayer()])if(!t.canDraw||t.getHandCell().cardEntities.filter(i=>i.canBeSentToGraveyard(e.activator,e.action.entity,"SendToGraveyardAsEffect",e.action)).filter(i=>i!==e.action.entity).length<2||t.getDeckCell().cardEntities.length<2)return;return b(e)},prepare:async()=>(console.log("手札断殺"),{selectedEntities:[],chainBlockTags:["Draw"],prepared:void 0}),execute:async e=>{if(e.activator.getHandCell().cardEntities.length<2||e.activator.getOpponentPlayer().getHandCell().cardEntities.length<2)return!1;let t=0;for(const i of[e.activator,e.activator.getOpponentPlayer()]){const a=await i.waitSelectEntities(i.getHandCell().cardEntities,2,n=>n.length===2,"墓地に送るカードを２枚選択。",!1);if(!a)throw new L(e,i);const r=await v.sendManyToGraveyardForTheSameReason(a,["Effect"],e.action.entity,e.activator);t+=r.length}return t?(e.activator.duel.clock.incrementTotalProcSeq(),await v.drawAtSameTime(e.activator,e.action.entity,2,2),!0):!1},settle:async()=>!0},C]},yield{name:"リロード",actions:[{title:"発動",isMandatory:!1,playType:"CardActivation",spellSpeed:"Quick",executableCells:["Hand","SpellAndTrapZone"],executablePeriods:[..._,...F],executableDuelistTypes:["Controller"],hasToTargetCards:!0,validate:e=>{if(e.activator.canDraw)return b(e)},prepare:async()=>({selectedEntities:[],chainBlockTags:["Draw"],prepared:void 0}),execute:async e=>{const t=e.activator.getHandCell().cardEntities;return t.length?(await v.returnManyToDeckForTheSameReason("Random",t,["Effect"],e.action.entity,e.activator),e.activator.duel.clock.incrementTotalProcSeq(),await e.activator.draw(t.length,e.action.entity,e.activator),!0):!1},settle:async()=>!0},C]}}const Kt=Object.freeze(Object.defineProperty({__proto__:null,default:dr},Symbol.toStringTag,{value:"Module"})),pr=(e,t,i,a,r,n)=>{if(!e.action.entity.origin.level||a.some(c=>!c.lvl)||a.map(c=>c.lvl??0).reduce((c,d)=>c+d,0)!==e.action.entity.origin.level)return;const l=a.filter(c=>{var d;return(d=c.status.monsterCategories)==null?void 0:d.some(p=>p==="Tuner")}),o=a.filter(c=>{var d;return(d=c.status.monsterCategories)==null?void 0:d.every(p=>p!=="Tuner")});if(!r(l)||!n(o))return;const u=[...l.map(c=>({material:c,cell:c.fieldCell,isAsTuner:!0})),...o.map(c=>({material:c,cell:c.fieldCell,isAsTuner:!1}))];if(e.activator.getEnableSummonList(e.activator,"SyncroSummon",["Rule","SpecialSummon"],e.action,[{monster:e.action.entity,posList:t,cells:i}],u,!1).length)return u},fr=(e,t=a=>a.length===1,i=a=>a.length>0)=>{let a=[...e.activator.getMonstersOnField().filter(l=>l.battlePosition!=="Set"),...e.activator.getHandCell().cardEntities.filter(l=>l.origin.kind==="Monster")];if(a.every(l=>!l.status.allowHandSyncro)&&(a=a.filter(l=>l.fieldCell.isPlayFieldCell)),a.length<2)return[];const r=[...e.activator.getMonsterZones(),...e.activator.duel.field.getCells("ExtraMonsterZone")],n=["Attack","Defense"];return a.getAllOnOffPattern().filter(l=>l.some(o=>o.status.allowHandSyncro)||l.every(o=>o.isOnFieldAsMonsterStrictly)).map(l=>pr(e,n,r,l,t,i)??[]).filter(l=>l.length)},hr=async(e,t,i)=>{var u;const a=e.action.getEnableMaterialPatterns(e),r=a.map(c=>({infos:c,materialSeqList:c.map(d=>d.material.seq).sort()}));let n=a[0].map(c=>c.material);if(a.length>1){const c=a.flatMap(p=>p.map(h=>h.material)).getDistinct(),d=await e.activator.waitSelectEntities(c,void 0,p=>{const h=p.map(g=>g.seq).sort();return r.some(g=>h.length===g.materialSeqList.length&&h.every((y,M)=>y===g.materialSeqList[M]))},"シンクロ素材とするモンスターを選択",i);if(!d)return;n=d}const l=n.map(c=>c.seq).sort(),o=(u=r.find(c=>l.length===c.materialSeqList.length&&l.every((d,p)=>d===c.materialSeqList[p])))==null?void 0:u.infos;if(!o)throw new m("想定されない状態",e,n);return await v.sendManyToGraveyardForTheSameReason(n,["SyncroMaterial","Cost","Rule","SpecialSummonMaterial"],e.action.entity,e.activator),{summonMaterialInfos:o}},V=(e=i=>i.length===1,t=i=>i.length>0)=>({title:"シンクロ召喚",isMandatory:!1,playType:"SpecialSummon",spellSpeed:"Normal",executableCells:["ExtraDeck"],executablePeriods:["main1","main2"],executableDuelistTypes:["Controller"],getEnableMaterialPatterns:i=>fr(i,e,t),canPayCosts:i=>i.action.getEnableMaterialPatterns(i).length>0,validate:i=>!i.ignoreCost||i.activator.getAvailableExtraZones().length+i.activator.getAvailableMonsterZones().length>0?[]:void 0,payCosts:hr,prepare:i=>X(i,"SyncroSummon",["Rule","SpecialSummon","SyncroSummon"],["Attack","Defense"]),execute:K,settle:async()=>!0});function*gr(){yield*["大地の騎士ガイアナイト","スクラップ・デスデーモン"].map(e=>({name:e,actions:[S,T,w,V()]})),yield{name:"ナチュル・ガオドレイク",actions:[S,T,w,V(e=>e.length===1&&e.every(t=>t.attr.some(i=>i==="Earth")),e=>e.length>0&&e.every(t=>t.attr.some(i=>i==="Earth")))]},yield{name:"マジカル・アンドロイド",actions:[S,T,w,V(),{title:"回復",isMandatory:!0,playType:"IgnitionEffect",spellSpeed:"Normal",executableCells:["MonsterZone","ExtraMonsterZone"],executablePeriods:["end"],executableDuelistTypes:["Controller"],isOnlyNTimesPerTurnIfFaceup:1,validate:e=>e.action.entity.duel.phase==="end"&&e.activator.isTurnPlayer&&e.action.entity.face==="FaceUp"?[]:void 0,prepare:q,execute:async e=>(e.activator.heal(e.activator.getMonstersOnField().filter(t=>t.face==="FaceUp").filter(t=>t.types.includes("Psychic")).length*600,e.action.entity),!0),settle:async()=>!0}]}}const Jt=Object.freeze(Object.defineProperty({__proto__:null,default:gr},Symbol.toStringTag,{value:"Module"}));function*yr(){yield{name:"にせアバター",actions:[A,S,T,w],continuousEffects:[ye("THE_DEVILS_AVATAR","Monster",e=>[e],e=>e.isOnFieldStrictly&&e.face==="FaceUp",e=>["attack","defense"].map(t=>H.createContinuous("THE_DEVILS_AVATAR",i=>i.isSpawnedBy.isOnFieldStrictly&&i.isSpawnedBy.face==="FaceUp",e,(i,a)=>a.isOnFieldStrictly&&a.face==="FaceUp",t,"calculated","THE_DEVILS_AVATAR",()=>Number.MIN_VALUE)))]},yield{name:"にせドレッド・ルート",actions:[A,S,T,w],continuousEffects:[Ce("THE_DEVILS_DREAD-ROOT","Monster",e=>e.isOnFieldStrictly&&e.face==="FaceUp",e=>["attack","defense"].map(t=>H.createContinuous("THE_DEVILS_DREAD-ROOT",i=>i.isSpawnedBy.isOnFieldStrictly&&i.isSpawnedBy.face==="FaceUp",e,(i,a)=>a.kind==="Monster"&&a.isOnFieldStrictly&&a.face==="FaceUp"&&a!==i.isSpawnedBy,t,"calculated","THE_DEVILS_DREAD-ROOT",(i,a,r)=>Math.round(r/2))))]}}const Yt=Object.freeze(Object.defineProperty({__proto__:null,default:yr},Symbol.toStringTag,{value:"Module"})),vr=(e,t,i,a,r=2,n=2,l)=>{if(!e.action.entity.origin.rank||a.length<r||a.length>n||a.some(u=>!u.lvl)||a.some(u=>u.lvl!==e.action.entity.rank)||!l(a))return;const o=a.map(u=>({material:u,cell:u.fieldCell,level:u.status.level}));if(e.activator.getEnableSummonList(e.activator,"XyzSummon",["Rule","XyzSummon","SpecialSummon"],e.action,[{monster:e.action.entity,posList:t,cells:i}],o,!1).length)return o},mr=(e,t=2,i=2,a=r=>r.length>1)=>{const r=e.activator.getMonstersOnField().filter(l=>l.battlePosition!=="Set");if(r.length<t)return[];const n=[...e.activator.getMonsterZones(),...e.activator.getAvailableExtraZones()];return r.getAllOnOffPattern().filter(l=>l.length>=t).filter(l=>l.length<=i).map(l=>vr(e,P,n,l,t,i,a)??[]).filter(l=>l.length)},Sr=async(e,t,i)=>{var u;const a=e.action.getEnableMaterialPatterns(e),r=a.map(c=>({infos:c,materialSeqList:c.map(d=>d.material.seq).sort()}));let n=a[0].map(c=>c.material);if(a.length>1){const c=a.flatMap(p=>p.map(h=>h.material)).getDistinct(),d=await e.activator.waitSelectEntities(c,void 0,p=>{const h=p.map(g=>g.seq).sort();return r.some(g=>h.length===g.materialSeqList.length&&h.every((y,M)=>y===g.materialSeqList[M]))},"エクシーズ素材とするモンスターを選択",i);if(!d)return;n=d}const l=n.map(c=>c.seq).sort(),o=(u=r.find(c=>l.length===c.materialSeqList.length&&l.every((d,p)=>d===c.materialSeqList[p])))==null?void 0:u.infos;if(!o)throw new m("想定されない状態",e,n);return console.log(o),await v.convertManyToXyzMaterials(o.map(c=>c.material),["XyzMaterial","Rule","Cost"],e.action.entity,e.activator),console.log(o.map(c=>c.material.kind)),{summonMaterialInfos:o}},Cr=(e=2,t=2,i=a=>a.length>1)=>({title:"エクシーズ召喚",isMandatory:!1,playType:"SpecialSummon",spellSpeed:"Normal",executableCells:["ExtraDeck"],executablePeriods:["main1","main2"],executableDuelistTypes:["Controller"],getEnableMaterialPatterns:a=>mr(a,e,t,i),canPayCosts:a=>a.action.getEnableMaterialPatterns(a).length>0,validate:a=>!a.ignoreCost||a.activator.getAvailableExtraZones().length+a.activator.getAvailableMonsterZones().length>0?[]:void 0,payCosts:Sr,prepare:a=>X(a,"XyzSummon",["Rule","SpecialSummon","XyzSummon"],["Attack","Defense"]),execute:K,settle:async()=>!0});function*Tr(){yield*[{name:"ジェムナイト・パール",qty:2},{name:"覚醒の勇士 ガガギゴ",qty:3}].map(e=>({name:e.name,actions:[S,T,w,Cr(e.qty,e.qty)]}))}const It=Object.freeze(Object.defineProperty({__proto__:null,default:Tr},Symbol.toStringTag,{value:"Module"}));function*wr(){yield{name:"シューティング・ライザー・ドラゴン",actions:[S,T,w,V(),{title:"①墓地送り",isMandatory:!1,playType:"TriggerEffect",spellSpeed:"Normal",executableCells:R,executablePeriods:[..._,...F],executableDuelistTypes:["Controller"],isOnlyNTimesPerTurn:1,validate:e=>{if(e.action.entity.hasBeenSummonedNow(["SyncroSummon"])&&e.activator.getDeckCell().cardEntities.some(t=>(t.lvl??12)<(e.action.entity.lvl??0)))return[]},prepare:async()=>({selectedEntities:[],chainBlockTags:["SendToGraveyardFromDeck","IfSpecialSummonSucceed"],prepared:void 0}),execute:async e=>{const t=e.activator.getDeckCell().cardEntities.filter(r=>(r.lvl??12)<(e.action.entity.lvl??0));if(t.length===0)return!1;const i=await e.activator.waitSelectEntity(t,"墓地に送るモンスターを選択",!1);if(!i)throw new m("想定されない状況",e);await i.sendToGraveyard(["Effect"],e.action.entity,e.activator);const a=i.lvl??0;return e.action.entity.numericOprsBundle.push(H.createLingeringAddition("レベル減少",()=>!0,e.action.entity,e.action,"level",(r,n,l)=>l-a)),!0},settle:async()=>!0},Zt({title:"②シンクロ召喚",isOnlyNTimesPerChain:1})]}}const ei=Object.freeze(Object.defineProperty({__proto__:null,default:wr},Symbol.toStringTag,{value:"Module"}));function*Er(){yield{name:"折れ竹光",actions:[ce(),C]},yield{name:"妖刀竹光",actions:[ce(),C,{title:"②直接攻撃付与",isMandatory:!1,playType:"IgnitionEffect",spellSpeed:"Normal",executableCells:["SpellAndTrapZone"],executablePeriods:["main1","main2"],executableDuelistTypes:["Controller"],isOnlyNTimesPerTurn:1,validate:e=>{if(!e.activator.getSpellTrapsOnField().filter(i=>{var a;return(a=i.status.nameTags)==null?void 0:a.includes("竹光")}).filter(i=>i!==e.action.entity).some(i=>i.status.spellCategory==="Equip"))return;const t=e.action.entity.info.equipedBy;if(t&&!t.status.canDirectAttack)return[]},prepare:async(e,t,i)=>{const a=await e.activator.waitSelectEntity(e.activator.getSpellTrapsOnField().filter(r=>{var n;return(n=r.status.nameTags)==null?void 0:n.includes("竹光")}).filter(r=>r!==e.action.entity).filter(r=>r.status.spellCategory==="Equip"),"手札に戻すカードを選択。",i);if(a)return{selectedEntities:[a],chainBlockTags:[],prepared:void 0}},execute:async e=>{const t=e.action.entity.info.equipedBy;return t?(await v.returnManyToHandForTheSameReason(e.selectedEntities,["Effect"],e.action.entity,e.activator),t.statusOperatorBundle.push(new ue("直接攻撃",i=>(console.log(i.effectOwner.duel.clock.turn,i.isSpawnedAt.turn),i.effectOwner.duel.clock.isSameTurn(i.isSpawnedAt)),!1,e.action.entity,e.action,()=>!0,(i,a)=>({...a,canDirectAttack:!0}))),!0):!1},settle:async()=>!0},{title:"③サーチ",isMandatory:!1,playType:"TriggerEffect",spellSpeed:"Normal",executableCells:["Graveyard"],executablePeriods:[..._,...F],executableDuelistTypes:["Controller"],validate:e=>{if(e.action.entity.wasMovedAtPreviousChain&&e.activator.canAddToHandFromDeck)return e.activator.getDeckCell().cardEntities.filter(t=>{var i;return(i=t.status.nameTags)==null?void 0:i.includes("竹光")}).some(t=>t.status.name!=="妖刀竹光")?[]:void 0},prepare:async()=>({selectedEntities:[],chainBlockTags:["SearchFromDeck"],prepared:void 0}),execute:async e=>{const t=e.activator.getDeckCell().cardEntities.filter(a=>{var r;return(r=a.status.nameTags)==null?void 0:r.includes("竹光")}).filter(a=>a.status.name!=="妖刀竹光");if(!t.length)return!1;const i=await e.activator.waitSelectEntity(t,"手札に加えるカードを選択。",!1);if(!i)throw new L(e);return(await i.addToHand(["Effect"],e.action.entity,e.activator)).cellType==="Hand"},settle:async()=>!0}]},yield{name:"真刀竹光",actions:[ce(),C,{title:"②相手モンスター破壊",isMandatory:!1,playType:"TriggerEffect",spellSpeed:"Normal",executableCells:["SpellAndTrapZone"],executablePeriods:["b1DAfterDmgCalc","b2DAfterDmgCalc"],executableDuelistTypes:["Controller"],validate:e=>{const t=e.action.entity.info.equipedBy;if(t&&t.info.battleLog.filter(i=>e.activator.duel.clock.isPreviousStage(i.timestamp)).some(i=>i.enemy.entityType==="Duelist")&&e.activator.getOpponentPlayer().getMonstersOnField().length&&e.activator.getOpponentPlayer().lifeLog.filter(i=>e.activator.duel.clock.isPreviousStage(i.clock)).some(i=>i.entity===t))return[]},prepare:async e=>({selectedEntities:[],chainBlockTags:e.action.calcChainBlockTagsForDestroy(e.activator,e.activator.getOpponentPlayer().getMonstersOnField()),prepared:void 0}),execute:async e=>(await v.tryDestroy(e.activator.getOpponentPlayer().getMonstersOnField(),e)).length>0,settle:async()=>!0},{title:"③竹光入替",isMandatory:!1,playType:"IgnitionEffect",spellSpeed:"Normal",executableCells:["SpellAndTrapZone"],executablePeriods:["main1","main2"],executableDuelistTypes:["Controller"],canPayCosts:e=>e.action.entity.info.equipedBy?Da(e):!1,validate:e=>{if(!(!e.action.entity.info.equipedBy||!e.activator.getDeckCell().cardEntities.filter(a=>{var r;return(r=a.status.nameTags)==null?void 0:r.includes("竹光")}).filter(a=>a.status.name!=="真刀竹光").filter(a=>a.status.spellCategory==="Equip").length))return e.activator.duel.field.getMonstersOnFieldStrictly().some(a=>a.canBeTargetOfEffect(e))?[]:void 0},payCosts:Pa,prepare:q,execute:async e=>{const t=e.activator.getDeckCell().cardEntities.filter(o=>{var u;return(u=o.status.nameTags)==null?void 0:u.includes("竹光")}).filter(o=>o.status.name!=="真刀竹光").filter(o=>o.status.spellCategory==="Equip");if(!t.length)return!1;const i=e.activator.getAvailableSpellTrapZones();if(!i.length)return!1;const a=e.activator.duel.field.getMonstersOnFieldStrictly().filter(o=>o.canBeTargetOfEffect(e));if(!a.length)return!1;const r=await e.activator.waitSelectEntity(t,"装備するカードを選択。",!1);if(!r)throw new L("竹光選択",e);const n=await e.activator.duel.view.waitSelectDestination(e.activator,r,i,"装備カードを置く場所を選択。","装備",!1);if(!n)throw new L("配置場所選択",e);await r.putDirectly(n,"Spell",["Effect"],e.action.entity,e.activator);const l=await e.activator.waitSelectEntity(a,"装備する対象を選択。",!1);if(!l)throw new L("装備対象選択",e);return r.info.equipedBy=l,r.info.effectTargets[e.action.seq]=[l],l.info.equipEntities.push(r),!0},settle:async()=>!0}]}}const ti=Object.freeze(Object.defineProperty({__proto__:null,default:Er},Symbol.toStringTag,{value:"Module"}));function*br(){yield{name:"黄金色の竹光",actions:[{title:"発動",isMandatory:!1,playType:"CardActivation",spellSpeed:"Normal",executableCells:["Hand","SpellAndTrapZone"],executablePeriods:["main1","main2"],executableDuelistTypes:["Controller"],priorityForNPC:20,validate:e=>{if(!(e.activator.getDeckCell().cardEntities.length<2)&&e.activator.canDraw&&e.activator.canAddToHandFromDeck&&e.activator.getSpellTrapsOnField().filter(t=>{var i;return(i=t.status.nameTags)==null?void 0:i.includes("竹光")}).filter(t=>t.face==="FaceUp").some(t=>t.status.spellCategory==="Equip"))return b(e)},prepare:async()=>({selectedEntities:[],chainBlockTags:["Draw"],prepared:void 0}),execute:async e=>(await e.activator.draw(2,e.action.entity,e.activator),!0),settle:async()=>!0},C]}}const ii=Object.freeze(Object.defineProperty({__proto__:null,default:br},Symbol.toStringTag,{value:"Module"}));function*_r(){yield{name:"ＢＦ－疾風のゲイル",actions:[A,S,T,w,{title:"①特殊召喚",isMandatory:!1,playType:"SpecialSummon",spellSpeed:"Normal",executableCells:["Hand"],executablePeriods:["main1","main2"],executableDuelistTypes:["Controller"],validate:e=>{if(e.activator.getMonstersOnField().filter(i=>(i.status.nameTags??[]).includes("ＢＦ")).filter(i=>i.nm!==e.action.entity.origin.name).length)return be(e,["Attack","Defense"],[])},prepare:e=>X(e,"SpecialSummon",["SpecialSummon","Rule"],P),execute:K,settle:async()=>!0},{title:"②攻守半減",isMandatory:!1,playType:"IgnitionEffect",spellSpeed:"Normal",executableCells:["MonsterZone"],executablePeriods:["main1","main2"],executableDuelistTypes:["Controller"],hasToTargetCards:!0,isOnlyNTimesPerTurnIfFaceup:1,validate:e=>{const t=e.activator.getOpponentPlayer().getMonstersOnField().filter(i=>i.face==="FaceUp").filter(i=>i.canBeTargetOfEffect(e));if(t.length)return t.length?t.map(i=>i.fieldCell):void 0},prepare:async(e,t,i)=>{var r;let a=(r=e.dest)==null?void 0:r.cardEntities[0];if(!a){const n=e.activator.getOpponentPlayer().getMonstersOnField().filter(o=>o.face==="FaceUp").filter(o=>o.canBeTargetOfEffect(e)),l=await e.activator.waitSelectEntity(n,"効果対象を選択。",i);if(!l)return;a=l}return{selectedEntities:[a],chainBlockTags:[],prepared:void 0}},execute:async e=>{const t=e.selectedEntities.filter(i=>i.isOnFieldAsMonsterStrictly).filter(i=>i.face==="FaceUp").find(i=>i.canBeEffected(e.activator,e.action.entity,e.action));return t?(["attack","defense"].map(i=>H.createLingeringFixation("②攻守半減",()=>!0,e.action.entity,e.action,i,(a,r,n)=>Math.round(n/2))).forEach(i=>t.numericOprsBundle.push(i)),!0):!1},settle:async()=>!0}]}}const ai=Object.freeze(Object.defineProperty({__proto__:null,default:_r},Symbol.toStringTag,{value:"Module"}));function*kr(){yield{name:"水晶機巧－ハリファイバー",actions:[S,Ie(e=>e.length===2&&e.some(t=>{var i;return(i=t.status.monsterCategories)==null?void 0:i.includes("Tuner")})),{title:"①リクルート",isMandatory:!1,playType:"TriggerEffect",spellSpeed:"Normal",executableCells:R,executablePeriods:[..._,...F],executableDuelistTypes:["Controller"],validate:e=>{if(!e.action.entity.hasBeenSummonedNow(["LinkSummon"]))return;const t=[e.activator.getHandCell(),e.activator.getDeckCell()].flatMap(r=>r.cardEntities).filter(r=>(r.lvl??12)<4).filter(r=>{var n;return(n=r.status.monsterCategories)==null?void 0:n.includes("Tuner")}),i=e.activator.getMonsterZones();return e.activator.getEnableSummonList(e.activator,"SpecialSummon",["Effect"],e.action,t.map(r=>({monster:r,cells:i,posList:["Defense"]})),[],!1).length?[]:void 0},prepare:async()=>({selectedEntities:[],chainBlockTags:["SpecialSummonFromDeck"],prepared:void 0}),execute:async e=>{const t=[e.activator.getHandCell(),e.activator.getDeckCell()].flatMap(r=>r.cardEntities).filter(r=>(r.lvl??12)<4).filter(r=>{var n;return(n=r.status.monsterCategories)==null?void 0:n.includes("Tuner")}),i=e.activator.getMonsterZones(),a=await e.activator.summonOne(e.activator,"SpecialSummon",["Effect"],e.action,t.map(r=>({monster:r,cells:i,posList:["Defense"]})),[],!1,!1);if(!a)throw new L(e);return a.statusOperatorBundle.push(new ue("効果発動不可",r=>r.effectOwner.duel.clock.isSameTurn(r.isSpawnedAt),!1,e.action.entity,e.action,()=>!0,()=>({canActivateEffect:!1}))),!0},settle:async()=>!0},{title:"②シンクロ召喚",isMandatory:!1,playType:"QuickEffect",spellSpeed:"Quick",executableCells:R,executablePeriods:["main1","main2"],executableDuelistTypes:["Controller"],isOnlyNTimesPerChain:1,canPayCosts:ve,validate:e=>{if(e.activator.isTurnPlayer)return;const t=[...e.activator.getMonsterZones(),...e.activator.duel.field.getCells("ExtraMonsterZone")],i=e.activator.getExtraDeck().cardEntities.filter(r=>{var n;return(n=r.status.monsterCategories)==null?void 0:n.includes("Syncro")}).filter(r=>{var n;return(n=r.status.monsterCategories)==null?void 0:n.includes("Tuner")});return e.activator.getEnableSummonList(e.activator,"SyncroSummon",["SpecialSummon","Effect"],e.action,i.map(r=>({monster:r,cells:t,posList:P})),[{material:e.action.entity,cell:e.action.entity.fieldCell}],!1).length?[]:void 0},payCosts:Ae,prepare:q,execute:async e=>{const t=[...e.activator.getMonsterZones(),...e.activator.duel.field.getCells("ExtraMonsterZone")],i=e.activator.getExtraDeck().cardEntities.filter(r=>{var n;return(n=r.status.monsterCategories)==null?void 0:n.includes("Syncro")}).filter(r=>{var n;return(n=r.status.monsterCategories)==null?void 0:n.includes("Tuner")});return!!await e.activator.summonOne(e.activator,"SyncroSummon",["SpecialSummon","Effect"],e.action,i.map(r=>({monster:r,cells:t,posList:P})),[],!1,!1)},settle:async()=>!0}]}}const ri=Object.freeze(Object.defineProperty({__proto__:null,default:kr},Symbol.toStringTag,{value:"Module"}));function*Dr(){yield{name:"封印されしエクゾディア",actions:[S,T,A,w,{title:"封印開放",isMandatory:!0,playType:"Exodia",spellSpeed:"Normal",executableCells:["Hand"],executablePeriods:z,executableDuelistTypes:["Controller"],validate:e=>{const t=e.activator.getHandCell().cardEntities.filter(i=>{var a;return(a=i.origin.nameTags)==null?void 0:a.includes("封印されし")}).map(i=>i.origin.name).getDistinct();return console.log(e.action.entity.toString(),t),t.length===5?[]:void 0},prepare:async e=>(await v.sendManyToGraveyardForTheSameReason(e.activator.duel.field.getCardsOnFieldStrictly(),["Rule"],e.action.entity,e.activator),{selectedEntities:[],chainBlockTags:[],prepared:void 0,nextChainBlockFilter:()=>!1}),execute:async e=>{const t=e.activator.getOpponentPlayer().getHandCell().cardEntities.filter(a=>{var r;return(r=a.origin.nameTags)==null?void 0:r.includes("封印されし")}).map(a=>a.origin.name).getDistinct().length===5,i=[{name:"封印されし者の左足",column:4},{name:"封印されし者の右足",column:2},{name:"封印されし者の左腕",column:5},{name:"封印されし者の右腕",column:1},{name:"封印されしエクゾディア",column:3}];for(const a of i){const r=[e.activator.getHandCell().cardEntities.find(n=>n.origin.name===a.name),e.activator.getOpponentPlayer().getHandCell().cardEntities.find(n=>n.origin.name===a.name)].filter(n=>n!==void 0);if(!r.length)throw new m("想定されない状態",e.activator.getHandCell().cardEntities,a.name);await k.moveMany(r.map(n=>[n,n.controller.getMonsterZones().find(l=>l.column===(n.controller.seat==="Above"?6-a.column:a.column))??n.controller.getFieldZone(),"Monster","FaceUp","Vertical","Top",["Rule"],void 0,void 0,void 0]))}throw t?new $(void 0,`お互いが、${e.action.entity.toString()}の特殊勝利条件を同時に満たした。`):new $(e.activator,`${e.action.entity.toString()}の特殊勝利条件を満たした。`)},settle:async()=>!0}]}}const ni=Object.freeze(Object.defineProperty({__proto__:null,default:Dr},Symbol.toStringTag,{value:"Module"}));function*Pr(){yield{name:"ファイアウォール・ドラゴン・シンギュラリティ",actions:[S,Ie(e=>e.length>2),{title:"①バウンス＆自己強化",isMandatory:!1,playType:"QuickEffect",spellSpeed:"Quick",executableCells:R,executablePeriods:[..._,...F],executableDuelistTypes:["Controller"],isOnlyNTimesPerTurn:1,validate:e=>[...e.activator.getGraveyard().cardEntities,...e.activator.getMonstersOnField()].flatMap(r=>r.status.monsterCategories??[]).getDistinct().union(["Ritual","Fusion","Syncro","Xyz"]).length<1?void 0:[...e.activator.getOpponentPlayer().getGraveyard().cardEntities,...e.activator.getOpponentPlayer().getEntiteisOnField()].filter(r=>r.canBeTargetOfEffect(e)).length?[]:void 0,prepare:async e=>{const i=[...e.activator.getGraveyard().cardEntities,...e.activator.getMonstersOnField()].flatMap(n=>n.status.monsterCategories??[]).getDistinct().union(["Ritual","Fusion","Syncro","Xyz"]).length;if(i<1)return;const a=[...e.activator.getOpponentPlayer().getGraveyard().cardEntities,...e.activator.getOpponentPlayer().getEntiteisOnField()].filter(n=>n.canBeTargetOfEffect(e));if(a.length<1)return;const r=await e.action.entity.duel.view.waitSelectEntities(e.activator,{selectables:a,qty:void 0,validator:n=>n.length>0&&n.length<=i,cancelable:!1},"手札に戻すカードを選択。")??[];if(r.length)return{selectedEntities:r,chainBlockTags:[],prepared:void 0}},execute:async e=>{const t=e.selectedEntities.filter(a=>a.isOnFieldStrictly||a.fieldCell.cellType==="Graveyard").filter(a=>a.canBeEffected(e.activator,e.action.entity,e.action));await v.returnManyToHandForTheSameReason(t,["Effect"],e.action.entity,e.activator);const i=t.filter(a=>a.fieldCell.cellType==="Hand"||a.fieldCell.cellType==="ExtraDeck").length;return e.action.entity.numericOprsBundle.push(H.createLingeringAddition(e.action.title,a=>a.isSpawnedBy.isEffective,e.action.entity,e.action,"attack",(a,r,n)=>n+500*i)),!0},settle:async()=>!0},{title:"②蘇生",isMandatory:!1,playType:"TriggerEffect",spellSpeed:"Normal",executableCells:R,executablePeriods:z,executableDuelistTypes:["Controller"],isOnlyNTimesPerTurn:1,validate:e=>{const t=e.action.entity.moveLog.latestRecord.movedAt,i=e.action.duel.field.moveLog.getPriviousChainLog().filter(n=>(console.log(n,n.entity.fieldCell.cellType==="Graveyard",n.movedAs.includes("BattleDestroy")),n.entity.fieldCell.cellType==="Graveyard"||n.movedAs.includes("BattleDestroy"))).filter(n=>n.movedAt.totalProcSeq>t.totalProcSeq).map(n=>n.entity.wasMovedFrom).toArray();if(!e.action.entity.linkArrowDests.union(i).length)return;const a=e.activator.getMonsterZones();if(e.activator.getEnableSummonList(e.activator,"SpecialSummon",["Effect"],e.action,e.activator.getGraveyard().cardEntities.filter(n=>n.kind==="Monster").filter(n=>n.types.includes("Cyberse")).filter(n=>n.canBeTargetOfEffect(e)).map(n=>({monster:n,posList:P,cells:a})),[],!1).length)return b(e)},prepare:e=>ae(e,e.activator.getGraveyard().cardEntities.filter(t=>t.kind==="Monster").filter(t=>t.types.includes("Cyberse")).filter(t=>t.canBeTargetOfEffect(e)),P),execute:e=>re(e,P),settle:async()=>!0}]}}const si=Object.freeze(Object.defineProperty({__proto__:null,default:Pr},Symbol.toStringTag,{value:"Module"}));function*Mr(){yield*["イグナイト・イーグル","イグナイト・マグナム","イグナイト・ドラグノフ","イグナイト・マスケット","イグナイト・デリンジャー","イグナイト・ライオット","イグナイト・ウージー","イグナイト・キャリバー"].map(e=>({name:e,actions:[S,T,w,A,ne,{title:"①サーチ",isMandatory:!1,playType:"IgnitionEffect",spellSpeed:"Normal",executableCells:["SpellAndTrapZone"],executablePeriods:["main1","main2"],executableDuelistTypes:["Controller"],validate:t=>{var a;const i=t.activator.getPendulumScaleMonsters().find(r=>r!==t.action.entity);if(i&&(a=i.status.nameTags)!=null&&a.includes("イグナイト"))return t.activator.getDeckCell().cardEntities.some(r=>{var n;return(n=r.status.nameTags)==null?void 0:n.includes("イグナイト")})?[]:void 0},prepare:async t=>({selectedEntities:[],chainBlockTags:["SearchFromDeck",...t.action.calcChainBlockTagsForDestroy(t.activator,t.activator.getPendulumScaleMonsters())],prepared:void 0}),execute:async t=>{if(!(await v.tryDestroy(t.activator.getPendulumScaleMonsters(),t)).length)return!1;const a=t.activator.getDeckCell().cardEntities.filter(n=>{var l;return(l=n.status.nameTags)==null?void 0:l.includes("イグナイト")});if(!a.length)return!1;const r=await t.activator.waitSelectEntity(a,"手札に加えるカードを選択。",!1);return r?(await r.addToHand(["Effect"],t.action.entity,t.activator),!0):!1},settle:async()=>!0}]}))}const li=Object.freeze(Object.defineProperty({__proto__:null,default:Mr},Symbol.toStringTag,{value:"Module"}));function*Ar(){yield{name:"ジャンク・コレクター",actions:[S,T,w,A,{title:"罠コピー",isMandatory:!1,playType:"QuickEffect",spellSpeed:"Quick",executableCells:R,executablePeriods:_,executableDuelistTypes:["Controller"],canPayCosts:e=>e.activator.getGraveyard().cardEntities.filter(i=>i.kind==="Trap").filter(i=>i.status.trapCategory==="Normal").filter(i=>e.activator.canTryBanish(i,"BanishAsCost",e.action)).filter(i=>i.canBeBanished("BanishAsCost",e.activator,e.action.entity,e.action)).flatMap(i=>i.actions).filter(i=>i.playType==="CardActivation").filter(i=>!i.needsToPayCost).filter(i=>i.validate(e.activator,[],!0)).length?ve(e):!1,validate:()=>[],payCosts:async(e,t,i)=>{const a=e.activator.getGraveyard().cardEntities.filter(l=>l.kind==="Trap").filter(l=>l.status.trapCategory==="Normal").filter(l=>e.activator.canTryBanish(l,"BanishAsCost",e.action)).filter(l=>l.canBeBanished("BanishAsCost",e.activator,e.action.entity,e.action)).flatMap(l=>l.actions).filter(l=>l.playType==="CardActivation").filter(l=>!l.needsToPayCost).filter(l=>l.validate(e.activator,[],!0)).map(l=>l.entity),r=await e.activator.waitSelectEntity(a,"コピーする罠を選択。",i);if(!r)return;const n=[e.action.entity,r];return await v.banishManyForTheSameReason(n,["Cost"],e.action.entity,e.activator),{banish:n}},prepare:async(e,t)=>{var r;const i=(r=e.costInfo.banish)==null?void 0:r.find(n=>n!==e.action.entity);if(!i)throw new m("想定されない状況",e,e.costInfo);const a=i.actions.find(n=>n.playType==="CardActivation");if(!a)throw new m("想定されない状況",e,e.costInfo,i);return await a.prepare(e.activator,void 0,void 0,t,!1,!0)},execute:async(e,t)=>{var r;const i=(r=e.costInfo.banish)==null?void 0:r.find(n=>n!==e.action.entity);if(!i)throw new m("想定されない状況",e,e.costInfo);const a=i.actions.find(n=>n.playType==="CardActivation");if(!a)throw new m("想定されない状況",e,e.costInfo,i);return await a.execute(e,t)},settle:async()=>!0}]}}const oi=Object.freeze(Object.defineProperty({__proto__:null,default:Ar},Symbol.toStringTag,{value:"Module"}));function*xr(){yield{name:"ダーク・リゾネーター",actions:[S,T,w,A],substituteEffects:[Ja(1)]},yield{name:"レッド・リゾネーター",actions:[S,T,w,A,{title:"①特殊召喚",isMandatory:!1,playType:"TriggerEffect",spellSpeed:"Normal",executableCells:["MonsterZone"],executablePeriods:[..._,...F],executableDuelistTypes:["Controller"],validate:e=>{if(!e.action.entity.hasBeenSummonedNow(["NormalSummon"]))return;const t=e.activator.getMonsterZones();if(e.activator.getEnableSummonList(e.activator,"SpecialSummon",["Effect"],e.action,e.activator.getHandCell().cardEntities.filter(a=>a.kind==="Monster").filter(a=>(a.lvl??12)<5).map(a=>({monster:a,posList:P,cells:t})),[],!1).length)return[]},prepare:async()=>({selectedEntities:[],chainBlockTags:["SpecialSummonFromHand"],prepared:void 0}),execute:async e=>{const t=e.activator.getMonsterZones(),i=e.activator.getHandCell().cardEntities.filter(r=>r.kind==="Monster").filter(r=>(r.lvl??12)<5).map(r=>({monster:r,posList:P,cells:t}));return!!await e.activator.summonOne(e.activator,"SpecialSummon",["Effect"],e.action,i,[],!1,!1)},settle:async()=>!0},{title:"②回復",isMandatory:!1,playType:"TriggerEffect",spellSpeed:"Normal",executableCells:["MonsterZone"],executablePeriods:[..._,...F],executableDuelistTypes:["Controller"],hasToTargetCards:!0,isOnlyNTimesPerTurn:1,validate:e=>{if(e.action.entity.hasBeenSummonedNow(["SpecialSummon"]))return e.activator.getMonstersOnField().filter(t=>t.canBeTargetOfEffect(e)).filter(t=>(t.atk??0)>0).some(t=>t.info.summonKinds.includes("SpecialSummon"))?[]:void 0},prepare:async e=>{const t=await e.activator.waitSelectEntity(e.activator.getMonstersOnField().filter(i=>i.canBeTargetOfEffect(e)).filter(i=>(i.atk??0)>0).filter(i=>i.info.summonKinds.includes("SpecialSummon")),"対象とするモンスターを選択",!1);if(t)return{selectedEntities:[t],chainBlockTags:[],prepared:void 0}},execute:async e=>{const t=e.activator.lp;return e.selectedEntities.filter(i=>i.isOnFieldAsMonsterStrictly).forEach(i=>e.activator.heal(i.atk??0,e.action.entity)),e.activator.lp!==t},settle:async()=>!0}]}}const ci=Object.freeze(Object.defineProperty({__proto__:null,default:xr},Symbol.toStringTag,{value:"Module"})),ut=(e,t)=>{const i=t?`魔力充填可能(${t})`:"魔力充填可能";return bt(i,e,a=>[a],()=>!0,a=>[new ue(i,()=>!0,!0,a,{},(r,n)=>r.isSpawnedBy===n,(r,n)=>(n.maxCounterQty.SpellCounter=t??Number.MAX_VALUE,{...n,maxCounterQty:n.maxCounterQty}))])},Ne={},Fr=(e,t=1)=>(Ne[t]||(Ne[t]={title:`魔力回収(${t})`,isMandatory:!0,playType:"AfterChainBlock",spellSpeed:"Normal",executableCells:["MonsterZone"],executablePeriods:z,executableDuelistTypes:["Controller"],validate:i=>{if(!i.targetChainBlock||i.targetChainBlock.action.playType!=="CardActivation"||i.targetChainBlock.action.entity.kind!=="Spell"||!i.action.entity.isEffective||i.action.entity.face==="FaceDown")return;const a=i.action.entity.status.maxCounterQty.SpellCounter??0;if(!(i.action.entity.counterHolder.getQty("SpellCounter")>=a)&&!(i.action.entity.hadArrivedToFieldAt().totalProcSeq>i.targetChainBlock.isActivatedAt.totalProcSeq))return[]},prepare:q,execute:async i=>i.action.entity.face==="FaceDown"||!i.action.entity.isOnFieldAsMonsterStrictly||!i.action.entity.isEffective?!1:(i.action.entity.counterHolder.add("SpellCounter",t,i.action.entity),!0),settle:async()=>!0}),{...Ne[t],title:`${e}魔力回収(${t})`}),je=(e,t,i)=>e.action.entity.counterHolder.getQty("SpellCounter")>=i,Ve=(e,t,i,a)=>{const r=a[0];return e.action.entity.counterHolder.remove("SpellCounter",r),{counter:r}};function*Br(){yield{name:"魔導戦士 ブレイカー",actions:[S,T,w,A,{title:"①魔力充填",isMandatory:!0,playType:"TriggerEffect",spellSpeed:"Normal",executableCells:["MonsterZone"],executablePeriods:["main1","main2"],executableDuelistTypes:["Controller"],validate:e=>{if(e.action.entity.hasBeenSummonedNow(["NormalSummon"]))return[]},prepare:async()=>({selectedEntities:[],chainBlockTags:["IfNormarlSummonSucceed"],prepared:void 0}),execute:async e=>e.action.entity.face==="FaceDown"?!1:(e.action.entity.counterHolder.setQty("SpellCounter",1,e.action.entity),!0),settle:async()=>!0},{title:"③マナブレイク",isMandatory:!1,playType:"IgnitionEffect",spellSpeed:"Normal",executableCells:["MonsterZone"],executablePeriods:["main1","main2"],executableDuelistTypes:["Controller"],hasToTargetCards:!0,canPayCosts:(e,t)=>je(e,t,1),validate:e=>{const t=e.action.entity.field.getCells(...te).flatMap(i=>i.cardEntities).filter(i=>i.canBeTargetOfEffect(e));if(t.length)return t.map(i=>i.fieldCell)},payCosts:async(e,t,i)=>Ve(e,t,i,[1]),prepare:async(e,t,i)=>{var r;let a=(r=e.dest)==null?void 0:r.cardEntities[0];if(!a){const n=e.action.entity.field.getCells(...te).flatMap(o=>o.cardEntities).filter(o=>o.canBeTargetOfEffect(e)),l=await e.activator.waitSelectEntity(n,"破壊する対象を選択。",i);if(!l)return;a=l}return{selectedEntities:[a],chainBlockTags:e.action.calcChainBlockTagsForDestroy(e.activator,[a]),prepared:void 0}},execute:async e=>e.selectedEntities.every(t=>!t.isOnFieldAsSpellTrapStrictly)?!1:(await v.tryDestroy(e.selectedEntities,e),!0),settle:async()=>!0}],continuousEffects:[ut("Monster",1),ye("②攻撃力上昇","Monster",e=>[e],()=>!0,e=>[H.createContinuous("②攻撃力上昇",()=>!0,e,()=>!0,"attack","wip","Addition",(t,i,a)=>t.isEffective?a+t.counterHolder.getQty("SpellCounter")*300:a)])]},yield{name:"王立魔法図書館",actions:[S,T,w,A,{...Fr("①",1)},{title:"②ドロー",isMandatory:!1,playType:"IgnitionEffect",spellSpeed:"Normal",executableCells:["MonsterZone"],executablePeriods:["main1","main2"],executableDuelistTypes:["Controller"],canPayCosts:(e,t)=>je(e,t,3),validate:e=>{if(e.activator.getDeckCell().cardEntities.length)return[]},payCosts:async(e,t,i)=>Ve(e,t,i,[3]),prepare:q,execute:async e=>(await e.activator.draw(1,e.action.entity,e.activator),!0),settle:async()=>!0}],continuousEffects:[ut("Monster",3)]}}const ui=Object.freeze(Object.defineProperty({__proto__:null,canPaySpellCounters:je,default:Br,paySpellCounters:Ve},Symbol.toStringTag,{value:"Module"}));function*Or(){yield{name:"スターダスト・ドラゴン",actions:[S,T,w,V(),{title:"①ヴィクテム・サンクチュアリ",isMandatory:!1,playType:"QuickEffect",spellSpeed:"Quick",executableCells:["MonsterZone","ExtraMonsterZone"],executablePeriods:z,executableDuelistTypes:["Controller"],canPayCosts:Je,validate:(e,t)=>t.length===0?void 0:t[e.index-1].chainBlockTags.includes("DestroyOnField")?[]:void 0,payCosts:Ye,prepare:async(e,t)=>{const i=t.slice(-1)[0];return{selectedEntities:[],chainBlockTags:e.action.calcChainBlockTagsForDestroy(e.activator,[i.action.entity]),prepared:void 0}},execute:async(e,t)=>{const i=t[e.index-1];return i.isNegatedActivationBy=e.action,await v.tryDestroy([i.action.entity],e),!0},settle:async()=>!0},{title:"②自己再生",playType:"IgnitionEffect",isMandatory:!1,spellSpeed:"Normal",executableCells:["Graveyard"],executablePeriods:["end"],executableDuelistTypes:["Controller"],validate:e=>{const t=e.action.entity.moveLog.latestRecord;if(t.movedBy!==e.action.entity||!e.activator.duel.clock.isSameTurn(t.movedAt)||!t.movedAs.includes("Cost"))return;const i=e.activator.duel,a=e.action.entity.actionLogRecords.filter(n=>i.clock.isSameTurn(n.clock)).map(n=>n.chainBlockInfo).findLast(n=>n.action.title==="①ヴィクテム・サンクチュアリ");return!a||a.state!=="done"?void 0:e.activator.getAvailableMonsterZones().length>0?[]:void 0},prepare:q,execute:e=>ee(e),settle:async()=>!0}]},yield{name:"閃珖竜 スターダスト",actions:[S,T,V(),{title:"波動音壁",isMandatory:!1,playType:"QuickEffect",spellSpeed:"Quick",executableCells:R,executablePeriods:_,executableDuelistTypes:["Controller"],isOnlyNTimesPerTurnIfFaceup:1,hasToTargetCards:!0,validate:e=>{const t=e.activator.getEntiteisOnField().filter(i=>i.face==="FaceUp").filter(i=>i.canBeTargetOfEffect(e));if(t.length)return t.map(i=>i.fieldCell)},prepare:async(e,t,i)=>{if(e.dest)return{selectedEntities:e.dest.cardEntities,chainBlockTags:[],prepared:void 0};const a=e.activator.getEntiteisOnField().filter(n=>n.face==="FaceUp").filter(n=>n.canBeTargetOfEffect(e));if(!a.length)return;const r=await e.activator.waitSelectEntity(a,"対象とするカードを選択",i);if(r)return{selectedEntities:[r],chainBlockTags:[],prepared:void 0}},execute:async e=>(e.selectedEntities.filter(t=>t.isOnFieldStrictly).filter(t=>t.face==="FaceUp").filter(t=>t.canBeEffected(e.activator,e.action.entity,e.action)).forEach(t=>{t.counterHolder.add("SonicBarrier",1,e.action.entity)}),!0),settle:async()=>!0}],substituteEffects:[{title:"波動音壁（適用）",isMandatory:!0,executableCells:I,executablePeriods:z,executableDuelistTypes:["Controller"],isApplicableTo:(e,t,i)=>i.filter(a=>a.counterHolder.getQty("SonicBarrier",e.entity)>0),substitute:async(e,t,i)=>{const a=i.filter(r=>r.counterHolder.getQty("SonicBarrier",e.entity)>0);return a.forEach(r=>{r.counterHolder.removeAll("SonicBarrier",e.entity),e.entity.controller.writeInfoLog(`波動音壁により${r.toString()}は１ターンに１度だけ戦闘効果では破壊されない。`)}),a}}]},yield{name:"真閃珖竜 スターダスト・クロニクル",actions:[S,T,V(e=>e.length===1&&e.every(t=>{var i;return(i=t.status.monsterCategories)==null?void 0:i.includes("Syncro")}),e=>e.length>0&&e.every(t=>{var i;return(i=t.status.monsterCategories)==null?void 0:i.includes("Syncro")})),{title:"波動護魂",isMandatory:!1,playType:"QuickEffect",spellSpeed:"Quick",executableCells:R,executablePeriods:_,executableDuelistTypes:["Controller"],isOnlyNTimesPerTurnIfFaceup:1,canPayCosts:e=>Ma(e,e.activator.getGraveyard().cardEntities.filter(t=>{var i;return(i=t.status.monsterCategories)==null?void 0:i.includes("Syncro")})),validate:()=>[],payCosts:e=>Aa(e,e.activator.getGraveyard().cardEntities.filter(t=>{var i;return(i=t.status.monsterCategories)==null?void 0:i.includes("Syncro")}),t=>t.length===1,1),prepare:q,execute:async e=>(e.action.entity.procFilterBundle.push(pe.createLingering(e.action.title,t=>t.effectOwner.duel.clock.isSameTurn(t.isSpawnedAt),e.action.entity,e.action,()=>!0,["Effect"],()=>!1)),!0),settle:async()=>!0},{title:"②蘇生",isMandatory:!1,playType:"TriggerEffect",spellSpeed:"Normal",executableCells:["Banished"],executablePeriods:[..._,...F],executableDuelistTypes:["Controller"],validate:e=>{if(!e.action.entity.wasMovedAtPreviousChain)return;const t=e.activator.getMonsterZones();if(e.activator.getEnableSummonList(e.activator,"SpecialSummon",["Effect"],e.action,e.activator.getBanished().cardEntities.filter(a=>a.kind==="Monster").filter(a=>a.face==="FaceUp").filter(a=>a.types.includes("Dragon")).filter(a=>{var r;return(r=a.status.monsterCategories)==null?void 0:r.includes("Syncro")}).filter(a=>a.canBeTargetOfEffect(e)).map(a=>({monster:a,posList:P,cells:t})),[],!1).length)return[]},prepare:e=>ae(e,e.activator.getBanished().cardEntities.filter(t=>t.kind==="Monster").filter(t=>t.face==="FaceUp").filter(t=>t.types.includes("Dragon")).filter(t=>{var i;return(i=t.status.monsterCategories)==null?void 0:i.includes("Syncro")}).filter(t=>t.canBeTargetOfEffect(e))),execute:async e=>re(e),settle:async()=>!0}]},yield{name:"聖珖神竜 スターダスト・シフル",actions:[S,T,V(e=>e.length===1&&e.every(t=>{var i;return(i=t.status.monsterCategories)==null?void 0:i.includes("Syncro")}),e=>e.length>1&&e.every(t=>{var i;return(i=t.status.monsterCategories)==null?void 0:i.includes("Syncro")})),{title:"②珖波動反撃",isMandatory:!1,playType:"QuickEffect",spellSpeed:"Quick",executableCells:["Hand"],executablePeriods:_,executableDuelistTypes:["Controller"],isOnlyNTimesPerTurnIfFaceup:1,negatePreviousBlock:!0,validate:e=>{if(e.targetChainBlock&&e.activator!==e.targetChainBlock.activator&&e.targetChainBlock.action.entity.kind==="Monster"&&e.targetChainBlock.action.isWithChainBlock)return[]},prepare:async()=>({selectedEntities:[],chainBlockTags:["NegateCardEffect","DestroyOnField"],prepared:void 0}),execute:async e=>{if(!e.targetChainBlock)return!1;const t=e.targetChainBlock;t.isNegatedEffectBy=e.action;const i=await e.activator.waitSelectEntity(e.action.duel.field.getCardsOnFieldStrictly(),"破壊するカードを選択。",!1);return(await v.tryDestroy(i?[i]:[],e)).length>0},settle:async()=>!0},{title:"③蘇生",isMandatory:!1,playType:"IgnitionEffect",spellSpeed:"Normal",executableCells:["Graveyard"],executablePeriods:["main1","main2"],executableDuelistTypes:["Controller"],priorityForNPC:10,canPayCosts:ve,validate:e=>e.activator.getBanished().cardEntities.filter(i=>{var a;return(a=i.status.nameTags)==null?void 0:a.includes("スターダスト")}).filter(i=>(i.lvl??12)<9).length===0?void 0:e.activator.getAvailableMonsterZones().length>0?[]:void 0,payCosts:Ae,prepare:e=>ae(e,e.activator.getBanished().cardEntities.filter(t=>{var i;return(i=t.status.nameTags)==null?void 0:i.includes("スターダスト")}).filter(t=>(t.lvl??12)<9),P,t=>t.length===1),execute:e=>re(e,P),settle:async()=>!0}],substituteEffects:[{title:"波動聖句",isMandatory:!0,executableCells:["MonsterZone"],executablePeriods:z,executableDuelistTypes:["Controller"],isApplicableTo:(e,t,i)=>i.filter(a=>a.controller===e.entity.controller).filter(a=>a.counterHolder.getQty("SonicVerse",e.entity)===0),substitute:async(e,t,i)=>{if(!e.entity.isEffective)return[];const a=i.filter(r=>r.controller===e.entity.controller).filter(r=>r.counterHolder.getQty("SonicVerse",e.entity)===0);return a.forEach(r=>{r.counterHolder.add("SonicVerse",1,e.entity),e.entity.controller.writeInfoLog(`${e.entity.toString()}の効果により${r.toString()}は１ターンに１度だけ破壊されない。`)}),a}}]}}const di=Object.freeze(Object.defineProperty({__proto__:null,default:Or},Symbol.toStringTag,{value:"Module"}));function*Lr(){yield{name:"フォーミュラ・シンクロン",actions:[S,T,w,V(),{title:"①ドロー",isMandatory:!1,playType:"TriggerEffect",spellSpeed:"Normal",executableCells:R,executablePeriods:[..._,...F],executableDuelistTypes:["Controller"],validate:e=>{if(e.action.entity.hasBeenSummonedJustNow(["SyncroSummon"])&&e.activator.getDeckCell().cardEntities.length)return[]},prepare:async()=>({selectedEntities:[],chainBlockTags:["Draw"],prepared:void 0}),execute:async e=>(await e.activator.draw(1,e.action.entity,e.activator),!0),settle:async()=>!0},Zt({title:"②シンクロ召喚",isOnlyNTimesPerChain:1})]}}const pi=Object.freeze(Object.defineProperty({__proto__:null,default:Lr},Symbol.toStringTag,{value:"Module"}));function*Nr(){yield{name:"調律",actions:[{title:"発動",isMandatory:!1,playType:"CardActivation",spellSpeed:"Normal",executableCells:["Hand","SpellAndTrapZone"],executablePeriods:["main1","main2"],executableDuelistTypes:["Controller"],priorityForNPC:40,validate:e=>{const t=e.activator.getDeckCell().cardEntities;if(!(t.length<2)&&t.filter(i=>{var a;return(a=i.status.nameTags)==null?void 0:a.includes("シンクロン")}).filter(i=>{var a;return(a=i.status.monsterCategories)==null?void 0:a.includes("Tuner")}).length!==0)return b(e)},prepare:async()=>({selectedEntities:[],chainBlockTags:["SearchFromDeck","SendToGraveyardFromDeck"],prepared:void 0}),execute:async e=>{const t=e.activator.getDeckCell().cardEntities;if(t.length<2)return!1;const i=t.filter(r=>{var n;return(n=r.status.nameTags)==null?void 0:n.includes("シンクロン")}).filter(r=>{var n;return(n=r.status.monsterCategories)==null?void 0:n.includes("Tuner")});if(i.length===0)return!1;const a=await e.activator.waitSelectEntity(i,"手札に加えるモンスターを選択",!1);if(!a)throw new L(e);return await a.addToHand(["Effect"],e.action.entity,e.activator),e.activator.getDeckCell().shuffle(),e.activator.duel.clock.incrementProcSeq(),await e.activator.getDeckCell().cardEntities[0].sendToGraveyard(["Effect"],e.action.entity,e.activator),!0},settle:async()=>!0},C]}}const fi=Object.freeze(Object.defineProperty({__proto__:null,default:Nr},Symbol.toStringTag,{value:"Module"}));function*qr(){yield{name:"トゥーン・ワールド",actions:[{...ne,canPayCosts:e=>e.activator.lp>=1e3,payCosts:(e,t)=>Ke(e,t,1e3)},C]}}const hi=Object.freeze(Object.defineProperty({__proto__:null,default:qr},Symbol.toStringTag,{value:"Module"}));function*Rr(){yield{name:"無の煉獄",actions:[{title:"発動",isMandatory:!1,playType:"CardActivation",spellSpeed:"Normal",executableCells:["Hand","SpellAndTrapZone"],executablePeriods:["main1","main2"],executableDuelistTypes:["Controller"],validate:e=>{if(e.activator.getDeckCell().cardEntities.length&&!(e.activator.getHandCell().cardEntities.length<3)&&e.activator.status.canDiscardAsEffect)return b(e)},prepare:async()=>({selectedEntities:[],chainBlockTags:["Draw","DiscordAsEffect"],prepared:void 0}),execute:async e=>(await e.activator.draw(1,e.action.entity,e.activator),e.activator.entity.counterHolder.add("IntoTheVoid",1,e.action.entity),!0),settle:async()=>!0},{title:"手札抹殺",isMandatory:!0,playType:"LingeringEffect",spellSpeed:"Normal",executableCells:I,executablePeriods:["end"],executableDuelistTypes:["Controller","Opponent"],validate:e=>e.activator.entity.counterHolder.getQty("IntoTheVoid",e.action.entity)?[]:void 0,prepare:q,execute:async e=>(await v.discardManyForTheSameReason(e.activator.getHandCell().cardEntities,["Effect"],e.action.entity,e.activator),e.activator.entity.counterHolder.remove("IntoTheVoid",1,e.action.entity),!0),settle:async()=>!0},C]}}const gi=Object.freeze(Object.defineProperty({__proto__:null,default:Rr},Symbol.toStringTag,{value:"Module"}));function*Hr(){yield{name:"星杯の妖精リース",actions:[S,T,w,A,{title:"①サーチ",isMandatory:!1,playType:"TriggerEffect",spellSpeed:"Normal",executableCells:["MonsterZone"],executablePeriods:[..._,...F],executableDuelistTypes:["Controller"],isOnlyNTimesPerTurn:1,validate:e=>{if(e.action.entity.hasBeenSummonedNow(["NormalSummon","SpecialSummon"])&&e.activator.getDeckCell().cardEntities.filter(t=>t.kind==="Monster").filter(t=>{var i;return(i=t.status.nameTags)==null?void 0:i.includes("星杯")}).length!==0)return[]},prepare:async()=>({selectedEntities:[],chainBlockTags:["SearchFromDeck"],prepared:void 0}),execute:async e=>{const t=e.activator.getDeckCell().cardEntities.filter(a=>a.kind==="Monster").filter(a=>{var r;return(r=a.status.nameTags)==null?void 0:r.includes("星杯")});if(t.length===0)return!1;const i=await e.activator.waitSelectEntity(t,"手札に加えるモンスターを選択",!1);if(!i)throw new m("想定されない状態",e);return await i.addToHand(["Effect"],e.action.entity,e.activator),!0},settle:async()=>!0},{title:"②自己サルベージ",isMandatory:!1,playType:"IgnitionEffect",spellSpeed:"Normal",executableCells:["Graveyard"],executablePeriods:["main1","main2"],executableDuelistTypes:["Controller"],isOnlyNTimesPerTurn:1,canPayCosts:e=>[...e.activator.getMonstersOnField(),...e.activator.getHandCell().cardEntities.filter(t=>t.kind==="Monster")].some(t=>t.canBeSentToGraveyard(e.activator,e.action.entity,"SendToGraveyardAsCost",e.action)),validate:()=>[],payCosts:async e=>{const t=[...e.activator.getMonstersOnField(),...e.activator.getHandCell().cardEntities.filter(a=>a.kind==="Monster")].filter(a=>a.canBeSentToGraveyard(e.activator,e.action.entity,"SendToGraveyardAsCost",e.action)),i=await e.activator.waitSelectEntity(t,"墓地に送るモンスターを選択。",!0);if(i)return await i.sendToGraveyard(["Cost"],e.action.entity,e.activator),{sendToGraveyard:[i]}},prepare:async()=>({selectedEntities:[],chainBlockTags:["SearchFromDeck"],prepared:void 0}),execute:async e=>e.action.entity.wasMovedAfter(e.isActivatedAt)?!1:(await e.action.entity.addToHand(["Effect"],e.action.entity,e.activator),!0),settle:async()=>!0}]},yield{name:"星遺物－『星杯』",actions:[S,T,w,A,{title:"①墓地送り",isMandatory:!1,playType:"TriggerEffect",spellSpeed:"Normal",executableCells:["MonsterZone"],executablePeriods:[..._,...F],executableDuelistTypes:["Controller"],canPayCosts:Je,validate:e=>e.activator.duel.field.moveLog.getPriviousChainLog().filter(t=>t.movedAs.includes("SpecialSummon")).map(t=>t.entity).some(t=>t.wasMovedFrom.cellType==="ExtraDeck")?[]:void 0,payCosts:Ye,prepare:q,execute:async e=>{const t=e.activator.duel.field.moveLog.getPriviousChainLog().filter(i=>i.movedAs.includes("SpecialSummon")).map(i=>i.entity).filter(i=>i.wasMovedFrom.cellType==="ExtraDeck").filter(i=>i.isOnFieldAsMonsterStrictly).filter(i=>i.canBeEffected(e.activator,e.action.entity,e.action)).toArray();return await v.sendManyToGraveyardForTheSameReason(t,["Effect"],e.action.entity,e.activator),!0},settle:async()=>!0},{title:"②リクルート",isMandatory:!1,playType:"TriggerEffect",spellSpeed:"Normal",executableCells:["Hand","Graveyard","Banished"],executablePeriods:[..._,...F],executableDuelistTypes:["Controller"],validate:e=>{if(!e.action.entity.wasMovedAtPreviousChain||!e.action.entity.info.summonKinds.includes("NormalSummon")||e.action.entity.moveLog.previousPlaceRecord.face==="FaceDown")return;const t=e.activator.getDeckCell().cardEntities.filter(r=>r.kind==="Monster").filter(r=>{var n;return(n=r.status.nameTags)==null?void 0:n.includes("星杯")}).filter(r=>r.nm!=="星遺物－『星杯』"),i=e.activator.getMonsterZones();return e.activator.getEnableSummonList(e.activator,"SpecialSummon",["Effect"],e.action,t.map(r=>({monster:r,cells:i,posList:P})),[],!1).length>1?[]:void 0},prepare:q,execute:async e=>{const t=e.activator.getDeckCell().cardEntities.filter(r=>r.kind==="Monster").filter(r=>{var n;return(n=r.status.nameTags)==null?void 0:n.includes("星杯")}).filter(r=>r.nm!=="星遺物－『星杯』"),i=e.activator.getMonsterZones();return(await e.activator.summonMany(e.activator,"SpecialSummon",["Effect"],e.action,t.map(r=>({monster:r,cells:i,posList:P})),[],!1,2,r=>r.length==2,!1)??[]).length==2},settle:async()=>!0},{title:"③サーチ",isMandatory:!1,playType:"IgnitionEffect",spellSpeed:"Normal",executableCells:["Graveyard"],executablePeriods:["main1","main2"],executableDuelistTypes:["Controller"],canPayCosts:ve,validate:e=>{if(!e.action.entity.wasMovedAtCurrentTurn)return e.activator.getDeckCell().cardEntities.filter(t=>{var i;return(i=t.status.nameTags)==null?void 0:i.includes("星遺物")}).length>0?[]:void 0},payCosts:Ae,prepare:async()=>({selectedEntities:[],chainBlockTags:["SearchFromDeck"],prepared:void 0}),execute:async e=>{const t=await e.activator.waitSelectEntity(e.activator.getDeckCell().cardEntities.filter(i=>{var a;return(a=i.status.nameTags)==null?void 0:a.includes("星遺物")}),"手札に加えるカードを選択",!1);return t?(await t.addToHand(["Effect"],e.action.entity,e.activator),!0):!1},settle:async()=>!0}]}}const yi=Object.freeze(Object.defineProperty({__proto__:null,default:Hr},Symbol.toStringTag,{value:"Module"}));function*Zr(){yield{name:"ドットスケーパー",actions:[S,T,A,w,{title:"①自己再生",isMandatory:!1,playType:"TriggerEffect",spellSpeed:"Normal",executableCells:["Graveyard"],executablePeriods:[..._,...F],executableDuelistTypes:["Controller"],isOnlyNTimesPerDuel:1,actionGroupName:"ドットスケーパー",validate:e=>{if(e.action.entity.wasMovedAtPreviousChain)return e.activator.getAvailableMonsterZones().length>0?[]:void 0},prepare:async()=>({selectedEntities:[],chainBlockTags:["SpecialSummonFromGraveyard"],prepared:void 0}),execute:e=>ee(e),settle:async()=>!0},{title:"②自己帰還",isMandatory:!1,playType:"TriggerEffect",spellSpeed:"Normal",executableCells:["Banished"],executablePeriods:[..._,...F],executableDuelistTypes:["Controller"],isOnlyNTimesPerDuel:1,actionGroupName:"ドットスケーパー",validate:e=>{if(e.action.entity.wasMovedAtPreviousChain)return e.activator.getAvailableMonsterZones().length>0?[]:void 0},prepare:async()=>({selectedEntities:[],chainBlockTags:["SpecialSummonFromBanished"],prepared:void 0}),execute:e=>ee(e),settle:async()=>!0}]}}const vi=Object.freeze(Object.defineProperty({__proto__:null,default:Zr},Symbol.toStringTag,{value:"Module"}));function*$r(){yield{name:"ゼラの天使",actions:[S,T,w,V(),{title:"②自己帰還",isMandatory:!0,playType:"IgnitionEffect",spellSpeed:"Normal",executableCells:["Banished"],executablePeriods:["stanby"],executableDuelistTypes:["Controller"],validate:e=>{if(e.action.entity.wasMovedAtPreviousTurn)return e.activator.getAvailableMonsterZones().length>0?[]:void 0},prepare:async()=>({selectedEntities:[],chainBlockTags:["SpecialSummonFromBanished"],prepared:void 0}),execute:e=>ee(e),settle:async()=>!0}],continuousEffects:[ye("②攻撃力上昇","Monster",e=>[e],()=>!0,e=>[H.createContinuous("①攻撃力上昇",()=>!0,e,()=>!0,"attack","wip","Addition",(t,i,a)=>t.isEffective?a+t.controller.getOpponentPlayer().getBanished().cardEntities.length*100:a)])]}}const mi=Object.freeze(Object.defineProperty({__proto__:null,default:$r},Symbol.toStringTag,{value:"Module"}));function*Gr(){yield{name:"死霊騎士デスカリバー・ナイト",actions:[S,T,A,w,{title:"①モンスター効果無効",isMandatory:!0,playType:"TriggerEffect",spellSpeed:"Quick",executableCells:R,executablePeriods:[..._,...F],executableDuelistTypes:["Controller"],negatePreviousBlock:!0,canPayCosts:Je,validate:e=>e.targetChainBlock&&e.targetChainBlock.action.entity.kind==="Monster"&&e.targetChainBlock.action.isWithChainBlock?[]:void 0,payCosts:Ye,prepare:async(e,t)=>{const i=e.targetChainBlock,a=t[e.index-1];return i!==a?{selectedEntities:[],chainBlockTags:[],prepared:void 0}:{selectedEntities:[],chainBlockTags:["NegateCardEffect",...e.action.calcChainBlockTagsForDestroy(e.activator,[i.action.entity])],prepared:void 0}},execute:async(e,t)=>{const i=t.find(r=>r.action.entity.kind!=="Monster"&&r.action.isWithChainBlock),a=t[e.index-1];return a!==i?!1:(a.isNegatedActivationBy=e.action,await v.tryDestroy([a.action.entity],e),!0)},settle:async()=>!0}]}}const Si=Object.freeze(Object.defineProperty({__proto__:null,default:Gr},Symbol.toStringTag,{value:"Module"}));function*Ur(){yield{name:"召喚僧サモンプリースト",actions:[S,T,A,w,{title:"①表示形式変更",isMandatory:!0,playType:"TriggerEffect",spellSpeed:"Normal",executableCells:["MonsterZone"],executablePeriods:[..._,...F],executableDuelistTypes:["Controller"],validate:e=>{if(e.action.entity.hasBeenSummonedNow(["NormalSummon","FlipSummon"]))return[]},prepare:async()=>({selectedEntities:[],chainBlockTags:["IfNormarlSummonSucceed"],prepared:void 0}),execute:async e=>e.action.entity.battlePosition!=="Attack"||!e.action.entity.isOnFieldAsMonsterStrictly?!1:(await e.action.entity.setBattlePosition("Defense",["Effect"],e.action.entity,e.activator),!0),settle:async()=>!0},{title:"③リクルート",isMandatory:!1,playType:"IgnitionEffect",spellSpeed:"Normal",executableCells:["MonsterZone"],executablePeriods:["main1","main2"],executableDuelistTypes:["Controller"],isOnlyNTimesPerTurnIfFaceup:1,canPayCosts:e=>e.activator.status.canDiscardAsCost?e.activator.getHandCell().cardEntities.some(t=>t.kind==="Spell"):!1,validate:e=>{const t=e.activator.getDeckCell().cardEntities.filter(r=>r.kind==="Monster").filter(r=>r.lvl===4),i=e.activator.getMonsterZones();if(e.activator.getEnableSummonList(e.activator,"SpecialSummon",["Effect"],e.action,t.map(r=>({monster:r,posList:P,cells:i})),[],!1).length)return[]},payCosts:async(e,t,i)=>{const a=e.activator.getHandCell().cardEntities.filter(n=>n.kind==="Spell"),r=await e.activator.waitSelectEntity(a,"手札コストを選択",i);if(!r&&!i)throw new L(e);if(r)return await r.discard(["Cost"],e.action.entity,e.activator),{discard:[r]}},prepare:async()=>({selectedEntities:[],chainBlockTags:["SpecialSummonFromDeck"],prepared:void 0}),execute:async e=>{const t=e.activator.getDeckCell().cardEntities.filter(r=>r.lvl===4),i=e.activator.getMonsterZones(),a=await e.activator.summonOne(e.activator,"SpecialSummon",["Effect"],e.action,t.map(r=>({monster:r,posList:P,cells:i})),[],!1,!1);return a?(a.statusOperatorBundle.push(new ue("攻撃不可",r=>r.effectOwner.duel.clock.isSameTurn(r.isSpawnedAt),!1,e.action.entity,e.action,()=>!0,(r,n)=>({...n,canAttack:!1}))),!!a):!1},settle:async()=>!0}],continuousEffects:[Et("②リリース不可","Monster",e=>[e],()=>!0,e=>[new pe("②リリース不可",()=>!0,!0,e,{},()=>!0,["AdvanceSummonRelease","ReleaseAsEffect","ReleaseAsCost"],()=>!1)])]}}const Ci=Object.freeze(Object.defineProperty({__proto__:null,default:Ur},Symbol.toStringTag,{value:"Module"}));function*jr(){yield{name:"アンカモフライト",actions:[S,T,w,ne,{title:"特殊召喚",isMandatory:!1,playType:"SpecialSummon",spellSpeed:"Normal",executableCells:["ExtraDeck"],executablePeriods:["main1","main2"],executableDuelistTypes:["Controller"],isOnlyNTimesPerDuel:1,validate:e=>{if(e.action.entity.face!=="FaceDown"&&!e.activator.getExtraDeck().cardEntities.some(t=>t.nm!=="アンカモフライト"))return be(e,P,[])},prepare:e=>X(e,"SpecialSummon",["SpecialSummon","Rule"],P),execute:K,settle:async()=>!0},{title:"①ドロー",isMandatory:!1,playType:"IgnitionEffect",spellSpeed:"Normal",executableCells:["SpellAndTrapZone"],executablePeriods:["main1","main2"],executableDuelistTypes:["Controller"],priorityForNPC:20,isOnlyNTimesPerTurn:1,validate:e=>{if(!(e.activator.getDeckCell().cardEntities.length<1)&&!e.activator.getExtraDeck().cardEntities.some(t=>t.nm!=="アンカモフライト"))return[]},prepare:async()=>({selectedEntities:[],chainBlockTags:["DestroySpellTrapOnField","Draw"],prepared:void 0}),execute:async e=>(await v.tryDestroy([e.action.entity],e)).length?(e.action.entity.field.duel.clock.incrementProcSeq(),await e.activator.draw(1,e.action.entity,e.activator),!0):!1,settle:async()=>!0}],summonFilter:(e,t,i,a,r,n,l,o,u,c)=>{const d={posList:u,cells:c},p={posList:[],cells:[]};return l!==t||n.entity===t?d:p}}}const Ti=Object.freeze(Object.defineProperty({__proto__:null,default:jr},Symbol.toStringTag,{value:"Module"}));function*Vr(){yield{name:"エキセントリック・ボーイ",actions:[S,T,A,w],summonFilter:(e,t,i,a,r,n,l,o,u,c)=>{const d={posList:u,cells:c},p={posList:[],cells:[]};if(!r.includes("SyncroSummon"))return d;const h=o.find(g=>g.material===e.isSpawnedBy);return h?!h.cell.isMonsterZoneLikeCell||o.length!==2?p:o.filter(g=>g!==h).every(g=>g.cell.cellType==="Hand")?d:p:d},defaultStatus:{allowHandSyncro:!0},onUsedAsMaterial:(e,t)=>{t.info.summonKinds.includes("SyncroSummon")&&(t.info.willBeBanished=!0,t.info.isEffectiveIn=t.info.isEffectiveIn.filter(i=>i!=="ExtraMonsterZone").filter(i=>i!=="MonsterZone"))}}}const wi=Object.freeze(Object.defineProperty({__proto__:null,default:Vr},Symbol.toStringTag,{value:"Module"})),zr={title:"ペンデュラム召喚",isMandatory:!1,playType:"SpecialSummon",spellSpeed:"Normal",executableCells:["Hand"],executablePeriods:["main1","main2"],executableDuelistTypes:["Controller"],isOnlyNTimesPerTurn:1,validate:e=>{const t=e.activator.getPendulumScales();if(!t||t.upperBound-t.lowerBound<2)return;const i=[...e.activator.getHandCell().cardEntities.filter(n=>n.kind==="Monster"),...e.activator.getExtraDeck().cardEntities.filter(n=>n.face==="FaceUp")].filter(n=>n.kind==="Monster").filter(n=>n.lvl&&n.lvl>t.lowerBound).filter(n=>n.lvl&&n.lvl<t.upperBound);if(!i.length)return;const a=[...e.activator.getMonsterZones(),...e.activator.getEmptyExtraZones()];return e.activator.getEnableSummonList(e.activator,"PendulumSummon",["Rule"],e.action,i.map(n=>({monster:n,cells:a,posList:P})),[],!1).length?[]:void 0},prepare:async e=>{const t=e.activator.getPendulumScales();if(!t||t.upperBound-t.lowerBound<2)return;const i=[...e.activator.getHandCell().cardEntities.filter(r=>r.kind==="Monster"),...e.activator.getExtraDeck().cardEntities.filter(r=>r.face==="FaceUp")].filter(r=>r.kind==="Monster").filter(r=>r.lvl&&r.lvl>t.lowerBound).filter(r=>r.lvl&&r.lvl<t.upperBound);if(!i.length)return;const a=[...e.activator.getMonsterZones(),...e.activator.getEmptyExtraZones()];return await e.activator.summonMany(e.activator,"PendulumSummon",["Rule"],e.action,i.map(r=>({monster:r,posList:P,cells:a})),[],!1,void 0,r=>r.length>0,!1),q()},execute:async e=>(e.activator.getPendingMonstersOnField().forEach(t=>t.determine()),!0),settle:async()=>!0},Qr=[zr],Wr=e=>({name:e.profile.name,actions:[...Qr],staticInfo:{name:e.profile.name,kind:"Monster",wikiEncodedName:"%A5%D7%A5%EC%A5%A4%A5%E4%A1%BC"}});function*Xr(){const e={...Object.assign({"/src/ygo_entity_proc/card_proc_definitions/CardProcDefinitions_ContinuousSpell.ts":Ft,"/src/ygo_entity_proc/card_proc_definitions/CardProcDefinitions_ContinuousTrap.ts":Bt,"/src/ygo_entity_proc/card_proc_definitions/CardProcDefinitions_CounterTrap.ts":Ot,"/src/ygo_entity_proc/card_proc_definitions/CardProcDefinitions_EquipSpell.ts":Lt,"/src/ygo_entity_proc/card_proc_definitions/CardProcDefinitions_EquipSpell_Preset.ts":Nt,"/src/ygo_entity_proc/card_proc_definitions/CardProcDefinitions_FieldSpell.ts":qt,"/src/ygo_entity_proc/card_proc_definitions/CardProcDefinitions_FieldSpell_Preset.ts":Rt,"/src/ygo_entity_proc/card_proc_definitions/CardProcDefinitions_LinkMonster.ts":$t,"/src/ygo_entity_proc/card_proc_definitions/CardProcDefinitions_Monster.ts":Gt,"/src/ygo_entity_proc/card_proc_definitions/CardProcDefinitions_Monster_Preset_DirectAttacker.ts":Ut,"/src/ygo_entity_proc/card_proc_definitions/CardProcDefinitions_Monster_Preset_Recruiter.ts":jt,"/src/ygo_entity_proc/card_proc_definitions/CardProcDefinitions_NormalSpell.ts":Vt,"/src/ygo_entity_proc/card_proc_definitions/CardProcDefinitions_NormalSpell_General_Draw.ts":zt,"/src/ygo_entity_proc/card_proc_definitions/CardProcDefinitions_NormalSpell_Preset.ts":Qt,"/src/ygo_entity_proc/card_proc_definitions/CardProcDefinitions_NormalTrap.ts":Wt,"/src/ygo_entity_proc/card_proc_definitions/CardProcDefinitions_NormalTrap_UponAttackDeclaration.ts":Xt,"/src/ygo_entity_proc/card_proc_definitions/CardProcDefinitions_QuickPlaySpell.ts":Kt,"/src/ygo_entity_proc/card_proc_definitions/CardProcDefinitions_SyncroMonster.ts":Jt,"/src/ygo_entity_proc/card_proc_definitions/CardProcDefinitions_TestMonster.ts":Yt,"/src/ygo_entity_proc/card_proc_definitions/CardProcDefinitions_XyzMonster.ts":It}),...Object.assign({"/src/ygo_entity_proc/card_proc_definitions/character_yusei/CardProcDefinitions_Yusei_SyncroTunerMonster.ts":ei,"/src/ygo_entity_proc/card_proc_definitions/tag_b/CardProcDefinitions_BambooSword_EquipSpell.ts":ti,"/src/ygo_entity_proc/card_proc_definitions/tag_b/CardProcDefinitions_BambooSword_NormalSpell.ts":ii,"/src/ygo_entity_proc/card_proc_definitions/tag_b/CardProcDefinitions_Blackwing_Monster.ts":ai,"/src/ygo_entity_proc/card_proc_definitions/tag_c/CardProcDefinitions_Crystron_LinkMonster.ts":ri,"/src/ygo_entity_proc/card_proc_definitions/tag_e/CardProcDefinitions_Exodia_Monster.ts":ni,"/src/ygo_entity_proc/card_proc_definitions/tag_f/CardProcDefinitions_Firewall_LinkMonster.ts":si,"/src/ygo_entity_proc/card_proc_definitions/tag_i/CardProcDefinitions_Igknight_Monster.ts":li,"/src/ygo_entity_proc/card_proc_definitions/tag_j/CardProcDefinitions_Junk_Monster.ts":oi,"/src/ygo_entity_proc/card_proc_definitions/tag_r/CardProcDefinitions_Resonator_Monster.ts":ci,"/src/ygo_entity_proc/card_proc_definitions/tag_s/CardProcDefinitions_SpellCounter_Monster.ts":ui,"/src/ygo_entity_proc/card_proc_definitions/tag_s/CardProcDefinitions_Stardust_Monster.ts":di,"/src/ygo_entity_proc/card_proc_definitions/tag_s/CardProcDefinitions_Synchron_SyncroMonster.ts":pi,"/src/ygo_entity_proc/card_proc_definitions/tag_s/CardProcDefinitions_Syncron_NormalSpell.ts":fi,"/src/ygo_entity_proc/card_proc_definitions/tag_t/CardProcDefinitions_Toon_ContinuousSpell.ts":hi,"/src/ygo_entity_proc/card_proc_definitions/tag_v/CardProcDefinitions_Void_NormalSpell.ts":gi,"/src/ygo_entity_proc/card_proc_definitions/tag_w/CardProcDefinitions_WorldChalice_Monster.ts":yi,"/src/ygo_entity_proc/card_proc_definitions/type_Cyberse/CardProcDefinitions_Earth_Cyberse_lvl1_Monster.ts":vi,"/src/ygo_entity_proc/card_proc_definitions/type_Fairy/CardProcDefinitions_Light_Fairy_lvl8_SyncroMonster.ts":mi,"/src/ygo_entity_proc/card_proc_definitions/type_Fiend/CardProcDefinitions_Dark_Fiend_lvl4_Monster.ts":Si,"/src/ygo_entity_proc/card_proc_definitions/type_Spellcaster/CardProcDefinitions_Dark_Spellcaster_lvl4_Monster.ts":Ci,"/src/ygo_entity_proc/card_proc_definitions/type_Spellcaster/CardProcDefinitions_Light_Spellcaster_lvl5_PendulumMonster.ts":Ti,"/src/ygo_entity_proc/card_proc_definitions/type_Spellcaster/CardProcDefinitions_Wind_Spellcaster_lvl3_Monster.ts":wi})};for(const t of Object.keys(e))e[t].default&&(yield*e[t].default())}function*Kr(...e){const t={...Object.assign({"/src/ygo_entity_proc/card_proc_definitions/CardProcDefinitions_ContinuousSpell.ts":Ft,"/src/ygo_entity_proc/card_proc_definitions/CardProcDefinitions_ContinuousTrap.ts":Bt,"/src/ygo_entity_proc/card_proc_definitions/CardProcDefinitions_CounterTrap.ts":Ot,"/src/ygo_entity_proc/card_proc_definitions/CardProcDefinitions_EquipSpell.ts":Lt,"/src/ygo_entity_proc/card_proc_definitions/CardProcDefinitions_EquipSpell_Preset.ts":Nt,"/src/ygo_entity_proc/card_proc_definitions/CardProcDefinitions_FieldSpell.ts":qt,"/src/ygo_entity_proc/card_proc_definitions/CardProcDefinitions_FieldSpell_Preset.ts":Rt,"/src/ygo_entity_proc/card_proc_definitions/CardProcDefinitions_LinkMonster.ts":$t,"/src/ygo_entity_proc/card_proc_definitions/CardProcDefinitions_Monster.ts":Gt,"/src/ygo_entity_proc/card_proc_definitions/CardProcDefinitions_Monster_Preset_DirectAttacker.ts":Ut,"/src/ygo_entity_proc/card_proc_definitions/CardProcDefinitions_Monster_Preset_Recruiter.ts":jt,"/src/ygo_entity_proc/card_proc_definitions/CardProcDefinitions_NormalSpell.ts":Vt,"/src/ygo_entity_proc/card_proc_definitions/CardProcDefinitions_NormalSpell_General_Draw.ts":zt,"/src/ygo_entity_proc/card_proc_definitions/CardProcDefinitions_NormalSpell_Preset.ts":Qt,"/src/ygo_entity_proc/card_proc_definitions/CardProcDefinitions_NormalTrap.ts":Wt,"/src/ygo_entity_proc/card_proc_definitions/CardProcDefinitions_NormalTrap_UponAttackDeclaration.ts":Xt,"/src/ygo_entity_proc/card_proc_definitions/CardProcDefinitions_QuickPlaySpell.ts":Kt,"/src/ygo_entity_proc/card_proc_definitions/CardProcDefinitions_SyncroMonster.ts":Jt,"/src/ygo_entity_proc/card_proc_definitions/CardProcDefinitions_TestMonster.ts":Yt,"/src/ygo_entity_proc/card_proc_definitions/CardProcDefinitions_XyzMonster.ts":It}),...Object.assign({"/src/ygo_entity_proc/card_proc_definitions/character_yusei/CardProcDefinitions_Yusei_SyncroTunerMonster.ts":ei,"/src/ygo_entity_proc/card_proc_definitions/tag_b/CardProcDefinitions_BambooSword_EquipSpell.ts":ti,"/src/ygo_entity_proc/card_proc_definitions/tag_b/CardProcDefinitions_BambooSword_NormalSpell.ts":ii,"/src/ygo_entity_proc/card_proc_definitions/tag_b/CardProcDefinitions_Blackwing_Monster.ts":ai,"/src/ygo_entity_proc/card_proc_definitions/tag_c/CardProcDefinitions_Crystron_LinkMonster.ts":ri,"/src/ygo_entity_proc/card_proc_definitions/tag_e/CardProcDefinitions_Exodia_Monster.ts":ni,"/src/ygo_entity_proc/card_proc_definitions/tag_f/CardProcDefinitions_Firewall_LinkMonster.ts":si,"/src/ygo_entity_proc/card_proc_definitions/tag_i/CardProcDefinitions_Igknight_Monster.ts":li,"/src/ygo_entity_proc/card_proc_definitions/tag_j/CardProcDefinitions_Junk_Monster.ts":oi,"/src/ygo_entity_proc/card_proc_definitions/tag_r/CardProcDefinitions_Resonator_Monster.ts":ci,"/src/ygo_entity_proc/card_proc_definitions/tag_s/CardProcDefinitions_SpellCounter_Monster.ts":ui,"/src/ygo_entity_proc/card_proc_definitions/tag_s/CardProcDefinitions_Stardust_Monster.ts":di,"/src/ygo_entity_proc/card_proc_definitions/tag_s/CardProcDefinitions_Synchron_SyncroMonster.ts":pi,"/src/ygo_entity_proc/card_proc_definitions/tag_s/CardProcDefinitions_Syncron_NormalSpell.ts":fi,"/src/ygo_entity_proc/card_proc_definitions/tag_t/CardProcDefinitions_Toon_ContinuousSpell.ts":hi,"/src/ygo_entity_proc/card_proc_definitions/tag_v/CardProcDefinitions_Void_NormalSpell.ts":gi,"/src/ygo_entity_proc/card_proc_definitions/tag_w/CardProcDefinitions_WorldChalice_Monster.ts":yi,"/src/ygo_entity_proc/card_proc_definitions/type_Cyberse/CardProcDefinitions_Earth_Cyberse_lvl1_Monster.ts":vi,"/src/ygo_entity_proc/card_proc_definitions/type_Fairy/CardProcDefinitions_Light_Fairy_lvl8_SyncroMonster.ts":mi,"/src/ygo_entity_proc/card_proc_definitions/type_Fiend/CardProcDefinitions_Dark_Fiend_lvl4_Monster.ts":Si,"/src/ygo_entity_proc/card_proc_definitions/type_Spellcaster/CardProcDefinitions_Dark_Spellcaster_lvl4_Monster.ts":Ci,"/src/ygo_entity_proc/card_proc_definitions/type_Spellcaster/CardProcDefinitions_Light_Spellcaster_lvl5_PendulumMonster.ts":Ti,"/src/ygo_entity_proc/card_proc_definitions/type_Spellcaster/CardProcDefinitions_Wind_Spellcaster_lvl3_Monster.ts":wi})},i=[];for(const a of Object.values(t))if(a.default){for(const r of a.default())if(e.includes(r.name)){const n=Q[r.name];let l=r.summonFilter;n.kind==="Monster"&&n.monsterCategories&&!r.summonFilter&&n.monsterCategories.union(gt).length&&(l=Ka),yield{...r,summonFilter:l,staticInfo:n},i.push(r.name)}}yield*e.filter(a=>!i.includes(a)).map(a=>Q[a]).filter(a=>a).filter(a=>a.kind==="Monster").filter(a=>{var r;return(r=a.monsterCategories)==null?void 0:r.includes("Normal")}).filter(a=>{var r;return!((r=a.monsterCategories)!=null&&r.includes("Pendulum"))}).map(a=>(i.push(a.name),{name:a.name,actions:Xa,staticInfo:a})),i.length!==e.length&&console.log(e.filter(a=>!i.includes(a)))}const Jr=e=>({...Wr(e),staticInfo:{name:e.profile.name,kind:"Monster",wikiEncodedName:"%A5%D7%A5%EC%A5%A4%A5%E4%A1%BC"}}),Yr=new Set,ze=Di;for(const e of Xr()){if(Yr.has(e.name))throw new Error(`カード定義重複${e.name}`);ze[e.name]&&(ze[e.name].isImplemented=!0)}const Q=Object.values(ze).reduce((e,t)=>{var i;return(i=t.monsterCategories)!=null&&i.includes("Normal")&&!t.monsterCategories.includes("Pendulum")&&(t.isImplemented=!0),e[t.name]=t,e},{}),Ei=[{id:-1,name:"サンプルデッキ１",description:"",cardNames:["アンノウン・シンクロン","六武衆のご隠居","ジャンク・フォアード","ジャンク・フォアード","ジャンク・フォアード","チューン・ウォリアー","チューン・ウォリアー","ガード・オブ・フレムベル","ガード・オブ・フレムベル","守護竜ユスティア","守護竜ユスティア","エンジェル・トランペッター","エンジェル・トランペッター","ジェムナイト・サフィア","ジェムナイト・サフィア","魂虎","魂虎","暗黒界の番兵 レンジ","暗黒界の番兵 レンジ","バトルフットボーラー","バトルフットボーラー","球騎士の三人娘","球騎士の三人娘","エンジェル・トランペッター","エンジェル・トランペッター","Ｇ戦隊 シャインブラック","Ｇ戦隊 シャインブラック","しゃりの軍貫","しゃりの軍貫","ジョングルグールの幻術師","ジョングルグールの幻術師","ゾンビーノ","ゾンビーノ","メガロスマッシャーＸ","メガロスマッシャーＸ","ライドロン","ライドロン","機界騎士アヴラム","機界騎士アヴラム","幻のグリフォン","幻のグリフォン","幻殻竜","幻殻竜","アレキサンドライドラゴン","アレキサンドライドラゴン","ジェネティック・ワーウルフ","ジェネティック・ワーウルフ","サイバー・ドラゴン","フロストザウルス","フロストザウルス","フロストザウルス","青眼の白龍","マジカル・アンドロイド","マジカル・アンドロイド","マジカル・アンドロイド","大地の騎士ガイアナイト","大地の騎士ガイアナイト","大地の騎士ガイアナイト","スクラップ・デスデーモン","スクラップ・デスデーモン","スクラップ・デスデーモン","スターダスト・ドラゴン","スターダスト・ドラゴン","スターダスト・ドラゴン","ナチュル・ガオドレイク","ナチュル・ガオドレイク","ナチュル・ガオドレイク"]},{id:-2,name:"サンプルデッキ２",description:"",cardNames:["アンノウン・シンクロン","六武衆のご隠居","ジャンク・フォアード","グローアップ・バルブ","ガード・オブ・フレムベル","伝説の白石","伝説の白石","伝説の白石","守護竜ユスティア","ギャラクシーサーペント","ジェネクス・コントローラー","Ｅ・ＨＥＲＯ フェザーマン","Ｅ・ＨＥＲＯ バーストレディ","チューン・ウォリアー","Ｅ・ＨＥＲＯ クレイマン","Ｅ・ＨＥＲＯ スパークマン","しゃりの軍貫","ジョングルグールの幻術師","ゾンビーノ","ジェネティック・ワーウルフ","ライトロード・ビースト ウォルフ","サイバー・ドラゴン","サイバー・ドラゴン","サイバー・ドラゴン","ラブラドライドラゴン","Ｄ－ＨＥＲＯ ディアボリックガイ","Ｄ－ＨＥＲＯ ディアボリックガイ","Ｄ－ＨＥＲＯ ディアボリックガイ","フロストザウルス","Ｅ・ＨＥＲＯ ネオス","青眼の白龍","青眼の白龍","青眼の白龍","Ｅ－エマージェンシーコール","おろかな埋葬","トレード・イン","トレード・イン","トレード・イン","闇の量産工場","強欲な壺","強欲な壺","強欲な壺","死者蘇生","死者蘇生","死者蘇生","召喚師のスキル","召喚師のスキル","召喚師のスキル","成金ゴブリン","成金ゴブリン","成金ゴブリン","戦士の生還","増援","調和の宝札","調和の宝札","調和の宝札","天使の施し","天使の施し","天使の施し","貪欲な壺","貪欲な壺","貪欲な壺","マジカル・アンドロイド","マジカル・アンドロイド","マジカル・アンドロイド","大地の騎士ガイアナイト","大地の騎士ガイアナイト","大地の騎士ガイアナイト","スクラップ・デスデーモン","スクラップ・デスデーモン","スクラップ・デスデーモン","スターダスト・ドラゴン","スターダスト・ドラゴン","スターダスト・ドラゴン","ナチュル・ガオドレイク","ナチュル・ガオドレイク","ナチュル・ガオドレイク"]}],E=class E{constructor(t,i){s(this,"id");s(this,"name");s(this,"description");s(this,"lastUsedAt");s(this,"cardNames");s(this,"getIllegalCardNames",()=>Array.from(new Set(this.cardNames.filter(t=>!Object.keys(Q).includes(t)))));s(this,"getDisableCardNames",()=>Array.from(new Set(this.cardNames.filter(t=>!Object.keys(Q).includes(t)))));s(this,"createCardInfos",()=>{const t=this.getIllegalCardNames();if(t.length>0)throw new Error(`存在しないカード名からデッキを生成しようとした。${t}`);return this.cardNames.map(i=>Q==null?void 0:Q[i]).filter(i=>i)});s(this,"copy",async()=>E.createNewDeck(this.name,this.description,this.cardNames));s(this,"updateTimestamp",async()=>{await E.tblHeader.update(this.id,t=>({...t,lastUsedAt:new Date}))});s(this,"saveDeckInfo",async t=>{const i=t??this;await E.tblHeader.update(this.id,n=>({...n,name:i.name,description:i.description,lastUsedAt:new Date}));const a=(await E.tblDetail.getAll()).filter(n=>n.deckId===this.id);await E.tblDetail.delete(a.map(n=>n.id));const r=await E.tblDetail.insertMany(i.cardNames.map((n,l)=>({deckId:this.id,seq:l,name:n,description:""})));return new E(await E.tblHeader.get(this.id),r)});s(this,"delete",async()=>{await E.tblHeader.delete([this.id]);const t=(await E.tblDetail.getAll()).filter(i=>i.deckId===this.id);await E.tblDetail.delete(t.map(i=>i.id))});this.id=t.id,this.name=t.name,this.description=t.description,this.lastUsedAt=t.lastUsedAt,this.cardNames=i.filter(a=>a.deckId===this.id).map(a=>a.name)}};s(E,"toJson",t=>{const i=t.map(a=>{const{id:r,name:n,description:l,lastUsedAt:o,cardNames:u}=a;return{id:r,name:n,description:l,lastUsedAt:o,cardNames:u}});return i.forEach(a=>{a.cardNames=a.cardNames.map(r=>Q[r]).sort(mt).map(r=>r.name)}),JSON.stringify(i,null,2)}),s(E,"convertToObjectURL",t=>{const i=E.toJson(t),a=new Blob([i],{type:"text/plain"});return window.URL.createObjectURL(a)}),s(E,"idb"),s(E,"tblHeader"),s(E,"tblDetail"),s(E,"getAllDeckInfo",async t=>{if(t&&(E.idb=t),!E.idb)throw new Error("illegal argument: idb is undefined.");E.tblHeader||(E.tblHeader=new Ir(E.idb)),E.tblDetail||(E.tblDetail=new en(E.idb));const i=await E.tblHeader.getAll(),a=await E.tblDetail.getAll();return i.length?i.map(r=>new E(r,a)):[await E.prepareSampleDeck()]}),s(E,"createNewDeck",async(t,i,a)=>{const r=await E.tblHeader.insert({name:t,description:i,lastUsedAt:new Date}),n=await E.tblDetail.insertMany(a.map((l,o)=>({deckId:r.id,seq:o,name:l,description:""})));return new E(r,n)}),s(E,"prepareSampleDeck",async()=>{const t=Ei.slice(-1)[0];return await E.createNewDeck(t.name,t.description,t.cardNames)});let dt=E;class Ir extends Qe{constructor(i){super(i,"TblDeckHeader");s(this,"_prepareInitialRecords",()=>[])}}class en extends Qe{constructor(i){super(i,"TblDeckDetail");s(this,"_prepareInitialRecords",()=>[])}}const _n=Ei.map(e=>({...e,lastUsedAt:new Date})).filter(e=>e.id<0);export{ot as A,En as B,Ri as C,dt as D,_n as E,bn as F,m as S,mn as a,un as b,cn as c,Tn as d,fa as e,wn as f,Q as g,pn as h,mt as i,ln as j,sn as k,nn as l,Sn as m,Se as n,Cn as o,Pi as p,yn as q,hn as r,gn as s,vn as t,fn as u,dn as v,on as w,rn as x,lt as y,Be as z};
