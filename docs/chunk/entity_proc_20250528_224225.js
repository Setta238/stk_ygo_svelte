var wa=Object.defineProperty;var vt=(t,e)=>(e=Symbol[t])?e:Symbol.for("Symbol."+t),St=t=>{throw TypeError(t)};var ba=(t,e,i)=>e in t?wa(t,e,{enumerable:!0,configurable:!0,writable:!0,value:i}):t[e]=i;var l=(t,e,i)=>ba(t,typeof e!="symbol"?e+"":e,i);var Ct=(t,e,i)=>{if(e!=null){typeof e!="object"&&typeof e!="function"&&St("Object expected");var a,r;i&&(a=e[vt("asyncDispose")]),a===void 0&&(a=e[vt("dispose")],i&&(r=a)),typeof a!="function"&&St("Object not disposable"),r&&(a=function(){try{r.call(this)}catch(n){return Promise.reject(n)}}),t.push([i,a,e])}else i&&t.push([i]);return e},Tt=(t,e,i)=>{var a=typeof SuppressedError=="function"?SuppressedError:function(s,o,c,u){return u=Error(c),u.name="SuppressedError",u.error=s,u.suppressed=o,u},r=s=>e=i?new a(s,e,"An error was suppressed during disposal"):(i=!0,s),n=s=>{for(;s=t.pop();)try{var o=s[1]&&s[1].call(s[2]);if(s[0])return Promise.resolve(o).then(n,c=>(r(c),n()))}catch(c){r(c)}if(i)throw e};return n()};import{j as ka}from"./json_20250528_224225.js";class Vs{constructor(e,i,a){l(this,"_dbname");l(this,"_dbversion");l(this,"dbPromise");l(this,"getTran",async(e,i)=>(await this.dbPromise).transaction(e,i));l(this,"reset",async()=>(await indexedDB.databases().then(e=>{console.log(e)}),await new Promise((e,i)=>{const a=indexedDB.deleteDatabase(this._dbname);a.onsuccess=()=>{console.log("onsuccess"),e()},a.onerror=r=>{console.log("onerror"),i(r)}})));l(this,"getAll",async e=>{const i=await this.dbPromise;return new Promise((a,r)=>{const o=i.transaction([e],"readonly").objectStore(e).getAll();o.onsuccess=()=>{a(o.result)},o.onerror=c=>{r(c)}})});l(this,"get",async(e,i)=>{const a=await this.dbPromise;return new Promise((r,n)=>{const c=a.transaction([e],"readonly").objectStore(e).get(i);c.onsuccess=()=>{r(c.result)},c.onerror=u=>{n(u)}})});l(this,"getMany",async(e,i)=>{const n=(await this.dbPromise).transaction([e],"readonly").objectStore(e),s=i.map(o=>new Promise((c,u)=>{const d=n.get(o);d.onsuccess=()=>{c(d.result)},d.onerror=p=>{u(p)}}));return await Promise.all(s)});l(this,"putRecords",async(e,i)=>{const r=(await this.dbPromise).transaction([e],"readwrite"),n=r.objectStore(e),s=i.map(o=>({record:o,request:n.put(o)}));return new Promise((o,c)=>{r.oncomplete=()=>o(s.map(u=>Object.assign({id:u.request.result},u.record))),r.onerror=u=>c(u)})});l(this,"deleteRecords",async(e,i)=>{const r=(await this.dbPromise).transaction([e],"readwrite"),n=r.objectStore(e),s=i.map(o=>({key:o,request:n.delete(o)}));return new Promise((o,c)=>{r.oncomplete=()=>{console.log(s.map(u=>u.request.result)),o()},r.onerror=u=>c(u)})});this._dbname=e,this._dbversion=i,this.dbPromise=new Promise((r,n)=>{const s=indexedDB.open(e,i);s.onsuccess=o=>{if(console.log(o),!o.target){console.log("event.target is undefined"),n("event.target is undefined");return}const c=o.target.result;if(!c){console.log("event.target.result is undefined"),n("event.target.result is undefined");return}c.onversionchange=u=>{console.log(u),c.close()},r(c)},s.onupgradeneeded=o=>{console.log("onupgradeneeded");const c=o.target.result;a.filter(u=>!c.objectStoreNames.contains(u)).map(u=>c.createObjectStore(u,{keyPath:"id",autoIncrement:!0}))},s.onerror=o=>{console.log(o),n(o)},s.onblocked=o=>{console.log(o),n(o)}}),console.log(this.dbPromise)}get dbversion(){return this._dbversion}}class F{constructor(){l(this,"handlers",[])}get length(){return this.handlers.length}append(e){this.handlers.push(e)}remove(e){this.handlers=this.handlers.filter(i=>i!==e)}trigger(e){this.handlers.slice(0).filter(i=>i(e)==="RemoveMe").forEach(i=>this.remove(i))}clear(){this.handlers.splice(0)}expose(){return this}}class _t{constructor(){l(this,"handler")}set(e){this.handler=e}async call(e){if(!this.handler)throw Error("illegal state error");return await this.handler(e)}expose(){return this}}class ft{constructor(e,i,a,r){l(this,"_name");l(this,"_createVersion");l(this,"mountResolver",()=>{});l(this,"_indexedDb");l(this,"onInsertEvent",new F);l(this,"onBeforeInsertEvent",new _t);l(this,"onUpdateEvent",new F);l(this,"onBeforeUpdateEvent",new _t);l(this,"onDeleteEvent",new F);l(this,"prepareInitialRecords",()=>{const e=new Date;return this._prepareInitialRecords().map(i=>Object.assign(i,{createdAt:e,updatedAt:e,dbVersion:this._createVersion}))});l(this,"resolveMount",()=>this.mountResolver());l(this,"patchForInsert",(e,i)=>{e.newRecords.forEach(a=>{i[a.id]=a})});l(this,"patchForUpdate",(e,i)=>{e.recordPairs.forEach(a=>{i[a.newRecord.id]={...a.newRecord}})});l(this,"patchForDelete",(e,i)=>{e.oldRecords.forEach(a=>{delete i[a.id]})});this._indexedDb=e,this._name=i,this._createVersion=e.dbversion,this.getAll().then(n=>n.reduce((s,o)=>(s[o.id]=o,s),{})).then(n=>{console.log(this.name,n),this.onBeforeInsertEvent.set(a??(()=>Promise.resolve())),this.onBeforeUpdateEvent.set(r??(()=>Promise.resolve()))})}get name(){return this._name}get createVersion(){return this._createVersion}get oninsert(){return this.onInsertEvent.expose()}get onbeforeinsert(){return this.onBeforeInsertEvent.expose()}get onupdate(){return this.onUpdateEvent.expose()}get onbeforeupdate(){return this.onBeforeUpdateEvent.expose()}get ondelete(){return this.onDeleteEvent.expose()}getAll(){return this._indexedDb.getAll(this.name)}get(e){return this._indexedDb.get(this.name,e)}async insertMany(e){const i=new Date,a=e.map(n=>{const s={createdAt:i,updatedAt:i,dbVersion:this._createVersion};return Object.assign(n,s)});await this.onBeforeInsertEvent.call({sender:this,newRecords:a,timestamp:i});const r=await this._indexedDb.putRecords(this.name,a);return this.onInsertEvent.trigger({sender:this,newRecords:r,timestamp:i}),r}async insert(e){return(await this.insertMany([e]))[0]}async updateMany(e,i){const a=new Date,r=[];return(await this._indexedDb.getMany(this.name,e)).forEach(s=>{const o={...s},c={...o};r.push({newRecord:Object.assign(i(c),{updatedAt:a,dbVersion:this._createVersion}),oldRecord:o})}),await this.onBeforeUpdateEvent.call({sender:this,recordPairs:r,timestamp:a}),await this._indexedDb.putRecords(this.name,r.map(s=>s.newRecord)),this.onUpdateEvent.trigger({sender:this,recordPairs:r,timestamp:a}),r.map(s=>s.newRecord)}async update(e,i){return(await this.updateMany([e],i))[0]}async delete(e){const i=new Date,a=await this._indexedDb.getMany(this.name,e);await this._indexedDb.deleteRecords(this.name,e),this.onDeleteEvent.trigger({sender:this,oldRecords:a,timestamp:i})}}const Ws=["Deck","ExtraDeck"],Qs={Deck:"メインデッキ",ExtraDeck:"エクストラデッキ"},Da=["Monster","Spell","Trap","XyzMaterial"],Xs={Monster:"モンスター",Spell:"魔法",Trap:"罠",XyzMaterial:"XYZ素材"},Ne=["Fusion","Synchro","Xyz","Link"],Ht=[...Ne,"SpecialSummon","Ritual"],Zt=[...Ht,"NormalSummonOnly","RegularSpecialSummonOnly","FreeReborn"],xa=["Toon","Spirit","Union","Gemini","FlipEffect"],Aa=["Tuner","Effect","Normal","Pendulum","Token"],Ks=[...xa,...Aa,...Zt],Js={Synchro:"シンクロ",Fusion:"融合",Xyz:"エクシーズ",Link:"リンク",Ritual:"儀式",SpecialSummon:"特殊召喚",Toon:"トゥーン",Spirit:"スピリット",Union:"ユニオン",Gemini:"デュアル",FlipEffect:"リバース",Tuner:"チューナー",Effect:"効果",Normal:"通常",Pendulum:"ペンデュラム",Token:"トークン",FreeReborn:"特殊召喚モンスター（蘇生制限なし）",NormalSummonOnly:"特殊召喚不可",RegularSpecialSummonOnly:"正規の方法以外での特殊召喚不可"},Ys={Synchro:"🎵",Fusion:"🌀",Xyz:"📰",Link:"⛓️",Ritual:"📜",SpecialSummon:"🔯",Toon:"📖",Spirit:"👻",Union:"🚗",Gemini:"👫",FlipEffect:"🔄",Tuner:"🎶",Effect:"✨",Normal:"🔘",Pendulum:"💠",Token:"🐏",FreeReborn:"🆓",NormalSummonOnly:"🔲",RegularSpecialSummonOnly:"❗"},Is=["Light","Dark","Earth","Water","Fire","Wind","Divine"],el={Light:"光",Dark:"闇",Earth:"地",Water:"水",Fire:"炎",Wind:"風",Divine:"神"},tl=["Aqua","Beast","BeastWarrior","CreatorGod","Cyberse","Dinosaur","DivineBeast","Dragon","Fairy","Fiend","Fish","Insect","Illusion","Machine","Plant","Psychic","Pyro","Reptile","Rock","SeaSerpent","Spellcaster","Thunder","Warrior","WingedBeast","Wyrm","Zombie"],il=["Normal","Continuous","Field","QuickPlay","Equip","Ritual","PendulumScale"],al={Normal:"通常",Continuous:"永続",Field:"フィールド",QuickPlay:"速攻",Equip:"装備",Ritual:"儀式",PendulumScale:"ペンデュラム"},rl=["Normal","Continuous","Counter"],nl={Normal:"通常",Continuous:"永続",Counter:"カウンター"},C=["Attack","Defense"],Fe={Attack:"攻撃表示",Defense:"守備表示",Set:"裏側守備表示"},Gt=["level","rank","attack","defense","pendulumScaleR","pendulumScaleL"],sl={Aqua:"水",Beast:"獣",BeastWarrior:"獣戦士",CreatorGod:"創造神",Cyberse:"サイバース",Dinosaur:"恐竜",DivineBeast:"幻獣神",Dragon:"ドラゴン",Fairy:"天使",Fiend:"悪魔",Fish:"魚",Insect:"昆虫",Illusion:"幻想魔",Machine:"機械",Plant:"植物",Psychic:"サイキック",Pyro:"炎",Reptile:"爬虫類",Rock:"岩石",SeaSerpent:"海竜",Spellcaster:"魔法使い",Thunder:"雷",Warrior:"戦士",WingedBeast:"鳥獣",Wyrm:"幻竜",Zombie:"アンデット"},ll={Aqua:"🚰",Beast:"🐅",BeastWarrior:"🦁",CreatorGod:"🔆",Cyberse:"💻️",Dinosaur:"🦖",DivineBeast:"💫",Dragon:"🐲",Fairy:"👼",Fiend:"👿",Fish:"🐟️",Insect:"🦋",Illusion:"🤡",Machine:"🤖",Plant:"🌱",Psychic:"👁️",Pyro:"🔥",Reptile:"🦎",Rock:"⛰",SeaSerpent:"🐍",Spellcaster:"🧙",Thunder:"⚡️",Warrior:"⚔️",WingedBeast:"🦅",Wyrm:"🐉",Zombie:"🦴"},Ma=["TopLeft","TopCenter","TopRight","MiddleLeft","MiddleRight","BottomLeft","BottomCenter","BottomRight"],$t={TopLeft:{name:"左上",linkArrow:{offsetRow:-1,offsetColumn:-1}},TopCenter:{name:"上",linkArrow:{offsetRow:-1,offsetColumn:0}},TopRight:{name:"右上",linkArrow:{offsetRow:-1,offsetColumn:1}},MiddleLeft:{name:"左",linkArrow:{offsetRow:0,offsetColumn:-1}},MiddleRight:{name:"右",linkArrow:{offsetRow:0,offsetColumn:1}},BottomLeft:{name:"左下",linkArrow:{offsetRow:1,offsetColumn:-1}},BottomCenter:{name:"下",linkArrow:{offsetRow:1,offsetColumn:0}},BottomRight:{name:"右下",linkArrow:{offsetRow:1,offsetColumn:1}}};Ma.reduce((t,e)=>(t[$t[e].name]=e,t),{});const ol=t=>t.cardId??!1?`https://www.db.yugioh-card.com/yugiohdb/card_search.action?ope=2&cid=${t.cardId}`:`https://www.db.yugioh-card.com/yugiohdb/card_search.action?ope=1&sess=1&rp=10&mode=&sort=1&keyword=${t.name}&stype=1&ctype=&othercon=2&starfr=&starto=&pscalefr=&pscaleto=&linkmarkerfr=&linkmarkerto=&link_m=2&atkfr=&atkto=&deffr=&defto=&releaseDStart=1&releaseMStart=1&releaseYStart=1999&releaseDEnd=&releaseMEnd=&releaseYEnd=`,jt=(t,e)=>{const i=t.monsterCategories??[],a=e.monsterCategories??[];for(const r of Ne.toReversed()){if(i.includes(r)&&!a.includes(r))return 1;if(!i.includes(r)&&a.includes(r))return-1}if(t.kind===e.kind){if(t.kind==="Monster"){if((t.link??0)!==(e.link??0))return(t.link??0)-(e.link??0);if((t.rank??0)!==(e.rank??0))return(t.rank??0)-(e.rank??0);if((t.level??0)!==(e.level??0))return(t.level??0)-(e.level??0);if((t.attack??0)!==(e.attack??0))return(t.attack??0)-(e.attack??0);if((t.defense??0)!==(e.defense??0))return(t.defense??0)-(e.defense??0)}return t.name.localeCompare(e.name,"Ja")}for(const r of Da){if(t.kind===r)return-1;if(e.kind===r)return 1}return t.name.localeCompare(e.name,"Ja")},Ut=["Deck","ExtraDeck"],zt=["Graveyard","Banished"],Vt=[...Ut,...zt],Pa=[...Vt,"Hand"],N=["MonsterZone","ExtraMonsterZone"],Oe=["SpellAndTrapZone","FieldSpellZone"],X=[...N,...Oe],Wt=["XyzMaterialZone","WaitingRoom"],K=[...Pa,...X,...Wt],at={0:{0:"Hand"},1:{0:"Deck",1:"SpellAndTrapZone",2:"SpellAndTrapZone",3:"SpellAndTrapZone",4:"SpellAndTrapZone",5:"SpellAndTrapZone",6:"ExtraDeck"},2:{0:"Graveyard",1:"MonsterZone",2:"MonsterZone",3:"MonsterZone",4:"MonsterZone",5:"MonsterZone",6:"FieldSpellZone"},3:{0:"Banished",1:"XyzMaterialZone",2:"ExtraMonsterZone",3:"WaitingRoom",4:"ExtraMonsterZone",5:"XyzMaterialZone",6:"Banished"},4:{0:"FieldSpellZone",1:"MonsterZone",2:"MonsterZone",3:"MonsterZone",4:"MonsterZone",5:"MonsterZone",6:"Graveyard"},5:{0:"ExtraDeck",1:"SpellAndTrapZone",2:"SpellAndTrapZone",3:"SpellAndTrapZone",4:"SpellAndTrapZone",5:"SpellAndTrapZone",6:"Deck"},6:{0:"Hand"}};class Fa{constructor(e,i,a,r){l(this,"onUpdateEvent",new F);l(this,"field");l(this,"row");l(this,"column");l(this,"cellType");l(this,"_owner");l(this,"_requiresRecalcLinkArrows");l(this,"_linkArrowSources");l(this,"_needsShuffle",!1);l(this,"recalcLinkArrows",()=>{this.isMonsterZoneLikeCell&&(this._requiresRecalcLinkArrows=!1,this._linkArrowSources=this.neighbors.filter(e=>e.isMonsterZoneLikeCell).filter(e=>e.cardEntities.length).filter(e=>e.cardEntities[0].linkArrows.some(i=>this.row===e.row+i.offsetRow&&this.column===e.column+i.offsetColumn)).map(e=>e.cardEntities[0]))});l(this,"_entities");l(this,"releaseEntities",e=>{var i;return this._entities=this._entities.filter(a=>a!==e),this.isMonsterZoneLikeCell&&((i=e.origin.monsterCategories)!=null&&i.includes("Link"))&&(this._requiresRecalcLinkArrows=!0),this.onUpdateEvent.trigger(),e});l(this,"acceptEntities",(e,i)=>{var a;if(i==="Fix"){if(!this._entities.includes(e))throw new v("引数とセルの状態が矛盾している。",this,e,i)}else i==="Top"?this._entities.unshift(e):this._entities.push(e),i==="Random"&&(this._needsShuffle=!0),this._entities.forEach(r=>{r.fieldCell=this}),this.isMonsterZoneLikeCell&&((a=e.origin.monsterCategories)!=null&&a.includes("Link"))&&(this._requiresRecalcLinkArrows=!0);this.onUpdateEvent.trigger()});l(this,"shuffle",()=>{this._entities=this.entities.shuffle(),this._needsShuffle=!1,this.field.duel.log.info("デッキをシャッフル。",this.owner)});l(this,"toString",()=>this.isMonsterZoneLikeCell||this.cellType==="SpellAndTrapZone"?`${this.cellType}(${this.row},${this.column})`:this.cellType);this.field=e,this.row=i,this.column=a,this.cellType=at[i][a],this._owner=r,this._entities=[],this._linkArrowSources=[],this._requiresRecalcLinkArrows=!1}get onUpdate(){return this.onUpdateEvent.expose()}get owner(){var e;return this._owner||((e=this.cardEntities[0])==null?void 0:e.owner)}get requiresRecalcLinkArrows(){return this._requiresRecalcLinkArrows}get linkArrowSources(){return this._linkArrowSources}get needsShuffle(){return this._needsShuffle}get entities(){return this._entities}get visibleEntities(){return this._entities.filter(e=>kt.find(i=>i===e.entityType))}get cardEntities(){return this._entities.filter(e=>kt.find(i=>i===e.entityType)).filter(e=>e.kind!=="XyzMaterial")}get xyzMaterials(){return this._entities.filter(e=>e.kind==="XyzMaterial")}get targetForAttack(){return this.cellType==="Hand"?this._entities.find(e=>e.entityType==="Duelist"):this.cardEntities[0]}get isAvailable(){return this.cardEntities.length===0&&this._entities.filter(e=>Tr.find(i=>i===e.entityType)).length===0}get isAvailableForPendulum(){return this.isAvailable&&this.isSpellTrapZoneLikeCell&&(this.column===1||this.column===5)}get isStackCell(){return Vt.some(e=>e===this.cellType)}get isPlayFieldCell(){return X.some(e=>e===this.cellType)}get isMonsterZoneLikeCell(){return N.some(e=>e===this.cellType)}get isSpellTrapZoneLikeCell(){return Oe.some(e=>e===this.cellType)}get isDisabledCell(){return Wt.some(e=>e===this.cellType)}get isTrashCell(){return zt.some(e=>e===this.cellType)}get neighbors(){const e=[this.row-1,this.row,this.row+1].filter(a=>a>=0&&a<=6),i=[this.column-1,this.column,this.column+1].filter(a=>a>=0&&a<=6);return e.flatMap(a=>i.map(r=>this.field.cells[a][r])).filter(a=>a.isMonsterZoneLikeCell).filter(a=>a!==this)}}const Qt=["NormalSummon","SpecialSummon","FlipSummon"],gt=["IgnitionEffect","TriggerEffect","QuickEffect","CardActivation"],Na=[...Qt,...gt,"DeclareAttack"],Oa=t=>t==="CardActivation"?"CardActivation":gt.some(e=>e===t)?"EffectActivation":"NonActivate",Ge=class Ge{constructor(e,i,a){l(this,"seq");l(this,"entity");l(this,"_definition");l(this,"validateDuelist",e=>this.entity.controller===e?this.executableDuelistTypes.includes("Controller"):this.executableDuelistTypes.includes("Opponent"));l(this,"canExecute",e=>this.executableCells.includes(this.entity.fieldCell.cellType)&&this.executableFaces.includes(this.entity.face)&&this.executablePeriods.includes(this.entity.duel.clock.period.key)&&this.validateDuelist(e??this.entity.controller));this.seq=e==="AutoSeq"?Ge.nextSeq++:e,this.entity=i,this._definition=a}get definition(){return this._definition}get title(){return this.definition.title}get playType(){return this.definition.playType}get isMandatory(){return this.definition.isMandatory}get executableCells(){return this.definition.executableCells}get executablePeriods(){return this.definition.executablePeriods}get executableFaces(){return this.definition.executableFaces??vr}get executableDuelistTypes(){return this.definition.executableDuelistTypes??["Controller"]}get isOnlyNTimesPerDuel(){return this.definition.isOnlyNTimesPerDuel??0}get isOnlyNTimesPerTurn(){return this.definition.isOnlyNTimesPerTurn??0}get isOnlyNTimesPerTurnIfFaceup(){return this.definition.isOnlyNTimesPerTurnIfFaceup??0}get isOnlyNTimesIfFaceup(){return this.definition.isOnlyNTimesIfFaceup??0}get isOnlyNTimesPerChain(){return this.definition.isOnlyNTimesPerChain??0}get actionGroupName(){return this.definition.actionGroupName}get duel(){return this.entity.duel}};l(Ge,"nextSeq",0);let Te=Ge;class we{constructor(){l(this,"pooledOperators",[]);l(this,"bundles",[]);l(this,"excludesExpired",()=>{this.bundles.forEach(e=>e.excludesExpired()),this.pooledOperators=this.pooledOperators.filter(e=>e.validateAlive())});l(this,"append",e=>{this.bundles.push(e)});l(this,"push",e=>{if(!e.isContinuous)throw new v("staticへの追加は永続以外不可",e);this.excludesExpired(),this.distribute(e),this.pooledOperators.push(e)});l(this,"distributeAll",e=>(this.excludesExpired(),this.pooledOperators.flatMap(this.distribute).getDistinct().forEach(i=>i.operators.sort((a,r)=>a.seq-r.seq)),this.afterDistributeAll(e)));l(this,"distribute",e=>this.bundles.filter(i=>i.entity.exist).filter(i=>i.operators.every(a=>a.seq!==e.seq)).filter(i=>e.isApplicableTo(i.entity)).filter(i=>i.entity.canBeEffected(e.effectOwner,e.isSpawnedBy,e.actionAttr)).map(i=>(i.push(e),i)));l(this,"removeItem",e=>{this.pooledOperators=this.pooledOperators.filter(i=>i.seq!==e)})}}class be{constructor(e,i){l(this,"pool");l(this,"entity");l(this,"_operators");l(this,"excludesExpired",()=>{this._operators=this._operators.filter(e=>{const i=e.validateAlive()&&e.isApplicableTo(this.entity);return i||(console.info(`before remove ${this.entity.toString} ${e.title}`),e.beforeRemove(this)),i})});l(this,"push",e=>this.entity.procFilterBundle.filter(["Effect"],e.effectOwner,e.isSpawnedBy,e.actionAttr,[])?(this.beforePush(e),this._operators.push(e),!0):!1);l(this,"removeItem",e=>{this._operators=this._operators.filter(i=>i.seq!==e?!0:(i.beforeRemove(this),!1))});this.pool=e,this.entity=i,this._operators=[],this.pool.append(this)}get operators(){return this._operators}get effectiveOperators(){return this.operators.filter(e=>e.isSpawnedBy.isEffective||!e.isContinuous)}}const $e=class $e{constructor(e){l(this,"seq");l(this,"title");l(this,"validateAlive");l(this,"isContinuous");l(this,"isSpawnedBy");l(this,"isSpawnedAt");l(this,"activateType");l(this,"actionAttr");l(this,"isApplicableTo");l(this,"effectOwner");this.seq=$e.nextSeq++,this.title=e.title,this.validateAlive=()=>e.validateAlive(this),this.isContinuous=e.isContinuous,this.isSpawnedBy=e.isSpawnedBy,this.isSpawnedAt=e.isSpawnedBy.duel.clock.getClone(),this.isApplicableTo=i=>e.isApplicableTo(this,i),this.actionAttr=e.actionAttr,this.activateType=this.actionAttr.playType?Oa(this.actionAttr.playType):"NonActivate",this.effectOwner=this.isSpawnedBy.controller}get duel(){return this.effectOwner.duel}get isEffective(){return!this.isContinuous||this.activateType==="NonActivate"?!0:this.isSpawnedBy.isEffective}};l($e,"nextSeq",0);let oe=$e;class Ba extends we{constructor(){super(...arguments);l(this,"afterDistributeAll",()=>this.bundles.every(i=>i.applyEffectFilter()))}}class La extends be{constructor(){super(...arguments);l(this,"applyEffectFilter",()=>{const i=this.entity.allStickyEffectOperators.length,a=[];for(;;){const r=this.effectiveOperators.filter(n=>n.procTypes.includes("Effect")).filter(n=>n.isContinuous).find(n=>!a.includes(n.seq));if(!r)break;a.push(r.seq),r.eraseOperators(this.entity)}return this.entity.allStickyEffectOperators.length===i});l(this,"filter",(i,a,r,n,s)=>this.effectiveOperators.filter(o=>o.procTypes.union(i).length).every(o=>o.filter(this.entity,a,r,n,s)));l(this,"beforePush",i=>i.eraseOperators(this.entity))}}const fe=class fe extends oe{constructor(i){super(i);l(this,"beforeRemove",()=>{});l(this,"procTypes");l(this,"filter");l(this,"eraseOperators",i=>{if(!this.procTypes.includes("Effect"))return 0;const a=i.allStickyEffectOperators.filter(r=>r.isContinuous).filter(r=>!this.filter(i,r.effectOwner,r.isSpawnedBy,r.actionAttr,[])).map(r=>r.seq);return a.forEach(i.procFilterBundle.removeItem),a.forEach(i.statusOperatorBundle.removeItem),a.forEach(i.numericOprsBundle.removeItem),a.length});this.procTypes=i.procTypes,this.filter=i.filter}};l(fe,"createContinuous",(i,a,r,n,s,o)=>new fe({title:i,validateAlive:a,isContinuous:!0,isSpawnedBy:r,actionAttr:{},isApplicableTo:n,procTypes:s,filter:o})),l(fe,"createLingering",(i,a,r,n,s,o,c)=>new fe({title:i,validateAlive:a,isContinuous:!1,isSpawnedBy:r,actionAttr:n,isApplicableTo:s,procTypes:o,filter:c}));let ye=fe;const Et={level:1,rank:1,attack:0,defense:0,pendulumScaleR:0,pendulumScaleL:0};class qa extends we{constructor(){super(...arguments);l(this,"afterDistributeAll",i=>{if(this.bundles.forEach(r=>r.calcStateAll()),i.field.getMonstersOnFieldStrictly().flatMap(r=>r.numericOprsBundle).flatMap(r=>r.effectiveOperators).some(r=>r.targetStateGen==="calculated")){const n=i.field.getMonstersOnFieldStrictly().filter(s=>(s.atk??0)>=0).map(s=>s.atk??0).reduce((s,o)=>s>o?s:o,0);i.field.getMonstersOnFieldStrictly().forEach(s=>{s.numericOprsBundle.effectiveOperators.filter(o=>o.targetStateGen==="calculated").forEach(o=>{var c;if(!((c=s.status.monsterCategories)!=null&&c.includes("Link")&&o.targetState==="defense")){if(o.stateOperationType==="THE_DEVILS_AVATAR"){s.numericStatus.calculated[o.targetState]=n+100;return}s.numericStatus.calculated[o.targetState]=o.calcValue(s,s.numericStatus.calculated[o.targetState]??0)}})})}return!0})}}class Ra extends be{constructor(){super(...arguments);l(this,"beforePush",i=>{const a=this.effectiveOperators.filter(n=>n.targetState===i.targetState).filter(n=>n.isEffective);if(i.kind==="O-L-F"||i.kind==="O-C-F"?(a.filter(n=>n.kind==="O-L-F").forEach(n=>n.negate()),a.filter(n=>n.kind==="L-F").forEach(n=>n.negate())):i.kind==="L-F"||i.kind==="C-F"?a.filter(n=>n.kind==="L-F"||n.kind==="L-A").forEach(n=>n.negate()):i.kind==="X-C-X"&&a.filter(n=>!n.isContinuous).forEach(n=>n.negate()),a.filter(n=>n.isEffective).some(n=>n.kind==="X-C-X")&&!i.isContinuous)return;if(i.stateOperationType!=="Addition"&&i.targetStateGen==="wip"&&a.filter(n=>!n.isContinuous).forEach(n=>n.negate()),i.stateOperationType==="THE_DEVILS_AVATAR"||i.stateOperationType==="Gradius'_Option"){this.entity.numericStatus.calculated[i.targetState]=-Number.MAX_VALUE;return}const r=this.entity.numericStatus.calculated[i.targetState]??0;if(i.stateOperationType==="THE_DEVILS_DREAD-ROOT"){this.entity.numericStatus.calculated[i.targetState]=i.calcValue(this.entity,r);return}if(i.kind==="L-F"){this.entity.numericStatus.wip[i.targetState]=i.calcValue(this.entity,r);return}});l(this,"calcStateAll",()=>Gt.forEach(this.calcState));l(this,"calcState",i=>{if(!this.entity.isPendulumScale&&!this.entity.isMonster){this.entity.numericStatus.calculated[i]=void 0;return}if(!this.entity.status.monsterCategories){this.entity.numericStatus.calculated[i]=void 0;return}if(this.entity.status.monsterCategories.includes("Link")&&i!=="attack"){this.entity.numericStatus.calculated[i]=void 0;return}if(this.entity.status.monsterCategories.includes("Xyz")&&i==="level"){this.entity.numericStatus.calculated[i]=void 0;return}if(!this.entity.status.monsterCategories.includes("Xyz")&&i==="rank"){this.entity.numericStatus.calculated[i]=void 0;return}if(!this.entity.status.monsterCategories.includes("Pendulum")&&(i==="pendulumScaleL"||i==="pendulumScaleR")){this.entity.numericStatus.calculated[i]=void 0;return}if(i!=="level"&&!this.entity.isOnFieldStrictly){this.entity.numericStatus.origin[i]=this.entity.origin[i],this.entity.numericStatus.wip[i]=this.entity.origin[i],this.entity.numericStatus.calculated[i]=this.entity.origin[i];return}const a=this.entity.origin[i]??0,r=this.entity.numericStatus.wip[i]??0,n=this._operators.filter(d=>d.targetState===i).filter(d=>d.isEffective);if(n.some(d=>d.stateOperationType==="THE_DEVILS_AVATAR"||d.stateOperationType==="Gradius'_Option")&&this.entity.isEffective){this.entity.numericStatus.calculated[i]=-Number.MAX_VALUE;return}const s=n.filter(d=>d.targetState===i).findLast(d=>d.targetStateGen==="origin"),o=s?s.calcValue(this.entity,a??0):a;this.entity.numericStatus.origin[i]=o;let c=o;const u=n.filter(d=>d.targetState===i).filter(d=>d.targetStateGen==="wip").findLast(d=>d.stateOperationType==="Fixation");if(!u)c=n.filter(d=>d.stateOperationType==="Addition").reduce((d,p)=>p.calcValue(this.entity,d),c),this.entity.numericStatus.wip[i]=c;else if(u.isContinuous)c=u.calcValue(this.entity,c),c=n.filter(d=>d.stateOperationType==="Addition").reduce((d,p)=>p.calcValue(this.entity,d),c),this.entity.numericStatus.wip[i]=c;else{let d=!1;c=n.filter(p=>(d=d||p===u,d&&p!==u)).filter(p=>p.stateOperationType==="Addition").reduce((p,f)=>f.calcValue(this.entity,p),r)}c<Et[i]&&(c=Et[i]),this.entity.numericStatus.calculated[i]=c})}}const V=class V extends oe{constructor(i){super(i);l(this,"beforeRemove",()=>{});l(this,"targetState");l(this,"targetStateGen");l(this,"stateOperationType");l(this,"calcValue");l(this,"_isEffective");l(this,"negate",()=>{this._isEffective=!1});this._isEffective=!0,this.targetState=i.targetState,this.targetStateGen=i.targetStateGen,this.stateOperationType=i.stateOperationType,this.calcValue=(a,r)=>i.calcValue(this.isSpawnedBy,a,r)}get isEffective(){return this._isEffective&&super.isEffective}get kind(){if(this.targetStateGen==="origin"){if(this.stateOperationType==="Fixation")return this.isContinuous?"O-C-F":"O-L-F";throw new v("矛盾したプロパティ",this)}if(this.targetStateGen==="wip"){if(this.stateOperationType==="Addition")return this.isContinuous?"C-A":"L-A";if(this.stateOperationType==="Fixation")return this.isContinuous?"C-F":"L-F";throw new v("矛盾したプロパティ",this)}if(this.stateOperationType==="THE_DEVILS_DREAD-ROOT")return"X-C-F";if(this.stateOperationType==="THE_DEVILS_AVATAR"||this.stateOperationType==="Gradius'_Option")return"X-C-X";throw new v("矛盾したプロパティ",this)}};l(V,"createContinuous",(i,a,r,n,s,o,c,u)=>new V({title:i,validateAlive:a,isContinuous:!0,isSpawnedBy:r,actionAttr:{},isApplicableTo:n,targetState:s,targetStateGen:o,stateOperationType:c,calcValue:u})),l(V,"createLingering",(i,a,r,n,s,o,c)=>new V({title:i,validateAlive:a,isContinuous:!1,isSpawnedBy:r,actionAttr:n,isApplicableTo:(u,d)=>d.isOnFieldAsMonsterStrictly,targetState:s,targetStateGen:"wip",stateOperationType:o,calcValue:c})),l(V,"createLingeringFixation",(i,a,r,n,s,o)=>V.createLingering(i,a,r,n,s,"Fixation",o)),l(V,"createLingeringAddition",(i,a,r,n,s,o)=>V.createLingering(i,a,r,n,s,"Addition",o));let L=V;const Ha=t=>Object.keys(t),Za={draw:"ドローフェイズ",standby:"スタンバイフェイズ",main1:"メインフェイズ１",battle1:"バトルフェイズ",battle2:"バトルフェイズ（追加）",main2:"メインフェイズ２",end:"エンドフェイズ"},Ga={start:"スタートステップ",battle:"バトルステップ",damage:"ダメージステップ",end:"エンドステップ"},$a={start:"ダメージステップ開始時",beforeDmgCalc:"ダメージ計算前",dmgCalc:"ダメージ計算時",afterDmgCalc:"ダメージ計算後",end:"ダメージステップ終了時"},_=["draw","stanby","main1","b1Start","b1Battle","b1End","b2Start","b2Battle","b2End","main2","end"],A=["b1DStart","b1DBeforeDmgCalc","b1DAfterDmgCalc","b1DEnd","b2DStart","b2DBeforeDmgCalc","b2DAfterDmgCalc","b2DEnd"],ja=["b1DDmgCalc","b2DDmgCalc"],q=[..._,...A,...ja],wt={draw:{phase:"draw",step:void 0,stage:void 0},stanby:{phase:"standby",step:void 0,stage:void 0},main1:{phase:"main1",step:void 0,stage:void 0},b1Start:{phase:"battle1",step:"start",stage:void 0},b1Battle:{phase:"battle1",step:"battle",stage:void 0},b1DStart:{phase:"battle1",step:"battle",stage:"start"},b1DBeforeDmgCalc:{phase:"battle1",step:"battle",stage:"beforeDmgCalc"},b1DDmgCalc:{phase:"battle1",step:"battle",stage:"dmgCalc"},b1DAfterDmgCalc:{phase:"battle1",step:"battle",stage:"afterDmgCalc"},b1DEnd:{phase:"battle1",step:"battle",stage:"end"},b1End:{phase:"battle1",step:"end",stage:void 0},b2Start:{phase:"battle2",step:"start",stage:void 0},b2Battle:{phase:"battle2",step:"battle",stage:void 0},b2DStart:{phase:"battle2",step:"battle",stage:"start"},b2DBeforeDmgCalc:{phase:"battle2",step:"battle",stage:"beforeDmgCalc"},b2DDmgCalc:{phase:"battle2",step:"battle",stage:"dmgCalc"},b2DAfterDmgCalc:{phase:"battle2",step:"battle",stage:"afterDmgCalc"},b2DEnd:{phase:"battle2",step:"battle",stage:"end"},b2End:{phase:"battle2",step:"end",stage:void 0},main2:{phase:"main2",step:void 0,stage:void 0},end:{phase:"end",step:void 0,stage:void 0}},Ua=t=>t.stage?$a[t.stage]:t.step?Ga[t.step]:Za[t.phase],re=Ha(wt).reduce((t,e)=>(t[e].key=e,t[e].name=Ua(t[e]),t),wt),je=class je{constructor(e,i){l(this,"entity");l(this,"isRegular");l(this,"_isStarted");l(this,"info");l(this,"continuousEffectBase");l(this,"updateState",async()=>{if(this.hasToStart!==this.isStarted){if(this.isStarted){if(!this.info)throw new v("illegal state");this._isStarted=!1,await this.continuousEffectBase.finish(this.entity,this.info),this.info=void 0;return}this.info=await this.continuousEffectBase.start(this.entity),this._isStarted=!0}});this._isStarted=!1,this.entity=e,this.continuousEffectBase=i,this.isRegular=this.appliableCellTypes.every(a=>X.find(r=>r===a))&&this.faceList.length===1&&this.faceList[0]==="FaceUp"}get isStarted(){return this._isStarted}get appliableCellTypes(){return this.continuousEffectBase.appliableCellTypes}get appliableDuelPeriodKeys(){return this.continuousEffectBase.appliableDuelPeriodKeys}get faceList(){return this.continuousEffectBase.faceList}get hasToStart(){return!this.appliableCellTypes.includes(this.entity.fieldCell.cellType)||!this.appliableDuelPeriodKeys.includes(this.entity.duel.clock.period.key)||!this.faceList.includes(this.entity.face)?!1:this.continuousEffectBase.canStart(this.entity)}};l(je,"createNew",(e,i)=>new je(e,i));let rt=je;const za=(t,e,i,a)=>({title:t,appliableCellTypes:e==="Monster"?["MonsterZone","ExtraMonsterZone"]:["FieldSpellZone","SpellAndTrapZone"],appliableDuelPeriodKeys:q,faceList:["FaceUp"],canStart:r=>!r.info.isPending&&!r.info.isDying,start:async r=>{const n=i(r);return n.forEach(a(r).push),n.map(s=>s.seq)},finish:async(r,n)=>{n.forEach(s=>a(r).removeItem(s))}}),Ve=(t,e,i,a,r)=>({title:t,appliableCellTypes:e==="Monster"?["MonsterZone","ExtraMonsterZone"]:["FieldSpellZone","SpellAndTrapZone"],appliableDuelPeriodKeys:q,faceList:["FaceUp"],canStart:n=>!n.info.isPending&&!n.info.isDying,start:async n=>{const s=a(n),o=i(n);return console.info(`start : ${n.toString()} ⇒ ${o.map(c=>c.toString()).join(" ")} (${s.map(c=>c.title).join(" ")})`),o.map(r).forEach(c=>s.forEach(c.push)),{targets:o,seqList:s.map(c=>c.seq)}},finish:async(n,s)=>{s.targets.map(r).forEach(o=>s.seqList.forEach(c=>o.removeItem(c)))}}),Xt=(t,e,i,a)=>Ve(t,e,i,a,r=>r.procFilterBundle),Be=(t,e,i)=>za(t,e,i,a=>a.field.numericStateOperatorPool),ke=(t,e,i,a)=>Ve(t,e,i,a,r=>r.numericOprsBundle),_e=(t,e,i,a)=>Ve(t,e,i,a,r=>r.statusOperatorBundle),Va=(t,e,i,a)=>Ve(t,e,i,a,r=>r.damageFilterBundle),Wa=t=>!isNaN(Number(t)),Le=(...t)=>t.length?t.reduce((e,i)=>e>i?e:i):-Number.MAX_VALUE,qe=(...t)=>t.length?t.reduce((e,i)=>e<i?e:i):Number.MAX_VALUE,de=(t,e)=>{if((t[0]??Number.MAX_VALUE)>e)return 0;if(t.slice(-1)[0]<e)return t.length;let i=0,a=t.length-1;for(;;){const r=Math.round((i+a)/2);if(r===a||r===i)return t[i]<e?a:i;if(t[r]<e){i=r;continue}a=r}},z=[3,5,5,6,6,6,7,8,9,10,11,11,11,12,12,13,13,14,15,15,15,15,15,15,16,16,16,17,18,18,18,21,21,21,22,23,25,25,26,28,28,28,30,30,31,32,32,33,33,34,35,35,36,36,36,37,37,38,38,38,39,41,42,42,43,45,45,45,45,48,48,48,50,51,52,54,54,54,54,56,57,58,59,59,59,59,60,61,63,65,65,65,65,66,67,67,67,69,69,71,71,72,73,73,73,73,73,74,75,75,76,76,77,78,79,80,80,80,80,84,84,84,84,84,84,85,85,85,87,90,91,94,96,96,97,98,101,101,101,101,101];z.forEach((t,e)=>{((z[de(z,e)-1]||-Number.MAX_VALUE)>=e||(z[de(z,e)]||Number.MAX_VALUE)<e)&&console.log(e,de(z,e),(z[de(z,e)-1]||-Number.MAX_VALUE)<e,(z[de(z,e)]||Number.MAX_VALUE)>=e)});class Qa{constructor(e){l(this,"_field");l(this,"_records",[]);l(this,"getIndexOfStartPoint",e=>de(this._records.map(i=>i.movedAt.totalProcSeq),e));l(this,"push",e=>{this._records.push(e)});l(this,"getCurrentTurnLog",()=>this.getTermLog("Current","turn"));l(this,"getPriviousChainLog",()=>this.getTermLog("Previous","chainSeq"));this._field=e}*getTermLog(e,i){const a=e==="Current"?this._field.duel.clock.currentStartPoints[i]:this._field.duel.clock.previousStartPoints[i];for(let r=this.getIndexOfStartPoint(a);r<this._records.length;r++)yield this._records[r]}}class Xa{constructor(e){l(this,"entity");l(this,"_records");l(this,"_push",e=>{this.entity.field.moveLog.push(e),this._records.push(e)});l(this,"pushForRuleAction",e=>{this._push({entity:this.entity,kind:this.entity.origin.kind,cell:this.entity.fieldCell,face:this.entity.face,orientation:this.entity.orientation,isPending:this.entity.info.isPending,movedAt:this.entity.duel.clock.getClone(),movedAs:[...e,"Rule"]})});l(this,"push",(e,i,a,r,n)=>{let s=this.entity.fieldCell;this.entity.kind==="XyzMaterial"&&(s=this.entity.controller.getXyzMaterialZone()),this._push({entity:this.entity,kind:e,cell:s,face:this.entity.face,orientation:this.entity.orientation,isPending:this.entity.info.isPending,movedAt:this.entity.duel.clock.getClone(),movedAs:i.getDistinct(),movedBy:a,actionOwner:r,chooser:n??r})});l(this,"finalize",()=>{if(!this.latestRecord.isPending)throw new v("想定されない状況");if(this.entity.info.isPending)throw new v("想定されない状況");this._push({...this.latestRecord,isPending:!1,movedAt:this.entity.duel.clock.getClone()})});l(this,"negateSummon",(e,i)=>{const a=this.records.slice(-1)[0];a.cell=this.entity.field.getWaitingRoomCell(),a.movedBy=e,a.movedAs=["SummonNegated"],a.actionOwner=i});this.entity=e,this._records=[]}get records(){return this._records}get latestRecord(){return this.records.slice(-1)[0]}get previousPlaceRecord(){return this.records.findLast(e=>e.cell.cellType!==this.entity.fieldCell.cellType)??this._records[0]}get currentProcRecords(){return this.records.filter(e=>e.movedAt.totalProcSeq===this.entity.duel.clock.totalProcSeq)}get latestArrivalRecord(){if(this.entity.isOnFieldAsMonsterStrictly)return this.records.findLast(e=>e.movedAs.union(["NormalSummon","SpecialSummon","FlipSummon","Flip","ComeBackAlive"]))}}const Ka={name:"SpellCounter",type:"Actual",text:"魔力カウンター",emoji:"🔮",sticky:!1,temporary:!1,isOnlyOnField:!0},Ja={name:"KaijuCounter",type:"Actual",text:"壊獣カウンター",emoji:"☢",sticky:!1,temporary:!1,isOnlyOnField:!0},Ya={name:"NamelessCounter",type:"Actual",text:"カウンター",emoji:"💠",sticky:!1,temporary:!1,isOnlyOnField:!0},Ia={name:"IceCounter",type:"Actual",text:"アイスカウンター",emoji:"❄",sticky:!1,temporary:!1,isOnlyOnField:!0},er={name:"Curfew",type:"System",text:"自発帰還",emoji:"",sticky:!1,temporary:!1,isOnlyOnField:!0},tr={name:"SelfDestruction",type:"System",text:"自壊",emoji:"",sticky:!1,temporary:!1,isOnlyOnField:!0},ir={name:"CycleFlip",type:"System",text:"サイクルリバース",emoji:"",sticky:!0,temporary:!0,isOnlyOnField:!0},ar={name:"SonicBarrier",type:"System",text:"波動音壁",emoji:"",sticky:!0,temporary:!0,isOnlyOnField:!0},rr={name:"SonicVerse",type:"System",text:"波動聖句（適用済）",emoji:"",sticky:!0,temporary:!0,isOnlyOnField:!0},nr={name:"IntoTheVoid",type:"System",text:"無の煉獄",emoji:"",sticky:!0,temporary:!0,isOnlyOnField:!1},sr={name:"GoldSarcophagus",type:"System",text:"封印の黄金櫃",emoji:"",sticky:!0,temporary:!1,isOnlyOnField:!1},lr={SpellCounter:Ka,KaijuCounter:Ja,NamelessCounter:Ya,IceCounter:Ia,Curfew:er,SelfDestruction:tr,CycleFlip:ir,SonicBarrier:ar,SonicVerse:rr,IntoTheVoid:nr,GoldSarcophagus:sr},pe=lr,bt=Object.values(pe).filter(t=>t.type==="Actual").filter(t=>t.sticky||t.temporary||!t.isOnlyOnField);if(bt.length)throw new Error(`カウンターの設定誤り。${bt.map(t=>t.name).join(", ")}`);const cl=t=>pe[t].emoji;class or{constructor(e){l(this,"dic");l(this,"temporaryCounterNames");l(this,"entity");l(this,"add",(e,i=1,a)=>{this.dic[e]=[...this.dic[e]??[],...Array(i).fill(a)];const r=this.entity.status.maxCounterQty[e]??0;return r&&(this.dic[e]=this.dic[e].slice(0,r)),this.dic[e]});l(this,"setQty",(e,i=1,a)=>(this.dic[e]=[...Array(i).fill(a)],this.dic[e]));l(this,"remove",(e,i=1,a)=>{const r=this.dic[e].length;if(r===void 0)return[];if(i>=r)return delete this.dic[e],[];if(a){const n=this.dic[e].filter(o=>o===a),s=this.dic[e].filter(o=>o!==a);this.dic[e]=[...n.slice(i),...s]}else this.dic[e]=this.dic[e].slice(i);return this.dic[e]});l(this,"removeAll",(e,i)=>{if(i){const r=this.dic[e].filter(n=>n===i).length;return this.dic[e]=this.dic[e].filter(n=>n!==i),r}const a=this.dic[e];return delete this.dic[e],a});l(this,"getQty",(e,i)=>this.dic[e]?i?this.dic[e].filter(a=>a===i).length:this.dic[e].length??0:0);l(this,"setSelfDestructionFlg",e=>{this.add("SelfDestruction",1,e)});l(this,"getSelfDestructionFlg",e=>this.getQty("SelfDestruction",e)>0);l(this,"setCurfewFlg",e=>{this.add("Curfew",1,e)});l(this,"getCurfewFlg",e=>this.getQty("Curfew",e)>0);l(this,"incrementActionCountPerTurn",e=>{this.temporaryCounterNames.push(e.title),this.incrementActionCount(e)});l(this,"incrementActionCount",e=>{this.dic[e.title]=[e.entity,...this.dic[e.title]??[]]});l(this,"getActionCount",e=>this.dic[e.title]?this.dic[e.title].filter(i=>i===e.entity).length:0);l(this,"corpseDisposal",()=>{this.temporaryCounterNames.forEach(e=>delete this.dic[e]),this.temporaryCounterNames.reset(),Object.values(pe).filter(e=>e.temporary).forEach(e=>delete this.dic[e.name])});l(this,"removeAllActualCounters",()=>{Object.values(pe).filter(e=>e.type==="Actual").forEach(e=>delete this.dic[e.name])});l(this,"removeAllWhenfaceDown",()=>{this.temporaryCounterNames.forEach(e=>delete this.dic[e]),this.temporaryCounterNames.reset(),Object.values(pe).filter(e=>!e.sticky).forEach(e=>delete this.dic[e.name])});l(this,"clear",()=>{this.temporaryCounterNames.forEach(e=>delete this.dic[e]),this.temporaryCounterNames.reset(),Object.values(pe).filter(e=>e.isOnlyOnField).forEach(e=>delete this.dic[e.name])});this.dic={},this.temporaryCounterNames=[],this.entity=e}}class cr extends we{constructor(){super(...arguments);l(this,"afterDistributeAll",i=>i.field.getAllEntities().map(a=>a.statusOperatorBundle).every(a=>a.calcStatus()))}}class ur extends be{constructor(){super(...arguments);l(this,"calcStatus",()=>{const i=this.entity.isEffective;return this.entity.resetStatus(),this.entity.status=this._operators.filter(a=>a.isSpawnedBy.isEffective||!a.isContinuous).reduce((a,r)=>({...a,...r.statusCalculator(this.entity,r,a)}),this.entity.status),this.entity.isEffective===i});l(this,"beforePush",()=>{})}}class R extends oe{constructor(i){super(i);l(this,"beforeRemove",()=>{});l(this,"statusCalculator");this.statusCalculator=i.statusCalculator}}const Ce=class Ce extends Te{constructor(){super(...arguments);l(this,"isApplicableTo",(...i)=>{const a=this.entity.counterHolder.getActionCount(this);return this.isOnlyNTimesPerTurnIfFaceup>0&&a>=this.isOnlyNTimesPerTurnIfFaceup?this.entity.counterHolder.incrementActionCountPerTurn(this):this.isOnlyNTimesIfFaceup>0&&a>=this.isOnlyNTimesIfFaceup&&this.entity.counterHolder.incrementActionCount(this),this.definition.isApplicableTo(this,...i)});l(this,"substitute",async(i,a,r)=>{const n=await this.definition.substitute(this,i,a,r);return this.isOnlyNTimesPerTurnIfFaceup>0?this.entity.counterHolder.incrementActionCountPerTurn(this):this.isOnlyNTimesIfFaceup>0&&this.entity.counterHolder.incrementActionCount(this),n});l(this,"getClone",()=>new Ce(this.seq,this.entity,this.definition))}get definition(){return super.definition}};l(Ce,"createNew",(i,a)=>new Ce("AutoSeq",i,a));let nt=Ce;class dr extends we{constructor(){super(...arguments);l(this,"afterDistributeAll",()=>!0)}}class pr extends be{constructor(){super(...arguments);l(this,"beforePush",()=>{});l(this,"filter",(i,a,r,n,s,o,c)=>this.effectiveOperators.filter(u=>u.summonKinds.includes(a)).reduce((u,d)=>({...u,...d.filter(this.entity,i,s.summoner,[a,...r],n,s.monster,o,u.posList,u.cells,c)}),s))}}class fr extends oe{constructor(i){super(i);l(this,"beforeRemove",()=>{});l(this,"summonKinds");l(this,"filter");this.summonKinds=i.summonKinds,this.filter=(...a)=>i.filter(this,...a)}}const b=class b{constructor(){}};l(b,"_tryMarkForDestroy",(e,i)=>{if(e.info.isDying||e.kind==="XyzMaterial"||!e.isOnFieldStrictly&&e.fieldCell.cellType!=="Deck"&&e.fieldCell.cellType!=="Hand")return!1;const a=i.action.playType==="Battle"?"Battle":"Effect",r=a==="Battle"&&i.action.entity===e?i.selectedEntities[0]:i.action.entity;return e.info.isDying=e.validateDestroy(a,i.activator,r,i.action),e.info.isDying&&(e.info.causeOfDeath=[a,"Destroy"],e.info.isKilledBy=r,e.info.isKilledByWhom=i.activator,a==="Battle"&&(e.info.isKilledByWhom=r.controller)),e.info.isDying}),l(b,"excavateFromDeck",async(e,i,a,r)=>{const n=await b.excavateManyFromDeck(e,1,i,a,r);return n.length?n[0]:void 0}),l(b,"excavateManyFromDeck",async(e,i,a,r,n)=>{const s=e.getDeckCell().cardEntities.slice(0,i);return await D.moveMany(s.map(o=>({entity:o,to:o.fieldCell,kind:o.kind,face:"FaceUp",orientation:o.orientation,pos:"Fix",movedAs:["Excavate",...a],movedBy:r,actionOwner:n,chooser:void 0}))),s}),l(b,"releaseManyForTheSameReason",(e,i,a,r)=>e.length?(i.includes("Cost")&&r.writeInfoLog(`${e.map(n=>n.toString()).join(" ")}をリリースし――、`),b.bringManyToSameCellForTheSameReason("Graveyard","Top",e,"FaceUp","Vertical",["Release",...i],a,r)):Promise.resolve([])),l(b,"sendManyToGraveyardForTheSameReason",(e,i,a,r)=>e.length?(r&&i.includes("Cost")&&(i.includes("FusionMaterial")?r.writeInfoLog(`${e.map(n=>n.toString()).join(" ")}を融合素材とし――、`):i.includes("SynchroMaterial")?r.writeInfoLog(`${e.map(n=>n.toString()).join(" ")}をシンクロと素材し――、`):i.includes("LinkMaterial")?r.writeInfoLog(`${e.map(n=>n.toString()).join(" ")}をリンクマーカーにセッティング――、`):r.writeInfoLog(`${e.map(n=>n.toString()).join(" ")}を墓地に送り――、`)),b.bringManyToSameCellForTheSameReason("Graveyard","Top",e,"FaceUp","Vertical",i,a,r)):Promise.resolve([])),l(b,"addManyToHand",(e,i,a,r)=>e.length?b.bringManyToSameCellForTheSameReason("Hand","Bottom",e,"FaceDown","Vertical",i,a,r):Promise.resolve([])),l(b,"discardManyForTheSameReason",(e,i,a,r)=>e.length?(r&&i.includes("Cost")&&r.writeInfoLog(`${e.map(n=>n.toString()).join(" ")}を手札から捨て――、`),b.bringManyToSameCellForTheSameReason("Graveyard","Top",e,"FaceUp","Vertical",["Discard",...i],a,r)):Promise.resolve([])),l(b,"banishManyForTheSameReason",(e,i,a,r)=>e.length?(r&&i.includes("Cost")&&r.writeInfoLog(`${e.map(n=>n.toString()).join(" ")}をゲームから除外し――、`),b.bringManyToSameCellForTheSameReason("Banished","Top",e,"FaceUp","Vertical",i,a,r)):Promise.resolve([])),l(b,"returnManyToDeckForTheSameReason",(e,i,a,r,n)=>i.length?(n&&a.includes("Cost")&&n.writeInfoLog(`${i.map(s=>s.toString()).join(" ")}をデッキに戻し――、`),b.bringManyToSameCellForTheSameReason("Deck",e,i,"FaceDown","Vertical",a,r,n)):Promise.resolve([])),l(b,"returnManyToHandForTheSameReason",(e,i,a,r)=>e.length?(r&&i.includes("Cost")&&r.writeInfoLog(`${e.map(n=>n.toString()).join(" ")}を手札に戻し――、`),b.bringManyToSameCellForTheSameReason("Hand","Bottom",e,"FaceDown","Vertical",i,a,r)):Promise.resolve([])),l(b,"convertManyToXyzMaterials",(e,i,a,r)=>e.length?(r&&i.includes("Cost")&&r.writeInfoLog(`${e.map(n=>n.toString()).join(" ")}によって、オーバーレイネットワークを構築――、`),D.moveMany(e.map(n=>({entity:n,to:n.fieldCell,kind:"XyzMaterial",face:"FaceUp",orientation:"Vertical",pos:"Top",movedAs:i,movedBy:a,actionOwner:r,chooser:r})))):Promise.resolve()),l(b,"moveToXyzOwner",async(e,i,a,r,n,s)=>{a.length&&(await D.moveMany(a.map(o=>({entity:o,to:e,kind:"XyzMaterial",face:"FaceUp",orientation:"Vertical",pos:"Top",movedAs:r,movedBy:n,actionOwner:s,chooser:s}))),a.forEach(o=>o.info.xyzOwner=i))}),l(b,"banishMany",(e,i)=>D.bringManyToSameCell("Banished","Top",e.map(a=>({...a,face:"FaceUp",orientation:"Vertical"})),i)),l(b,"bringManyToSameCellForTheSameReason",(e,i,a,r,n,s,o,c)=>D.bringManyToSameCell(e,i,a.map(u=>({entity:u,face:r,orientation:n,movedAs:s,movedBy:o,activator:c})))),l(b,"tryDestroy",async(e,i)=>{const a=await b.tryMarkForDestroy(e,i);return await b.waitCorpseDisposal(i.activator.duel),a}),l(b,"waitCorpseDisposal",e=>D.sendManyToGraveyard([...e.field.getDyingCardsOnField(),...e.field.getPendingCardsOnField()].filter(i=>i.info.isDying).map(i=>({entity:i,movedAs:i.info.causeOfDeath??[],movedBy:i.info.isKilledBy,activator:i.info.isKilledByWhom})))),l(b,"tryMarkForDestroy",async(e,i)=>{let a=e.filter(o=>b._tryMarkForDestroy(o,i));if(!a.length)return[];const r=i.action.playType==="Battle"?"Battle":"Effect";(await Promise.all(e[0].field.getAllEntities().flatMap(o=>o.substituteEffects.filter(c=>c.isMandatory).filter(c=>c.executableCells.includes(o.fieldCell.cellType)).filter(c=>c.isApplicableTo(r,e,i).length).flatMap(c=>c.substitute(r,e,i))))).flatMap(o=>o).forEach(o=>{o.resetCauseOfDeath()}),a=a.filter(o=>o.info.isDying);let n=e[0].field.getAllEntities().flatMap(o=>o.substituteEffects.filter(c=>!c.isMandatory).filter(c=>c.executableCells.includes(o.fieldCell.cellType)).filter(c=>c.isApplicableTo(r,e,i).length).map(c=>({chooser:o.owner,effect:c,sacrifice:o})));for(const o of n.map(c=>c.sacrifice.controller).getDistinct()){const c=n.filter(d=>d.sacrifice.controller===o),u=await o.duel.view.waitSelectAction(o,c.map(d=>({entity:d.sacrifice,title:d.effect.title,origin:d.effect})),"身代わり効果を適用する？",!0);if(u){if((await u.substitute(r,a,i)).forEach(d=>{d.resetCauseOfDeath()}),a=a.filter(d=>d.info.isDying),!a.length)return[];n=n.filter(d=>d.effect.isApplicableTo(r,e,i).length)}}const s=a.filter(o=>o.info.isDying);return s.forEach(o=>o.duel.log.info(`${o.toString()}を${r==="Battle"?"戦闘":r==="Effect"?"効果":"ルール"}破壊。`,o.info.isKilledByWhom)),s}),l(b,"tryBanish",async(e,i,a)=>{const r=i.filter(n=>n.canBeBanished(e,a.activator,a.action.entity,a.action));return await b.banishManyForTheSameReason(r,["Effect"],a.action.entity,a.activator),r.filter(n=>n.fieldCell.cellType==="Banished").filter(n=>n.moveLog.latestRecord.movedBy===a.action.entity)}),l(b,"negateSummonMany",(e,i)=>{const a=i.duel.field.getPendingMonstersOnField();return a.forEach(r=>{r.info.summonKinds=[],r.info.materials=[],r.moveLog.negateSummon(e,i)}),i.writeInfoLog(`${a.map(r=>r.toString()).join(" ")}.の召喚は無効にされた。`),a}),l(b,"drawAtSameTime",async(e,i,a,r)=>{const n=[],s=[],o=[e.draw(a,i,e),e.getOpponentPlayer().draw(r,i,e)].map(c=>c.catch(u=>{u instanceof B?u.winner&&n.push(u.winner):s.push(u)}));if(await Promise.all(o),s.length)throw new v("ドロー処理で想定されない例外が発生した。",e,a,r,i,...s);if(n.length!==0)throw n.length===1?new B(n[0],`${n[0].getOpponentPlayer().name}がデッキからドローできなかった。`):new B(void 0,"お互いにデッキからカードをドローできなかった。")});let m=b;class gr extends we{constructor(){super(...arguments);l(this,"afterDistributeAll",()=>!0)}}class hr extends be{constructor(){super(...arguments);l(this,"beforePush",()=>{})}}class Kt extends oe{constructor(i){super(i);l(this,"beforeRemove",()=>{});l(this,"calcType");l(this,"filter");this.calcType=i.calcType,this.filter=(...a)=>i.filter(this,...a)}}const Ke=(t,e,...i)=>t.filter(a=>e.includes(a.calcType)).reduce((a,r)=>({...a,...r.filter(...i)}),{}),Jt=(...t)=>{const[e,i,a,r,n,s,o]=t,c=[a.entity,r,n].filter(p=>!!p).flatMap(p=>p.damageFilterBundle.effectiveOperators);let u=Ke(c,["double_typeA","eachOther_typeA","eachOther_typeB","asEffectDamage"],...t);const d={point:e,damageToOpponent1:0,damageToOpponent2:0,damageType:s};return u.double_typeA&&(d.point*=2),u.asEffectDamage&&(d.damageType="EffectDamage"),u={...Ke(c,["heal","zero_typeA","half","double_typeB","fix"],d.point,i,a,r,n,d.damageType,o),...u},u.fix!==void 0?d.point=u.fix:u.zero_typeA?d.point=0:(u.half&&(d.point=Math.round(d.point/2)),u.double_typeA&&(d.point*=2)),u={...Ke(c,["zero_typeB"],d.point,i,a,r,n,d.damageType,o),...u},u.zero_typeB&&(d.point=0),u.heal?d.damageType="Heal":(u.eachOther_typeA&&(d.damageToOpponent1=d.point),u.eachOther_typeB&&(d.damageToOpponent2=d.point,u.eachOther_typeB==="Substitude"&&(d.point=0))),d},yr=(t,e,i)=>Jt(t,e.activator,i,e.action.entity,void 0,"EffectDamage",e.action),mr=(t,e,i,a,r,n)=>Jt(t,e,i,a,r.entityType==="Duelist"?void 0:r,"BattleDamage",n),Re=t=>new Promise(e=>setTimeout(e,t)),Yt=()=>{let t=()=>{},e=()=>{};return{promise:new Promise((a,r)=>{t=a,e=r}),resolve:t,reject:e}},Ue=class Ue extends Te{constructor(i,a,r){super(i,a,{...r,playType:"ContinuousEffect",isMandatory:!1,executableDuelistTypes:["Controller"]});l(this,"toString",()=>this.title);l(this,"toFullString",()=>`${this.entity.toString()}の${this.toString()}`);l(this,"execute",async(i,a)=>{if(!this.canExecute())return;const r=await this.definition.execute(this,i,a);return r==="RemoveMe"&&this.entity.immediatelyActions.reset(...this.entity.immediatelyActions.filter(n=>n!==this)),r})}get definition(){return super.definition}get playType(){return this.definition.playType}};l(Ue,"createNew",(i,a)=>new Ue("AutoSeq",i,a));let st=Ue;const vr=["FaceUp","FaceDown"],It=["FusionSummon","SynchroSummon","XyzSummon","PendulumSummon","LinkSummon","RitualSummon","FlipSummon"],Sr={FusionSummon:"融合召喚",SynchroSummon:"シンクロ召喚",XyzSummon:"エクシーズ召喚",PendulumSummon:"ペンデュラム召喚",LinkSummon:"リンク召喚",RitualSummon:"儀式召喚",FlipSummon:"反転召喚"},ei=[...It,"AdvanceSummon","NormalSummon","SpecialSummon"];[...ei];const Cr=t=>t+"Summon",kt=["Card","Token"],Tr=["Duelist","Squatter"],ul=(t,e)=>jt(t.origin,e.origin),P=class P{constructor(e,i,a,r,n,s,o){l(this,"seq");l(this,"origin");l(this,"entityType");l(this,"summonFilterBundle");l(this,"procFilterBundle");l(this,"numericOprsBundle");l(this,"statusOperatorBundle");l(this,"damageFilterBundle");l(this,"moveLog");l(this,"counterHolder");l(this,"parent");l(this,"face");l(this,"orientation");l(this,"owner");l(this,"fieldCell");l(this,"_status");l(this,"_numericStatus");l(this,"_info");l(this,"actions",[]);l(this,"immediatelyActions",[]);l(this,"continuousEffects",[]);l(this,"substituteEffects",[]);l(this,"canBeReleased",(e,i,a,r)=>!this.isInTrashCell&&this.procFilterBundle.filter(a,e,i,r,[this]));l(this,"canBeSentToGraveyard",(e,i,a,r)=>!this.status.willBeBanished&&!this.status.willReturnToDeck&&this.procFilterBundle.filter([a],e,i,r,[this]));l(this,"_exists",!0);l(this,"validateFusionMaterials",e=>this.definition.fusionMaterialInfos?this.definition.validateFusionMaterials?this.definition.validateFusionMaterials(e):!0:!1);l(this,"definition");l(this,"toString",()=>{let e=this.nm;return this.nm!==this.origin.name&&(e=`${e}(${this.origin.name})`),this.entityType==="Card"?`《${e}》`:e});l(this,"onUsedAsMaterial",(e,i)=>{this.definition.onUsedAsMaterial&&this.definition.onUsedAsMaterial(e,i)});l(this,"setBattlePosition",async(e,i,a,r)=>{let n=`表示形式の変更：${this.toString()}（${this.battlePositionName}⇒${Fe[e]}）`;const s=[...i];this.battlePosition==="Set"&&(s.push("Flip"),i.includes("Rule")&&(this.info.isPending=!0,n=`${this.toString()}を反転召喚`,this.info.summonKinds.push("FlipSummon"),s.push("FlipSummon"),s.push("AttackSummon"))),this.duel.log.info(n,r),await this.moveAlone(this.fieldCell,"Monster",e==="Set"?"FaceDown":"FaceUp",e==="Attack"?"Vertical":"Horizontal","Top",s,a,r,r)});l(this,"activateAsPendulumScale",(e,i,a,r)=>this.moveAlone(e,"Spell","FaceUp","Vertical","Top",["CardActivation",...i],a,r,r));l(this,"setNonFieldMonsterPosition",async(e,i,a,r,n)=>{this.moveAlone(this.fieldCell,e,i==="FaceUp"?"FaceUp":"FaceDown","Vertical","Top",a,r,n,n)});l(this,"setAsSpellTrap",async(e,i,a,r,n)=>{await this.moveAlone(e,i,"FaceDown","Vertical","Top",[...a,"SpellTrapSet"],r,n,n)});l(this,"activateSpellTrapFromHand",async(e,i,a,r,n)=>{await this.moveAlone(e,i,"FaceUp","Vertical","Top",[...a,"CardActivation"],r,n,n)});l(this,"putDirectly",async(e,i,a,r,n)=>{await this.moveAlone(e,i,"FaceUp","Vertical","Top",[...a,"PutDirectly"],r,n,n)});l(this,"activateSpellTrapOnField",async(e,i,a,r)=>{await this.moveAlone(this.fieldCell,e,"FaceUp","Vertical","Top",[...i,"CardActivation"],a,r,r)});l(this,"draw",async(e,i,a)=>await this.addToHand([...e,"Draw"],i,a));l(this,"addToHand",async(e,i,a)=>await this.moveAlone(this.owner.getHandCell(),this.origin.kind,"FaceDown","Vertical","Bottom",[...e],i,a,a));l(this,"summon",(e,i,a,r,n,s,o)=>P.summonMany([{monster:this,dest:e,summoner:o??s,pos:i}],a,r,n,s));l(this,"moveForcibly",async(e,i,a,r,n,s,o)=>{await this.moveAlone(e,this.origin.kind,i,a,r,["Rule",...n],s,o,o)});l(this,"excavate",async(e,i,a)=>this.moveAlone(this.fieldCell,this.kind,"FaceUp",this.orientation,"Fix",["Excavate",...e],i,a,void 0));l(this,"moveAlone",async(e,i,a,r,n,s,o,c,u)=>(await P.moveMany([{entity:this,to:e,kind:i,face:a,orientation:r,pos:n,movedAs:s,movedBy:o,actionOwner:c,chooser:u}],void 0),this.fieldCell));l(this,"determine",()=>{this.info.isPending&&(this.info.isPending=!1,this.moveLog.finalize(),this.continuousEffects.forEach(e=>e.updateState()))});l(this,"_move",async e=>{if(!e.to)throw new Error("illegal argument: to");for(const r of[this,...this.field.getCardsOnFieldStrictly()].getDistinct().flatMap(n=>n.immediatelyActions))await r.execute(this,e);this.face=e.face,this.orientation=e.orientation;let i=!1,a=e.actionOwner;if(!a&&e.movedAs.includes("LostDestinyBond")){const r=this.info.equipedBy??this.info.xyzOwner;r&&(a=r.moveLog.latestRecord.actionOwner)}return e.to!==this.fieldCell&&(this.duel.log.pushMoveLog(a,this,this.fieldCell,e.to),this.fieldCell.cellType==="WaitingRoom"?i=!0:e.to.cellType==="WaitingRoom"?(this._exists=!1,await this.duel.view.waitTokenAnimation()):this.field.duel.clock.turn&&await this.field.duel.view.waitAnimation({entity:this,to:e.to,index:e.pos,count:0})),(e.to!==this.fieldCell||e.pos==="Random")&&(this.fieldCell.releaseEntities(this),this.fieldCell.isPlayFieldCell&&!e.to.isPlayFieldCell&&(this.counterHolder.clear(),this.resetCauseOfDeath()),this.fieldCell.isMonsterZoneLikeCell&&!e.to.isMonsterZoneLikeCell||e.kind!=="Monster"?(this.resetNumericStatus(),this.info.isEffectiveIn.push(...X),this.info.equipEntities.filter(r=>r.isOnFieldAsSpellTrapStrictly).forEach(r=>{r.info.isDying=!0,r.info.causeOfDeath=["Rule","Destroy","LostEquipOwner","LostDestinyBond"],this.controller.writeInfoLog(`装備対象${this.toString()}不在により${r.toString()}は破壊された。`)}),this.info.equipEntities=[],this.kind!=="XyzMaterial"&&this.fieldCell.xyzMaterials.forEach(r=>{r.info.isDying=!0,r.info.causeOfDeath=["LostXyzOwner","LostDestinyBond"],this.controller.writeInfoLog(`${this.toString()}不在により、XYZ素材${r.toString()}は墓地に送られた。`)}),this.info.xyzOwner=void 0):this.fieldCell.cellType==="SpellAndTrapZone"&&e.to.cellType!=="SpellAndTrapZone"&&(this.info.equipedBy=void 0,this.info.equipedAs=void 0,this.info.isEffectiveIn.push(...X)),e.to.acceptEntities(this,e.pos),i&&(await Re(1),this._exists=!0,await this.duel.view.waitTokenAnimation()),(e.to===this.isBelongTo||e.to.cellType==="Hand"||e.to.cellType==="Banished"&&this.face==="FaceDown")&&(this.counterHolder.clear(),this.resetInfoAll(),this.resetStatusAll())),(this.isOnFieldStrictly&&this.face==="FaceDown"||e.kind==="XyzMaterial")&&(this.info.equipEntities.forEach(r=>{r.info.isDying=!0,r.info.causeOfDeath=["Rule","Destroy"],this.controller.writeInfoLog(`装備対象${this.toString()}不在により${r.toString()}は破壊された。`)}),this.counterHolder.removeAllWhenfaceDown(),this.info.materials=[],this._status.isEffective=!0,this.info.isEffectiveIn=[...K],this.resetNumericStatus(),this.info.isSettingSickness=this.kind==="Trap"||this.status.spellCategory==="QuickPlay"),this._info.kind=e.kind,this.moveLog.push(e.kind,e.movedAs,e.movedBy,e.actionOwner,e.chooser),e.to});l(this,"initForTurn",()=>{this.info.isSettingSickness=!1,this.info.attackDeclareCount=0,this.info.battlePotisionChangeCount=0,this.counterHolder.corpseDisposal()});l(this,"resetInfoIfLeavesTheField",()=>{this._info={...this._info,isDying:!1,isPending:!1,causeOfDeath:[],isKilledBy:void 0,isKilledByWhom:void 0,effectTargets:{},attackDeclareCount:0,battlePotisionChangeCount:0,materials:[],equipedBy:void 0,equipedAs:void 0,equipEntities:[]},this._info.isEffectiveIn.push(...X),this._info.isEffectiveIn.distinct()});l(this,"resetInfoAll",()=>{var e;this._info={kind:this.origin.kind,isDying:!1,isPending:!1,isEffectiveIn:[...K],causeOfDeath:[],isKilledBy:void 0,isKilledByWhom:void 0,isVanished:!1,isRebornable:((e=this.origin.monsterCategories)==null?void 0:e.union(Ht).length)===0,isSettingSickness:!1,summonKinds:[],materials:[],effectTargets:{},attackDeclareCount:0,battlePotisionChangeCount:0,equipedBy:void 0,equipedAs:void 0,validateEquipOwner:()=>!0,equipEntities:[],xyzOwner:void 0,battleLog:[]},this.counterHolder.clear()});l(this,"resetNumericStatus",()=>{const e=Gt.reduce((i,a)=>(i[a]=this.origin[a],i),{});this._numericStatus={origin:{...e},wip:{...e},calculated:{...e}}});l(this,"resetStatus",()=>{this._status={...this.origin,canAttack:!0,isEffective:!0,canDirectAttack:!1,canActivateEffect:!0,isSelectableForAttack:!0,allowHandSynchro:!1,allowHandLink:!1,willBeBanished:!1,willReturnToDeck:void 0,fusionSubstitute:!1,maxCounterQty:{},piercingTo:[]}});l(this,"resetStatusAll",()=>{this.resetNumericStatus(),this.resetStatus()});l(this,"resetCauseOfDeath",()=>{this.info.isDying=!1,this.info.causeOfDeath=[],this.info.isKilledBy=void 0,this.info.isKilledByWhom=void 0});this.seq=P.nextEntitySeq++,this.counterHolder=new or(this),this.definition=r,this.owner=e,this.fieldCell=i,this.entityType=a,this.parent=o,this.origin=r.staticInfo,this._status=JSON.parse(JSON.stringify(r.staticInfo)),this._numericStatus=JSON.parse(JSON.stringify(r.staticInfo)),this.resetStatusAll(),this._info={kind:this.origin.kind,isEffectiveIn:[...K],attackDeclareCount:0,battlePotisionChangeCount:0,isDying:!1,isPending:!1,causeOfDeath:[],isKilledBy:void 0,isKilledByWhom:void 0,isVanished:!1,isRebornable:!0,isSettingSickness:!1,summonKinds:[],materials:[],effectTargets:{},equipedBy:void 0,equipedAs:void 0,validateEquipOwner:()=>!0,equipEntities:[],xyzOwner:void 0,battleLog:[]},this.resetInfoAll(),this.face=n,this.orientation=s,this.summonFilterBundle=new pr(i.field.summonFilterPool,this),this.procFilterBundle=new La(i.field.procFilterPool,this),this.numericOprsBundle=new Ra(i.field.numericStateOperatorPool,this),this.statusOperatorBundle=new ur(i.field.statusOperatorPool,this),this.damageFilterBundle=new hr(i.field.damageFilterPool,this),this._exists=this.entityType==="Card",i.acceptEntities(this,"Top"),this.moveLog=new Xa(this),this.moveLog.pushForRuleAction(["Spawn"]);let c=[];c=r.continuousEffects??[],this.substituteEffects.push(...(r.substituteEffects??[]).map(u=>nt.createNew(this,u))),this.origin.kind==="Monster"&&this.entityType==="Card"&&r.summonFilter&&this.summonFilterBundle.push(new fr({title:"default",validateAlive:()=>!0,isContinuous:!0,isSpawnedBy:this,actionAttr:{},isApplicableTo:()=>!0,summonKinds:ei,filter:r.summonFilter})),r.defaultStatus&&this.statusOperatorBundle.push(new R({title:"default",validateAlive:()=>!0,isContinuous:!0,isSpawnedBy:this,actionAttr:{},isApplicableTo:()=>!0,statusCalculator:()=>r.defaultStatus??{}})),this.actions.push(...r.actions.map(u=>se.createNew(this,u))),this.immediatelyActions.push(...(r.immediatelyActions??[]).map(u=>st.createNew(this,u))),this.continuousEffects.push(...c.map(u=>rt.createNew(this,u)))}get isUnderControl(){return this.face==="FaceUp"||Ut.every(e=>e!==this.fieldCell.cellType)}get controller(){return this.fieldCell.owner??this.owner}get field(){return this.owner.duel.field}get duel(){return this.owner.duel.field.duel}get actionLogRecords(){return this.duel.chainBlockLog.records.filter(e=>e.chainBlockInfo.action.entity===this)}get status(){return this._status}set status(e){this._status={...e}}get numericStatus(){return this._numericStatus}get info(){return this._info}get kind(){return this.info.kind}get nm(){return this.status.name}get atk(){return this._numericStatus.calculated.attack}get def(){return this._numericStatus.calculated.defense}get lvl(){return this._numericStatus.calculated.level}get rank(){return this._numericStatus.calculated.rank}get attr(){return this.status.attributes??[]}get types(){return this.status.types??[]}get psL(){return this._numericStatus.calculated.pendulumScaleL}get psR(){return this._numericStatus.calculated.pendulumScaleR}get linkArrows(){let e=(this.origin.linkArrowKeys??[]).map(i=>$t[i].linkArrow);return this.controller.seat==="Above"&&(e=e.map(i=>({offsetColumn:i.offsetColumn*-1,offsetRow:i.offsetRow*-1}))),e}get linkArrowDests(){var e;return(e=this.origin.monsterCategories)!=null&&e.includes("Link")?this.isOnFieldAsMonsterStrictly?this.linkArrows.map(i=>[this.fieldCell.row+i.offsetRow,this.fieldCell.column+i.offsetColumn]).map(([i,a])=>this.field.cells[i][a]).filter(i=>i.isMonsterZoneLikeCell):[]:[]}get linkedEntities(){return this.isOnFieldAsMonsterStrictly?[...this.linkArrowDests.map(e=>e.cardEntities[0]).map(e=>e),...this.fieldCell.linkArrowSources].getDistinct():[]}get coLinkedEntities(){var e;return this.isOnFieldAsMonsterStrictly?(e=this.origin.monsterCategories)!=null&&e.includes("Link")?this.linkArrowDests.map(i=>i.cardEntities[0]).filter(i=>i).union(this.fieldCell.linkArrowSources):[]:[]}get isEffective(){return this.status.isEffective&&this.info.isEffectiveIn.includes(this.fieldCell.cellType)}get canBeSet(){var e;return this.entityType==="Card"&&!((e=this.status.monsterCategories)!=null&&e.includes("Link"))}get isEffectiveWeakly(){return this.status.isEffective}get battlePosition(){if(this.isOnFieldStrictly&&this.kind==="Monster")return this.orientation==="Vertical"?"Attack":this.face==="FaceUp"?"Defense":"Set"}get battlePositionName(){const e=this.battlePosition;if(e)return Fe[e]}get wasMovedAtCurrentProc(){return this.field.duel.clock.totalProcSeq===this.moveLog.latestRecord.movedAt.totalProcSeq}get wasMovedAtPreviousProc(){return this.field.duel.clock.totalProcSeq===this.moveLog.latestRecord.movedAt.totalProcSeq+1}get wasMovedAtCurrentTurn(){return this.field.duel.clock.isSameTurn(this.moveLog.latestRecord.movedAt)}get wasMovedAtCurrentChain(){return this.field.duel.clock.isSameChain(this.moveLog.latestRecord.movedAt)}get wasMovedAtPreviousChain(){return this.field.duel.clock.isPreviousChain(this.moveLog.latestRecord.movedAt)}get wasMovedAtPreviousTurn(){return this.field.duel.clock.isPreviousTurn(this.moveLog.latestRecord.movedAt)}get wasMovedFrom(){return this.moveLog.previousPlaceRecord.cell}get isPendulumScale(){var e;return!(!((e=this.origin.monsterCategories)!=null&&e.includes("Pendulum"))||!this.isOnField||!this.fieldCell.isSpellTrapZoneLikeCell||this.status.spellCategory)}get isOnField(){return this.fieldCell.isPlayFieldCell}get isOnFieldStrictly(){return this.isOnField&&!this.info.isPending&&!this.info.isDying&&this.kind!=="XyzMaterial"}get isOnFieldAsMonsterStrictly(){return this.fieldCell.isMonsterZoneLikeCell&&this.isOnFieldStrictly}get isMonster(){return this.isOnFieldAsMonsterStrictly||this.kind==="Monster"}get isOnFieldAsSpellTrapStrictly(){return this.isOnFieldStrictly&&(this.kind==="Spell"||this.kind==="Trap")}get isInTrashCell(){return this.fieldCell.isTrashCell}get isLikeContinuousSpell(){return this.status.spellCategory==="Continuous"||this.status.spellCategory==="Field"||this.status.spellCategory==="Equip"||this.status.trapCategory==="Continuous"||(this.status.monsterCategories??[]).includes("Pendulum")}get isBelongTo(){return this.origin.monsterCategories&&this.origin.monsterCategories.union(Ne).length?this.owner.getExtraDeck():this.owner.getDeckCell()}get exist(){return this._exists}get allStickyEffectOperators(){return[...this.procFilterBundle.effectiveOperators,...this.numericOprsBundle.effectiveOperators]}get fusionMaterialInfos(){return this.definition.fusionMaterialInfos??[]}};l(P,"nextEntitySeq",0),l(P,"splitBattlePos",e=>({face:e==="Set"?"FaceDown":"FaceUp",orientation:e==="Attack"?"Vertical":"Horizontal"})),l(P,"recreateArray",(e,i)=>{if(!i.length)return[];const a=e.getAllCells().flatMap(r=>r.entities);return i.map(r=>r.seq).map(r=>a.find(n=>n.seq===r)).filter(r=>r!==void 0)}),l(P,"createPlayerEntity",e=>{const i=e.getHandCell();return new P(e,i,"Duelist",Zs(e),"FaceUp","Vertical")}),l(P,"createCardEntity",(e,i)=>{const a=i.staticInfo.monsterCategories&&i.staticInfo.monsterCategories.union(Ne).length?e.getExtraDeck():e.getDeckCell();return new P(e,a,"Card",i,"FaceDown","Vertical")}),l(P,"createTokenEntity",(e,i,a)=>new P(e,e.duel.field.getWaitingRoomCell(),"Token",a,"FaceUp","Vertical",i)),l(P,"moveMany",async(e,i)=>{if(!e.length)return;const a=e[0].entity.duel,n=[...e.filter(o=>o.entity.fieldCell!==o.to).map(o=>o.entity).filter(o=>!(i??[]).includes(o)),...a.field.getCardsOnFieldStrictly().filter(o=>o.info.isDying)],s=new Map;for(e.forEach(({entity:o,to:c,kind:u,face:d,orientation:p,pos:f,...h})=>{var ue;let y=c,w=u,g=d,M=f,H=p;o.status.willBeBanished?(y=o.owner.getBanished(),g="FaceUp",H="Vertical"):o.status.willReturnToDeck?(y=o.isBelongTo,g="FaceDown",M=o.status.willReturnToDeck,H="Vertical"):(ue=o.status.monsterCategories)!=null&&ue.includes("Pendulum")&&o.isOnField&&!o.info.isPending&&o.kind!=="XyzMaterial"&&o.face==="FaceUp"&&c.isTrashCell&&(y=o.owner.getExtraDeck(),g="FaceUp",M="Top",H="Vertical"),y.cellType==="ExtraDeck"&&(M=g==="FaceUp"?"Top":"Bottom"),o.isBelongTo.cellType==="ExtraDeck"&&(y.cellType==="Hand"||y.cellType==="Deck")&&(y=o.isBelongTo,g="FaceDown",H="Vertical"),y.isPlayFieldCell||(w=o.origin.kind,o.entityType==="Token"&&(y=o.field.getWaitingRoomCell())),y.isMonsterZoneLikeCell||(H="Vertical"),s.set(y,[{entity:o,to:y,kind:w,face:g,orientation:H,pos:M,...h},...s.get(y)??[]])});;){const o=Array.from(s.values()).map(u=>u.pop()).filter(u=>u!==void 0).map(u=>u.entity._move(u));if(!o.length)break;await Promise.all(o);const c=a.field.getDyingCardsOnField().filter(u=>!n.includes(u)).map(u=>({entity:u,movedAs:u.info.causeOfDeath??[],movedBy:u.info.isKilledBy,activator:u.info.isKilledByWhom}));c.length&&await P.sendManyToGraveyard(c,n)}P.settleEntityMove(a)}),l(P,"summonMany",async(e,i,a,r,n)=>{if(!e.length)return;const s={Attack:"AttackSummon",Defense:"DefenseSummon",Set:"SetSummon"},o=e.map(({monster:c,dest:u,pos:d,summoner:p})=>{if(c.info.summonKinds=[i],i==="NormalSummon"||i==="AdvanceSummon"){c.info.summonKinds.push("NormalSummon");const y=i==="AdvanceSummon"?"アドバンス":"";d==="Attack"?c.field.duel.log.info(`${c.toString()}を${y}召喚`,p):c.duel.log.info(`${c.toString()}を${y}セット`,p),a.includes("Rule")?p.info.ruleNormalSummonCountQty++:p.info.effectNormalSummonCountQty++}else i==="SpecialSummon"?c.duel.log.info(`${c.toString()}を${Fe[d]}で特殊召喚`,p):(c.info.summonKinds.push("SpecialSummon"),c.duel.log.info(`${c.toString()}を${Fe[d]}で${Sr[i]}！`,p)),p.info.specialSummonCountQty++;c.info.summonKinds=c.info.summonKinds.getDistinct(),c.info.battlePotisionChangeCount=1;const{face:f,orientation:h}=P.splitBattlePos(d);return a.includes("Rule")&&(c.info.isPending=!0),{entity:c,args:{to:u,kind:"Monster",face:f,orientation:h,pos:"Top",movedAs:[i,s[d],...a],movedBy:r,actionOwner:n,chooser:p}}}).map(c=>c.entity._move(c.args));await Promise.all(o),e.map(c=>c.summoner).forEach(c=>{i==="NormalSummon"||i==="AdvanceSummon"?a.includes("Rule")?c.info.ruleNormalSummonCount++:c.info.effectNormalSummonCount++:c.info.specialSummonCount++}),P.settleEntityMove(e[0].monster.duel)}),l(P,"sendManyToGraveyard",(e,i)=>P.bringManyToSameCell("Graveyard","Top",e.map(a=>({...a,face:"FaceUp",orientation:"Vertical"})),i)),l(P,"bringManyToSameCell",async(e,i,a,r)=>(await P.moveMany(a.map(n=>({...n,to:n.entity.field.getCells(e).filter(s=>s.owner===n.entity.owner)[0],kind:n.entity.origin.kind,pos:i,chooser:n.activator,actionOwner:n.activator})),r),a.map(n=>n.entity).filter(n=>n.fieldCell.cellType===e))),l(P,"settleEntityMove",e=>{e.field.recalcLinkArrows(),e.field.distributeOperators(e.clock);const i=e.field.getAllEntities().filter(a=>a.wasMovedAtCurrentProc);i.filter(a=>!a.isOnFieldStrictly&&!a.info.isPending).forEach(a=>a.resetInfoIfLeavesTheField()),i.filter(a=>a.face==="FaceDown").filter(a=>a.fieldCell===a.isBelongTo).forEach(a=>{a.resetInfoAll(),a.resetStatusAll()}),i.flatMap(a=>a.continuousEffects).forEach(a=>a.updateState()),e.field.getAllCells().filter(a=>a.needsShuffle).map(a=>a.shuffle())});let D=P;D.prototype.hasBeenArrivalNow=function(t,e=C,i=!1){const a=e.map(Cr),r=this.moveLog.latestArrivalRecord;if(!r)return!1;if(this.field.duel.clock.isPreviousChain(r.movedAt)){if(i&&!this.field.duel.clock.isPreviousProc(r.movedAt))return!1}else return!1;const n=r.movedAs;return!(!n.union(t).length||!n.union(a).length)};D.prototype.getAttackTargets=function(){const t=this.controller.getOpponentPlayer().getMonstersOnField().filter(e=>e.status.isSelectableForAttack);return(this.status.canDirectAttack||!t.length)&&t.push(this.controller.getOpponentPlayer().entity),t.filter(e=>e.canBeTargetOfBattle(this.controller,this)).filter(e=>this.procFilterBundle.filter(["BattleTarget"],this.controller,this,{},[e]))};D.prototype.canBeEffected=function(t,e,i){return this.procFilterBundle.filter(["Effect"],t,e,i,[this])};const _r=(t,e,i,a,r)=>t.canBeEffected(i,a,r)&&t.procFilterBundle.filter([e],i,a,r,[t]);D.prototype.canBeTargetOfEffect=function(t){return this.procFilterBundle.filter(["EffectTarget"],t.activator,t.action.entity,t.action,[this])};D.prototype.canBeBanished=function(t,e,i,a){return this.fieldCell.cellType==="Banished"?!1:_r(this,t,e,i,a)};D.prototype.canBeTargetOfBattle=function(t,e){return this.procFilterBundle.filter(["BattleTarget"],t,e,{},[this])};D.prototype.validateDestroy=function(t,e,i,a){let r=this.procFilterBundle.filter([t==="Battle"?"BattleDestroy":"EffectDestroy"],e,i,a??{},[this]);return r&&t==="Effect"&&(r=this.canBeEffected(e,i,a)),r};D.prototype.getIndexInCell=function(){const t=this;if(t.info.isVanished)return-1;const e=t.fieldCell.cardEntities.indexOf(t);if(e<0)throw new v("エンティティとセルの状態が矛盾している。",[t,t.fieldCell]);return e};D.prototype.getXyzMaterials=function(){const t=this;return(t.status.monsterCategories??[]).includes("Xyz")?t.fieldCell.xyzMaterials:[]};D.prototype.wasMovedAfter=function(t){return this.moveLog.latestRecord.movedAt.totalProcSeq>t.totalProcSeq};D.prototype.hadArrivedToFieldAt=function(){let t=this.moveLog.latestRecord.movedAt;return this.moveLog.records.findLast(e=>!e.cell.isPlayFieldCell||e.isPending||e.kind!==this.kind||e.face==="FaceDown"?!0:(t=e.movedAt,!1)),t};D.prototype.release=async function(t,e,i){return await this.sendToGraveyard([...t,"Release"],e,i),this.info.isVanished?void 0:this.fieldCell};D.prototype.ruleDestroy=async function(){return await this.sendToGraveyard(["Rule","Destroy"],void 0,void 0),this.info.isVanished?void 0:this.fieldCell};D.prototype.sendToGraveyard=async function(t,e,i){await m.sendManyToGraveyardForTheSameReason([this],t,e,i)};D.prototype.discard=async function(t,e,i){await m.discardManyForTheSameReason([this],t,e,i)};D.prototype.returnToDeck=async function(t,e,i,a){await m.returnManyToDeckForTheSameReason(t,[this],e,i,a)};D.prototype.banish=async function(t,e,i){await m.banishManyForTheSameReason([this],t,e,i)};class Er{constructor(e){l(this,"cells");l(this,"duel");l(this,"summonFilterPool");l(this,"procFilterPool");l(this,"numericStateOperatorPool");l(this,"statusOperatorPool");l(this,"damageFilterPool");l(this,"moveLog");l(this,"distributeOperators",e=>{console.info(`[totalProcSeq]:${e.totalProcSeq}`);let i=0;for(;;){if(i++,i>10)throw new v("無限ループ発生");let a=!0;for(const r of this.stickyOperatorPools)if(!r.distributeAll(this.duel)){a=!1;break}if(a)return}});l(this,"getAllCells",()=>this.cells.flat());l(this,"getCells",(...e)=>this.getAllCells().filter(i=>e.includes(i.cellType)));l(this,"getAvailableExtraMonsterZones",()=>this.getCells("ExtraMonsterZone").filter(e=>e.isAvailable));l(this,"getWaitingRoomCell",()=>this.getCells("WaitingRoom")[0]);l(this,"getAllEntities",()=>this.getAllCells().map(e=>e.entities).flat());l(this,"getAllCardEntities",()=>this.getAllCells().map(e=>e.cardEntities).flat());l(this,"getCardsOnFieldStrictly",()=>this.getCells(...X).map(e=>e.cardEntities).filter(e=>e.length>0).map(e=>e[0]).filter(e=>e.isOnFieldStrictly));l(this,"getMonstersOnFieldStrictly",()=>this.getCardsOnFieldStrictly().filter(e=>e.isOnFieldAsMonsterStrictly));l(this,"getSpellTrapsOnFieldStrictly",()=>this.getCardsOnFieldStrictly().filter(e=>e.isOnFieldAsSpellTrapStrictly));l(this,"getPendulumScalesOnFieldStrictly",()=>this.getCardsOnFieldStrictly().filter(e=>{var i;return(i=e.origin.monsterCategories)==null?void 0:i.includes("Pendulum")}).filter(e=>e.isOnFieldAsSpellTrapStrictly).filter(e=>!e.status.spellCategory));l(this,"getPendingCardsOnField",()=>this.getCells(...X).map(e=>e.cardEntities).filter(e=>e.length>0).map(e=>e[0]).filter(e=>e.info.isPending));l(this,"getDyingCardsOnField",()=>this.getCells(...X).flatMap(e=>[...e.cardEntities,...e.xyzMaterials]).filter(e=>e.info.isDying));l(this,"getPendingMonstersOnField",()=>this.getPendingCardsOnField().filter(e=>e.kind==="Monster"));l(this,"getEntities",e=>this.getAllEntities().filter(i=>i.controller===e));l(this,"recalcLinkArrows",()=>{const e=this.getAllCells().filter(i=>i.isMonsterZoneLikeCell);e.some(i=>i.recalcLinkArrows)&&e.forEach(i=>i.recalcLinkArrows())});l(this,"canExtraLink",(e,i)=>{if(!e.linkArrows.length)return!1;const a=i.map(u=>u.material),r=this.getCells("ExtraMonsterZone").filter(u=>u.isAvailable||a.includes(u.cardEntities[0]));if(r.length!==1)return!1;const n=r[0],s=e.linkArrows.map(u=>this.cells[n.row+u.offsetRow][n.column+u.offsetColumn]);let o=n.linkArrowSources.filter(u=>!a.includes(u)).filter(u=>s.includes(u.fieldCell));if(!o.length)return!1;let c=-1;for(;c!==o.length;){const u=o.flatMap(d=>d.coLinkedEntities).filter(d=>!a.includes(d));if(u.some(d=>d.fieldCell.cellType==="ExtraMonsterZone"))return!0;o=[...o,...u].getDistinct(),c=o.length}return!1});l(this,"drawAtSameTime",async(e,i,a,r,n,s)=>{const o=[],c=[],u=[e.draw(i,n,s),a.draw(r,n,s)].map(d=>d.catch(p=>{p instanceof B?p.winner&&o.push(p.winner):c.push(p)}));if(await Promise.all(u),c.length)throw new v("ドロー処理で想定されない例外が発生した。",e,i,a,r,n,...c);if(o.length!==0)throw o.length===1?new B(o[0],`${o[0].getOpponentPlayer().name}がデッキからドローできなかった。`):new B(void 0,"お互いにデッキからカードをドローできなかった。")});l(this,"sendToGraveyard",async(e,i,a,r,n,s,o,c)=>{if(r>0&&a.length<r)return;const u=await this.duel.view.waitSelectEntities(i,{selectables:a,qty:r,validator:n,cancelable:c??!1},e);if(u)return await D.sendManyToGraveyard(u.map(d=>({entity:d,movedAs:s,movedBy:o,activator:i}))),this.duel.log.info(`${u.map(d=>d.status.name).join(", ")}を墓地に送った（${s.getDistinct().join(", ")}）。`,i),u});this.duel=e,this.cells=[...Array(7)].map(()=>[]);for(const i of Object.keys(at).map(Number))for(const a of Object.keys(at[i]).map(Number))this.cells[i][a]=new Fa(this,i,a,i<3?e.duelists.Above:i>3?e.duelists.Below:a<2?e.duelists.Above:a>4?e.duelists.Below:void 0);this.summonFilterPool=new dr,this.procFilterPool=new Ba,this.numericStateOperatorPool=new qa,this.statusOperatorPool=new cr,this.damageFilterPool=new gr,this.moveLog=new Qa(this),this.duel.clock.onStageChange.append(this.distributeOperators)}get stickyOperatorPools(){return[this.procFilterPool,this.statusOperatorPool,this.numericStateOperatorPool,this.summonFilterPool,this.damageFilterPool]}}const Dt=t=>{let e=[];do{const i=t.qty&&t.qty>0?t.qty:Math.floor(Math.random()*t.selectables.length+1);e=t.selectables.randomPickMany(i)}while(!t.validator(e));return e};class wr{constructor(e){l(this,"onStateChangeEvent",new F);l(this,"_stateLog",[]);l(this,"_state");this._stateLog.push({state:e,timestamp:new Date}),this._state=e}get stateLog(){return this._stateLog}get wasSpawnedAt(){return this.stateLog[0].timestamp}get onStateChange(){return this.onStateChangeEvent.expose()}get state(){return this._state}set state(e){this._stateLog.push({state:e,timestamp:new Date}),this._state=e,this.onStateChangeEvent.trigger(e)}}class xt{constructor(e,i){l(this,"_dispose");l(this,"_commit");l(this,"commit",()=>this._commit());this._dispose=e,this._commit=i}[Symbol.dispose](){this._dispose()}[Symbol.for("Symbol.dispose")](){this._dispose()}}class br{constructor(e){l(this,"onUpdateEvent",new F);l(this,"nextSeq");l(this,"records",[]);l(this,"_state","Opened");l(this,"pooledRecords",[]);l(this,"duel");l(this,"openTransaction",()=>this._state!=="Opened"?(console.info("ログの二重トランザクションを開始しようとしたため、ダミーを返す。"),new xt(()=>{},()=>{})):(this._state="Pending",new xt(this.closeTransaction,this.commit)));l(this,"commit",()=>{if(this._state!=="Pending")throw new v("DuelLog is not in Pending state.");this.records.push(...this.pooledRecords),this.pooledRecords=[],this.onUpdateEvent.trigger(this.nextSeq-1)});l(this,"closeTransaction",()=>{this._state="Opened",this.pooledRecords=[],this.onUpdateEvent.trigger(this.nextSeq-1)});l(this,"dispose",()=>{this.onUpdateEvent.clear()});l(this,"error",e=>{const i=["エラー発生"];e instanceof Error?(i.push("-- エラーメッセージ --"),i.push(e.message),e instanceof v&&(i.push("-- 関連オブジェクト --"),e.items.forEach(a=>i.push(JSON.stringify(a)))),i.push("-- エラー名称 --"),i.push(e.name||"エラー名称取得失敗"),i.push("-- スタックトレース --"),i.push(e.stack||"スタックトレース取得失敗")):(i.push("-- エラー型特定失敗 --"),i.push(JSON.stringify(e))),console.error(e),console.error(i),this.write("error","System",i,void 0)});l(this,"warn",e=>{this.write("warn","System",["【注意】",e],void 0)});l(this,"info",(e,i)=>{this.write("info","Others",[e],i)});l(this,"pushChainBlockHeaderLog",(e,i,a)=>{this.write("info","ChainBlockHeader",[a],e,{chainNumber:i})});l(this,"pushMoveLog",(e,i,a,r)=>{const n=a.cellType==="WaitingRoom"?void 0:a,s=r.cellType==="WaitingRoom"?void 0:r;if(!n&&!s)throw new v("移動元、移動先ともにWaitingRoomが指定されている。",e,i,a,r);const o=n&&s?"EntityMove":s?"EntityAppear":"EntityDisappear";this.write("info",o,[],e,{mainEntity:i,from:n,to:s})});l(this,"write",(e,i,a,r,n={})=>{const s=a.join(`
`),o={seq:this.nextSeq++,lvl:e,type:i,clock:this.duel.clock.getClone(),text:s,duelist:r,subEntities:[],...n};this._state==="Opened"||e!=="info"?(this.records.push(o),this.onUpdateEvent.trigger(this.nextSeq-1)):this.pooledRecords.push(o)});this.nextSeq=0,this.duel=e}get onUpdate(){return this.onUpdateEvent.expose()}get lastRecord(){return this.records.slice(-1)[0]}}class Je{constructor(e){l(this,"onUpdateEvent",new F);l(this,"_state","Disable");l(this,"defaultArgs");l(this,"_args");l(this,"resolve",()=>{});l(this,"show",e=>{this._args=e,this._state="Shown",this.onUpdateEvent.trigger();const{promise:i,resolve:a}=Yt();return this.resolve=r=>{this._state="Disable",a(r),this.resolve=()=>{},this.onUpdateEvent.trigger()},i});l(this,"cancel",()=>{console.log(this),this.args.cancelable&&(this._state!=="Disable"&&this.resolve(void 0),this.terminate())});l(this,"terminate",()=>{this._state="Disable",this._args=this.defaultArgs,this.resolve=()=>{}});this.defaultArgs=e,this._args=e}get onUpdate(){return this.onUpdateEvent.expose()}get state(){return this._state}get args(){return this._args}}class kr{constructor(e){l(this,"onUpdateEvent",new F);l(this,"actionSelector",new Je({title:"カード操作を選択。",activator:void 0,dummyActionInfos:[],cancelable:!1}));l(this,"entitySelector",new Je({title:"対象を選択",entitiesChoices:{selectables:[],validator:()=>!0,cancelable:!1},cancelable:!1,chainBlockInfos:[]}));l(this,"textSelector",new Je({title:"カード操作を選択。",choises:[],cancelable:!1}));l(this,"modals",[this.actionSelector,this.entitySelector,this.textSelector]);l(this,"view");l(this,"terminateAll",()=>{this.modals.forEach(e=>e.terminate()),this.onUpdateEvent.trigger()});this.view=e,this.modals.forEach(i=>i.onUpdate.append(()=>this.onUpdateEvent.trigger()))}get onUpdate(){return this.onUpdateEvent.expose()}}const Dr=[{seq:10,name:"Internet Explorer",key:"msie"},{seq:20,name:"Internet Explorer",key:"trident"},{seq:30,name:"Edge",key:"edge"},{seq:40,name:"Google Chrome",key:"chrome"},{seq:50,name:"Safari",key:"safari"},{seq:60,name:"Mozilla Firefox",key:"firefox"},{seq:70,name:"Opera",key:"opera"}],xr=[{seq:10,name:"Microsoft Windows",key:"windows nt"},{seq:20,name:"Android",key:"android"},{seq:30,name:"iOS",key:"iphone"},{seq:40,name:"iOS",key:"ipad"},{seq:50,name:"macOS",key:"mac os x"}],Ee=window.navigator.userAgent.toLowerCase();var qt;const Ar=((qt=Dr.find(t=>Ee.indexOf(t.key)!==-1))==null?void 0:qt.name)??"Unknown Browser";var Rt;const ht=((Rt=xr.find(t=>Ee.indexOf(t.key)!==-1))==null?void 0:Rt.name)??"Unknown OS",ti=Ee.indexOf("iphone")!==-1||ht==="Android"&&Ee.indexOf("mobile")!==-1,Mr=Ee.indexOf("ipad")!==-1||ht==="Android"&&!ti,At=ti?"Smart Phone":Mr?"Tablet Device":"PC",Ye={canDragElement:At==="PC",text:`${At} ${ht} ${Ar}`};class Pr{constructor(e){l(this,"onDuelUpdateEvent",new F);l(this,"requireUpdate",()=>{this.onDuelUpdateEvent.trigger()});l(this,"onWaitStartEvent",new F);l(this,"onWaitEndEvent",new F);l(this,"onDragStartEvent",new F);l(this,"onDragEndEvent",new F);l(this,"onAnimationStartEvent",new F);l(this,"onShowCardEntityEvent",new F);l(this,"duel");l(this,"modalController");l(this,"_message");l(this,"waitMode");l(this,"infoBoardState");l(this,"infoBoardCell");l(this,"getCell",(e,i)=>this.duel.field.cells[e][i]);l(this,"showCardInfo",(e,i)=>{this.onShowCardEntityEvent.trigger({card:e,mode:i})});l(this,"dispose",()=>{this.onDragStartEvent.clear(),this.onDragEndEvent.clear(),this.onDuelUpdateEvent.clear(),this.onWaitStartEvent.clear(),this.onWaitEndEvent.clear()});l(this,"waitFieldAction",async e=>{if(this.duel.getTurnPlayer().duelistType==="NPC"){const n=this.duel.getTurnPlayer().selectActionForNPC(e,[]);return n?{actionInfo:n}:{phaseChange:this.duel.nextPhaseList[0]}}const i=await this._waitDuelistAction(this.duel.getTurnPlayer(),e,"Free","",void 0,void 0,!1);if(!i.actionInfo)return{...i,actionInfo:void 0};const a={...i.actionInfo},r=e.find(n=>{var s;return((s=i.actionInfo)==null?void 0:s.originSeq)===n.originSeq});if(!r)throw new v("想定されない状態",e,i);return{...i,actionInfo:{dest:a.dest,battlePosition:a.battlePosition,action:r.action,originSeq:r.originSeq}}});l(this,"waitQuickEffect",async(e,i,a,r,n)=>{if(i.length===0)return;if(e.duelistType==="NPC")return e.selectActionForNPC(i,a);const s=[this.modalController.actionSelector.show({title:r,activator:e,dummyActionInfos:i,cancelable:n}),this._waitDuelistAction(e,i,"Modal",this.message,void 0,void 0,!1).then(u=>u.actionInfo)],o=await Promise.any(s);if(!o)return;this.infoBoardState="Default";const c=i.find(u=>o.originSeq===u.originSeq);if(!c)throw new v("想定されない状態",o);return{...c,dest:o.dest}});l(this,"waitSubAction",async(e,i,a,r=!1)=>{if(e.duelistType==="NPC")throw Error("Not implemented");const n=await this._waitDuelistAction(e,i,"Modal",a,void 0,void 0,r);if(n&&n.actionInfo)return n.actionInfo});l(this,"waitSelectEntities",async(e,i,a)=>{if(!i.selectables.length)return;if(i.qty&&i.selectables.length===i.qty)return[...i.selectables];if(e.duelistType==="NPC")return Dt(i);let r;i.selectables.some(s=>s.entityType==="Duelist")&&(r={...i,selectables:i.selectables.filter(s=>s.entityType==="Duelist").map(s=>s.fieldCell),qty:1,validator:s=>s.length===1});const n=await this._waitDuelistAction(e,[],"Modal",a,i,r,i.cancelable);return(n.selectedEntities||n.selectedCells)&&[...n.selectedEntities??[],...(n.selectedCells??[]).flatMap(s=>s.entities).filter(s=>s.entityType==="Duelist")]});l(this,"waitSelectNumber",async(e,i,a,r)=>{const n=await this.waitSelectText(e,a.getDistinct().toSorted().map(s=>({seq:s,text:s.toString()})),i,r);if(n)return n.seq});l(this,"waitYesOrNo",async(e,i)=>{const a=await this.waitSelectText(e,[{seq:0,text:"Yes"},{seq:1,text:"No"}],i,!1);return(a==null?void 0:a.seq)===0});l(this,"waitSelectText",async(e,i,a,r=!1)=>{if(e.duelistType==="NPC")return i.randomPick();const n=await this.modalController.textSelector.show({title:a,choises:i,cancelable:r});if(n===void 0){if(!r)throw new k(e,i,a,r);return}return i.find(s=>s.seq===n)});l(this,"waitAnimation",async e=>{var i;return this._message="",this.waitMode="Animation",window.getSelection&&((i=window.getSelection())==null||i.removeAllRanges()),this.onDuelUpdateEvent.trigger(),new Promise(a=>this.onAnimationStartEvent.trigger({...e,resolve:a}))});l(this,"waitTokenAnimation",async()=>{this.requireUpdate(),await Re(450)});l(this,"setDraggingActions",e=>{this.onDragStartEvent.trigger(e),this.requireUpdate()});l(this,"removeDraggingActions",()=>{this.onDragEndEvent.trigger()});l(this,"waitSelectAction",async(e,i,a,r)=>{var c;const n=i.map(u=>se.createDummyAction(u.entity,u.title,[],void 0,u.origin)),s=await this._waitDammyAction(e,n,a,r);if(!s)return;const o=(c=i.find(u=>u.origin.seq===s.originSeq))==null?void 0:c.origin;if(!o)throw new v("想定されない状態",i,s);return o});l(this,"waitSelectSummonDestination",async(e,i,a,r,n)=>{const s=a.length>1&&Ye.canDragElement?"カードを召喚先へドラッグ。":"表示形式を選択。";if(!a.length&&!r.length){if(n)return;throw new v("想定されない状態",e,i,a,r,n)}let o=[...r];for(;;){const c={dest:a.randomPick(),battlePosition:o[0]};if(o.length===1&&!Ye.canDragElement){const p=await this.waitSelectCell(e,a,n,"召喚先を選択。");return p?{...c,dest:p}:void 0}const u=o.map(p=>se.createDummyAction(i,p,a,p)),d=await this._waitDammyAction(e,u,s,n);if(!d)return;if(d.battlePosition&&(o=[d.battlePosition]),!(a.length>1&&!d.dest))return c.dest=d.dest??c.dest,c.battlePosition=d.battlePosition??c.battlePosition,c}});l(this,"waitSelectDestination",async(e,i,a,r,n,s=!1)=>{if(!a.length)return;if(a.length===1)return a[0];if(!Ye.canDragElement)return await this.waitSelectCell(e,a,s,r);let o=a.randomPick();const c=[se.createDummyAction(i,n,a,void 0)],u=await this._waitDammyAction(e,c,r,s);if(u)return o=u.dest??o,o});l(this,"_waitDammyAction",async(e,i,a,r=!1)=>{if(!i.length)return;const n=i.randomPick();let s={...n,dest:n.dest??n.dests.randomPick()};if(e.duelistType!=="NPC"){const o=[this.modalController.actionSelector.show({title:a,activator:e,dummyActionInfos:i,cancelable:r}),this.duel.view.waitSubAction(e,i,a,r)],c=await Promise.any(o);if(!c&&!r)throw new k(c,o);if(!c)return;s=c??s}return s});l(this,"waitSelectCell",async(e,i,a,r)=>i.length?e.duelistType==="NPC"?i.randomPick():(await this.waitSelectCells(e,{selectables:i,qty:1,validator:s=>s.length===1,cancelable:a},r)??[])[0]:void 0);l(this,"waitSelectCells",async(e,i,a)=>{if(!i.selectables.length)return;if(e.duelistType==="NPC")return Dt(i);const r=await this._waitDuelistAction(e,[],"Modal",a,void 0,i,i.cancelable);if((!r||!r.selectedCells)&&!i.cancelable)throw new k(e,i,a);return r.selectedCells});l(this,"_waitDuelistAction",async(e,i,a,r,n,s,o=!1)=>{for(this.waitMode=a,this._message=r;this.onDuelUpdateEvent.length<38;)console.log("this.onDuelUpdateEvent.length",this.onDuelUpdateEvent.length),await Re(1);this.onDuelUpdateEvent.trigger();const c=Yt(),u={resolve:c.resolve,activator:e,dummyActionInfos:i,chainBlockInfos:e.duel.chainBlockInfos,entitiesChoices:n,cellsChoices:s};console.info("wait start",u),this.onWaitStartEvent.trigger(u);const d=await c.promise;if(console.info("response",d),this.modalController.terminateAll(),this.waitMode="None",this.onWaitEndEvent.trigger(),d.surrender)throw new B(e.getOpponentPlayer(),`${e.profile.name}がサレンダーした。`);if(!o&&d.cancel)throw new v("キャンセル不可のアクションがキャンセルされた。",d,i,a,n,s);return this.infoBoardState="Default",d});this.duel=e,this._message="",this.waitMode="None",this.infoBoardState="Default",this.infoBoardCell=e.duelists.Below.getExtraDeck(),this.modalController=new kr(this)}get onDuelUpdate(){return this.onDuelUpdateEvent.expose()}get onWaitStart(){return this.onWaitStartEvent.expose()}get onWaitEnd(){return this.onWaitEndEvent.expose()}get onDragStart(){return this.onDragStartEvent.expose()}get onDragEnd(){return this.onDragEndEvent.expose()}get onAnimation(){return this.onAnimationStartEvent.expose()}get onShowCardEntity(){return this.onShowCardEntityEvent.expose()}get message(){var e;return(this._message||((e=this.duel.log.records.filter(i=>i.type==="Others"||i.type==="System").slice(-1)[0])==null?void 0:e.text))??""}}const lt=["turn","phaseSeq","stepSeq","stageSeq","chainSeq","chainBlockSeq","procSeq"];[...lt];const ze=class ze{constructor(){l(this,"onClockChangeEvents",{turn:new F,phaseSeq:new F,stepSeq:new F,stageSeq:new F,chainSeq:new F,chainBlockSeq:new F,procSeq:new F});l(this,"_turn",0);l(this,"_phaseSeq",0);l(this,"_stepSeq",0);l(this,"_stageSeq",0);l(this,"_chainSeq",0);l(this,"_chainBlockSeq",0);l(this,"_procSeq",0);l(this,"_totalProcSeq",0);l(this,"_periodKey");l(this,"_previousStartPoints",{turn:0,phaseSeq:0,stepSeq:0,stageSeq:0,chainSeq:0,chainBlockSeq:0,procSeq:0});l(this,"_currentStartPoints",{turn:0,phaseSeq:0,stepSeq:0,stageSeq:0,chainSeq:0,chainBlockSeq:0,procSeq:0});l(this,"setPhase",(e,i)=>{const a=Object.values(re).filter(r=>r.phase===i).find(r=>(r.step??"start")==="start");if(!a)throw new v("想定されない状態",this.period,i,re);i==="draw"?(this.turn>0&&e.log.info("ターン終了。",e.getTurnPlayer()),this._turn++,this._phaseSeq=0):(e.log.info(`フェイズ移行（${this.period.name}→${a.name}）`,e.getTurnPlayer()),this._phaseSeq++),this._stepSeq=0,this._stageSeq=0,this.periodKey=a.key});l(this,"setStep",(e,i)=>{const a=this.period.phase,r=Object.values(re).filter(n=>n.phase===a).find(n=>(n.step??"")===i);if(!r)throw new v("想定されない状態",this.period,i,re);this.period.name!==r.name&&(e.log.info(`ステップ移行（${this.period.name}→${r.name}）`,e.getTurnPlayer()),this._stepSeq++,this._stageSeq=0,this.periodKey=r.key)});l(this,"setStage",(e,i)=>{const a=this.period,r=Object.values(re).filter(n=>n.phase===a.phase).filter(n=>n.step===a.step).find(n=>(n.stage??"")===i);if(!r)throw new v("想定されない状態",this.period,i,re);e.log.info(`タイミング移行（${this.period.name}→${r.name}）`,e.getTurnPlayer()),this._stageSeq++,this.periodKey=r.key});l(this,"incrementChainSeq",()=>{this._chainSeq++,this._chainBlockSeq=0,this._procSeq=0,this.incrementTotalProcSeq()});l(this,"incrementChainBlockSeq",()=>{this._chainBlockSeq++,this._procSeq=0,this.incrementTotalProcSeq()});l(this,"incrementProcSeq",()=>{this._procSeq++,this.incrementTotalProcSeq()});l(this,"incrementTotalProcSeq",()=>{this._totalProcSeq++;let e=!0;lt.toReversed().forEach(i=>{e&&(this._previousStartPoints[i]=this.currentStartPoints[i],this._currentStartPoints[i]=this.totalProcSeq),e=e&&this[i]===0}),lt.toReversed().filter(i=>this._currentStartPoints[i]===this.totalProcSeq).filter(i=>i!=="procSeq").forEach(i=>this.onClockChangeEvents[i].trigger(this)),this.onClockChangeEvents.procSeq.trigger(this)});l(this,"toFullString",()=>`${this.totalProcSeq}(t${this.turn}-phs${this.phaseSeq}-stp${this.stepSeq}-stg${this.stepSeq}-c${this.chainSeq}-cb${this.chainBlockSeq}-prc${this.procSeq})`);l(this,"getClone",()=>({turn:this.turn,phaseSeq:this.phaseSeq,stepSeq:this.stepSeq,stageSeq:this.stageSeq,chainSeq:this.chainSeq,chainBlockSeq:this.chainBlockSeq,procSeq:this.procSeq,totalProcSeq:this.totalProcSeq,period:this.period}));l(this,"isSameTurn",e=>this.turn===e.turn);l(this,"isSameChain",e=>ze.isSameChain(this,e));l(this,"isPreviousChain",e=>this.turn===e.turn&&this.phaseSeq===e.phaseSeq&&this.stepSeq===e.stepSeq&&this.stageSeq===e.stageSeq&&this.chainSeq===e.chainSeq+1);l(this,"isPreviousStage",e=>this.turn===e.turn&&this.phaseSeq===e.phaseSeq&&this.stepSeq===e.stepSeq&&this.stageSeq===e.stageSeq+1);l(this,"isPreviousTurn",e=>this.turn===e.turn+1);l(this,"isPreviousProc",e=>this.totalProcSeq===e.totalProcSeq+1);this._periodKey="end"}get onTurnChange(){return this.onClockChangeEvents.turn.expose()}get onStageChange(){return this.onClockChangeEvents.stageSeq.expose()}get onProcSeqChange(){return this.onClockChangeEvents.procSeq.expose()}get previousStartPoints(){return this._previousStartPoints}get currentStartPoints(){return this._currentStartPoints}set periodKey(e){this._periodKey!==e&&(this._periodKey=e,this._chainSeq=0,this._chainBlockSeq=0,this._procSeq=0,this.incrementTotalProcSeq())}get periodKey(){return this._periodKey}get period(){return re[this.periodKey]}get turn(){return this._turn}get phaseSeq(){return this._phaseSeq}get stepSeq(){return this._stepSeq}get stageSeq(){return this._stageSeq}get chainSeq(){return this._chainSeq}get chainBlockSeq(){return this._chainBlockSeq}get procSeq(){return this._procSeq}get totalProcSeq(){return this._totalProcSeq}get isFirstChain(){return this.chainSeq===0}};l(ze,"isSameChain",(e,i)=>e.turn===i.turn&&e.phaseSeq===i.phaseSeq&&e.stepSeq===i.stepSeq&&e.stageSeq===i.stageSeq&&e.chainSeq===i.chainSeq);let ot=ze;class Fr{constructor(e){l(this,"onInsertEvent",new F);l(this,"nextSeq");l(this,"records",[]);l(this,"duel");l(this,"push",e=>{const i={seq:this.nextSeq++,clock:this.duel.clock.getClone(),chainBlockInfo:e};this.records.push(i),this.onInsertEvent.trigger(i)});this.nextSeq=0,this.duel=e}get onInsert(){return this.onInsertEvent.expose()}}class De{constructor(e,i){l(this,"duel");l(this,"phase");l(this,"_priorityHolder");l(this,"turnPlayer");l(this,"_chainBlockInfos",[]);l(this,"proceed",async()=>await this._proceed());l(this,"procSpellSpeed1",async()=>{this.priorityHolder=this.turnPlayer;let e=0;const i={Above:Number.MAX_VALUE,Below:Number.MAX_VALUE};for(;;){const a=this.priorityHolder.getEnableActions(["IgnitionEffect","QuickEffect","CardActivation","LingeringEffect"],["Normal","Quick","Counter"],[]);if(i[this.priorityHolder.seat]=a.filter(o=>o.action.isMandatory).length,Object.values(i).every(o=>o===0)&&e>1)break;const r=a.find(o=>o.action.isMandatory);let n=r?{action:r.action,originSeq:r.action.seq}:void 0,s=!n;if(this.priorityHolder.isTurnPlayer?e===0&&(s=!0):i[this.turnPlayer.seat]&&(s=!0),a.length&&(a.length>1||!n)&&(this.priorityHolder.chainConfig.noticeFreeChain||a.some(o=>o.action.isNoticedForcibly))&&(n=await this.duel.view.waitQuickEffect(this.priorityHolder,a,[],this.duel.clock.period.name,s)),n){if(await this.procChain({activator:this.priorityHolder,actionInfo:n},void 0)==="cancel")continue;if(!await this.procFreeChain())return!1;this.priorityHolder=this.turnPlayer,e=0;continue}this.priorityHolder=this.priorityHolder.getOpponentPlayer(),e++}return!0});l(this,"procFreeChain",async(e=()=>!0)=>{const i=this.duel.clock.period.key;for(;await this.procChain(void 0,void 0)!=="pass";)if(this.duel.clock.period.key!==i||!e())return!1;return!0});l(this,"procChain",async(e,i)=>{const a=this.chainBlockInfos.length===0;let r=e?[]:i??Object.values(this.duel.duelists).flatMap(s=>s.getEnableActions(["TriggerEffect"],[this.chainBlockInfos.length?"Quick":"Normal"],this.chainBlockInfos).map(o=>({activator:s,actionInfo:o,targetChainBlock:this.chainBlockInfos.slice(-1)[0]}))),n;if(e)n={activator:e.activator,action:e.actionInfo.action,dest:e.actionInfo.dest,targetChainBlock:void 0},this.priorityHolder=n.activator;else if(r.length>0){const s=await this.selectTriggerEffect(r);s?(r=r.filter(o=>o!==s),n={...s,action:s.actionInfo.action},this.priorityHolder=n.activator):r=[]}if(!n){let s=0;for(;s<2;){this.priorityHolder=this.priorityHolder.getOpponentPlayer();const o=["Counter"];this.chainBlockInfos.every(d=>d.action.spellSpeed!=="Counter")&&o.push("Quick");let u=this.priorityHolder.getEnableActions(["QuickEffect","CardActivation"],o,this.chainBlockInfos).some(d=>d.action.isNoticedForcibly)||!!this.attackingMonster;if(u||(this.chainBlockInfos.length?u=this.priorityHolder.chainConfig.noticeSelfChain||this.chainBlockInfos.slice(-1)[0].activator!==this.priorityHolder:u=this.priorityHolder.chainConfig.noticeFreeChain),u){const d=this.chainBlockInfos.some(f=>f.action.isWithChainBlock)?"チェーンして効果を発動しますか？":"クイックエフェクト発動タイミング。効果を発動しますか？",p=await this.duel.view.waitQuickEffect(this.priorityHolder,this.priorityHolder.getEnableActions(["QuickEffect","CardActivation"],o,this.chainBlockInfos),this.chainBlockInfos,d,!0);if(p){n={...p,activator:this.priorityHolder,targetChainBlock:this.chainBlockInfos.slice(-1)[0]};break}}s++}}if(console.info("selected action: ",n),n){const s=n.activator,o=await n.action.prepare(s,n.dest,n.targetChainBlock,this.chainBlockInfos,a,!1);if(!o)return"cancel";if(this.duel.chainBlockLog.push(o),this._chainBlockInfos.push(o),this.duel.clock.incrementProcSeq(),this.duel.clock.incrementChainBlockSeq(),r=r.filter(c=>c.actionInfo.action.seq!==(n==null?void 0:n.action.seq)).filter(c=>c.actionInfo.action.validateCount(c.activator,this.chainBlockInfos)),o.action.isChainable&&await this.procChain(void 0,r.length?r:void 0),await o.action.execute(o,this.chainBlockInfos),o.state==="done"||o.state==="failed")for(const c of[this.turnPlayer,this.nonTurnPlayer]){for(const u of c.getEnableActions(["Exodia"],["Normal"],[o]))await u.action.directExecute(c,o,!1);for(const u of c.getEnableActions(["AfterChainBlock"],["Normal"],[o])){await u.action.directExecute(c,o,!1);for(const d of c.getEnableActions(["Exodia"],["Normal"],[o]))await d.action.directExecute(c,o,!1)}}a?(await m.sendManyToGraveyardForTheSameReason(this._chainBlockInfos.filter(c=>c.action.playType==="CardActivation").filter(c=>!c.action.isLikeContinuousSpell).map(c=>c.action.entity).filter(c=>c.isOnFieldStrictly).filter(c=>c.face==="FaceUp"),["Rule"],void 0,void 0),this._chainBlockInfos.reset(),o.nextActionInfo&&await this.procChain({activator:o.activator,actionInfo:o.nextActionInfo},void 0),this.duel.clock.incrementChainSeq()):(o.nextActionInfo&&await o.nextActionInfo.action.directExecute(o.activator,void 0,!1),this.duel.clock.incrementChainBlockSeq())}return n?"done":"pass"});l(this,"selectTriggerEffect",async e=>{if(e.length>0)for(const i of[!0,!1])for(const a of[this.turnPlayer,this.nonTurnPlayer]){const r=e.filter(s=>s.actionInfo.action.isMandatory===i&&s.activator===a);if(r.length===0)continue;if(r.length===1&&i)return r[0];const n=await this.duel.view.waitQuickEffect(a,r.map(s=>s.actionInfo),this.chainBlockInfos,"トリガーエフェクトを選択。",!i);if(n)return r.find(s=>s.actionInfo.action===n.action)}});this.duel=e,this.phase=i,this.duel.clock.setPhase(this.duel,this.phase),this.turnPlayer=this.duel.getTurnPlayer(),this._priorityHolder=this.turnPlayer}set priorityHolder(e){this._priorityHolder=e}get priorityHolder(){return this._priorityHolder}get nonTurnPlayer(){return this.turnPlayer.getOpponentPlayer()}get chainBlockInfos(){return this._chainBlockInfos}}class Nr extends De{constructor(i,a){super(i,a);l(this,"_attackingMonster");l(this,"_targetForAttack");l(this,"declareAttack",(i,a,r=!1)=>{var o;this._attackingMonster=i,this._targetForAttack=a;let n=" ("+((o=a.battlePosition==="Attack"?a.atk:a.def)==null?void 0:o.toString())+")";a.face==="FaceDown"&&(n=" (????)"),a.entityType==="Duelist"&&(n="");const s=r?"攻撃対象再選択":"攻撃宣言";r||i.info.attackDeclareCount++,this.duel.log.info(`${s}:${i.toString()} (${i.atk})⇒ ${a.toString()}${n}`,i.controller)});l(this,"_proceed",async()=>(await this.procBattlePhaseStartStep()&&await this.procBattlePhaseBattleStep(),await this.procBattlePhaseEndStep(),new ii(this.duel,"main2")));l(this,"procBattlePhaseStartStep",async()=>(this.setStep("start"),this.priorityHolder=this.turnPlayer,this._attackingMonster=void 0,this._targetForAttack=void 0,await this.procSpellSpeed1()));l(this,"procBattlePhaseBattleStep",async()=>{for(;;){this.setStep("battle"),this.priorityHolder=this.turnPlayer;const i=await this.duel.view.waitFieldAction(this.priorityHolder.getEnableActions(["DeclareAttack"],["Normal"],[]));if(i.phaseChange)break;if(i.actionInfo){if(await this.procChain({activator:this.priorityHolder,actionInfo:i.actionInfo},void 0)==="cancel")continue;for(;this.attackingMonster&&this.targetForAttack;){const r=this.duel.clock.totalProcSeq,n=this.nonTurnPlayer.getMonstersOnField(),s=await this.procChain(void 0,void 0);if(!this.attackingMonster)throw new v("想定されない状態");if(!this.canContinueBattle())break;const o=this.attackingMonster.getAttackTargets();if(n.some(c=>!c.isOnFieldAsMonsterStrictly)||this.nonTurnPlayer.getMonstersOnField().flatMap(c=>c.moveLog.records).filter(c=>c.movedAt.totalProcSeq>r).some(c=>!c.cell.isMonsterZoneLikeCell)?(this.duel.log.info("モンスターの数が増減したためバトルステップの巻き戻しが発生。"),this._targetForAttack=void 0):this.targetForAttack.entityType==="Duelist"&&o.every(c=>c!==this.targetForAttack)&&!this.attackingMonster.status.canDirectAttack&&(this.duel.log.info(`${this.attackingMonster.toString()}が直接攻撃能力を喪失したため、バトルステップの巻き戻しが発生。`),this._targetForAttack=void 0),!this.targetForAttack){if(!o.length){this.duel.log.info("攻撃可能な対象が存在しないため、攻撃対象選択を選択肢しなおせない。");break}if(this.turnPlayer.duelistType==="Player"&&!await this.duel.view.waitYesOrNo(this.turnPlayer,"攻撃対象選択を選択し直す？")){this.turnPlayer.writeInfoLog(`${this.attackingMonster.toString()}の攻撃宣言をキャンセル。`);break}const c=await this.turnPlayer.waitSelectEntity(o,"攻撃対象を選択。",!0);if(!c){this.turnPlayer.writeInfoLog(`${this.attackingMonster.toString()}の攻撃宣言をキャンセル。`);break}this.declareAttack(this.attackingMonster,c,!0);continue}if(s==="pass")break}this.attackingMonster&&this.targetForAttack&&await this.procBattlePhaseDamageStep()}}});l(this,"procBattlePhaseDamageStep",async()=>{if(!this.attackingMonster||!this.targetForAttack)throw new v("想定されない状態",this.attackingMonster,this.targetForAttack);if(this.targetForAttack.entityType!=="Duelist"&&!this.targetForAttack.isOnFieldAsMonsterStrictly)throw new v("想定されない状態",this.attackingMonster,this.targetForAttack);for(const i of[this.procBattlePhaseDamageStep1,this.procBattlePhaseDamageStep2,this.procBattlePhaseDamageStep3,this.procBattlePhaseDamageStep4,this.procBattlePhaseDamageStep5])if(!await i())return});l(this,"procBattlePhaseDamageStep1",async()=>(this.setStage("start"),await this.procFreeChain(this.canContinueBattle)));l(this,"procBattlePhaseDamageStep2",async()=>{if(!this.attackingMonster)throw new v("想定されない状態",this.attackingMonster);if(!this.targetForAttack)throw new v("想定されない状態",this.targetForAttack);const i=this.attackingMonster,a=this.targetForAttack;return this.setStage("beforeDmgCalc"),a.battlePosition==="Set"&&a.setBattlePosition("Defense",["Flip","Battle"],i,i.controller),await this.procFreeChain(this.canContinueBattle)});l(this,"procBattlePhaseDamageStep3",async()=>{if(!this.attackingMonster)throw new v("想定されない状態",this.attackingMonster);if(!this.targetForAttack)throw new v("想定されない状態",this.targetForAttack);const i=this.attackingMonster,a=this.targetForAttack;if(i.atk===void 0)throw new v("想定されない状態",this.attackingMonster,this.targetForAttack);if(this.setStage("dmgCalc"),!await this.procFreeChain(this.canContinueBattle))return!1;const r=i.atk,n=(a.battlePosition==="Attack"?a.atk:a.def)??0,s=this.turnPlayer,o=i.actions.find(d=>d.playType==="Battle");if(!o)throw new v(`${i.toString()}に戦闘アクションが定義されていない。`);const c=await o.prepare(s,a.fieldCell,void 0,[],!1,!1);if(!c)throw new k("戦闘アクションがキャンセルされた。");this.duel.chainBlockLog.push(c),a.entityType==="Duelist"?(s.writeInfoLog(`ダメージ計算：${i.toString()} (${r}) ⇒ ${a.toString()}`),i.controller.getOpponentPlayer().battleDamage(r-n,i,a,c)):(s.writeInfoLog(`ダメージ計算：${i.toString()} (${r}) ⇒ ${a.toString()} (${n})`),r>0&&r>n?a.battlePosition==="Attack"?i.controller.getOpponentPlayer().battleDamage(r-n,i,a,c):i.status.piercingTo.getDistinct().forEach(d=>d.battleDamage(r-n,i,a,c)):r<n&&i.controller.battleDamage(n-r,a,i,c),r>0&&(r>n||r===n&&a.battlePosition==="Attack")&&await m.tryMarkForDestroy([a],c),a.battlePosition==="Attack"&&r<=n&&await m.tryMarkForDestroy([i],c)),c.state=r>n?"done":"failed",i.info.battleLog.push({enemy:a,timestamp:this.duel.clock.getClone()}),a.info.battleLog.push({enemy:i,timestamp:this.duel.clock.getClone()});const u=Object.values(this.duel.duelists).filter(d=>d.lp<=0);if(u.length)throw u.length===1?new B(u[0].getOpponentPlayer(),`戦闘ダメージによって、${u[0].name}のライフポイントがゼロになった。`):new B(void 0,"戦闘ダメージによって、お互いのライフポイントがゼロになった。");return!0});l(this,"procBattlePhaseDamageStep4",async()=>(this.setStage("afterDmgCalc"),!!await this.procFreeChain()));l(this,"procBattlePhaseDamageStep5",async()=>(this.setStage("end"),await m.waitCorpseDisposal(this.duel),this.duel.clock.incrementChainSeq(),!!await this.procFreeChain()));l(this,"procBattlePhaseEndStep",async()=>{this.setStep("end"),this.priorityHolder=this.turnPlayer,await this.procSpellSpeed1()});l(this,"canContinueBattle",()=>this.attackingMonster?(this.attackingMonster.isOnFieldStrictly?this.attackingMonster.face==="FaceDown"?(this.duel.log.info(`${this.attackingMonster.toString()}が裏側守備表示になったため、戦闘が中断された。`),this._attackingMonster=void 0):this.attackingMonster.orientation==="Horizontal"&&(this.duel.log.info(`${this.attackingMonster.toString()}が守備表示になったため、戦闘が中断された。`),this._attackingMonster=void 0):(this.duel.log.info(`${this.attackingMonster.toString()}がフィールドに存在しなくなっため、戦闘が中断された。`),this._attackingMonster=void 0),!!this.attackingMonster):!1);l(this,"setStep",i=>{this.duel.clock.setStep(this.duel,i)});l(this,"setStage",i=>{this.duel.clock.setStage(this.duel,i)})}get nextPhaseList(){return["main2"]}get attackingMonster(){return this._attackingMonster}get targetForAttack(){return this._targetForAttack}}class ii extends De{constructor(i,a){super(i,a);l(this,"declareAttack",()=>{throw new v(`バトルフェイズ以外で攻撃宣言を実行した。${this.duel.clock.period.key}`)});l(this,"_proceed",async()=>{for(;;){this.priorityHolder=this.turnPlayer;const i=await this.duel.view.waitFieldAction(this.priorityHolder.getEnableActions(["NormalSummon","SpellTrapSet","SpecialSummon","FlipSummon","ChangeBattlePosition","IgnitionEffect","QuickEffect","CardActivation","LingeringEffect"],["Normal","Quick","Counter"],[]));if(i.actionInfo){if(await this.procChain({activator:this.priorityHolder,actionInfo:i.actionInfo},void 0)==="cancel")continue;await this.procFreeChain();continue}const a=i.phaseChange;if(a){this.priorityHolder=this.nonTurnPlayer;let r="done";for(;;){const n=await this.duel.view.waitQuickEffect(this.priorityHolder,this.priorityHolder.getEnableActions(["QuickEffect","CardActivation"],["Quick","Counter"],[]),[],"相手がフェイズを終了しようとしている。",!0);if(n&&(r=await this.procChain({activator:this.priorityHolder,actionInfo:n},void 0),r==="done"))break;return a==="battle1"?new Nr(this.duel,a):new ai(this.duel)}if(r==="done"){await this.procFreeChain();continue}}}})}get nextPhaseList(){return this.duel.phase==="main1"?["battle1","end"]:["end"]}get attackingMonster(){}get targetForAttack(){}}class Or extends De{constructor(i){super(i,"standby");l(this,"declareAttack",()=>{throw new v(`バトルフェイズ以外で攻撃宣言を実行した。${this.duel.clock.period.key}`)});l(this,"_proceed",async()=>(await this.procSpellSpeed1(),new ii(this.duel,"main1")))}get nextPhaseList(){return["main1"]}get attackingMonster(){}get targetForAttack(){}}class Br extends De{constructor(i){super(i,"draw");l(this,"declareAttack",()=>{throw new v(`バトルフェイズ以外で攻撃宣言を実行した。${this.duel.clock.period.key}`)});l(this,"_proceed",async()=>{if(Object.values(this.duel.duelists).forEach(i=>i.initForDrawPhase()),this.turnPlayer.writeInfoLog("ドローフェイズ開始。"),this.duel.clock.turn===1)this.turnPlayer.writeInfoLog("先攻プレイヤーはドローできない。");else{await this.turnPlayer.draw(1,void 0,void 0);for(const i of this.turnPlayer.getEnableActions(["Exodia"],["Normal"],[]))await i.action.directExecute(this.turnPlayer,void 0,!1)}return this.duel.field.getCardsOnFieldStrictly().forEach(i=>i.initForTurn()),await this.procSpellSpeed1(),new Or(this.duel)})}get nextPhaseList(){return["standby"]}get attackingMonster(){}get targetForAttack(){}}class ai extends De{constructor(i){super(i,"end");l(this,"declareAttack",()=>{throw new v(`バトルフェイズ以外で攻撃宣言を実行した。${this.duel.clock.period.key}`)});l(this,"_proceed",async()=>{for(await this.procSpellSpeed1();;){const a=this.turnPlayer.getHandCell().cardEntities.length;if(a<7)break;await this.turnPlayer.discard(a-6,"Rule")}return this.turnPlayer.writeInfoLog("ターン終了。"),new Br(this.duel)})}get nextPhaseList(){return["draw"]}get attackingMonster(){}get targetForAttack(){}}const Lr=["PlayFirst","DrawFirst","Random"],dl={PlayFirst:"先攻",DrawFirst:"後攻",Random:"ランダム"};class B extends Error{constructor(i,a){super(i?`デュエルが終了した。勝者：${i.profile.name}`:"デュエルが終了した。ドロー。");l(this,"winner");l(this,"message");this.winner=i,this.message=a}}class v extends Error{constructor(i,...a){super(i);l(this,"message");l(this,"items");this.message=i,this.items=a}}class k extends v{constructor(...e){super("キャンセル不可のアクションがキャンセルされた。",...e)}}class pl{constructor(e,i,a,r=[],n,s,o,c=[],u="Random"){l(this,"onDuelEndEvent",new F);l(this,"view");l(this,"log");l(this,"chainBlockLog");l(this,"field");l(this,"clock");l(this,"duelists");l(this,"_facilitator");l(this,"isEnded");l(this,"winner");l(this,"reasonOfEnd","");l(this,"coin",!1);l(this,"startMode");l(this,"declareAttack",(...e)=>this._facilitator.declareAttack(...e));l(this,"getTurnPlayer",()=>this.clock.turn%2===0?this.secondPlayer:this.firstPlayer);l(this,"getNonTurnPlayer",()=>this.clock.turn%2===0?this.firstPlayer:this.secondPlayer);l(this,"main",async()=>{console.info("main start!"),this.coin=this.startMode==="PlayFirst"?!0:this.startMode==="DrawFirst"?!1:Math.random()>.5;const e=Hs(...Object.values(this.duelists).flatMap(i=>i.deckInfo.cardNames).getDistinct()).reduce((i,a)=>(i[a.name]=a,{...i}),{});for(const i of Object.values(this.duelists))i.pushDeck(e),i.getDeckCell().shuffle(),i.initHand.length&&i.initHand.forEach(a=>{const r=i.getDeckCell().cardEntities.find(n=>n.origin.name===a);if(!r){this.log.info(`初手操作により${a}を手札に加えようとしたが、デッキに存在しない。`);return}r.addToHand(["System"],void 0,void 0),this.log.info(`初手操作により${r.toString()}を手札に加えた`,i)}),await i.draw(5-i.getHandCell().cardEntities.length,void 0,void 0);this.log.info(`【デュエル開始】${this.firstPlayer.profile.name} V.S. ${this.secondPlayer.profile.name}`),this.log.info(`先攻：${this.firstPlayer.profile.name} 後攻：${this.secondPlayer.profile.name}`);try{for(const i of Object.values(this.duelists))for(const a of i.getEnableActions(["Exodia"],["Normal"],[]))await a.action.directExecute(i,void 0,!1);for(;!this.isEnded&&(this._facilitator=await this._facilitator.proceed(),!(this.clock.turn>1e3)););}catch(i){i instanceof B?(this.chainBlockLog.records.forEach(a=>{a.chainBlockInfo.state==="ready"?a.chainBlockInfo.state="failed":a.chainBlockInfo.state==="processing"&&(a.chainBlockInfo.state="done")}),this.clock.incrementChainSeq(),console.info(i),this.isEnded=!0,this.winner=i.winner,this.reasonOfEnd=i.message,this.log.info(i.winner?`デュエル終了。勝者${i.winner.profile.name}。${i.message}`:`デュエル終了。引き分け。${i.message}`),this.view.requireUpdate(),this.onDuelEndEvent.trigger()):i instanceof Error&&this.log.error(i)}finally{this.log.dispose()}});l(this,"executeSystemPeriodActions",()=>{Object.values(this.duelists).forEach(e=>e.getEnableActions(["SystemPeriodAction"],["Normal"],[]))});this.clock=new ot,this.isEnded=!1,this.startMode=u,this.duelists={Below:new He(this,"Below",e,i,a,r),Above:new He(this,"Above",n,s,o,c)},this.field=new Er(this),this.clock.onStageChange.append(this.executeSystemPeriodActions),this.view=new Pr(this),this.log=new br(this),this.chainBlockLog=new Fr(this),this._facilitator=new ai(this)}get onDuelEnd(){return this.onDuelEndEvent.expose()}get phase(){return this.clock.period.phase}get step(){return this.clock.period.step}get stage(){return this.clock.period.stage}get nextPhaseList(){return this.facilitator.nextPhaseList}get chainBlockInfos(){return this.facilitator.chainBlockInfos}get attackingMonster(){return this.facilitator.attackingMonster}get targetForAttack(){return this.facilitator.targetForAttack}get firstPlayer(){return this.coin?this.duelists.Below:this.duelists.Above}get secondPlayer(){return this.coin?this.duelists.Above:this.duelists.Below}get facilitator(){return this._facilitator}}const G=class G{constructor(e){l(this,"id");l(this,"name");l(this,"description");l(this,"chainConfig");l(this,"previousGameMode");l(this,"previousNpcId");l(this,"previousNpcDeckId");l(this,"previousStartMode");l(this,"npcLvl",Number.MAX_VALUE);l(this,"npcType","None");l(this,"save",async e=>{const i={id:this.id,name:this.name,description:this.description,chainConfig:this.chainConfig??{noticeSelfChain:!1,noticeFreeChainPhase:!1,noticeFreeChainStep:!1,noticeAfterChainInMainPhase:!1},previousGameMode:this.previousGameMode??"Preset",previousNpcId:this.previousNpcId??Number.MIN_SAFE_INTEGER,previousStartMode:this.previousStartMode,previousNpcDeckId:this.previousNpcDeckId>-1?this.previousNpcDeckId:Number.MIN_SAFE_INTEGER,...e},a=await G.tblHeader.update(this.id,r=>({...r,...i}));return console.log(this.previousNpcDeckId,Number.MIN_SAFE_INTEGER,i,a),new G(a)});var i;this.id=e.id,this.name=e.name,this.description=e.description,this.chainConfig=e.chainConfig,this.previousGameMode=e.previousGameMode,this.previousNpcId=((i=Pt.find(a=>a.id===e.previousNpcId))==null?void 0:i.id)??qe(...Pt.map(a=>a.id)),this.previousStartMode=Lr.includes(e.previousStartMode)?e.previousStartMode:"Random",this.previousNpcDeckId=e.previousNpcDeckId}};l(G,"tblHeader"),l(G,"getOrCreateNew",async e=>{G.tblHeader||(G.tblHeader=new qr(e));const i=await G.tblHeader.getAll();if(i.length){let r=i[0];return r.chainConfig||(r={...r,chainConfig:{noticeSelfChain:!1,noticeFreeChain:!1}}),new G(r)}const a=await G.tblHeader.insert({name:"あなた",description:"ここの文字列を何に使うかは未定。",chainConfig:{noticeSelfChain:!1,noticeFreeChain:!1},previousGameMode:"Preset",previousNpcId:0,previousNpcDeckId:Number.MIN_SAFE_INTEGER,previousStartMode:"Random"});return new G(a)});let Mt=G;class qr extends ft{constructor(i){super(i,"TblDuelistProfile");l(this,"_prepareInitialRecords",()=>[])}}let Ie=-1;const Pt=[{id:Ie--,name:"サンドバッグくん棒立ち",description:"攻撃宣言なし、強制効果以外の効果の発動なし。",npcLvl:0,npcType:"Normal"},{id:Ie--,name:"サンドバッグくん非暴力",description:"攻撃宣言なし。",npcLvl:100,npcType:"Normal"},{id:Ie--,name:"サンドバッグくん白帯",description:"とくに制限なし。",npcLvl:200,npcType:"Normal"},{id:Number.MIN_SAFE_INTEGER,name:"FTK or Die",description:"FTKに失敗すると敗北。",npcLvl:Number.MIN_SAFE_INTEGER,npcType:"FtkChallenge"}],Rr=(t,e)=>Array.from({length:e-t},(i,a)=>t+a);Array.prototype.shuffle=function(){return this.map(e=>({item:e,seq:Math.random()})).toSorted((e,i)=>e.seq-i.seq).map(e=>e.item)};Array.prototype.randomPickMany=function(t){return this.shuffle().slice(0,t)};Array.prototype.randomPick=function(){return this.shuffle().slice(0,1)[0]};Array.prototype.reset=function(...t){this.splice(0),this.push(...t)};Array.prototype.union=function(t){return this.filter(e=>t.find(i=>e===i))};Array.prototype.getAllOnOffPattern=function*(){const t=[[]];yield[];for(const e of this){const i=t.map(a=>[...a,e]);yield*i,t.push(...i)}};Array.prototype.getDistinct=function(){return Array.from(new Set(this))};Array.prototype.distinct=function(){this.reset(...this.getDistinct())};const fl=["noticeSelfChain","noticeFreeChain"],gl={noticeSelfChain:"セルフチェーン",noticeFreeChain:"フリーチェーン"},ge=class ge{constructor(e,i,a,r,n,s=[]){l(this,"duel");l(this,"seat");l(this,"profile");l(this,"deckInfo");l(this,"info");l(this,"infoOrigin");l(this,"status");l(this,"statusOrigin");l(this,"duelistType");l(this,"lifeLog");l(this,"actionBlackListForNPC");l(this,"_lp");l(this,"initHand");l(this,"chainConfig");l(this,"writeInfoLog",e=>this.duel.log.info(e,this));l(this,"writeChainBlockHeaderLog",(e,i)=>this.duel.log.pushChainBlockHeaderLog(this,e,i));l(this,"initForDrawPhase",()=>{this.info={...this.infoOrigin}});l(this,"canDiscard",e=>(this.status.canDiscardAsCost&&console.log(e),!0));l(this,"canSendToGraveyard",e=>(console.log(e),!0));l(this,"canRelease",e=>(console.log(e),!0));l(this,"canTryBanish",(e,i,a)=>this.entity.procFilterBundle.filter([i],this,this.entity,a,[e]));l(this,"battleDamage",(e,i,a,r)=>{const n=mr(e,r.activator,this,i,a,r.action);return this.damage(i,n)});l(this,"effectDamage",(e,i)=>ge.effectDamage([{to:this,point:e}],i));l(this,"_effectDamage",(e,i)=>this.damage(i.action.entity,yr(e,i,this)));l(this,"damage",(e,i)=>{const a=[];if(i.point){const r=i.damageType==="Heal"?i.point:i.point*-1;a.push(this.setLp(this._lp+r,e,i.damageType))}return i.damageToOpponent1&&a.push(this.getOpponentPlayer().setLp(this._lp-i.damageToOpponent1,e,i.damageType)),i.damageToOpponent2&&a.push(this.getOpponentPlayer().setLp(this._lp-i.damageToOpponent2,e,i.damageType)),a});l(this,"lostLp",(e,i)=>this.setLp(this._lp-e,i,"Lost"));l(this,"payLp",(e,i)=>{const a=this.setLp(this._lp-e,i,"Pay");if(this.lp<=0)throw new B(this.getOpponentPlayer(),`${i.toString()}へのライフポイント支払いにより、${this.name}のライフポイントが0になった。`);return a});l(this,"heal",(e,i)=>this.setLp(this._lp+e,i,"Heal"));l(this,"setLp",(e,i,a)=>{const r={duelist:this,clock:this.duel.clock.getClone(),reason:a||"Set",beforeLp:this._lp,afterLp:e,entity:i};return this.lifeLog.push(r),this._lp=e,this.writeInfoLog(`ライフポイント変動：${r.afterLp-r.beforeLp}（${r.beforeLp} ⇒ ${r.afterLp}）`),r});l(this,"getOpponentPlayer",()=>this.duel.firstPlayer===this?this.duel.secondPlayer:this.duel.firstPlayer);l(this,"getCells",(...e)=>this.duel.field.getCells(...e).filter(i=>{var a;return i.owner===this||((a=i.cardEntities[0])==null?void 0:a.owner)===this}));l(this,"getHandCell",()=>this.getCells("Hand")[0]);l(this,"getDeckCell",()=>this.getCells("Deck")[0]);l(this,"getExtraDeck",()=>this.getCells("ExtraDeck")[0]);l(this,"getGraveyard",()=>this.getCells("Graveyard")[0]);l(this,"getFieldZone",()=>this.getCells("FieldSpellZone")[0]);l(this,"getBanished",()=>this.getCells("Banished")[0]);l(this,"getMonsterZones",()=>this.getCells("MonsterZone"));l(this,"getExtraMonsterZones",()=>this.getCells("ExtraMonsterZone"));l(this,"getSpellTrapZones",()=>this.getCells("SpellAndTrapZone"));l(this,"getXyzMaterialZone",()=>this.getCells("XyzMaterialZone")[0]);l(this,"getEmptyMonsterZones",()=>this.getMonsterZones().filter(e=>e.cardEntities.length===0));l(this,"getAvailableMonsterZones",()=>this.getMonsterZones().filter(e=>e.isAvailable));l(this,"getAvailableExtraMonsterZones",()=>this.getExtraMonsterZones().length===0?this.duel.field.getCells("ExtraMonsterZone").filter(e=>e.isAvailable):[]);l(this,"getAvailableSpellTrapZones",()=>this.getSpellTrapZones().filter(e=>e.isAvailable));l(this,"getMonstersOnField",()=>this.duel.field.getMonstersOnFieldStrictly().filter(e=>e.controller===this));l(this,"getSpellTrapsOnField",()=>this.duel.field.getSpellTrapsOnFieldStrictly().filter(e=>e.controller===this));l(this,"getPendingMonstersOnField",()=>this.duel.field.getPendingMonstersOnField().filter(e=>e.controller===this));l(this,"getPendulumScaleMonsters",()=>this.duel.field.getCardsOnFieldStrictly().filter(e=>e.isPendulumScale).filter(e=>e.controller===this));l(this,"getPendulumScales",()=>{const e=this.getPendulumScaleMonsters();if(e.length<2)return;const i=e.find(s=>s.fieldCell.column===(this.seat==="Below"?1:5)),a=e.find(s=>s.fieldCell.column===(this.seat==="Below"?5:1));if(!i||!a)throw new v("想定されない状態",e);const r=i.psR,n=a.psL;if(r===void 0||n===void 0)throw new v("想定されない状態",e);return r>n?{upperBound:r,lowerBound:n}:{upperBound:n,lowerBound:r}});l(this,"getEntiteisOnField",()=>this.duel.field.getCardsOnFieldStrictly().filter(e=>e.controller===this));l(this,"pushDeck",e=>{this.deckInfo.cardNames.map(i=>e[i]).filter(i=>i).forEach(i=>D.createCardEntity(this,i)),this.duel.log.info(`デッキをセット。メイン${this.getDeckCell().cardEntities.length}枚。エクストラ${this.getExtraDeck().cardEntities.length}枚。`,this)});l(this,"draw",async(e,i,a)=>{var s;if(e<1)return;const r=this.getDeckCell(),n=[];this.writeInfoLog(`デッキからカードを${e}枚ドロー。`);for(const o of Array(e)){if(!r.cardEntities.length)throw this.writeInfoLog(n.length>0?`デッキからカードを${e}枚ドローしようとしたが、${n.length}枚しかドローできなかった。${n}`:"デッキからカードをドローできなかった。"),new B(this.getOpponentPlayer(),`${this.name}がデッキからカードをドローできなかった。`);const c=r.cardEntities[0];await c.draw(i?["Effect"]:["Rule"],i,a),n.push(((s=c.origin)==null?void 0:s.name)||"!名称取得失敗!")}});l(this,"summon",async(e,i,a,r,n,s,o,c)=>(await this.summonMany(this,e,i,a,[{monster:r,posList:n,cells:s}],o,!1,1,d=>d.length===1,c)??[])[0]);l(this,"waitSelectNumberFromRange",(e,i,a,r)=>this.waitSelectNumber(e,Rr(i,a),r));l(this,"waitSelectNumber",(e,i,a)=>this.duel.view.waitSelectNumber(this,e,i,a));l(this,"waitSelectEntities",(e,i,a,r,n=!1)=>this.duel.view.waitSelectEntities(this,{selectables:e,qty:i,validator:a,cancelable:n},r));l(this,"waitSelectEntity",async(e,i,a=!1)=>{const r=await this.waitSelectEntities(e,1,n=>n.length===1,i,a);return r?r[0]:void 0});l(this,"waitYesNo",e=>this.duel.view.waitYesOrNo(this,e));l(this,"waitSelectText",(e,i,a=!1)=>this.duel.view.waitSelectText(this,e,i,a));l(this,"getEnableActions",(e,i,a)=>{var n;const r=((n=a.slice(-1)[0])==null?void 0:n.nextChainBlockFilter)??(()=>!0);return[...this.duel.field.getAllCardEntities(),this.entity].flatMap(s=>s.actions).filter(s=>s.canExecute(this)).filter(s=>i.includes(s.spellSpeed)).filter(s=>e.includes(s.playType)).filter(s=>r(this,s)).map(s=>s.validate(this,a)).filter(s=>s!==void 0)});l(this,"discard",async(e,i,a=()=>!0,r,n,s,o=!1)=>{const c=this.getHandCell().cardEntities.filter(a);if(c.length<e)return[];let u=[];if(c.length===e)u=c;else if((s||this).duelistType==="NPC")u=c.randomPickMany(e);else{const d=await this.duel.view.waitSelectEntities(s||this,{selectables:c,qty:e,validator:p=>p.length===e,cancelable:o},`${e}枚カードを捨てる。`);if(!d)return;u=d}return this.writeInfoLog(`手札からカードを${u.length}枚捨てた。${u.map(d=>d.toString())}。`),await m.discardManyForTheSameReason(u,["Discard",i],r,n),u});l(this,"getEnableSummonList",(e,i,a,r,n,s,o)=>{const c=this.duel.field.getCells("ExtraMonsterZone"),u=c.filter(p=>!s.map(f=>f.material).includes(p.cardEntities[0])).filter(p=>p.owner===this),d=[];return u.length&&d.push(...c.filter(p=>!u.includes(p)).filter(p=>p.isAvailable)),n.map(p=>({...p,summoner:this})).map(p=>{var f;return(i!=="LinkSummon"||!this.duel.field.canExtraLink(p.monster,s))&&(p.cells=p.cells.filter(h=>!d.includes(h))),(f=p.monster.status.monsterCategories)!=null&&f.includes("Link")&&(p.posList=p.posList.filter(h=>h==="Attack")),p}).map(p=>({...p,cells:p.cells.filter(f=>f.cardEntities.length===0||s.some(h=>h.material===f.cardEntities[0]))})).map(p=>{var f,h;if(p.monster.fieldCell.cellType==="ExtraDeck"){if((f=p.monster.status.monsterCategories)!=null&&f.includes("Link")||(h=p.monster.status.monsterCategories)!=null&&h.includes("Pendulum"))return{...p,cells:p.cells.filter(y=>y.cellType==="ExtraMonsterZone"||y.linkArrowSources.filter(w=>!s.map(g=>g.material).includes(w)).length)}}else return{...p,cells:p.cells.filter(y=>y.cellType!=="ExtraMonsterZone")};return p}).filter(p=>p.cells.length&&p.posList.length).map(p=>this.entity.summonFilterBundle.filter(e,i,a,r,p,s,o)).filter(p=>p.cells.length&&p.posList.length).map(p=>p.monster.summonFilterBundle.filter(e,i,a,r,p,s,o)).filter(p=>p.cells.length&&p.posList.length).map(p=>s.map(f=>f.material.summonFilterBundle).reduce((f,h)=>h.filter(e,i,a,r,f,s,o),p)).filter(p=>p.cells.length&&p.posList.length)});l(this,"prepareToSummonMany",async(e,i,a,r,n,s,o,c,u,d,p="特殊召喚するモンスターを選択。")=>{const f=this.getEnableSummonList(e,i,a,r,n,s,o);if(!f.length)return[];let h=f.map(w=>({...w,cells:[...w.cells],posList:[...w.posList]}));const y=[];for(;h.length&&y.length<(c??Number.MAX_SAFE_INTEGER);){const w=d&&!y.length||u(y.map(O=>O.monster));let g=h.randomPick();if(h.length>1){const O=await this.waitSelectEntity(h.map(U=>U.monster),p,w);if(!O)return y;g=h.find(U=>U.monster===O)??g}let M=[...g.posList].randomPick(),H=[...g.cells].randomPick();if((g.cells.length||g.posList.length)&&this.duelistType!=="NPC"){const O=await this.duel.view.waitSelectSummonDestination(g.summoner,g.monster,g.cells,g.posList,w);if(!O)return y;H=O.dest,M=O.battlePosition}y.push({summoner:this,monster:g.monster,pos:M,dest:H});const ue=H.cellType==="ExtraMonsterZone";h.forEach(O=>{O.cells=O.cells.filter(U=>!y.map(Pe=>Pe.dest).includes(U)),ue&&(O.cells=O.cells.filter(U=>U.cellType!=="ExtraMonsterZone"))}),h=h.filter(O=>O!==g).filter(O=>O.cells.length)}return y});l(this,"summonAll",(e,i,a,r,n,s,o,c,u)=>this.summonMany(e,i,a,r,n,s,o,n.length,d=>d.length===n.length,c,u));l(this,"summonOne",async(e,i,a,r,n,s,o,c,u)=>{const d=await this.summonMany(e,i,a,r,n,s,o,1,p=>p.length===1,c,u);if(d)return d[0]});l(this,"summonMany",(e,i,a,r,n,s,o,c,u,d,p)=>ge.summonMany(e,i,a,r,n.map(f=>({...f,summoner:this})),s,o,c,u,d,p));l(this,"selectAttackTargetForNPC",(e,i)=>{const a=e.atk??0,r=e.getAttackTargets();if(!r.length)return;const n=r.find(s=>s.entityType==="Duelist");return n&&(a>=qe(1600,this.getOpponentPlayer().lp)||e.info.battlePotisionChangeCount>0)?n:r.find(s=>s.battlePosition==="Attack"?a>=(s.atk??0):a<(s.battlePosition==="Set"?1e3:s.def??0)?!1:s.validateDestroy("Battle",this,e,i))});l(this,"selectActionForNPC",(e,i)=>{if(!e.length)return;const a=e.filter(g=>g.action.isMandatory);if(a.length)return a.randomPick();let r=e.filter(g=>!this.actionBlackListForNPC.includes(g.action.playType));console.log(r);const n=r.filter(g=>!Number.isNaN(g.action.priorityForNPC)).shuffle().sort((g,M)=>g.action.priorityForNPC-M.action.priorityForNPC);if(n.length)return n[0];const s=r.filter(g=>g.action.playType==="TriggerEffect");if(s.length)return s.randomPick();if(this.duel.phase!=="main1"&&this.duel.phase!=="main2"){const g=r.filter(M=>M.action.playType==="IgnitionEffect");if(g.length)return g.randomPick()}const o=r.filter(g=>g.action.playType==="DeclareAttack").sort((g,M)=>(g.action.entity.atk??0)-(M.action.entity.atk??0));if(o.length)return o.find(g=>this.selectAttackTargetForNPC(g.action.entity,g.action));r=r.filter(g=>g.action.playType!=="DeclareAttack");const c=r.length?i.slice(-1)[0]:void 0,u=r.filter(g=>g.action.negatePreviousBlock);if(c&&c.activator!==this&&u)return u.randomPick();if(r=r.filter(g=>!g.action.negatePreviousBlock),!r.length)return;const d=Le(...this.getOpponentPlayer().getMonstersOnField().filter(g=>g.battlePosition==="Attack").map(g=>g.atk??0),1600),p=qe(...this.getOpponentPlayer().getMonstersOnField().map(g=>g.battlePosition==="Set"?1500:(g.battlePosition==="Attack"?g.atk:g.def)??0),1500),f=this.getMonstersOnField(),h=Le(...f.filter(g=>g.battlePosition==="Attack").map(g=>g.atk??0),0);let y=r.filter(g=>g.action.playType!=="ChangeBattlePosition").filter(g=>g.action.entity.battlePosition!=="Attack").filter(g=>(g.action.entity.atk??0)>=d||(g.action.entity.atk??0)>p&&(g.action.entity.atk??0)>2300);if(y.length)return y.randomPick();r=r.filter(g=>g.action.playType!=="ChangeBattlePosition").filter(g=>g.action.playType!=="SpellTrapSet").filter(g=>g.action.entity.actions.filter(M=>M.playType!=="NormalSummon"&&M.playType!=="SpecialSummon").flatMap(M=>M.executableCells).every(M=>M!=="Hand")||g.action.playType!=="NormalSummon"&&g.action.playType!=="SpecialSummon");const w=[...r.filter(g=>g.action.playType==="NormalSummon").filter(g=>(g.action.entity.lvl??12)<5),...r.filter(g=>g.action.playType==="SpecialSummon"),...r.filter(g=>g.action.playType==="NormalSummon").filter(g=>(g.action.entity.atk??0)>2600||(g.action.entity.atk??0)>2300&&(g.action.entity.lvl??12)<7).filter(g=>(g.action.entity.atk??0)>=h),...r.filter(g=>g.action.entity.face==="FaceUp").filter(g=>g.action.entity.isOnFieldStrictly)];if(w.length)return w.randomPick();if(r=r.filter(g=>g.action.playType!=="NormalSummon").filter(g=>g.action.playType!=="SpecialSummon"),this.duel.phase==="main2"){if(y=e.filter(g=>g.action.playType==="ChangeBattlePosition").filter(g=>g.action.entity.battlePosition==="Attack").filter(g=>(g.action.entity.atk??0)<d||(g.action.entity.atk??0)>p&&(g.action.entity.atk??0)>2300),y.length)return y.randomPick();if(this.getAvailableSpellTrapZones.length>1)return e.filter(g=>g.action.playType==="SpellTrapSet").filter(g=>g.action.entity.kind!=="Spell"||g.action.entity.status.spellCategory==="QuickPlay").randomPick()}if(console.log(r),Math.random()<r.length/4)return r.randomPick()});this.duel=e,this.seat=i,this.profile=a,this.chainConfig=a.chainConfig??{noticeSelfChain:!0,noticeFreeChain:!0},this.duelistType=r,this.deckInfo=n,this.initHand=s,this.lifeLog=[],this.infoOrigin={maxRuleNormalSummonCount:1,ruleNormalSummonCount:0,ruleNormalSummonCountQty:0,effectNormalSummonCount:0,effectNormalSummonCountQty:0,specialSummonCount:0,specialSummonCountQty:0},this.info={...this.infoOrigin},this.statusOrigin={maxSpecialSummonCount:Number.MAX_VALUE,canDrawByEffect:!0,canSearchFromDeck:!0,canDiscardAsCost:!0,canDiscardAsEffect:!0},this.status={...this.statusOrigin},this._lp=8e3;const o=[];this.duelistType==="NPC"&&(this.profile.npcLvl<0&&o.push("NormalSummon","SpecialSummon","SpellTrapSet"),this.profile.npcLvl<1&&o.push("CardActivation","IgnitionEffect","TriggerEffect","QuickEffect"),this.profile.npcLvl<101&&o.push("DeclareAttack")),this.actionBlackListForNPC=o}get entity(){const e=this.getHandCell().entities.find(i=>i.entityType==="Duelist");return e||D.createPlayerEntity(this)}get name(){return this.profile.name}get lp(){return this._lp}get isTurnPlayer(){return this.duel.getTurnPlayer()===this}get canDraw(){return!0}get canAddToHandFromDeck(){return!0}get canAddToHandFromGraveyard(){return!0}get canSet(){return!0}};l(ge,"summonMany",async(e,i,a,r,n,s,o,c,u,d,p="特殊召喚するモンスターを選択。")=>{const f=n.map(y=>y.summoner).getDistinct(),h=[];for(const y of f){const w=await y.prepareToSummonMany(e,i,a,r,n.filter(g=>g.summoner===y),s,o,c,u,d,p);h.push(...w)}if(h.length)return h.forEach(y=>y.monster.info.materials.reset(...s)),await m.moveToXyzOwner(h[0].dest,h[0].monster,s.map(y=>y.material).filter(y=>y.kind==="XyzMaterial"),["XyzMaterial","Rule"],h[0].monster,e),await D.summonMany(h,i,a,r.entity,e),h.map(y=>y.monster)}),l(ge,"effectDamage",(e,i)=>{if(!e.length)return[];const a=e.flatMap(n=>n.to._effectDamage(n.point,i)),r=Object.values(e[0].to.duel.duelists).filter(n=>n.lp>0);if(r.length===1)throw new B(r[0],`${i.action.toFullString()}により、${r[0].getOpponentPlayer().name}のライフポイントが0になった。`);if(!r.length)throw new B(void 0,`${i.action.toFullString()}により、お互いのライフポイントが0になった。`);return a});let He=ge;const me=["Controller","Opponent"],Hr=["IfNormarlSummonSucceed","IfSpecialSummonSucceed","IfFusionSummonSucceed","IfRitualSummonSucceed","IfSynchroSummonSucceed","IfXyzSummonSucceed","IfLinkSummonSucceed","IfFlipSummonSucceed","IfFlip"],Zr=["IfSummonSucceedInAttackPosition","IfSummonSucceedInDefensePosition","IfSummonSucceedInSetPosition"],Gr=[...Hr,...Zr,"IfSentToGraveyard","IfBanished","IfReturnedToHand","IfReturnedToDeck","IfReturnedToExtraDeck","IfBanished","IfLeftField","IfDestroyed","IfDoneByBattle","IfDoneByEffect","IfDoneByOpponent","IfDoneJustNow"],Ft=["NormalSummon","AdvanceSummon","SpecialSummon","SpecialSummonFromDeck","SendToGraveyardFromDeck","Draw","SearchFromDeck","BanishFromDeck","BanishFromGraveyard","AddToHandFromGraveyard","ReturnToDeckFromGraveyard","SpecialSummonFromGraveyard","SpecialSummonFromBanished","ReturnToHandFromGraveyard","ReturnToHandFromField","BanishFromField","BanishFromHand","Destroy","DestroyMultiple","DestroyOnField","DestroyMultipleOnField","DestroyOnOpponentField","DestroyMultipleOnOpponentField","DestroyMonsterOnField","DestroyMonstersOnField","DestroySpellTrapOnField","DestroySpellTrapsOnField","SpecialSummonFromHand","SpecialSummonFromExtraDeck","SpecialSummonToken","DamageToOpponent","DamageToSelf","PayLifePoint","DiscordAsCost","DiscordAsEffect","RollDice","BounceToHand","NegateCardEffect","NegateCardActivation","NegateNormalSummon","NegateSpecialSummon",...Gr],$r=["discard","banish","release","returnToDeck","returnToHand","sendToGraveyard"],ne=class ne extends Te{constructor(i,a,r,n){super(i,a,r);l(this,"getTargetableEntities",(i,a)=>{if(this.definition.hasToTargetCards&&!this.definition.getTargetableEntities)throw new v(`処理定義が矛盾している。${this.toFullString()}`,this);return this.definition.getTargetableEntities?this.definition.getTargetableEntities(i,a):[]});l(this,"toString",()=>this.playType==="CardActivation"?"カードの発動":this.isWithChainBlock?`«${this.title}»`:this.title);l(this,"toFullString",()=>`${this.entity.toString()}の${this.toString()}`);l(this,"addhocMaterialLimitation");l(this,"getClone",i=>new ne(this.seq,this.entity,this.definition,i));l(this,"validate",(i,a,r=[],n)=>{const s=r.includes("IgnoreRegularCosts"),o=r.includes("IgnoreConditions"),c=r.includes("CopyEffectOnly");if(this.isWithChainBlock&&!this.entity.status.canActivateEffect||s&&this.needsToPayRegularCosts||!this.validateCount(i,a))return;const u=Le(0,...a.map(f=>f.chainNumber??-1)),d={index:a.length,chainNumber:this.isWithChainBlock?u+1:void 0,action:this,activator:i,targetChainBlock:a.slice(-1)[0],state:"unloaded",dest:void 0,ignoreCosts:!1};if(this.definition.canPayCosts&&!s&&!this.definition.canPayCosts(d,this.playType==="AfterChainBlock"?[]:a)||this.definition.meetsConditions&&!o&&!this.definition.meetsConditions(d,this.playType==="AfterChainBlock"?[]:a))return;if(this.definition.canExecute){const f=this.definition.canExecute(d,this.playType==="AfterChainBlock"?[]:a,n);if(f==="RemoveMe"){this.entity.actions.reset(...this.entity.actions.filter(h=>h.seq!==this.seq));return}if(!f)return}const p=[];if(this.definition.getDests&&p.push(...this.definition.getDests(d,this.playType==="AfterChainBlock"?[]:a)),this.playType==="CardActivation"&&!c){const f=this.getDestForCardActivation(i);if(!f)return;p.push(...f)}else this.playType==="SpellTrapSet"&&(this.entity.status.spellCategory==="Field"?p.push(i.getFieldZone()):p.push(...i.getAvailableSpellTrapZones()));return{action:this,dests:p,originSeq:this.seq}});l(this,"validateCount",(i,a)=>{const r=a.filter(s=>this.isSameGroup(s.action)).length;if(this.isOnlyNTimesPerDuel>0&&this.entity.field.duel.chainBlockLog.records.filter(s=>!s.chainBlockInfo.isNegatedActivationBy).filter(s=>this.isSameGroup(s.chainBlockInfo.action)).filter(s=>s.chainBlockInfo.activator===i).length+r>=this.isOnlyNTimesPerDuel||this.isOnlyNTimesPerTurn>0&&this.entity.field.duel.chainBlockLog.records.filter(s=>!s.chainBlockInfo.isNegatedActivationBy).filter(s=>this.isSameGroup(s.chainBlockInfo.action)).filter(s=>s.clock.turn===this.entity.field.duel.clock.turn).filter(s=>s.chainBlockInfo.activator===i).length+r>=this.isOnlyNTimesPerTurn||this.isOnlyNTimesPerChain>0&&r>=this.isOnlyNTimesPerChain)return!1;const n=r+this.entity.counterHolder.getActionCount(this);return!(this.isOnlyNTimesPerTurnIfFaceup>0&&n>=this.isOnlyNTimesPerTurnIfFaceup||this.isOnlyNTimesIfFaceup>0&&n>=this.isOnlyNTimesIfFaceup)});l(this,"getDestForCardActivation",i=>{var r;if(this.entity.info.isPending||this.entity.info.isDying||this.entity.info.isSettingSickness)return;if(this.entity.isOnFieldAsSpellTrapStrictly)return this.entity.face==="FaceDown"?[]:void 0;if(this.entity.fieldCell.cellType!=="Hand"||this.definition.canActivateCardDirectly||!i.isTurnPlayer)return;if(this.entity.status.spellCategory==="Field")return[i.getFieldZone()];let a=i.getAvailableSpellTrapZones();return(r=this.entity.status.monsterCategories)!=null&&r.includes("Pendulum")&&(a=a.filter(n=>n.isAvailableForPendulum)),a});l(this,"prepare",async(i,a,r,n,s,o)=>{var O,U;var Pe=[];try{let c=a;let u=s;const d=this.isWithChainBlock?Le(0,...n.map(x=>x.chainNumber??-1))+1:void 0;let p="";const f=[];if(this.playType==="CardActivation"||this.playType==="SpellTrapSet")if(this.entity.fieldCell.cellType==="Hand"){let x=this.entity.status.spellCategory==="Field"?[i.getFieldZone()]:i.getAvailableSpellTrapZones();if((O=this.entity.status.monsterCategories)!=null&&O.includes("Pendulum")&&(x=x.filter(W=>W.isAvailableForPendulum)),c&&x.includes(c)&&(x=[c],c=void 0),this.entity.status.spellCategory==="Field"){const W=i.getFieldZone().cardEntities;if(W.length){const Se=W[0];f.push(async()=>{await Se.sendToGraveyard(["Rule"],this.entity,i),i.writeInfoLog(`フィールド魔法の上書きにより、${Se.toString()}は墓地に送られた。`)}),u=!1}}let ae=x[0];if(x.length>1){ae=x.randomPick();const W=this.playType==="SpellTrapSet"?"セット":"カードの発動",Se=await this.duel.view.waitSelectDestination(i,this.entity,x,"カードを移動先へドラッグ",W,u);if(!Se)return;ae=Se}p+="手札から",this.playType==="SpellTrapSet"?p+="魔法・罠カードをセット。":p+=`${this.entity.toString()}を発動。`,u=!1,this.playType==="CardActivation"&&(this.entity.info.isPending=!0),(U=this.entity.status.monsterCategories)!=null&&U.includes("Pendulum")?f.push(()=>this.entity.activateAsPendulumScale(ae,["CardActivation"],this.entity,i)):this.playType==="CardActivation"?f.push(()=>this.entity.activateSpellTrapFromHand(ae,this.entity.kind,["CardActivation"],this.entity,i)):f.push(()=>this.entity.setAsSpellTrap(ae,this.entity.kind,["SpellTrapSet"],this.entity,i))}else this.entity.isOnField&&this.entity.face==="FaceDown"?(p+=`セットされていた${this.entity.toString()}を発動。`,u=!1,this.playType==="CardActivation"&&(this.entity.info.isPending=!0),f.push(()=>this.entity.setNonFieldMonsterPosition(this.entity.origin.kind,"FaceUp",["Rule"]))):p="";else d!==void 0&&(p+=`${this.toFullString()}を発動。`);const h=Ct(Pe,this.duel.log.openTransaction());p&&d&&i.writeChainBlockHeaderLog(d,p);for(const x of f)await x();const y={index:n.length,chainNumber:d,action:this,activator:i,targetChainBlock:r,isActivatedIn:this.entity.fieldCell,isActivatedAt:this.duel.clock.getClone(),enableCellTypes:[...this.entity.info.isEffectiveIn],costInfo:{},state:"ready",dest:c,ignoreCosts:!1};if(this.definition.payCosts&&!o){const x=await this.definition.payCosts(y,n,u);if(!x)return;y.costInfo=x,u=!1}const w=await this.definition.prepare(y,n,u);if(w===void 0)return;const g={...w};g.selectedEntities=g.selectedEntities??[];g.chainBlockTags=[...g.chainBlockTags??[],...this.definition.fixedTags??[]];g.chainBlockTags.some(x=>x.startsWith("SpecialSummon"))&&g.chainBlockTags.push("SpecialSummon");g.chainBlockTags=g.chainBlockTags.getDistinct();if(Qt.some(x=>x===this.playType)){const x=w.nextChainBlockFilter??(()=>!0);g.nextChainBlockFilter=(ae,W)=>W.negateSummon&&x(ae,W)}const M=new wr(y.state);const H={...g,...y};Object.keys(H).filter(x=>x!=="state").forEach(x=>{M[x]=H[x]});const ue=M;h.commit();return ue}catch(Ta){var _a=Ta,Ea=!0}finally{Tt(Pe,_a,Ea)}});l(this,"execute",async(i,a,r)=>{const n=(r==null?void 0:r.indirectly)??!1;if(i.action.isLikeContinuousSpell&&(i.action.entity.face==="FaceDown"||!i.action.entity.isOnField))return this.entity.info.isPending=!1,i.state="failed",!1;i.state="processing";let s=!1;if(!n&&i.chainNumber&&i.activator.writeChainBlockHeaderLog(i.chainNumber,`${i.action.toFullString()}の効果処理。`),i.isNegatedActivationBy)i.state="nagated",i.chainNumber&&i.activator.writeInfoLog(`チェーン${i.chainNumber}: ${i.action.toFullString()}を${i.isNegatedActivationBy.toFullString()}によって発動が無効にされた。`);else{let o=i.action.entity.isEffective,c="";if(o){if(i.isNegatedEffectBy)c=`チェーン${i.chainNumber}: ${i.action.toFullString()}を${i.isNegatedEffectBy.toFullString()}によって効果を無効にした。`,o=!1;else if(this.isWithChainBlock&&!i.enableCellTypes.includes(i.isActivatedIn.cellType)){const u=i.action.entity.moveLog.records.findLast(d=>d.face==="FaceDown"&&d.orientation==="Horizontal");o=(u&&i.activator.duel.clock.isSameChain(u.movedAt))??!1}}o?(s=await this.definition.execute(i,a),i.state=s?"done":"failed"):(i.state="nagated",i.chainNumber&&(c=c||`チェーン${i.chainNumber}: カードの効果が無効となっているため${i.action.toFullString()}の効果処理を行えない。`),i.activator.writeInfoLog(c)),this.entity.determine(),this.isOnlyNTimesPerTurnIfFaceup>0?this.entity.counterHolder.incrementActionCountPerTurn(this):this.isOnlyNTimesIfFaceup>0&&this.entity.counterHolder.incrementActionCount(this),this.definition.settle(i,a)}return s});l(this,"directExecute",async(i,a,r)=>{const n=await this.prepare(i,void 0,a,[],!1,r);if(!n)throw new v("想定されない状態",this,i,r);return i.duel.chainBlockLog.push(n),await this.execute(n,[])});l(this,"isSame",i=>this.entity.origin.name===i.entity.origin.name&&this.title===i.title);l(this,"isSameGroup",i=>this.actionGroupName?this.entity.origin.name===i.entity.origin.name&&this.actionGroupName===i.actionGroupName:this.isSame(i));l(this,"calcChainBlockTagsForDestroy",(i,a)=>{if(!Ft.length)return[];const r=["Destroy"];Ft.length>1&&r.push("DestroyMultiple");const n=a.filter(u=>u.isOnFieldStrictly);n.length&&(r.push("DestroyOnField"),n.length>1&&r.push("DestroyMultipleOnField"));const s=n.filter(u=>u.kind==="Monster");s.length&&(r.push("DestroyMonsterOnField"),s.length>1&&r.push("DestroyMonstersOnField")),n.filter(u=>u.kind!=="Monster").length&&(r.push("DestroySpellTrapOnField"),s.length>1&&r.push("DestroySpellTrapsOnField"));const c=n.filter(u=>u.controller!==i);return c.length&&(r.push("DestroyOnOpponentField"),c.length>1&&r.push("DestroyMultipleOnOpponentField")),r});this.addhocMaterialLimitation=n??(()=>!0)}get definition(){return super.definition}get playType(){return this.definition.playType}get spellSpeed(){return this.definition.spellSpeed}get needsToPayRegularCosts(){return this.definition.needsToPayRegularCost??!1}get hasToTargetCards(){return this.definition.hasToTargetCards??!1}get isWithChainBlock(){return gt.some(i=>i===this.playType)}get isChainable(){return Na.some(i=>i===this.playType)}get isLikeContinuousSpell(){return this.definition.isLikeContinuousSpell||this.entity.isLikeContinuousSpell&&this.playType==="CardActivation"}get isNoticedForcibly(){return this.isMandatory||this.definition.playType==="TriggerEffect"||this.definition.playType==="LingeringEffect"||this.negatePreviousBlock||this.negateSummon}get negatePreviousBlock(){return this.definition.negatePreviousBlock??!1}get negateSummon(){return this.definition.negateSummon??!1}get priorityForNPC(){return this.definition.priorityForNPC??Number.NaN}*getEnableMaterialPatterns(i){this.definition.getEnableMaterialPatterns&&(yield*this.definition.getEnableMaterialPatterns(i).filter(this.addhocMaterialLimitation))}};l(ne,"createNew",(i,a)=>new ne("AutoSeq",i,a)),l(ne,"createDummyAction",(i,a,r,n,s)=>({action:ne.createNew(i,{title:a,isMandatory:!1,executableCells:[],executablePeriods:[],executableDuelistTypes:[],playType:"Dammy",spellSpeed:"Dammy",getDests:()=>r,prepare:async()=>{},execute:async()=>!1,settle:async()=>!1}),dests:r,battlePosition:n,originSeq:(s==null?void 0:s.seq)??-1}));let se=ne;const S=async()=>({selectedEntities:[]}),ve=async(t,e,i)=>(t.activator.payLp(i,t.action.entity),{lifePoint:i}),jr=t=>t.activator.canSendToGraveyard([t.action.entity])&&t.action.entity.canBeSentToGraveyard(t.activator,t.action.entity,"SendToGraveyardAsCost",t.action),Ur=async t=>(await t.action.entity.sendToGraveyard(["Cost"],t.action.entity,t.activator),{sendToGraveyard:[t.action.entity]}),xe=t=>t.activator.canTryBanish(t.action.entity,"BanishAsCost",t.action)&&t.action.entity.canBeBanished("BanishAsCost",t.activator,t.action.entity,t.action),We=async t=>(await t.action.entity.banish(["Cost"],t.action.entity,t.activator),{banish:[t.action.entity]}),ri=(t,e,i=1)=>e.filter(a=>t.activator.canTryBanish(a,"BanishAsCost",t.action)).filter(a=>a.canBeBanished("BanishAsCost",t.activator,t.action.entity,t.action)).length>=i,ni=async(t,e,i,a)=>{const r=e.filter(s=>t.activator.canTryBanish(s,"BanishAsCost",t.action)).filter(s=>s.canBeBanished("BanishAsCost",t.activator,t.action.entity,t.action)),n=await t.activator.waitSelectEntities(r,a,i,"コストとして除外するカードを選択",!1)??[];return await m.banishManyForTheSameReason(n,["Cost"],t.action.entity,t.activator),{banish:n}},zr=(t,e=()=>!0,i=1,a=1)=>({canPayCosts:(...r)=>ri(r[0],t(...r),i),payCosts:(...r)=>ni(r[0],t(r[0],r[1]),e,i===a?i:void 0)}),Ae=(t,e,i=()=>!0,a=1)=>t.activator.getHandCell().cardEntities.filter(i).filter(r=>t.activator.canDiscard([r])).length>=a,Me=async(t,e,i=!1,a=()=>!0,r=1)=>({discard:await t.activator.discard(r,"Cost",a,t.action.entity,t.activator,t.activator,i)}),Vr=(t,e)=>Ae(t,e,i=>t.action.entity===i,1),Wr=(t,e,i=!1)=>Me(t,e,i,a=>t.action.entity===a),Qr=(t,e)=>t.action.getTargetableEntities(t,e).filter(i=>i.isOnField).map(i=>i.fieldCell),Xr=(t=()=>!0,e=["MonsterZone","ExtraMonsterZone"],i=1)=>({canPayCosts:(a,r)=>a.activator.getCells(...e).flatMap(s=>s.cardEntities).filter(s=>s.kind==="Monster").filter(s=>s.canBeReleased(a.activator,a.action.entity,["ReleaseAsCost"],a.action)).filter(s=>t(a,r,s)).length>=i,payCosts:async(a,r,n)=>{const s=a.activator.getCells(...e).flatMap(c=>c.cardEntities).filter(c=>c.kind==="Monster").filter(c=>c.canBeReleased(a.activator,a.action.entity,["ReleaseAsCost"],a.action)).filter(c=>t(a,r,c)),o=await a.activator.waitSelectEntities(s,i,c=>c.length===i,"コストとするモンスターを選択",n);if(o)return await m.releaseManyForTheSameReason(o,["Cost"],a.action.entity,a.activator),{release:o}}}),ce=async(t,e,i=C,a=n=>n.length===1,r=1)=>{const n=t.activator.getMonsterZones(),s=t.activator.getEnableSummonList(t.activator,"SpecialSummon",["Effect"],t.action,e.filter(u=>u.kind==="Monster").filter(u=>u.canBeTargetOfEffect(t)).map(u=>({monster:u,posList:i,cells:n})),[],!1),o=await t.activator.waitSelectEntities(s.map(u=>u.monster),r,a,"特殊召喚するモンスターを選択",!1)??[];if(!o.length)throw new k(t);const c=o.map(u=>u.fieldCell.cellType).getDistinct().filter(u=>u==="Graveyard"||u==="Banished").map(u=>u==="Graveyard"?"SpecialSummonFromGraveyard":"SpecialSummonFromBanished");return{selectedEntities:o,chainBlockTags:c}},J=async(t,e,i=["Attack","Defense"],a=!0)=>{const r=t.activator.getMonsterZones(),n=t.selectedEntities.filter(s=>!s.wasMovedAfter(t.isActivatedAt)).map(s=>({monster:s,posList:i,cells:r}));return a&&(n.length!==t.selectedEntities.length||r.length<n.length)?!1:(await t.activator.summonAll(t.activator,"SpecialSummon",["Effect"],t.action,n,[],!1,!1),!0)},Kr=async(t,e,i=["Attack","Defense"])=>{const a=t.activator.getMonsterZones(),r=e.map(n=>({monster:n,posList:i,cells:a}));return await t.activator.summonAll(t.activator,"SpecialSummon",["Effect"],t.action,r,[],!1,!1),!0},Z=(t,e={})=>({hasToTargetCards:!0,getTargetableEntities:t,canExecute:(i,a,r)=>t(i,a,r).filter(n=>n.canBeTargetOfEffect(i)).length>0&&(!e.canExecute||e.canExecute(i,a,r)),getDests:Qr,prepare:async(i,a,r)=>{let n=[];const s=e.tags??[],o=e.message??(e.do==="Destroy"?"破壊するカードを選択。":e.do==="Reborn"?"特殊召喚するモンスターを選択。":"対象とするカードを選択。");if(i.dest)n=[i.dest.cardEntities[0]];else{let c=i.action.getTargetableEntities(i,a).filter(d=>d.canBeTargetOfEffect(i));if(e.do==="Reborn"){const d=i.activator.getMonsterZones(),p=e.posList??C;c=i.activator.getEnableSummonList(i.activator,"SpecialSummon",["Effect"],i.action,c.filter(h=>h.kind==="Monster").filter(h=>h.canBeTargetOfEffect(i)).map(h=>({monster:h,posList:p,cells:d})),[],!1).map(h=>h.monster)}const u=await i.activator.waitSelectEntity(c,o,r);if(!u)return;n=[u]}return e.do==="Reborn"?s.push(...n.map(c=>c.fieldCell.cellType).getDistinct().filter(c=>c==="Graveyard"||c==="Banished").map(c=>c==="Graveyard"?"SpecialSummonFromGraveyard":"SpecialSummonFromBanished")):e.do==="Destroy"&&s.push(...i.action.calcChainBlockTagsForDestroy(i.activator,n)),{selectedEntities:n,chainBlockTags:s,appendix:[`対象：${n.map(c=>c.toString()).join(", ")}`]}}}),Jr=(t,e,i)=>({title:t,playType:"SystemPeriodAction",spellSpeed:"Normal",executableCells:K,executablePeriods:e,executableDuelistTypes:me,isMandatory:!0,canExecute:a=>(i(a),!1),prepare:S,execute:async()=>!0,settle:async()=>!0}),T={title:"セット",playType:"SpellTrapSet",spellSpeed:"Normal",executableCells:["Hand"],executablePeriods:["main1","main2"],executableDuelistTypes:["Controller"],isMandatory:!1,prepare:S,execute:async()=>!0,settle:async()=>!0},I={title:"発動",isMandatory:!1,playType:"CardActivation",spellSpeed:"Normal",executableCells:["Hand","SpellAndTrapZone","FieldSpellZone"],executablePeriods:["main1","main2"],executableDuelistTypes:["Controller"],prepare:S,execute:async()=>!0,settle:async()=>!0},Yr=async(t,e,i,a,r)=>{const n=t.action.getTargetableEntities(t,e);if(!n)throw new v("CardAction定義が正しくない",t);const s=await t.activator.waitSelectEntity(n,"装備対象モンスターを選択",i);if(s)return t.action.entity.info.equipedBy=s,t.action.entity.info.effectTargets[t.action.seq]=[s],{chainBlockTags:a??[],selectedEntities:[s],prepared:r}},si=async(t,e,i=()=>!0)=>{const a=t.selectedEntities[0];return t.action.entity.info.equipedBy=a,t.action.entity.info.effectTargets[t.action.seq]=[a],i(a,t.action.entity)?(t.action.entity.info.equipedBy=a,t.action.entity.info.validateEquipOwner=i,a.info.equipEntities.push(t.action.entity),!0):(await t.action.entity.ruleDestroy(),t.activator.writeInfoLog(`${a.toString()}が装備条件を満たさなくなったため、${t.action.entity.toString()}は破壊された。`),!1)},he=(t=()=>!0)=>({title:"発動",isMandatory:!1,playType:"CardActivation",spellSpeed:"Normal",executableCells:["Hand","SpellAndTrapZone"],executablePeriods:["main1","main2"],executableDuelistTypes:["Controller"],getTargetableEntities:e=>e.action.entity.field.getMonstersOnFieldStrictly().filter(i=>i.face==="FaceUp").filter(i=>i.canBeTargetOfEffect(e)).filter(i=>t(i,e.action.entity)),getDests:(e,i)=>e.action.getTargetableEntities(e,i).filter(a=>a.isOnFieldAsMonsterStrictly).map(a=>a.fieldCell),prepare:(e,i,a)=>Yr(e,i,a,[],void 0),execute:si,settle:async()=>!0});function*Ir(){yield{name:"連合軍",actions:[I,T],continuousEffects:[Be("発動","Spell",t=>[L.createContinuous("発動",e=>e.isSpawnedBy.isOnFieldStrictly&&e.isSpawnedBy.face==="FaceUp",t,(e,i)=>i.controller===e.isSpawnedBy.controller&&i.types.includes("Warrior")&&i.isOnFieldStrictly&&i.face==="FaceUp","attack","wip","Addition",(e,i,a)=>{if(!e.isEffective||i.face==="FaceDown")return a;const r=e.controller.getMonstersOnField().filter(n=>n.face==="FaceUp").filter(n=>n.types.includes("Warrior")||n.types.includes("Spellcaster")).length;return a+r*200})])]}}const li=Object.freeze(Object.defineProperty({__proto__:null,default:Ir},Symbol.toStringTag,{value:"Module"}));function*en(){const t=[{name:"リビングデッドの呼び声",pos:"Attack",filter:()=>!0},{name:"エンジェル・リフト",pos:"Attack",filter:e=>(e.lvl??12)<3},{name:"正統なる血統",pos:"Attack",filter:e=>{var i;return!!((i=e.status.monsterCategories)!=null&&i.includes("Normal"))}},{name:"蘇りし魂",pos:"Defense",filter:e=>{var i;return!!((i=e.status.monsterCategories)!=null&&i.includes("Normal"))}},{name:"リミット・リバース",pos:"Attack",filter:e=>(e.atk??9999)<=1e3,targetImmdAction:async(e,i)=>{if(!i.isOnFieldAsMonsterStrictly||i.face==="FaceDown")return"RemoveMe";if(e.entity.isEffective&&i.battlePosition==="Defense")return e.entity.controller.writeInfoLog(`${i.toString()}が守備表示になったため、${e.entity.toString()}とともに破壊される。`),await m.tryMarkForDestroy([i,e.entity],{action:e,activator:e.entity.controller,selectedEntities:[i]}),"RemoveMe"}}];for(const e of t)yield{name:e.name,actions:[{title:"発動",isMandatory:!1,playType:"CardActivation",spellSpeed:"Quick",executableCells:["SpellAndTrapZone"],executablePeriods:_,executableDuelistTypes:["Controller"],fixedTags:["SpecialSummonFromGraveyard","SpecialSummon"],canExecute:i=>{const a=i.activator.getMonsterZones();return i.activator.getEnableSummonList(i.activator,"SpecialSummon",["Effect"],i.action,i.activator.getGraveyard().cardEntities.filter(n=>n.kind==="Monster").filter(e.filter).filter(n=>n.canBeTargetOfEffect(i)).map(n=>({monster:n,posList:["Attack"],cells:a})),[],!1).length>0},prepare:i=>ce(i,i.activator.getGraveyard().cardEntities.filter(a=>a.kind==="Monster").filter(e.filter).filter(a=>a.canBeTargetOfEffect(i)),["Attack"]),execute:async(i,a)=>!await J(i,a,["Attack"])||!i.selectedEntities.length?!1:(i.action.entity.info.effectTargets[i.action.seq]=i.selectedEntities,!0),settle:async()=>!0},T],immediatelyActions:[{title:"自壊",executableCells:["SpellAndTrapZone"],executablePeriods:q,executableFaces:["FaceUp"],execute:async(i,a,r)=>{if(!r)return;const n=Object.values(i.entity.info.effectTargets).flatMap(o=>o);if(!n.length)return;const s=n[0];if(a===i.entity)return s.isOnFieldStrictly&&s.face==="FaceUp"&&i.entity.isEffective&&!r.to.isSpellTrapZoneLikeCell&&(i.entity.controller.writeInfoLog(`${i.entity.toString()}がフィールドを離れたため、対象モンスター${s.toString()}を破壊。`),await m.tryMarkForDestroy([s],{action:i,activator:i.entity.controller,selectedEntities:n})),"RemoveMe";a===s&&e.targetImmdAction&&e.targetImmdAction(i,a,r)}}]}}const oi=Object.freeze(Object.defineProperty({__proto__:null,default:en},Symbol.toStringTag,{value:"Module"}));function*tn(){yield{name:"昇天の黒角笛",actions:[{title:"発動",isMandatory:!1,playType:"CardActivation",spellSpeed:"Counter",executableCells:["SpellAndTrapZone"],executablePeriods:q,executableDuelistTypes:["Controller"],negateSummon:!0,fixedTags:["NegateSpecialSummon"],canExecute:t=>(t.targetChainBlock&&t.targetChainBlock.action.playType==="SpecialSummon"&&t.targetChainBlock.activator!==t.activator&&t.activator.duel.field.getPendingMonstersOnField().length===1)??!1,prepare:async()=>({selectedEntities:[]}),execute:async t=>{const e=m.negateSummonMany(t.action.entity,t.activator);return await m.tryDestroy(e,t),!0},settle:async()=>!0},T]}}const ci=Object.freeze(Object.defineProperty({__proto__:null,default:tn},Symbol.toStringTag,{value:"Module"}));function*an(){yield*[{name:"団結の力",filter:t=>t.isMonster&&t.face==="FaceUp",rate:800},{name:"魔導師の力",filter:t=>t.kind==="Spell"||t.kind==="Trap",rate:500}].map(t=>({name:t.name,actions:[he(),T],continuousEffects:[ke(t.name,"Spell",e=>e.info.equipedBy?[e.info.equipedBy]:[],e=>["attack","defense"].map(i=>L.createContinuous("発動",a=>a.isSpawnedBy.isOnFieldStrictly&&a.isSpawnedBy.face==="FaceUp",e,(a,r)=>r.isOnFieldStrictly&&r.face==="FaceUp",i,"wip","Addition",(a,r,n)=>{if(!a.isEffective)return n;const s=a.controller.getEntiteisOnField().filter(t.filter).length;return n+s*t.rate})))]})),yield{name:"早すぎた埋葬",actions:[{title:"発動",isMandatory:!1,playType:"CardActivation",spellSpeed:"Normal",executableCells:["Hand","SpellAndTrapZone"],executablePeriods:["main1","main2"],executableDuelistTypes:["Controller"],hasToTargetCards:!0,fixedTags:["SpecialSummonFromGraveyard"],canPayCosts:t=>t.activator.lp>=800,canExecute:t=>{const e=t.activator.getMonsterZones();return t.activator.getEnableSummonList(t.activator,"SpecialSummon",["Effect"],t.action,t.activator.getGraveyard().cardEntities.filter(a=>a.kind==="Monster").filter(a=>a.canBeTargetOfEffect(t)).map(a=>({monster:a,posList:["Attack"],cells:e})),[],!1).length>0},payCosts:(t,e)=>ve(t,e,800),prepare:async t=>{const e=await ce(t,t.activator.getGraveyard().cardEntities,["Attack"]);return e.chainBlockTags.push("PayLifePoint"),e},execute:async(t,e)=>t.action.entity.info.equipedBy?(await t.action.entity.ruleDestroy(),!1):await J(t,e,["Attack"])?si(t,e,(a,r)=>{var n;return(n=r.info.effectTargets[t.action.seq])==null?void 0:n.includes(a)}):(await t.action.entity.ruleDestroy(),!1),settle:async()=>!0},T],immediatelyActions:[{title:"自壊",executableCells:["SpellAndTrapZone"],executablePeriods:q,executableFaces:["FaceUp"],execute:async(t,e,i)=>{if(!i)return;const a=t.entity.info.equipedBy;if(a&&e===t.entity){a.isOnFieldStrictly&&a.face==="FaceUp"&&t.entity.isEffective&&!i.to.isSpellTrapZoneLikeCell&&i.movedAs.some(r=>r.endsWith("Destroy"))&&(t.entity.controller.writeInfoLog(`${t.entity.toString()}が破壊されたため、対象モンスター${a.toString()}を破壊。`),await m.tryMarkForDestroy([a],{action:t,activator:t.entity.controller,selectedEntities:[a]}));return}}}]},yield{name:"幻惑の巻物",actions:[he(),T],continuousEffects:[]}}const ui=Object.freeze(Object.defineProperty({__proto__:null,default:an},Symbol.toStringTag,{value:"Module"}));function*rn(){yield*[{name:"伝説の剣",attr:void 0,monType:"Warrior",atk:200,def:200},{name:"秘術の書",attr:void 0,monType:"Spellcaster",atk:200,def:200},{name:"ポセイドンの力",attr:void 0,monType:"Aqua",atk:200,def:200},{name:"紫水晶",attr:void 0,monType:"Zombie",atk:200,def:200},{name:"猛獣の歯",attr:void 0,monType:"Beast",atk:200,def:200},{name:"機械改造工場",attr:void 0,monType:"Machine",atk:200,def:200},{name:"体温の上昇",attr:void 0,monType:"Reptile",atk:200,def:200},{name:"魔菌",attr:void 0,monType:"Plant",atk:200,def:200},{name:"闇・エネルギー",attr:void 0,monType:"Fiend",atk:200,def:200},{name:"レーザー砲機甲鎧",attr:void 0,monType:"Insect",atk:200,def:200},{name:"銀の弓矢",attr:void 0,monType:"Fairy",atk:200,def:200},{name:"電撃鞭",attr:void 0,monType:"Thunder",atk:200,def:200},{name:"ドラゴンの秘宝",attr:void 0,monType:"Dragon",atk:200,def:200},{name:"フォロー・ウィンド",attr:void 0,monType:"WingedBeast",atk:200,def:200},{name:"魔性の月",attr:void 0,monType:"BeastWarrior",atk:200,def:200},{name:"エルフの光",attr:"Light",monType:void 0,atk:400,def:-200},{name:"覚醒",attr:"Earth",monType:void 0,atk:400,def:-200},{name:"灼熱の槍",attr:"Fire",monType:void 0,atk:400,def:-200},{name:"突風の扇",attr:"Wind",monType:void 0,atk:400,def:-200},{name:"はがねの甲羅",attr:"Water",monType:void 0,atk:400,def:-200},{name:"闇の破神剣",attr:"Dark",monType:void 0,atk:400,def:-200},{name:"火器付機甲鎧",attr:void 0,monType:"Insect",atk:700,def:0},{name:"サラマンドラ",attr:"Fire",monType:void 0,atk:700,def:0},{name:"シャイン・キャッスル",attr:"Light",monType:void 0,atk:700,def:0}].map(t=>({name:t.name,actions:[he(e=>(!t.attr||e.attr.includes(t.attr))&&(!t.monType||e.types.includes(t.monType))),T],continuousEffects:[ke(t.name,"Spell",e=>e.info.equipedBy?[e.info.equipedBy]:[],e=>{const i=[];return t.atk!==0&&i.push(["attack",t.atk]),t.def!==0&&i.push(["defense",t.def]),i.map(([a,r])=>L.createContinuous("発動",n=>n.isSpawnedBy.isOnFieldStrictly&&n.isSpawnedBy.face==="FaceUp",e,(n,s)=>s.isOnFieldStrictly&&s.face==="FaceUp"&&(!t.monType||s.types.includes(t.monType))&&(!t.attr||s.attr.includes(t.attr)),a,"wip","Addition",(n,s,o)=>n.isEffective?o+r:o))})]}))}const di=Object.freeze(Object.defineProperty({__proto__:null,default:rn},Symbol.toStringTag,{value:"Module"}));function*nn(){yield{name:"チキンレース",actions:[I,T,{title:"②効果発動",isMandatory:!1,playType:"IgnitionEffect",spellSpeed:"Normal",executableCells:["FieldSpellZone"],executablePeriods:["main1","main2"],executableDuelistTypes:me,isOnlyNTimesPerTurnIfFaceup:1,canPayCosts:t=>t.activator.lp>=1e3,canExecute:t=>t.action.entity.face==="FaceUp",payCosts:(t,e)=>ve(t,e,1e3),prepare:async(t,e,i)=>{let a=[{seq:0,text:"●デッキから１枚ドローする。",tags:["Draw"]},{seq:1,text:"●このカードを破壊する。",tags:t.action.calcChainBlockTagsForDestroy(t.activator,[t.action.entity])},{seq:2,text:"●相手は1000LP回復する。",tags:[]}];t.activator.getDeckCell().cardEntities.length||(a=a.filter(n=>n.seq));const r=await t.activator.waitSelectText(a,"使用する効果を選択",i);if(r!==void 0)return t.data=r.seq,{selectedEntities:[],chainBlockTags:r.tags,nextChainBlockFilter:()=>!1}},execute:async t=>{if(t.data===0)await t.activator.draw(1,t.action.entity,t.activator);else if(t.data===1)await m.tryDestroy([t.action.entity],t);else if(t.data===2)t.activator.getOpponentPlayer().heal(1e3,t.action.entity);else throw new v("値が正しくない。",t,t.data);return!0},settle:async()=>!0}],continuousEffects:[Va("①ダメージ無効","Spell",t=>[t.controller,t.controller.getOpponentPlayer()].map(e=>e.entity),t=>[new Kt({title:"①ダメージ無効",validateAlive:()=>!0,isContinuous:!0,isSpawnedBy:t,actionAttr:{},isApplicableTo:()=>!0,calcType:"zero_typeA",filter:(e,i,a,r)=>e.isSpawnedBy.fieldCell.cellType!=="FieldSpellZone"?{}:r.lp>=r.getOpponentPlayer().lp?{}:(a.writeInfoLog(`${r.profile.name}はチキンレースの効果でダメージを受けない。`),{zero_typeA:!0})})])]}}const pi=Object.freeze(Object.defineProperty({__proto__:null,default:nn},Symbol.toStringTag,{value:"Module"}));function*sn(){yield*[{name:"草原",up:["Warrior","BeastWarrior"],down:[]},{name:"森",up:["Insect","Plant","Beast","BeastWarrior"],down:[]},{name:"山",up:["Dragon","WingedBeast","Thunder"],down:[]},{name:"荒野",up:["Dinosaur","Zombie","Rock"],down:[]},{name:"海",up:["Aqua","SeaSerpent","Fish"],down:["Machine","Pyro"]},{name:"闇",up:["Fiend","Spellcaster"],down:["Fairy"]}].map(t=>({name:t.name,actions:[I,T],continuousEffects:[Be("発動","Spell",e=>["attack","defense"].flatMap(i=>["up","down"].map(a=>L.createContinuous("発動",r=>r.isSpawnedBy.isOnFieldStrictly&&r.isSpawnedBy.face==="FaceUp",e,(r,n)=>n.isOnFieldStrictly&&n.face==="FaceUp"&&(n.status.monsterCategories??!1)&&t[a].union(n.types).length>0,i,"wip","Addition",(r,n,s)=>!r.isEffective||n.face==="FaceDown"?s:s+(a==="up"?200:-200)))))]})),yield*[{name:"バーニングブラッド",attr:"Fire"},{name:"ウォーターワールド",attr:"Water"},{name:"ガイアパワー",attr:"Earth"},{name:"シャインスパーク",attr:"Light"},{name:"ダークゾーン",attr:"Dark"},{name:"デザートストーム",attr:"Wind"}].map(t=>({name:t.name,actions:[I,T],continuousEffects:[Be("発動","Spell",e=>["attack","defense"].flatMap(i=>L.createContinuous("発動",a=>a.isSpawnedBy.isOnFieldStrictly&&a.isSpawnedBy.face==="FaceUp",e,(a,r)=>r.isOnFieldStrictly&&r.face==="FaceUp"&&r.attr.includes(t.attr),i,"wip","Addition",(a,r,n)=>!a.isEffective||r.face==="FaceDown"?n:n+(i==="attack"?500:-400))))]}))}const fi=Object.freeze(Object.defineProperty({__proto__:null,default:sn},Symbol.toStringTag,{value:"Module"}));function*ln(){const t=[{name:"カルボナーラ戦士",materialInfos:[{type:"Name",cardName:"マグネッツ１号"},{type:"Name",cardName:"マグネッツ２号"}]},{name:"クリッチー",materialInfos:[{type:"Name",cardName:"クリッター"},{type:"Name",cardName:"黒き森のウィッチ"}]},{name:"スケルゴン",materialInfos:[{type:"Name",cardName:"メデューサの亡霊"},{type:"Name",cardName:"暗黒の竜王"}]},{name:"スチームジャイロイド",materialInfos:[{type:"Name",cardName:"ジャイロイド"},{type:"Name",cardName:"スチームロイド"}]},{name:"バラに棲む悪霊",materialInfos:[{type:"Name",cardName:"グレムリン"},{type:"Name",cardName:"スネーク・パーム"}]},{name:"バロックス",materialInfos:[{type:"Name",cardName:"キラーパンダ"},{type:"Name",cardName:"ガーゴイル"}]},{name:"フュージョニスト",materialInfos:[{type:"Name",cardName:"プチテンシ"},{type:"Name",cardName:"スリーピィ"}]},{name:"ブラキオレイドス",materialInfos:[{type:"Name",cardName:"二頭を持つキング・レックス"},{type:"Name",cardName:"屍を貪る竜"}]},{name:"プラグティカル",materialInfos:[{type:"Name",cardName:"トラコドン"},{type:"Name",cardName:"フレイム・ヴァイパー"}]},{name:"マブラス",materialInfos:[{type:"Name",cardName:"タイホーン"},{type:"Name",cardName:"邪炎の翼"}]},{name:"ミノケンタウロス",materialInfos:[{type:"Name",cardName:"ミノタウルス"},{type:"Name",cardName:"ケンタウロス"}]},{name:"暗黒火炎龍",materialInfos:[{type:"Name",cardName:"火炎草"},{type:"Name",cardName:"プチリュウ"}]},{name:"炎の騎士 キラー",materialInfos:[{type:"Name",cardName:"モンスター・エッグ"},{type:"Name",cardName:"スティング"}]},{name:"炎の剣士",materialInfos:[{type:"Name",cardName:"炎を操る者"},{type:"Name",cardName:"伝説の剣豪 ＭＡＳＡＫＩ"}]},{name:"音楽家の帝王",materialInfos:[{type:"Name",cardName:"黒き森のウィッチ"},{type:"Name",cardName:"ハイ・プリーステス"}]},{name:"金色の魔象",materialInfos:[{type:"Name",cardName:"メデューサの亡霊"},{type:"Name",cardName:"ドラゴン・ゾンビ"}]},{name:"紅陽鳥",materialInfos:[{type:"Name",cardName:"セイント・バード"},{type:"Name",cardName:"スカイ・ハンター"}]},{name:"轟きの大海蛇",materialInfos:[{type:"Name",cardName:"魔法のランプ"},{type:"Name",cardName:"ひょうすべ"}]},{name:"黒き人食い鮫",materialInfos:[{type:"Name",cardName:"シーカーメン"},{type:"Name",cardName:"キラー・ブロッブ"},{type:"Name",cardName:"海原の女戦士"}]},{name:"砂の魔女",materialInfos:[{type:"Name",cardName:"岩石の巨兵"},{type:"Name",cardName:"エンシェント・エルフ"}]},{name:"裁きの鷹",materialInfos:[{type:"Name",cardName:"冠を戴く蒼き翼"},{type:"Name",cardName:"コケ"}]},{name:"裁きを下す女帝",materialInfos:[{type:"Name",cardName:"女王の影武者"},{type:"Name",cardName:"響女"}]},{name:"朱雀",materialInfos:[{type:"Name",cardName:"赤き剣のライムンドス"},{type:"Name",cardName:"炎の魔神"}]},{name:"深海に潜むサメ",materialInfos:[{type:"Name",cardName:"神魚"},{type:"Name",cardName:"舌魚"}]},{name:"水陸両用バグロス",materialInfos:[{type:"Name",cardName:"陸戦型 バグロス"},{type:"Name",cardName:"海を守る戦士"}]},{name:"戦場の死装束",materialInfos:[{type:"Name",cardName:"音女"},{type:"Name",cardName:"斬首の美女"}]},{name:"魔装騎士ドラゴネス",materialInfos:[{type:"Name",cardName:"アーメイル"},{type:"Name",cardName:"一眼の盾竜"}]},{name:"魔導騎士ギルティア",materialInfos:[{type:"Name",cardName:"冥界の番人"},{type:"Name",cardName:"王座の守護者"}]},{name:"雷神の怒り",materialInfos:[{type:"Name",cardName:"エンゼル・イヤーズ"},{type:"Name",cardName:"メガ・サンダーボール"}]},{name:"カイザー・ドラゴン",materialInfos:[{type:"Name",cardName:"砦を守る翼竜"},{type:"Name",cardName:"フェアリー・ドラゴン"}]},{name:"スカルビショップ",materialInfos:[{type:"Name",cardName:"悪魔の知恵"},{type:"Name",cardName:"魔天老"}]},{name:"デビル・ボックス",materialInfos:[{type:"Name",cardName:"マーダーサーカス"},{type:"Name",cardName:"ドリーム・ピエロ"}]},{name:"ヒューマノイド・ドレイク",materialInfos:[{type:"Name",cardName:"ワームドレイク"},{type:"Name",cardName:"ヒューマノイド・スライム"}]},{name:"ブラック・デーモンズ・ドラゴン",materialInfos:[{type:"Name",cardName:"デーモンの召喚"},{type:"Name",cardName:"真紅眼の黒竜"}]},{name:"マスター・オブ・ＯＺ",materialInfos:[{type:"Name",cardName:"ビッグ・コアラ"},{type:"Name",cardName:"デス・カンガルー"}]},{name:"メテオ・ブラック・ドラゴン",materialInfos:[{type:"Name",cardName:"真紅眼の黒竜"},{type:"Name",cardName:"メテオ・ドラゴン"}]},{name:"召喚獣メガラニカ",materialInfos:[{type:"Name",cardName:"召喚師アレイスター"},{type:"Name",cardName:"地属性モンスター"}]},{name:"聖女ジャンヌ",materialInfos:[{type:"Name",cardName:"慈悲深き修道女"},{type:"Name",cardName:"堕天使マリー"}]},{name:"青眼の究極竜",materialInfos:[{type:"Name",cardName:"青眼の白龍"},{type:"Name",cardName:"青眼の白龍"},{type:"Name",cardName:"青眼の白龍"}]},{name:"千年竜",materialInfos:[{type:"Name",cardName:"時の魔術師"},{type:"Name",cardName:"ベビードラゴン"}]},{name:"双頭の雷龍",materialInfos:[{type:"Name",cardName:"サンダー・ドラゴン"},{type:"Name",cardName:"サンダー・ドラゴン"}]},{name:"迷宮の魔戦車",materialInfos:[{type:"Name",cardName:"ギガテック・ウルフ"},{type:"Name",cardName:"キャノン・ソルジャー"}]},{name:"竜騎士ガイア",materialInfos:[{type:"Name",cardName:"暗黒騎士ガイア"},{type:"Name",cardName:"カース・オブ・ドラゴン"}]},{name:"アクア・ドラゴン",materialInfos:[{type:"Name",cardName:"フェアリー・ドラゴン"},{type:"Name",cardName:"海原の女戦士"}]},{name:"アンデット・ウォーリアー",materialInfos:[{type:"Name",cardName:"ワイト"},{type:"Name",cardName:"格闘戦士アルティメーター"}]},{name:"カオス・ウィザード",materialInfos:[{type:"Name",cardName:"ホーリー・エルフ"},{type:"Name",cardName:"黒魔族のカーテン"}]},{name:"クワガー・ヘラクレス",materialInfos:[{type:"Name",cardName:"クワガタ・アルファ"},{type:"Name",cardName:"ヘラクレス・ビートル"}]},{name:"ソウル・ハンター",materialInfos:[{type:"Name",cardName:"ランプの魔人"},{type:"Name",cardName:"異次元からの侵略者"}]},{name:"デス・バード",materialInfos:[{type:"Name",cardName:"タクヒ"},{type:"Name",cardName:"髑髏の寺院"}]},{name:"フラワー・ウルフ",materialInfos:[{type:"Name",cardName:"シルバー・フォング"},{type:"Name",cardName:"魔界のイバラ"}]},{name:"フレイム・ゴースト",materialInfos:[{type:"Name",cardName:"ワイト"},{type:"Name",cardName:"マグマン"}]},{name:"マリン・ビースト",materialInfos:[{type:"Name",cardName:"水の魔導師"},{type:"Name",cardName:"ベヒゴン"}]},{name:"メカ・ザウルス",materialInfos:[{type:"Name",cardName:"ミスター・ボンバー"},{type:"Name",cardName:"二頭を持つキング・レックス"}]},{name:"メタル・ドラゴン",materialInfos:[{type:"Name",cardName:"鋼鉄の巨神像"},{type:"Name",cardName:"レッサー・ドラゴン"}]},{name:"レア・フィッシュ",materialInfos:[{type:"Name",cardName:"フュージョニスト"},{type:"Name",cardName:"恍惚の人魚"}]},{name:"無の畢竟 オールヴェイン",materialInfos:[{type:"Filter",filter:e=>{var i;return((i=e.status.monsterCategories)==null?void 0:i.includes("Normal"))??!1}},{type:"Filter",filter:e=>{var i;return((i=e.status.monsterCategories)==null?void 0:i.includes("Normal"))??!1}}]},{name:"テセウスの魔棲物",materialInfos:[{type:"Filter",filter:e=>{var i;return((i=e.status.monsterCategories)==null?void 0:i.includes("Tuner"))??!1}},{type:"Filter",filter:e=>{var i;return((i=e.status.monsterCategories)==null?void 0:i.includes("Tuner"))??!1}}]},{name:"ジェムナイト・ジルコニア",materialInfos:[{type:"Filter",filter:e=>{var i;return((i=e.status.nameTags)==null?void 0:i.includes("ジェムナイト"))??!1}},{type:"Filter",filter:e=>e.types.includes("Rock")??!1}]},{name:"メタルフォーゼ・アダマンテ",materialInfos:[{type:"Filter",filter:e=>{var i;return((i=e.status.nameTags)==null?void 0:i.includes("メタルフォーゼ"))??!1}},{type:"Filter",filter:e=>(e.atk??9999)<=2500}]},{name:"メタルフォーゼ・カーディナル",materialInfos:[{type:"Filter",filter:e=>{var i;return((i=e.status.nameTags)==null?void 0:i.includes("メタルフォーゼ"))??!1}},{type:"Filter",filter:e=>(e.atk??9999)<=3e3},{type:"Filter",filter:e=>(e.atk??9999)<=3e3}]}];for(const e of t)yield{name:e.name,actions:[],fusionMaterialInfos:e.materialInfos}}const gi=Object.freeze(Object.defineProperty({__proto__:null,default:ln},Symbol.toStringTag,{value:"Module"})),on=async(t,e,i=!1)=>{if(!t.action.entity.lvl)return;if(t.action.entity.lvl<5)return{};const a=t.activator.getAvailableMonsterZones();let r=t.activator.getMonstersOnField().filter(u=>u.canBeReleased(t.activator,t.action.entity,["AdvanceSummonRelease"],t.action));const n=t.activator.getExtraMonsterZones(),s=t.action.entity.lvl<7?1:2;n.length>=s&&(r=r.filter(u=>u.fieldCell.cellType!=="ExtraMonsterZone"));const o=await t.activator.waitSelectEntities(r,s,u=>(i||u.length>0)&&(s<0||u.length===s)&&(a.length>0||u.some(d=>d.fieldCell.cellType==="ExtraMonsterZone")),"リリースするモンスターを選択",i)??[];return o.length?(await m.releaseManyForTheSameReason(o,["Cost","AdvanceSummonRelease","Rule"],t.action.entity,t.activator),{summonMaterialInfos:o.map(u=>({material:u,cell:u.fieldCell}))}):void 0},cn=async t=>{var r;const e=["Rule","NormalSummon"];let i="NormalSummon";(r=t.costInfo.summonMaterialInfos)!=null&&r.length&&(i="AdvanceSummon",e.push("AdvanceSummon"));const a=t.dest?[t.dest]:t.activator.getAvailableMonsterZones();return ee(t,i,e,["Attack","Set"],a)},ee=async(t,e,i,a,r)=>{let n=t.dest?[t.dest]:r;return n||(n=t.activator.getMonsterZones(),t.action.entity.fieldCell.cellType==="ExtraDeck"&&n.push(...t.activator.duel.field.getCells("ExtraMonsterZone"))),await t.activator.summon(e,i,t.action,t.action.entity,a,n,t.costInfo.summonMaterialInfos??[],!1),{selectedEntities:[]}},te=async t=>{var e,i;return t.action.entity.info.isRebornable=!((e=t.action.entity.origin.monsterCategories)!=null&&e.includes("RegularSpecialSummonOnly")),t.action.entity.determine(),(i=t.costInfo.summonMaterialInfos)==null||i.map(a=>a.material).forEach(a=>a.onUsedAsMaterial(t,t.action.entity)),!0},un={title:"通常召喚",isMandatory:!1,playType:"NormalSummon",spellSpeed:"Normal",executableCells:["Hand"],executablePeriods:["main1","main2"],executableDuelistTypes:["Controller"],canPayCosts:t=>{if(!t.action.entity.lvl)return!1;if(t.action.entity.lvl<5)return t.activator.getEnableSummonList(t.activator,"NormalSummon",["Rule"],t.action,[{monster:t.action.entity,posList:["Attack","Set"],cells:t.activator.getMonsterZones()}],[],!1).length>0;const e=t.activator.getMonstersOnField().filter(r=>r.canBeReleased(t.activator,t.action.entity,["AdvanceSummonRelease"],t.action)),i=t.action.entity.lvl<7?1:2;return e.length<i?!1:e.getAllOnOffPattern().filter(r=>r.length===i).some(r=>t.activator.getEnableSummonList(t.activator,"AdvanceSummon",["Rule","NormalSummon"],t.action,[{monster:t.action.entity,posList:["Attack","Set"],cells:t.activator.getMonsterZones()}],r.map(n=>({material:n,cell:n.fieldCell})),!1).length)},meetsConditions:t=>t.activator.info.ruleNormalSummonCount<t.activator.info.maxRuleNormalSummonCount&&!!t.action.entity.lvl,getDests:t=>t.action.entity.lvl?t.action.entity.lvl>4?[]:t.activator.getEnableSummonList(t.activator,"NormalSummon",["Rule"],t.action,[{monster:t.action.entity,posList:["Attack","Set"],cells:t.activator.getMonsterZones()}],[],!1).flatMap(i=>i.cells).getDistinct():[],payCosts:on,prepare:cn,execute:te,settle:async()=>!0},Q=(t,e,i,a)=>{const r=t.activator.getMonsterZones();return t.action.entity.fieldCell.cellType==="ExtraDeck"&&r.push(...t.activator.getAvailableExtraMonsterZones()),t.activator.getEnableSummonList(t.activator,"SpecialSummon",a,t.action,[{monster:t.action.entity,posList:e,cells:r}],i,!1).flatMap(s=>s.cells)},$=(...t)=>Q(...t).length>0,dn={title:"攻撃宣言",isMandatory:!1,playType:"DeclareAttack",spellSpeed:"Normal",executableCells:["MonsterZone","ExtraMonsterZone"],executablePeriods:["b1Battle","b2Battle"],executableDuelistTypes:["Controller"],hasToTargetCards:!0,getTargetableEntities:t=>t.action.entity.getAttackTargets(),canExecute:(t,e)=>!t.activator.isTurnPlayer||!t.action.entity.isMonster||!t.action.entity.status.canAttack||t.action.entity.info.attackDeclareCount>0||t.action.entity.battlePosition!=="Attack"?!1:t.action.getTargetableEntities(t,e).length>0,getDests:(t,e)=>t.action.getTargetableEntities(t,e).map(i=>i.fieldCell),prepare:async(t,e)=>{var r,n;if(t.action.entity.info.attackDeclareCount>0||t.action.entity.battlePosition!=="Attack")return;const i=t.action.getTargetableEntities(t,e);if(i.length===0)throw new v("攻撃対象の選択肢がない状態で実行された。",t);let a=i[0];for(;i.length!==1;){if((r=t.dest)!=null&&r.targetForAttack){a=t.dest.entities.find(c=>c.entityType==="Duelist")??((n=t.dest)==null?void 0:n.targetForAttack);break}if(t.activator.duelistType==="NPC"){let o=t.activator.selectAttackTargetForNPC(t.action.entity,t.action);o||(t.activator.duel.log.warn("NPCの攻撃対象選択に失敗したため、ランダムに攻撃対象を選択。"),o=i.randomPick());break}const s=await t.activator.waitSelectEntity(i,"攻撃対象を選択。",!0);if(!s)return;a=s;break}return t.action.entity.field.duel.declareAttack(t.action.entity,a,!1),{selectedEntities:[a]}},execute:async()=>!0,settle:async()=>!0},pn={title:"戦闘",isMandatory:!1,playType:"Battle",spellSpeed:"Normal",executableCells:["MonsterZone","ExtraMonsterZone"],executablePeriods:["b1DDmgCalc","b2DDmgCalc"],executableDuelistTypes:["Controller"],hasToTargetCards:!0,canExecute:t=>!!t.activator.duel.targetForAttack&&t.activator.duel.attackingMonster===t.action.entity&&t.action.entity.isMonster,prepare:async t=>{if(t.activator.duel.attackingMonster!==t.action.entity)throw new v("canExecuteの判定が正しく行われなかった",t,t.activator.duel.attackingMonster,t.activator.duel.targetForAttack);if(!t.activator.duel.targetForAttack)throw new v("canExecuteの判定が正しく行われなかった",t,t.activator.duel.attackingMonster,t.activator.duel.targetForAttack);return{selectedEntities:[t.activator.duel.targetForAttack]}},execute:async()=>!0,settle:async()=>!0},hi=async t=>{if(!(t.action.entity.info.battlePotisionChangeCount>0||!t.activator.isTurnPlayer))return await t.action.entity.setBattlePosition(t.action.entity.battlePosition==="Attack"?"Defense":"Attack",["Rule"],t.action.entity,t.activator),t.action.entity.info.battlePotisionChangeCount++,{selectedEntities:[]}},fn={title:"反転召喚",isMandatory:!1,playType:"FlipSummon",spellSpeed:"Normal",executableCells:["MonsterZone","ExtraMonsterZone"],executablePeriods:["main1","main2"],executableDuelistTypes:["Controller"],canExecute:t=>t.action.entity.info.battlePotisionChangeCount===0&&t.action.entity.info.attackDeclareCount===0&&t.activator.isTurnPlayer&&t.action.entity.face==="FaceDown"&&t.action.entity.isMonster,prepare:hi,execute:async t=>(t.action.entity.determine(),!0),settle:async()=>!0},gn={title:"表示形式変更",isMandatory:!1,playType:"ChangeBattlePosition",spellSpeed:"Normal",executableCells:["MonsterZone","ExtraMonsterZone"],executablePeriods:["main1","main2"],executableDuelistTypes:["Controller"],canExecute:t=>t.action.entity.info.battlePotisionChangeCount===0&&t.action.entity.info.attackDeclareCount===0&&t.activator.isTurnPlayer&&t.action.entity.face==="FaceUp"&&t.action.entity.isMonster,prepare:hi,execute:async t=>(t.action.entity.determine(),!0),settle:async()=>!0},ie=async(t,e=["Attack","Defense"])=>{const i=t.activator.getMonsterZones();return t.action.entity.wasMovedAfter(t.isActivatedAt)?!1:(await t.activator.summon("SpecialSummon",["Effect"],t.action,t.action.entity,e,i,[],!1),!0)},yi=[dn,pn],Ze=[...yi,gn,fn],Nt=[un,...Ze],hn=(t,e,i,a,r,n,s,o,c,u,d)=>{const p={posList:c,cells:u},f={posList:[],cells:[]};return e!==s||!s.isMonster||!s.origin.monsterCategories?p:s.origin.monsterCategories.includes("NormalSummonOnly")?r.includes("NormalSummon")||r.includes("AdvanceSummon")?p:f:s.origin.monsterCategories.includes("SpecialSummon")?s.origin.monsterCategories.includes("FreeReborn")?r.includes("Effect")?p:f:s.isInTrashCell&&!s.origin.monsterCategories.includes("RegularSpecialSummonOnly")?s.info.isRebornable?p:f:r.union(It).length?p:s.origin.monsterCategories.includes("RegularSpecialSummonOnly")?d?p:f:p:p},et={},yn=t=>(et[t]||(et[t]={title:`戦闘破壊耐性(${t})`,playType:"ContinuousEffect",isMandatory:!0,executableCells:["MonsterZone"],executablePeriods:["b1DDmgCalc","b2DDmgCalc"],executableDuelistTypes:["Controller"],isOnlyNTimesPerTurnIfFaceup:t,isApplicableTo:(e,i,a)=>a.includes(e.entity)?i!=="Battle"?[]:[e.entity]:[],substitute:async(e,i,a)=>a.includes(e.entity)?i!=="Battle"?[]:e.entity.isEffective?(e.entity.controller.writeInfoLog(`${e.entity.toString()}は１ターンに１度だけ戦闘では破壊されない。`),[e.entity]):[]:[]}),et[t]),Qe=t=>t.activator.canRelease([t.action.entity])&&t.action.entity.canBeReleased(t.activator,t.action.entity,["ReleaseAsCost"],t.action),Xe=async t=>(await t.action.entity.release(["Cost"],t.action.entity,t.activator),{release:[t.action.entity]}),mi=t=>({title:"シンクロ召喚",isMandatory:!1,playType:"QuickEffect",spellSpeed:"Quick",executableCells:N,executablePeriods:["main1","main2"],executableDuelistTypes:["Controller"],isOnlyNTimesPerChain:1,meetsConditions:e=>!e.activator.isTurnPlayer,canExecute:e=>e.activator.getExtraDeck().cardEntities.filter(i=>{var a;return(a=i.status.monsterCategories)==null?void 0:a.includes("Synchro")}).flatMap(i=>i.actions).filter(i=>i.playType==="SpecialSummon").map(i=>({index:-1,chainNumber:void 0,action:i,activator:e.activator,targetChainBlock:void 0,isActivatedIn:i.entity.fieldCell,costInfo:{},state:"unloaded",dest:void 0,ignoreCosts:!1})).some(i=>i.action.getEnableMaterialPatterns(i).some(a=>{const r=a.map(n=>n.material);return r.every(n=>n.controller===e.activator)&&r.every(n=>n.isOnFieldAsMonsterStrictly)&&r.includes(e.action.entity)})),prepare:S,execute:async e=>{if(e.activator!==e.action.entity.controller||e.activator.getMonstersOnField().filter(s=>s.lvl!==void 0).length<2)return!1;const i=e.activator.getExtraDeck().cardEntities.filter(s=>{var o;return(o=s.status.monsterCategories)==null?void 0:o.includes("Synchro")}).flatMap(s=>s.actions).filter(s=>s.playType==="SpecialSummon").map(s=>({index:-1,chainNumber:void 0,action:s,activator:e.activator,targetChainBlock:void 0,isActivatedIn:s.entity.fieldCell,isActivatedAt:e.isActivatedAt,costInfo:{},state:"unloaded",dest:void 0,ignoreCosts:!1})).filter(s=>s.action.getEnableMaterialPatterns(s).some(o=>{const c=o.map(u=>u.material);return c.every(u=>u.controller===e.activator)&&c.every(u=>u.isOnFieldAsMonsterStrictly)&&c.includes(e.action.entity)})).map(s=>s.action.entity).getDistinct();if(!i.length)return!1;const a=await e.activator.waitSelectEntities(i,1,s=>s.length===1,"シンクロ召喚するモンスターを選択。",!1)??[];if(!a.length)throw new v("想定されない状態",e);const r=a[0].actions.find(s=>s.playType==="SpecialSummon");if(!r)throw new v("想定されない状態",e);const n=r.getClone(s=>{const o=s.map(c=>c.material);return o.every(c=>c.controller===e.activator)&&o.every(c=>c.isOnFieldAsMonsterStrictly)&&o.includes(e.action.entity)});return e.nextActionInfo={action:n,originSeq:n.seq},!0},settle:async()=>!0,...t}),mn=_e("直接攻撃","Monster",t=>[t],t=>[new R({title:"直接攻撃",validateAlive:()=>!0,isContinuous:!0,isSpawnedBy:t,actionAttr:{},isApplicableTo:(e,i)=>e.isSpawnedBy===i,statusCalculator:()=>({canDirectAttack:!0})})]),tt={title:"融合素材代用",appliableCellTypes:["MonsterZone","ExtraMonsterZone","Hand","Graveyard "],appliableDuelPeriodKeys:q,faceList:["FaceUp","FaceDown"],canStart:()=>!0,start:async t=>{const e=new R({title:"融合素材代用",validateAlive:()=>!0,isContinuous:!0,isSpawnedBy:t,actionAttr:{},isApplicableTo:()=>!0,statusCalculator:(i,a,r)=>(a.isSpawnedBy.isEffective&&(r.fusionSubstitute=!0),r)});return t.statusOperatorBundle.push(e),{targets:[t],seq:e.seq}},finish:async(t,e)=>{e.targets.forEach(i=>i.statusOperatorBundle.removeItem(e.seq))}},vn=(t,e,i,a)=>{if(!t.action.entity.origin.link||t.action.entity.origin.link<i.length)return;let r=i.map(s=>({material:s,cell:s.fieldCell,link:1}));if(t.action.entity.origin.link>i.length){if(i.every(c=>(c.origin.link??1)<2))return;const s=[r];i.filter(c=>(c.origin.link??1)>1).forEach(c=>{[...s].forEach(u=>{s.push([...u.filter(d=>d.material!==c),{material:c,cell:c.fieldCell,link:c.origin.link??1}])})});const o=s.find(c=>c.reduce((u,d)=>u+d.link,0)===t.action.entity.origin.link);if(!o)return;r=o}if(!a(i)||!t.activator.getEnableSummonList(t.activator,"LinkSummon",["Rule","SpecialSummon"],t.action,[{monster:t.action.entity,posList:["Attack"],cells:e}],r,!1).length)return;if(t.activator.getAvailableExtraMonsterZones().length)return r;const n=t.activator.duel.field.getCells("ExtraMonsterZone").map(s=>s.cardEntities[0]).filter(s=>s);if(n.filter(s=>s.controller===t.activator).length&&n.filter(s=>s.controller===t.activator).length===i.filter(s=>s.fieldCell.cellType==="ExtraMonsterZone").length||t.activator.getMonsterZones().flatMap(s=>s.linkArrowSources).some(s=>!i.includes(s))||t.activator.duel.field.canExtraLink(t.action.entity,r))return r};function*Sn(t,e=()=>!0){let i=[...t.activator.getMonstersOnField().filter(r=>r.battlePosition!=="Set"),...t.activator.getHandCell().entities.filter(r=>r.origin.kind==="Monster")];if(i.every(r=>!r.status.allowHandLink)&&(i=i.filter(r=>r.fieldCell.isPlayFieldCell)),i.length<1)return;const a=[...t.activator.getMonsterZones(),...t.activator.duel.field.getAvailableExtraMonsterZones()];yield*i.getAllOnOffPattern().filter(r=>r.some(n=>n.status.allowHandLink)||r.every(n=>n.isOnFieldAsMonsterStrictly)).map(r=>vn(t,a,r,e)??[]).filter(r=>r.length)}const Cn=async(t,e,i)=>{var c;const a=t.action.getEnableMaterialPatterns(t).toArray(),r=a.map(u=>({infos:u,materialSeqList:u.map(d=>d.material.seq).sort()}));let n=a[0].map(u=>u.material);if(a.length>1){const u=a.flatMap(p=>p.map(f=>f.material)).getDistinct(),d=await t.activator.waitSelectEntities(u,void 0,p=>{const f=p.map(h=>h.seq).sort();return r.some(h=>f.length===h.materialSeqList.length&&f.every((y,w)=>y===h.materialSeqList[w]))},"リンク素材とするモンスターを選択",i);if(console.log(d),!d)return;n=d}const s=n.map(u=>u.seq).sort(),o=(c=r.find(u=>s.length===u.materialSeqList.length&&s.every((d,p)=>d===u.materialSeqList[p])))==null?void 0:c.infos;if(!o)throw new v("想定されない状態",t,n);return await m.sendManyToGraveyardForTheSameReason(n,["LinkMaterial","Cost","Rule","SpecialSummonMaterial"],t.action.entity,t.activator),{summonMaterialInfos:o}},yt=(t=()=>!0)=>({title:"リンク召喚",isMandatory:!1,playType:"SpecialSummon",spellSpeed:"Normal",executableCells:["ExtraDeck"],executablePeriods:["main1","main2"],executableDuelistTypes:["Controller"],getEnableMaterialPatterns:e=>Sn(e,t),canPayCosts:e=>e.action.getEnableMaterialPatterns(e).some(i=>i.length),canExecute:e=>!e.ignoreCosts||e.activator.getAvailableExtraMonsterZones().length+e.activator.getAvailableMonsterZones().length>0,payCosts:Cn,prepare:e=>ee(e,"LinkSummon",["Rule","SpecialSummon","LinkSummon"],["Attack"]),execute:te,settle:async()=>!0});function*Tn(){yield*[{name:"ＬＡＮフォリンクス",validator:t=>t.length===2},{name:"トラフィックゴースト",validator:t=>t.length===3},{name:"天威の鬼神",validator:t=>t.length>1&&t.some(e=>{var i;return(i=e.status.monsterCategories)==null?void 0:i.includes("Link")})},{name:"天威の拳僧",validator:t=>t.every(e=>{var i,a;return((i=e.status.nameTags)==null?void 0:i.includes("天威"))&&!((a=e.status.monsterCategories)!=null&&a.includes("Link"))})},{name:"電影の騎士ガイアセイバー",validator:t=>t.length>1}].map(t=>({name:t.name,actions:[yt(t.validator)]}))}const vi=Object.freeze(Object.defineProperty({__proto__:null,default:Tn},Symbol.toStringTag,{value:"Module"}));function*_n(){yield*["サイバー・ドラゴン","六武衆のご隠居","アンノウン・シンクロン"].map(t=>({name:t,actions:[{title:"特殊召喚",isMandatory:!1,playType:"SpecialSummon",spellSpeed:"Normal",executableCells:["Hand"],executablePeriods:["main1","main2"],executableDuelistTypes:["Controller"],isOnlyNTimesPerDuel:t==="アンノウン・シンクロン"?1:void 0,canExecute:e=>{const i=e.action.entity.field.getMonstersOnFieldStrictly();return i.length>0&&i.every(a=>a.controller!==e.activator)&&$(e,C,[],["Rule"])},getDests:e=>Q(e,C,[],["Rule"]),prepare:e=>ee(e,"SpecialSummon",["SpecialSummon","Rule"],C),execute:te,settle:async()=>!0}]})),yield{name:"ジャンク・フォアード",actions:[{title:"特殊召喚",isMandatory:!1,playType:"SpecialSummon",spellSpeed:"Normal",executableCells:["Hand"],executablePeriods:["main1","main2"],executableDuelistTypes:["Controller"],canExecute:t=>t.activator.getMonstersOnField().length===0&&$(t,C,[],["Rule"]),getDests:t=>Q(t,C,[],["Rule"]),prepare:t=>ee(t,"SpecialSummon",["SpecialSummon","Rule"],C),execute:te,settle:async()=>!0}]},yield{name:"ゾンビキャリア",actions:[{title:"①自己再生",isMandatory:!1,playType:"IgnitionEffect",spellSpeed:"Normal",executableCells:["Graveyard"],executablePeriods:["main1","main2"],executableDuelistTypes:["Controller"],fixedTags:["SpecialSummonFromGraveyard"],canPayCosts:t=>t.activator.getHandCell().cardEntities.length>0,getDests:t=>Q(t,C,[],["Effect"]),canExecute:t=>$(t,C,[],["Effect"]),payCosts:async(t,e,i)=>{const a=t.activator.getHandCell().cardEntities,r=await t.activator.waitSelectEntity(a,"デッキトップに戻すカードを一枚選択。",i);if(!r)throw new k(t);return await r.returnToDeck("Top",["Cost"],t.action.entity,t.activator),{returnToDeck:[r]}},prepare:async()=>({selectedEntities:[]}),execute:async t=>await ie(t)?(t.action.entity.statusOperatorBundle.push(new R({title:"除外予定",validateAlive:()=>!0,isContinuous:!1,isSpawnedBy:t.action.entity,actionAttr:t.action,isApplicableTo:(e,i)=>i.isOnFieldAsMonsterStrictly&&i.face==="FaceUp",statusCalculator:()=>({willBeBanished:!0})})),!0):!1,settle:async()=>!0}]},yield{name:"グローアップ・バルブ",actions:[{title:"①自己再生",isMandatory:!1,playType:"IgnitionEffect",spellSpeed:"Normal",executableCells:["Graveyard"],executablePeriods:["main1","main2"],executableDuelistTypes:["Controller"],isOnlyNTimesPerDuel:1,fixedTags:["SpecialSummonFromGraveyard"],canPayCosts:t=>t.activator.getDeckCell().cardEntities.length>0,getDests:t=>Q(t,C,[],["Effect"]),canExecute:t=>$(t,C,[],["Effect"]),payCosts:async t=>{const e=t.activator.getDeckCell().cardEntities[0];return await t.activator.getDeckCell().cardEntities[0].sendToGraveyard(["Cost"],t.action.entity,t.activator),{sendToGraveyard:[e]}},prepare:async()=>({selectedEntities:[]}),execute:t=>ie(t),settle:async()=>!0}]},yield{name:"終末の騎士",actions:[{title:"①墓地送り",isMandatory:!1,playType:"TriggerEffect",spellSpeed:"Normal",executableCells:["MonsterZone"],executablePeriods:[..._,...A],executableDuelistTypes:["Controller"],meetsConditions:t=>t.action.entity.hasBeenArrivalNow(["NormalSummon","SpecialSummon","FlipSummon"]),canExecute:t=>t.activator.getDeckCell().cardEntities.some(e=>e.attr.includes("Dark")),prepare:async t=>{const e=["SendToGraveyardFromDeck"];return t.action.entity.moveLog.latestRecord.movedAs.includes("NormalSummon")?e.push("IfNormarlSummonSucceed"):t.action.entity.moveLog.latestRecord.movedAs.includes("SpecialSummon")&&e.push("IfSpecialSummonSucceed"),{selectedEntities:[],chainBlockTags:e}},execute:async t=>{const e=t.activator.getDeckCell().cardEntities.filter(a=>a.attr.includes("Dark"));if(e.length===0)return!1;const i=await t.activator.waitSelectEntity(e,"墓地に送るモンスターを選択",!1);if(!i)throw new k(t);return await i.sendToGraveyard(["Effect"],t.action.entity,t.activator),t.activator.getDeckCell().shuffle(),!0},settle:async()=>!0}]},yield{name:"マスマティシャン",actions:[{title:"①墓地送り",isMandatory:!1,playType:"TriggerEffect",spellSpeed:"Normal",executableCells:["MonsterZone"],executablePeriods:[..._,...A],executableDuelistTypes:["Controller"],fixedTags:["IfNormarlSummonSucceed","SendToGraveyardFromDeck"],meetsConditions:t=>t.action.entity.hasBeenArrivalNow(["NormalSummon"]),canExecute:t=>t.activator.getDeckCell().cardEntities.some(e=>e.lvl&&e.lvl<5),prepare:async()=>({selectedEntities:[]}),execute:async t=>{const e=t.activator.getDeckCell().cardEntities.filter(a=>a.lvl&&a.lvl<5);if(e.length===0)return!1;const i=await t.activator.waitSelectEntity(e,"墓地に送るモンスターを選択",!1);if(!i)throw new k(t);return await i.sendToGraveyard(["Effect"],t.action.entity,t.activator),t.activator.getDeckCell().shuffle(),!0},settle:async()=>!0},{title:"②ドロー",isMandatory:!1,playType:"TriggerEffect",spellSpeed:"Normal",executableCells:["Graveyard"],executablePeriods:[..._,...A],executableDuelistTypes:["Controller"],fixedTags:["Draw"],meetsConditions:t=>t.action.entity.moveLog.latestRecord.movedAs.union(["Battle","Destroy"]).length>1&&t.action.entity.wasMovedAtPreviousChain,canExecute:t=>t.activator.getDeckCell().cardEntities.length>0&&t.activator.canDraw,prepare:async()=>({selectedEntities:[]}),execute:async t=>(await t.activator.draw(1,t.action.entity,t.activator),!0),settle:async()=>!0}]},yield{name:"伝説の白石",actions:[{title:"①サーチ",isMandatory:!0,playType:"TriggerEffect",spellSpeed:"Normal",executableCells:["Graveyard"],executablePeriods:q,executableDuelistTypes:["Controller"],fixedTags:["SearchFromDeck"],meetsConditions:t=>t.action.entity.wasMovedAtPreviousChain&&t.action.entity.wasMovedFrom.cellType!=="Banished",canExecute:t=>t.activator.getDeckCell().cardEntities.some(e=>e.nm==="青眼の白龍")&&t.activator.canAddToHandFromDeck,prepare:async()=>({selectedEntities:[]}),execute:async t=>{const e=t.activator.getDeckCell().cardEntities.find(i=>i.nm==="青眼の白龍");return e?(await e.addToHand(["Effect"],t.action.entity,t.activator),t.activator.getDeckCell().shuffle(),!0):!1},settle:async()=>!0}]};for(const t of[{name:"灰流うらら",chainBlockTags:["Draw","SearchFromDeck","SendToGraveyardFromDeck","SpecialSummonFromDeck"]},{name:"屋敷わらし",chainBlockTags:["BanishFromGraveyard","SpecialSummonFromGraveyard","AddToHandFromGraveyard"]}])yield{name:t.name,actions:[{title:"①無効化",isMandatory:!1,playType:"QuickEffect",spellSpeed:"Quick",executableCells:["Hand"],executablePeriods:_,executableDuelistTypes:["Controller"],isOnlyNTimesPerTurn:1,negatePreviousBlock:!0,fixedTags:["NegateCardEffect"],canPayCosts:e=>e.activator.canDiscard([e.action.entity]),canExecute:e=>(e.targetChainBlock&&e.targetChainBlock.chainBlockTags.union(t.chainBlockTags).length>0)??!1,payCosts:async e=>(await e.action.entity.discard(["Cost"],e.action.entity,e.activator),{sendToGraveyard:[e.action.entity]}),prepare:S,execute:async(e,i)=>{const a=i[e.index-1];return a.isNegatedEffectBy=e.action,!0},settle:async()=>!0}]};for(const t of["翻弄するエルフの剣士","ロードランナー","氷結界の修験者"])yield{name:t,actions:[],continuousEffects:[Xt("①戦闘破壊耐性","Monster",e=>[e],e=>[ye.createContinuous("①戦闘破壊耐性",()=>!0,e,()=>!0,["BattleDestroy"],(i,a,r)=>!e.isEffective||(r.atk??0)<1900?!0:(e.duel.log.info(`${e.toString()}は攻撃力1900以上のモンスターとの先頭では破壊されない。`,e.controller),!1))])]}}const Si=Object.freeze(Object.defineProperty({__proto__:null,default:_n},Symbol.toStringTag,{value:"Module"})),En=(t,e,i,a,r,n)=>{if(!t.action.entity.origin.level||a.some(u=>!u.lvl)||a.map(u=>u.lvl??0).reduce((u,d)=>u+d,0)!==t.action.entity.origin.level)return;const s=a.filter(u=>{var d;return(d=u.status.monsterCategories)==null?void 0:d.some(p=>p==="Tuner")}),o=a.filter(u=>{var d;return(d=u.status.monsterCategories)==null?void 0:d.every(p=>p!=="Tuner")});if(!r(s)||!n(o))return;const c=[...s.map(u=>({material:u,cell:u.fieldCell,isAsTuner:!0})),...o.map(u=>({material:u,cell:u.fieldCell,isAsTuner:!1}))];if(t.activator.getEnableSummonList(t.activator,"SynchroSummon",["Rule","SpecialSummon"],t.action,[{monster:t.action.entity,posList:e,cells:i}],c,!1).length)return c};function*wn(t,e=a=>a.length===1,i=a=>a.length>0){let a=[...t.activator.getMonstersOnField().filter(s=>s.battlePosition!=="Set"),...t.activator.getHandCell().cardEntities.filter(s=>s.origin.kind==="Monster")];if(a.every(s=>!s.status.allowHandSynchro)&&(a=a.filter(s=>s.fieldCell.isPlayFieldCell)),a.length<2)return;const r=[...t.activator.getMonsterZones(),...t.activator.duel.field.getCells("ExtraMonsterZone")],n=["Attack","Defense"];yield*a.getAllOnOffPattern().filter(s=>s.some(o=>o.status.allowHandSynchro)||s.every(o=>o.isOnFieldAsMonsterStrictly)).map(s=>En(t,n,r,s,e,i)??[]).filter(s=>s.length)}const bn=async(t,e,i)=>{var c;const a=t.action.getEnableMaterialPatterns(t).toArray(),r=a.map(u=>({infos:u,materialSeqList:u.map(d=>d.material.seq).sort()}));let n=a[0].map(u=>u.material);if(a.length>1){const u=a.flatMap(p=>p.map(f=>f.material)).getDistinct(),d=await t.activator.waitSelectEntities(u,void 0,p=>{const f=p.map(h=>h.seq).sort();return r.some(h=>f.length===h.materialSeqList.length&&f.every((y,w)=>y===h.materialSeqList[w]))},"シンクロ素材とするモンスターを選択",i);if(!d)return;n=d}const s=n.map(u=>u.seq).sort(),o=(c=r.find(u=>s.length===u.materialSeqList.length&&s.every((d,p)=>d===u.materialSeqList[p])))==null?void 0:c.infos;if(!o)throw new v("想定されない状態",t,n);return await m.sendManyToGraveyardForTheSameReason(n,["SynchroMaterial","Cost","Rule","SpecialSummonMaterial"],t.action.entity,t.activator),{summonMaterialInfos:o}},j=(t=i=>i.length===1,e=i=>i.length>0)=>({title:"シンクロ召喚",isMandatory:!1,playType:"SpecialSummon",spellSpeed:"Normal",executableCells:["ExtraDeck"],executablePeriods:["main1","main2"],executableDuelistTypes:["Controller"],getEnableMaterialPatterns:i=>wn(i,t,e),canPayCosts:i=>i.action.getEnableMaterialPatterns(i).some(a=>a.length),canExecute:i=>!i.ignoreCosts||i.activator.getAvailableExtraMonsterZones().length+i.activator.getAvailableMonsterZones().length>0,payCosts:bn,prepare:i=>ee(i,"SynchroSummon",["Rule","SpecialSummon","SynchroSummon"],["Attack","Defense"]),execute:te,settle:async()=>!0}),Ot=t=>({title:"射出",isMandatory:!1,playType:"IgnitionEffect",spellSpeed:"Normal",executableCells:N,executablePeriods:["main1","main2"],executableDuelistTypes:["Controller"],needsToPayRegularCost:!0,fixedTags:["DamageToOpponent"],canPayCosts:e=>e.activator.getMonstersOnField().filter(t.filter).some(i=>i.canBeReleased(e.activator,e.action.entity,["ReleaseAsCost"],e.action)),payCosts:async(e,i,a)=>{const r=await e.activator.waitSelectEntities(e.activator.getMonstersOnField().filter(t.filter).filter(n=>n.canBeReleased(e.activator,e.action.entity,["ReleaseAsCost"],e.action)),t.qty,n=>n.length===t.qty,"リリースするモンスターを選択。",a);if(r)return e.data=t.calcDamage(e,r),await m.releaseManyForTheSameReason(r,["Cost","Release"],e.action.entity,e.activator),{release:r}},prepare:S,execute:async e=>{if(!Wa(e.data))throw new v("値が正しくない。",e,e.data);return e.activator.getOpponentPlayer().effectDamage(e.data,e),!0},settle:async()=>!0,...t.otherActionProps});function*kn(){const t=[{name:"キャノン・ソルジャー",qty:1,filter:()=>!0,calcDamage:()=>500,otherActionProps:{},otherActions:[]},{name:"アマゾネスの射手",qty:2,filter:()=>!0,calcDamage:()=>1200,otherActionProps:{},otherActions:[]},{name:"メガキャノン・ソルジャー",qty:2,filter:()=>!0,calcDamage:()=>1500,otherActionProps:{},otherActions:[]},{name:"プリーステス・オーム",qty:1,filter:e=>e.attr.includes("Dark"),calcDamage:()=>800,otherActionProps:{},otherActions:[]},{name:"対空放花",qty:1,filter:e=>e.types.includes("Insect"),calcDamage:()=>800,otherActionProps:{},otherActions:[]},{name:"人投げトロール",qty:1,filter:e=>{var i,a;return!!((i=e.status.monsterCategories)!=null&&i.includes("Normal")&&!((a=e.status.monsterCategories)!=null&&a.includes("Token")))},calcDamage:()=>800,otherActionProps:{},otherActions:[]},{name:"墓守の大筒持ち",qty:1,filter:e=>{var i;return!!((i=e.status.nameTags)!=null&&i.includes("墓守")&&e.nm!=="墓守の大筒持ち")},calcDamage:()=>700,otherActionProps:{},otherActions:[]},{name:"カタパルト・ウォリアー",qty:1,filter:e=>{var i;return!!((i=e.status.nameTags)!=null&&i.includes("ジャンク"))},calcDamage:(e,i)=>i.map(a=>a.origin.attack??0).reduce((a,r)=>a+r,0),otherActionProps:{isOnlyNTimesPerTurnIfFaceup:1},otherActions:[j()]},{name:"ダーク・ダイブ・ボンバー",qty:1,filter:e=>!!(e.lvl&&e.lvl>0),calcDamage:(e,i)=>i.map(a=>a.lvl??0).reduce((a,r)=>a+r,0)*200,otherActionProps:{isOnlyNTimesPerTurn:1,executablePeriods:["main1"]},otherActions:[j()]}];for(const e of t)yield{name:e.name,actions:[Ot(e),...e.otherActions]};yield{name:"トゥーン・キャノン・ソルジャー",actions:[Ot({qty:1,filter:()=>!0,calcDamage:()=>500,otherActionProps:{}})],immediatelyActions:[{title:"自壊",executableCells:["MonsterZone"],executablePeriods:q.filter(e=>e!=="b1DBeforeDmgCalc"&&e!=="b2DBeforeDmgCalc"&&e!=="b1DDmgCalc"&&e!=="b2DDmgCalc"),execute:async(e,i,a)=>{i&&a&&i.nm==="トゥーン・ワールド"&&(a.movedAs.every(r=>!r.endsWith("Destroy"))||(e.entity.controller.writeInfoLog(`${i.toString()}が破壊されたため、${e.entity.toString()}は破壊される。`),m.tryMarkForDestroy([e.entity],{activator:e.entity.controller,action:e,selectedEntities:[]}),e.entity.info.isDying=!0,e.entity.info.causeOfDeath=["Effect","Destroy"]))}}],continuousEffects:[_e("召喚酔い","Monster",e=>[e],e=>[new R({title:"召喚酔い",validateAlive:i=>{const a=i.isSpawnedBy.moveLog.latestArrivalRecord;return!a||!i.duel.clock.isSameTurn(a.movedAt)?!1:a.movedAs.union(["NormalSummon","FlipSummon","SpecialSummon"]).length>0},isContinuous:!0,isSpawnedBy:e,actionAttr:{},isApplicableTo:()=>!0,statusCalculator:()=>({canAttack:!1})})]),_e("直接攻撃","Monster",e=>[e],e=>[new R({title:"直接攻撃",validateAlive:()=>!0,isContinuous:!0,isSpawnedBy:e,actionAttr:{},isApplicableTo:()=>!0,statusCalculator:i=>i.controller.getEntiteisOnField().filter(a=>a.nm==="トゥーン・ワールド").some(a=>a.face==="FaceUp")?i.controller.getOpponentPlayer().getMonstersOnField().filter(a=>{var r;return(r=a.status.monsterCategories)==null?void 0:r.includes("Toon")}).some(a=>a.face==="FaceUp")?{}:{canDirectAttack:!0}:{}})])]}}const Ci=Object.freeze(Object.defineProperty({__proto__:null,default:kn},Symbol.toStringTag,{value:"Module"}));function*Dn(){yield*["ラージマウス","レインボー・フラワー","レッグル","女王の影武者","人造人間７号"].map(t=>({name:t,actions:[],continuousEffects:[mn]}))}const Ti=Object.freeze(Object.defineProperty({__proto__:null,default:Dn},Symbol.toStringTag,{value:"Module"}));function*xn(){yield*[{name:"キラー・ポテト",filter:t=>t.attr.includes("Dark")&&(t.atk??9999)<=1500,qtyList:[1],posList:["Attack"],destroyTypes:["Effect"],executableCells:["Graveyard"]},{name:"キラー・トマト",filter:t=>t.attr.includes("Dark")&&(t.atk??9999)<=1500,qtyList:[1],posList:["Attack"],destroyTypes:["Battle"],executableCells:["Graveyard"]},{name:"巨大ネズミ",filter:t=>t.attr.includes("Earth")&&(t.atk??9999)<=1500,qtyList:[1],posList:["Attack"],destroyTypes:["Battle"],executableCells:["Graveyard"]},{name:"グリズリーマザー",filter:t=>t.attr.includes("Water")&&(t.atk??9999)<=1500,qtyList:[1],posList:["Attack"],destroyTypes:["Battle"],executableCells:["Graveyard"]},{name:"シャインエンジェル",filter:t=>t.attr.includes("Light")&&(t.atk??9999)<=1500,qtyList:[1],posList:["Attack"],destroyTypes:["Battle"],executableCells:["Graveyard"]},{name:"ドラゴンフライ",filter:t=>t.attr.includes("Wind")&&(t.atk??9999)<=1500,qtyList:[1],posList:["Attack"],destroyTypes:["Battle"],executableCells:["Graveyard"]},{name:"ＵＦＯタートル",filter:t=>t.attr.includes("Fire")&&(t.atk??9999)<=1500,qtyList:[1],posList:["Attack"],destroyTypes:["Battle"],executableCells:["Graveyard"]},{name:"荒野の女戦士",filter:t=>t.attr.includes("Earth")&&t.types.includes("Warrior")&&(t.atk??9999)<=1500,qtyList:[1],posList:["Attack"],destroyTypes:["Battle"],executableCells:["Graveyard"]},{name:"リトル・トルーパー",filter:t=>t.types.includes("Warrior")&&(t.lvl??9999)<3,qtyList:[1],posList:["Set"],destroyTypes:["Battle"],executableCells:["Graveyard","Banished"]},{name:"破面竜",filter:t=>t.types.includes("Warrior")&&(t.def??9999)<=1500,qtyList:[1],posList:["Attack","Defense"],destroyTypes:["Battle"],executableCells:["Graveyard"]},{name:"共鳴虫",filter:t=>t.types.includes("Insect")&&(t.atk??9999)<=1500,qtyList:[1],posList:["Attack","Defense"],destroyTypes:["Battle"],executableCells:["Graveyard"]},{name:"ピラミッド・タートル",filter:t=>t.types.includes("Zombie")&&(t.def??9999)<=2e3,qtyList:[1],posList:["Attack","Defense"],destroyTypes:["Battle"],executableCells:["Graveyard"]},{name:"ユーフォロイド",filter:t=>t.types.includes("Machine")&&(t.atk??9999)<=1500,qtyList:[1],posList:["Attack"],destroyTypes:["Battle"],executableCells:["Graveyard"]},{name:"ヘル・セキュリティ",filter:t=>t.types.includes("Fiend")&&(t.lvl??9999)===1,qtyList:[1],posList:["Attack","Defense"],destroyTypes:["Battle"],executableCells:["Graveyard"]},{name:"ガスタ・イグル",filter:t=>(t.status.nameTags??[]).includes("ガスタ")&&(t.status.monsterCategories??[]).includes("Tuner"),qtyList:[1],posList:["Attack","Defense"],destroyTypes:["Battle"],executableCells:["Graveyard"]},{name:"幻影の魔術士",filter:t=>(t.status.nameTags??[]).includes("ＨＥＲＯ")&&(t.atk??9999)<=1e3,qtyList:[1],posList:["Defense"],destroyTypes:["Battle"],executableCells:["Graveyard"]},{name:"ジェネクス・サーチャー",filter:t=>(t.status.nameTags??[]).includes("ジェネクス")&&(t.atk??9999)<=1500,qtyList:[1],posList:["Attack"],destroyTypes:["Battle"],executableCells:["Graveyard"]},{name:"紫炎の足軽",filter:t=>(t.status.nameTags??[]).includes("六武衆")&&(t.lvl??12)<=3,qtyList:[1],posList:["Attack","Defense"],destroyTypes:["Battle"],executableCells:["Graveyard"]},{name:"スレイブ・エイプ",filter:t=>(t.status.nameTags??[]).includes("剣闘獣")&&(t.lvl??12)<=4,qtyList:[1],posList:["Attack","Defense"],destroyTypes:["Battle"],executableCells:["Graveyard"]},{name:"ゼンマイハニー",filter:t=>(t.status.nameTags??[]).includes("ゼンマイ")&&(t.lvl??12)<=4,qtyList:[1],posList:["Attack","Defense"],destroyTypes:["Battle"],executableCells:["Graveyard"]},{name:"ＸＸ－セイバー エマーズブレイド",filter:t=>(t.status.nameTags??[]).includes("Ｘ－セイバー")&&(t.lvl??12)<=4,qtyList:[1],posList:["Attack","Defense"],destroyTypes:["Battle"],executableCells:["Graveyard"]},{name:"軍隊竜",filter:t=>t.nm==="軍隊竜",qtyList:[1],posList:["Attack","Defense"],destroyTypes:["Battle"],executableCells:["Graveyard"]},{name:"アサルト・ガンドッグ",filter:t=>t.nm==="アサルト・ガンドッグ",qtyList:[1,2,3,4,5],posList:["Attack","Defense"],destroyTypes:["Battle"],executableCells:["Graveyard"]},{name:"ハイエナ",filter:t=>t.nm==="ハイエナ",qtyList:[1,2,3,4,5],posList:["Attack","Defense"],destroyTypes:["Battle"],executableCells:["Graveyard"]}].map(t=>({name:t.name,actions:[{title:"①リクルート",isMandatory:!1,playType:"TriggerEffect",spellSpeed:"Normal",executableCells:t.executableCells,executablePeriods:t.destroyTypes.includes("Effect")?[..._,...A]:["b1DEnd","b2DEnd"],executableDuelistTypes:["Controller"],fixedTags:["SpecialSummonFromDeck"],meetsConditions:e=>e.action.entity.wasMovedAtPreviousChain&&e.action.entity.moveLog.latestRecord.movedAs.includes("Destroy")&&e.action.entity.moveLog.latestRecord.movedAs.union(t.destroyTypes).length>0,canExecute:e=>{const i=e.activator.getMonsterZones();return e.activator.getEnableSummonList(e.activator,"SpecialSummon",["Effect"],e.action,e.activator.getDeckCell().cardEntities.filter(t.filter).filter(r=>r.kind==="Monster").filter(r=>r.canBeTargetOfEffect(e)).map(r=>({monster:r,posList:t.posList,cells:i})),[],!1).length>0},prepare:async()=>({selectedEntities:[]}),execute:async e=>{const i=e.activator.getDeckCell().cardEntities.filter(t.filter),a=e.activator.getMonsterZones();return e.activator.summonMany(e.activator,"SpecialSummon",["Effect"],e.action,i.map(n=>({monster:n,posList:t.posList,cells:a})),[],!1,t.qtyList.length>1?void 0:t.qtyList[0],n=>t.qtyList.includes(n.length),!1)?(e.activator.getDeckCell().shuffle(),!0):!1},settle:async()=>!0}]}))}const _i=Object.freeze(Object.defineProperty({__proto__:null,default:xn},Symbol.toStringTag,{value:"Module"}));function*An(){yield{name:"死者蘇生",actions:[{title:"発動",isMandatory:!1,playType:"CardActivation",spellSpeed:"Normal",executableCells:["Hand","SpellAndTrapZone"],executablePeriods:["main1","main2"],executableDuelistTypes:["Controller"],fixedTags:["SpecialSummonFromGraveyard"],hasToTargetCards:!0,canExecute:e=>{const i=e.activator.getMonsterZones();return e.activator.getEnableSummonList(e.activator,"SpecialSummon",["Effect"],e.action,e.activator.duel.field.getCells("Graveyard").flatMap(r=>r.cardEntities).filter(r=>r.kind==="Monster").filter(r=>r.canBeTargetOfEffect(e)).map(r=>({monster:r,posList:C,cells:i})),[],!1).length>0},prepare:e=>ce(e,e.activator.duel.field.getCells("Graveyard").flatMap(i=>i.cardEntities).filter(i=>i.kind==="Monster").filter(i=>i.canBeTargetOfEffect(e))),execute:J,settle:async()=>!0},T]};for(const e of[{name:"大嵐",cellTypes:Oe,isOnlyEnemies:!1},{name:"ハーピィの羽根帚",cellTypes:Oe,isOnlyEnemies:!0},{name:"ブラック・ホール",cellTypes:N,isOnlyEnemies:!1},{name:"サンダー・ボルト",cellTypes:N,isOnlyEnemies:!0}])yield{name:e.name,actions:[{title:"発動",isMandatory:!1,playType:"CardActivation",spellSpeed:"Normal",executableCells:["Hand","SpellAndTrapZone"],executablePeriods:["main1","main2"],executableDuelistTypes:["Controller"],fixedTags:["DestroyOnField"],canExecute:i=>{let a=i.action.entity.field.getCells(...e.cellTypes).flatMap(r=>r.cardEntities).filter(r=>r!==i.action.entity);return e.isOnlyEnemies&&(a=a.filter(r=>r.controller!==i.activator)),a.length>0},prepare:async i=>{let a=i.action.entity.field.getCells(...e.cellTypes).flatMap(r=>r.cardEntities).filter(r=>r!==i.action.entity);return e.isOnlyEnemies&&(a=a.filter(r=>r.controller!==i.activator)),{selectedEntities:[],chainBlockTags:i.action.calcChainBlockTagsForDestroy(i.activator,a)}},execute:async i=>{let a=i.action.entity.field.getCells(...e.cellTypes).flatMap(r=>r.cardEntities).filter(r=>r!==i.action.entity);return e.isOnlyEnemies&&(a=a.filter(r=>r.controller!==i.activator)),await m.tryDestroy(a,i),!0},settle:async()=>!0},T]};yield{name:"ハリケーン",actions:[{title:"発動",isMandatory:!1,playType:"CardActivation",spellSpeed:"Normal",executableCells:["Hand","SpellAndTrapZone"],executablePeriods:["main1","main2"],executableDuelistTypes:["Controller"],fixedTags:["BounceToHand"],canExecute:e=>e.action.entity.field.getCells("SpellAndTrapZone","FieldSpellZone").flatMap(i=>i.cardEntities).some(i=>i!==e.action.entity),prepare:async()=>({selectedEntities:[]}),execute:async(e,i)=>{const a=i.map(n=>n.action).filter(n=>n.playType==="CardActivation").map(n=>n.entity).filter(n=>n.face==="FaceUp"),r=e.action.entity.field.getCells("SpellAndTrapZone","FieldSpellZone").flatMap(n=>n.cardEntities).filter(n=>!a.includes(n));return await m.returnManyToHandForTheSameReason(r,["Effect"],e.action.entity,e.activator),!0},settle:async()=>!0},T]};const t=e=>e.activator.duel.field.getWaitingRoomCell().cardEntities.find(i=>i.parent===e.action.entity)??D.createTokenEntity(e.activator,e.action.entity,{name:"セキュリティトークン",actions:Ze,staticInfo:{name:"セキュリティトークン",kind:"Monster",monsterCategories:["Normal","Token"],level:4,attack:2e3,defense:2e3,attributes:["Light"],types:["Cyberse"],wikiEncodedName:"%A5%BB%A5%AD%A5%E5%A5%EA%A5%C6%A5%A3%A5%C8%A1%BC%A5%AF%A5%F3"}});yield{name:"ワンタイム・パスコード",actions:[{title:"発動",isMandatory:!1,playType:"CardActivation",spellSpeed:"Normal",executableCells:["Hand","SpellAndTrapZone"],executablePeriods:["main1","main2"],executableDuelistTypes:["Controller"],isOnlyNTimesPerTurn:1,fixedTags:["SpecialSummon","SpecialSummonToken"],canExecute:e=>{const i=t(e),a=e.activator.getMonsterZones();return e.activator.getEnableSummonList(e.activator,"SpecialSummon",["Effect"],e.action,[{monster:i,posList:["Defense"],cells:a}],[],!1).length>0},prepare:async()=>({selectedEntities:[]}),execute:async e=>{const i=t(e),a=e.activator.getMonsterZones();return!!await e.activator.summon("SpecialSummon",["Effect"],e.action,i,["Defense"],a,[],!1)},settle:async()=>!0},T]},yield{name:"ワン・フォー・ワン",actions:[{title:"発動",isMandatory:!1,playType:"CardActivation",spellSpeed:"Normal",executableCells:["Hand","SpellAndTrapZone"],executablePeriods:["main1","main2"],executableDuelistTypes:["Controller"],fixedTags:["SpecialSummonFromDeck"],priorityForNPC:40,canPayCosts:e=>{if(e.activator.getDeckCell().cardEntities.every(i=>(i.lvl??12)>1)){if(e.activator.getHandCell().cardEntities.every(i=>(i.lvl??12)>1)||e.activator.getHandCell().cardEntities.filter(i=>i.kind==="Monster").length<2)return!1}else if(e.activator.getHandCell().cardEntities.filter(i=>i.kind==="Monster").length===0)return!1;return!0},canExecute:e=>{let i=[...e.activator.getDeckCell().cardEntities.filter(s=>(s.lvl??12)===1),...e.activator.getHandCell().cardEntities.filter(s=>(s.lvl??12)===1)];const a=e.activator.getHandCell().cardEntities;(a.length<2||!e.ignoreCosts)&&(i=i.filter(s=>!a.includes(s)));const r=e.activator.getMonsterZones();return e.activator.getEnableSummonList(e.activator,"SpecialSummon",["Effect"],e.action,i.map(s=>({monster:s,posList:C,cells:r})),[],!1).length>0},payCosts:async(e,i,a)=>{const r=[...e.activator.getDeckCell().cardEntities.filter(u=>(u.lvl??12)===1),...e.activator.getHandCell().cardEntities.filter(u=>(u.lvl??12)===1)],n=e.activator.getMonsterZones(),s=e.activator.getEnableSummonList(e.activator,"SpecialSummon",["Effect"],e.action,r.map(u=>({monster:u,posList:C,cells:n})),[],!1);let o=e.activator.getHandCell().cardEntities.filter(u=>u.kind==="Monster");s.length===1&&(o=o.filter(u=>!s.map(d=>d.monster).includes(u)));const c=await e.activator.waitSelectEntity(o,"墓地へ送るモンスターを選択",a);if(!c)throw new k(e);return await c.sendToGraveyard(["Cost"],e.action.entity,e.activator),{sendToGraveyard:[c]}},prepare:async()=>({selectedEntities:[]}),execute:async e=>{const i=[...e.activator.getDeckCell().cardEntities.filter(n=>n.lvl===1),...e.activator.getHandCell().cardEntities.filter(n=>n.lvl===1)],a=e.activator.getMonsterZones();return await e.activator.summonOne(e.activator,"SpecialSummon",["Effect"],e.action,i.map(n=>({monster:n,posList:C,cells:a})),[],!1,!1)?(e.activator.getDeckCell().shuffle(),!0):!1},settle:async()=>!0},T]},yield{name:"封印の黄金櫃",actions:[{title:"発動",isMandatory:!1,playType:"CardActivation",spellSpeed:"Normal",executableCells:["Hand","SpellAndTrapZone"],executablePeriods:["main1","main2"],executableDuelistTypes:["Controller"],fixedTags:["BanishFromDeck"],canExecute:e=>e.activator.getDeckCell().cardEntities.some(i=>e.activator.canTryBanish(i,"BanishAsEffect",e.action)),prepare:async()=>({selectedEntities:[]}),execute:async e=>{const i=e.activator.getDeckCell().cardEntities.filter(n=>e.activator.canTryBanish(n,"BanishAsEffect",e.action)),a=await e.activator.waitSelectEntity(i,"除外するカードを選択。",!1);if(!a)throw new k(e);return(await m.tryBanish("BanishAsEffect",[a],e)).forEach(n=>n.counterHolder.removeAll("GoldSarcophagus")),!0},settle:async()=>!0},Jr("回収カウント進行",["stanby"],e=>{e.activator.isTurnPlayer&&e.action.entity.field.getCells("Banished").flatMap(i=>i.cardEntities).filter(i=>i.moveLog.latestRecord.movedBy===e.action.entity).filter(i=>i.moveLog.latestRecord.actionOwner===e.activator).forEach(i=>{i.counterHolder.add("GoldSarcophagus",1,e.action.entity);const a=i.counterHolder.getQty("GoldSarcophagus",e.action.entity);a<3&&e.activator.duel.log.info(`${i.toString()}のターンカウント：${a-1}⇒${a}`)})}),{title:"回収",isMandatory:!0,playType:"LingeringEffect",spellSpeed:"Normal",executableCells:K,executablePeriods:["stanby"],executableDuelistTypes:me,canExecute:e=>e.activator.isTurnPlayer&&e.action.entity.field.getCells("Banished").flatMap(i=>i.cardEntities).filter(i=>i.moveLog.latestRecord.movedBy===e.action.entity).filter(i=>i.moveLog.latestRecord.actionOwner===e.activator).some(i=>i.counterHolder.getQty("GoldSarcophagus")===2),prepare:S,execute:async e=>{const i=e.action.entity.field.getCells("Banished").flatMap(r=>r.cardEntities).filter(r=>r.moveLog.latestRecord.movedBy===e.action.entity).filter(r=>r.moveLog.latestRecord.actionOwner===e.activator).filter(r=>r.counterHolder.getQty("GoldSarcophagus")===2);if(!i.length)throw new v("想定されない状態",e);let a=i[0];if(i.length>1){const r=await e.activator.waitSelectEntity(i,"回収するカードを選択。",!1);if(!r)throw new k(e);a=r}return await a.addToHand(["Effect"],e.action.entity,e.activator),!0},settle:async()=>!0},T]},yield{name:"魔の試着部屋",actions:[{title:"発動",isMandatory:!1,playType:"CardActivation",spellSpeed:"Normal",executableCells:["Hand","SpellAndTrapZone"],executablePeriods:["main1","main2"],executableDuelistTypes:["Controller"],fixedTags:["SpecialSummonFromDeck"],canPayCosts:e=>e.activator.lp>=800,canExecute:e=>e.activator.getDeckCell().cardEntities.length>0&&e.activator.getEnableSummonList(e.activator,"SpecialSummon",["Effect"],e.action,e.activator.getDeckCell().cardEntities.filter(i=>i.kind==="Monster").filter(i=>{var a;return(a=i.status.monsterCategories)==null?void 0:a.includes("Normal")}).filter(i=>(i.lvl??12)<4).map(i=>({monster:i,posList:C,cells:e.activator.getMonsterZones()})),[],!1).length>0,payCosts:(e,i)=>ve(e,i,800),prepare:async()=>({selectedEntities:[]}),execute:async e=>{if(e.activator.getDeckCell().cardEntities.length<4)return!1;const i=await m.excavateManyFromDeck(e.activator,4,["Effect"],e.action.entity,e.activator),a=i.filter(r=>r.kind==="Monster").filter(r=>{var n;return(n=r.status.monsterCategories)==null?void 0:n.includes("Normal")}).filter(r=>(r.lvl??12)<4);if(a.length){const r=e.activator.getMonsterZones(),n=a.length>r.length?r.length:a.length;await e.activator.summonMany(e.activator,"SpecialSummon",["Effect","Excavate"],e.action,a.map(s=>({monster:s,cells:r,posList:C})),[],!1,n,s=>s.length===n,!1)}return await m.sendManyToGraveyardForTheSameReason(a.filter(r=>!r.isOnFieldAsMonsterStrictly),["Effect","Excavate"],e.action.entity,e.activator),await m.returnManyToDeckForTheSameReason("Random",i.filter(r=>r.fieldCell.cellType==="Deck"),["Effect"],e.action.entity,e.activator),!0},settle:async()=>!0},T]}}const Ei=Object.freeze(Object.defineProperty({__proto__:null,default:An},Symbol.toStringTag,{value:"Module"}));function*Mn(){yield{name:"強欲な壺",actions:[{title:"発動",isMandatory:!1,playType:"CardActivation",spellSpeed:"Normal",executableCells:["Hand","SpellAndTrapZone"],executablePeriods:["main1","main2"],executableDuelistTypes:["Controller"],priorityForNPC:20,fixedTags:["Draw"],canExecute:t=>t.activator.getDeckCell().cardEntities.length>1&&t.activator.canDraw&&t.activator.canAddToHandFromDeck,prepare:async()=>({selectedEntities:[]}),execute:async t=>(await t.activator.draw(2,t.action.entity,t.activator),!0),settle:async()=>!0},T]},yield{name:"貪欲な壺",actions:[{title:"発動",isMandatory:!1,playType:"CardActivation",spellSpeed:"Normal",executableCells:["Hand","SpellAndTrapZone"],executablePeriods:["main1","main2"],executableDuelistTypes:["Controller"],fixedTags:["Draw","ReturnToDeckFromGraveyard"],priorityForNPC:30,canExecute:t=>t.activator.getGraveyard().cardEntities.filter(e=>e.kind==="Monster").filter(e=>e.canBeTargetOfEffect(t)).length>4&&t.activator.canDraw&&t.activator.canAddToHandFromDeck,prepare:async t=>{const e=await t.activator.waitSelectEntities(t.activator.getGraveyard().cardEntities.filter(i=>i.kind==="Monster").filter(i=>i.canBeTargetOfEffect(t)),5,i=>i.length===5,"デッキに戻すモンスターを選択。",!1);if(e)return{selectedEntities:e}},execute:async t=>t.selectedEntities.some(e=>e.wasMovedAtCurrentChain)?!1:(await m.returnManyToDeckForTheSameReason("Random",t.selectedEntities,["Effect"],t.action.entity,t.activator),await t.activator.draw(2,t.action.entity,t.activator),!0),settle:async()=>!0},T]},yield{name:"天使の施し",actions:[{title:"発動",isMandatory:!1,playType:"CardActivation",spellSpeed:"Normal",executableCells:["Hand","SpellAndTrapZone"],executablePeriods:["main1","main2"],executableDuelistTypes:["Controller"],fixedTags:["Draw","DiscordAsEffect"],priorityForNPC:30,canExecute:t=>t.activator.getDeckCell().cardEntities.length>2&&t.activator.canDraw&&t.activator.canAddToHandFromDeck&&t.activator.status.canDiscardAsEffect,prepare:async()=>({selectedEntities:[]}),execute:async t=>(await t.activator.draw(3,t.action.entity,t.activator),await t.activator.discard(2,"Effect",()=>!0,t.action.entity,t.activator),!0),settle:async()=>!0},T]},yield{name:"成金ゴブリン",actions:[{title:"発動",isMandatory:!1,playType:"CardActivation",spellSpeed:"Normal",executableCells:["Hand","SpellAndTrapZone"],executablePeriods:["main1","main2"],executableDuelistTypes:["Controller"],fixedTags:["Draw"],priorityForNPC:20,canExecute:t=>t.activator.getDeckCell().cardEntities.length>0&&t.activator.canDraw&&t.activator.canAddToHandFromDeck,prepare:async()=>({selectedEntities:[]}),execute:async t=>(await t.activator.draw(1,t.action.entity,t.activator),t.action.entity.field.duel.clock.incrementProcSeq(),t.activator.getOpponentPlayer().heal(1e3,t.action.entity),!0),settle:async()=>!0},T]},yield{name:"手札抹殺",actions:[{title:"発動",isMandatory:!1,playType:"CardActivation",spellSpeed:"Normal",executableCells:["Hand","SpellAndTrapZone"],executablePeriods:["main1","main2"],executableDuelistTypes:["Controller"],fixedTags:["Draw","DiscordAsEffect"],canExecute:t=>t.activator.getDeckCell().cardEntities.length>=t.activator.getHandCell().cardEntities.filter(e=>e.seq!==t.action.entity.seq).length&&t.activator.canDraw&&t.activator.canAddToHandFromDeck&&t.activator.getOpponentPlayer().canDraw&&t.activator.getOpponentPlayer().canAddToHandFromDeck&&t.action.entity.field.getAllCells().filter(e=>e.cellType==="Hand").flatMap(e=>e.cardEntities).some(e=>e.seq!==t.action.entity.seq),prepare:async()=>({selectedEntities:[]}),execute:async t=>{const e=t.activator.getHandCell().cardEntities.length,i=t.activator.getOpponentPlayer().getHandCell().cardEntities.length;return await m.sendManyToGraveyardForTheSameReason(t.action.entity.field.getCells("Hand").flatMap(a=>a.cardEntities),["Effect","Discard"],t.action.entity,t.activator),t.activator.duel.clock.incrementProcSeq(),await m.drawAtSameTime(t.activator,t.action.entity,e,i),!0},settle:async()=>!0},T]},yield{name:"一時休戦",actions:[{title:"発動",isMandatory:!1,playType:"CardActivation",spellSpeed:"Normal",executableCells:["Hand","SpellAndTrapZone"],executablePeriods:["main1","main2"],executableDuelistTypes:["Controller"],fixedTags:["Draw"],canExecute:t=>t.activator.getDeckCell().cardEntities.length>0&&t.activator.canDraw&&t.activator.getOpponentPlayer().getDeckCell().cardEntities.length>0&&t.activator.getOpponentPlayer().canDraw,prepare:S,execute:async t=>(await m.drawAtSameTime(t.activator,t.action.entity,1,1),[t.activator,t.activator.getOpponentPlayer()].forEach(e=>e.entity.damageFilterBundle.push(new Kt({title:"ダメージ無効",validateAlive:i=>i.duel.clock.turn-i.isSpawnedAt.turn<2,isContinuous:!1,isSpawnedBy:t.action.entity,actionAttr:t.action,isApplicableTo:()=>!0,calcType:"zero_typeA",filter:(i,a,r,n)=>(r.writeInfoLog(`${n.profile.name}は${i.isSpawnedBy}の効果でダメージを受けない。`),{zero_typeA:!0})}))),!0),settle:async()=>!0},T]},yield{name:"打ち出の小槌",actions:[{title:"発動",isMandatory:!1,playType:"CardActivation",spellSpeed:"Normal",executableCells:["Hand","SpellAndTrapZone"],executablePeriods:["main1","main2"],executableDuelistTypes:["Controller"],fixedTags:["Draw"],canExecute:t=>t.activator.canDraw,prepare:async()=>({selectedEntities:[]}),execute:async t=>{const e=t.activator.getHandCell().cardEntities;if(!e.length)return!1;let i=[...e];if(i.length>1&&!await t.activator.waitYesNo("全ての手札を入れ替える？")){const a=await t.activator.waitSelectEntities(e,void 0,r=>r.length>0,"デッキに戻すカードを選択。",!1);if(!a)throw new k(t);i=a}return await m.returnManyToDeckForTheSameReason("Random",i,["Effect"],t.action.entity,t.activator),t.activator.duel.clock.incrementProcSeq(),await t.activator.draw(i.length,t.action.entity,t.activator),!0},settle:async()=>!0},T]}}const wi=Object.freeze(Object.defineProperty({__proto__:null,default:Mn},Symbol.toStringTag,{value:"Module"}));function*Pn(){yield{name:"おろかな埋葬",actions:[{title:"発動",isMandatory:!1,playType:"CardActivation",spellSpeed:"Normal",executableCells:["Hand","SpellAndTrapZone"],executablePeriods:["main1","main2"],executableDuelistTypes:["Controller"],priorityForNPC:40,fixedTags:["SendToGraveyardFromDeck"],canExecute:t=>t.activator.getDeckCell().cardEntities.some(e=>e.kind==="Monster"),prepare:S,execute:async t=>{const e=t.activator.getDeckCell().cardEntities.filter(a=>a.kind==="Monster");if(e.length===0)return!1;const i=await t.activator.waitSelectEntity(e,"墓地に送るモンスターを選択",!1);if(!i)throw new k(t);return await i.sendToGraveyard(["Effect"],t.action.entity,t.activator),t.activator.getDeckCell().shuffle(),!0},settle:async()=>!0},T]},yield{name:"おろかな副葬",actions:[{title:"発動",isMandatory:!1,playType:"CardActivation",spellSpeed:"Normal",executableCells:["Hand","SpellAndTrapZone"],executablePeriods:["main1","main2"],executableDuelistTypes:["Controller"],isOnlyNTimesPerTurn:1,priorityForNPC:40,fixedTags:["SendToGraveyardFromDeck"],canExecute:t=>t.activator.getDeckCell().cardEntities.some(e=>e.kind!=="Monster"),prepare:S,execute:async t=>{const e=t.activator.getDeckCell().cardEntities.filter(a=>a.kind!=="Monster");if(e.length===0)return!1;const i=await t.activator.waitSelectEntity(e,"墓地に送る魔法罠を選択",!1);if(!i)throw new k(t);return await i.sendToGraveyard(["Effect"],t.action.entity,t.activator),t.activator.getDeckCell().shuffle(),!0},settle:async()=>!0},T]},yield{name:"苦渋の選択",actions:[{title:"発動",isMandatory:!1,playType:"CardActivation",spellSpeed:"Normal",executableCells:["Hand","SpellAndTrapZone"],executablePeriods:["main1","main2"],executableDuelistTypes:["Controller"],priorityForNPC:40,fixedTags:["SendToGraveyardFromDeck","SearchFromDeck"],canExecute:t=>t.activator.getDeckCell().cardEntities.length>4,prepare:S,execute:async t=>{const e=t.activator.getDeckCell().cardEntities;if(e.length<5)return!1;const i=await t.activator.waitSelectEntities(e,5,r=>r.length===5,"相手に見せるカードを選択。",!1);if(!i)throw new k(t);const a=await t.activator.getOpponentPlayer().waitSelectEntity(i,"手札に加えさせるカードを選択。",!1);if(!a)throw new k(t,i);return t.activator.writeInfoLog(`${t.activator.getOpponentPlayer().name}は${a.toString()}を選択。`),await a.addToHand(["Effect"],t.action.entity,t.activator),await m.sendManyToGraveyardForTheSameReason(i.filter(r=>r!==a),["Effect"],t.action.entity,t.activator),t.activator.getDeckCell().shuffle(),!0},settle:async()=>!0},T]};for(const t of["モンスターゲート","名推理"]){let e={title:"発動",isMandatory:!1,playType:"CardActivation",spellSpeed:"Normal",executableCells:["Hand","SpellAndTrapZone"],executablePeriods:["main1","main2"],executableDuelistTypes:["Controller"],fixedTags:["SpecialSummonFromDeck","SendToGraveyardFromDeck","SpecialSummon"],canExecute:i=>i.activator.getDeckCell().cardEntities.filter(a=>a.kind==="Monster").some(a=>{var r;return!((r=a.status.monsterCategories)!=null&&r.includes("SpecialSummon"))}),prepare:S,execute:async i=>{var n,s;if(!i.activator.getDeckCell().cardEntities.length||!i.activator.getAvailableMonsterZones().length)return!1;let a=-1;if(t==="名推理"){const o=await i.activator.getOpponentPlayer().waitSelectNumberFromRange("レベルを選択",1,12,!1);if(o===void 0)throw new k(i);a=o,i.activator.writeInfoLog(`${i.activator.getOpponentPlayer().name}は${a}を選択。`)}const r=[...i.activator.getDeckCell().cardEntities];for(const o of i.activator.getDeckCell().cardEntities){if(await o.excavate(["Effect"],i.action.entity,i.activator),o.kind!=="Monster"){await o.sendToGraveyard(["Effect","Excavate"],i.action.entity,i.activator);continue}if((n=o.status.monsterCategories)!=null&&n.includes("SpecialSummon")){await o.sendToGraveyard(["Effect","Excavate"],i.action.entity,i.activator);continue}return(s=o.status.monsterCategories)!=null&&s.includes("NormalSummonOnly")?(await o.sendToGraveyard(["Effect","Excavate"],i.action.entity,i.activator),i.activator.writeInfoLog(`${o.toString()}は通常召喚可能だが特殊召喚できないため、墓地に送られた。`),!1):o.lvl===a?(await o.sendToGraveyard(["Effect","Excavate"],i.action.entity,i.activator),i.activator.writeInfoLog(`${o.toString()}のレベルは${a}のため、墓地に送られた。`),!1):!!await i.activator.summon("SpecialSummon",["Effect","Excavate"],i.action,o,C,i.activator.getAvailableMonsterZones(),[],!1)}return i.activator.writeInfoLog("通常召喚可能なモンスターがめくられなかったため、全てのカードをデッキに戻す。"),await m.returnManyToDeckForTheSameReason("Random",r,["Effect"],i.action.entity,i.activator),!1},settle:async()=>!0};t==="モンスターゲート"&&(e={...e,...Xr()}),yield{name:t,actions:[e,T]}}}const bi=Object.freeze(Object.defineProperty({__proto__:null,default:Pn},Symbol.toStringTag,{value:"Module"}));function*Fn(){const t=[{name:"魔法石の採掘",filter:()=>!0,discard:!0},{name:"魔法再生",filter:e=>e.kind==="Spell",discard:!1}];for(const e of t)yield{name:e.name,actions:[{title:"発動",isMandatory:!1,playType:"CardActivation",spellSpeed:"Normal",executableCells:["Hand","SpellAndTrapZone"],executablePeriods:["main1","main2"],executableDuelistTypes:["Controller"],fixedTags:["AddToHandFromGraveyard"],canPayCosts:i=>i.activator.getHandCell().cardEntities.filter(e.filter).length>1,payCosts:async(i,a,r)=>{const n=i.activator.getHandCell().cardEntities.filter(e.filter),s=await i.activator.waitSelectEntities(n,2,o=>o.length===2,"コストとするカードを選択",r);if(s)return e.discard?(await m.discardManyForTheSameReason(s,["Cost"],i.action.entity,i.activator),{discard:s}):(await m.sendManyToGraveyardForTheSameReason(s,["Cost"],i.action.entity,i.activator),{sendToGraveyard:s})},...Z(i=>i.activator.getGraveyard().cardEntities.filter(a=>a.kind==="Spell"),{message:"手札に加える魔法カードを選択"}),execute:async i=>{if(!i.selectedEntities.length)throw new v("想定されない状態",i);const a=i.selectedEntities[0];return a.wasMovedAfter(i.isActivatedAt)?!1:(await a.addToHand(["Effect"],i.action.entity,i.activator),!0)},settle:async()=>!0},T]}}const ki=Object.freeze(Object.defineProperty({__proto__:null,default:Fn},Symbol.toStringTag,{value:"Module"}));function*Nn(){for(const t of[{name:"トゲトゲ神の殺虫剤",type:"Insect"},{name:"戦士抹殺",type:"Warrior"},{name:"酸の嵐",type:"Machine"},{name:"永遠の渇水",type:"Fish"},{name:"神の息吹",type:"Rock"},{name:"魔女狩り",type:"Spellcaster"},{name:"悪魔払い",type:"Fiend"}])yield{name:t.name,actions:[{title:"発動",isMandatory:!1,playType:"CardActivation",spellSpeed:"Normal",executableCells:["Hand","SpellAndTrapZone"],executablePeriods:["main1","main2"],executableDuelistTypes:["Controller"],canExecute:e=>e.action.entity.field.getMonstersOnFieldStrictly().some(i=>i.types.includes(t.type)),prepare:async e=>{const i=e.action.entity.field.getMonstersOnFieldStrictly().filter(a=>a.types.includes(t.type));return{selectedEntities:[],chainBlockTags:e.action.calcChainBlockTagsForDestroy(e.activator,i)}},execute:async e=>{const i=e.action.entity.field.getMonstersOnFieldStrictly().filter(a=>a.types.includes(t.type));return await m.tryDestroy(i,e),!0},settle:async()=>!0},T]};yield*[{name:"増援",filter:t=>t.origin.kind==="Monster"&&t.types.includes("Warrior")&&(t.origin.level??5)<5},{name:"化石調査",filter:t=>t.origin.kind==="Monster"&&t.types.includes("Dinosaur")&&(t.origin.level??6)<6},{name:"Ｅ－エマージェンシーコール",filter:t=>t.origin.kind==="Monster"&&(t.origin.nameTags??[]).includes("Ｅ・ＨＥＲＯ")},{name:"召集の聖刻印",filter:t=>t.origin.kind==="Monster"&&(t.origin.nameTags??[]).includes("聖刻")},{name:"召喚師のスキル",filter:t=>t.origin.kind==="Monster"&&(t.origin.monsterCategories??[]).includes("Normal")&&(t.origin.level??4)>4},{name:"トゥーンのもくじ",filter:t=>(t.origin.nameTags??[]).includes("トゥーン")},{name:"融合賢者",filter:t=>t.origin.name==="融合"},{name:"虹の架け橋",filter:t=>t.origin.kind!=="Monster"&&(t.origin.nameTags??[]).includes("宝玉")},{name:"紫炎の狼煙",filter:t=>t.origin.kind==="Monster"&&(t.origin.nameTags??[]).includes("六武衆")&&(t.origin.level??4)<4},{name:"テラ・フォーミング",filter:t=>t.origin.kind==="Spell"&&t.origin.spellCategory==="Field"},{name:"コール・リゾネーター",filter:t=>t.origin.kind==="Monster"&&(t.origin.nameTags??[]).includes("リゾネーター")}].map(t=>({name:t.name,actions:[{title:"発動",isMandatory:!1,playType:"CardActivation",spellSpeed:"Normal",executableCells:["Hand","SpellAndTrapZone"],executablePeriods:["main1","main2"],executableDuelistTypes:["Controller"],fixedTags:["SearchFromDeck"],priorityForNPC:40,canExecute:e=>e.activator.getDeckCell().cardEntities.some(t.filter)&&e.activator.canAddToHandFromDeck,prepare:S,execute:async e=>{const i=e.activator.getDeckCell().cardEntities.filter(t.filter);if(!i.length)return!1;const a=await e.activator.waitSelectEntity(i,"手札に加えるカードを選択",!1);return a?(await a.addToHand(["Effect"],e.action.entity,e.activator),e.activator.getDeckCell().shuffle(),!0):!1},settle:async()=>!0},T]})),yield*[{name:"戦士の生還",filter:t=>t.kind==="Monster"&&t.types.includes("Warrior"),qty:1},{name:"ダーク・バースト",filter:t=>t.kind==="Monster"&&t.attr.includes("Dark")&&(t.atk??9999)<=1500,qty:1},{name:"悪夢再び",filter:t=>t.kind==="Monster"&&t.attr.includes("Dark")&&(t.def??9999)===0,qty:2},{name:"サルベージ",filter:t=>t.kind==="Monster"&&t.attr.includes("Water")&&(t.atk??9999)<=1500,qty:2},{name:"バッテリーリサイクル",filter:t=>t.kind==="Monster"&&t.types.includes("Thunder")&&(t.atk??9999)<=1500,qty:2},{name:"闇の量産工場",filter:t=>t.kind==="Monster"&&(t.status.monsterCategories??[]).includes("Normal"),qty:2}].map(t=>({name:t.name,actions:[{title:"発動",isMandatory:!1,playType:"CardActivation",spellSpeed:"Normal",executableCells:["Hand","SpellAndTrapZone"],executablePeriods:["main1","main2"],executableDuelistTypes:["Controller"],hasToTargetCards:!0,fixedTags:["AddToHandFromGraveyard"],priorityForNPC:40,canExecute:e=>e.activator.getGraveyard().cardEntities.filter(t.filter).length>=t.qty,prepare:S,execute:async e=>{const i=e.activator.getGraveyard().cardEntities.filter(t.filter);if(i.length===0)return!1;const a=await e.activator.waitSelectEntities(i,t.qty,r=>r.length===t.qty,"手札に加えるカードを選択",!1);for(const r of a??[])await r.addToHand(["Effect"],e.action.entity,e.activator);return!0},settle:async()=>!0},T]})),yield*[{name:"トレード・イン",filter:t=>t.kind==="Monster"&&(t.lvl??0)===8},{name:"調和の宝札",filter:t=>t.kind==="Monster"&&(t.origin.monsterCategories??[]).includes("Tuner")&&t.types.includes("Dragon")&&(t.atk??9999)<=1e3},{name:"デステニー・ドロー",filter:t=>t.kind==="Monster"&&(t.origin.nameTags??[]).includes("Ｄ－ＨＥＲＯ")}].map(t=>({name:t.name,actions:[{title:"発動",isMandatory:!1,playType:"CardActivation",spellSpeed:"Normal",executableCells:["Hand","SpellAndTrapZone"],executablePeriods:["main1","main2"],executableDuelistTypes:["Controller"],fixedTags:["Draw"],priorityForNPC:40,canPayCosts:(...e)=>Ae(...e,t.filter),canExecute:e=>e.activator.getDeckCell().cardEntities.length>1,payCosts:async(...e)=>Me(...e,t.filter),prepare:async()=>({selectedEntities:[]}),execute:async e=>(await e.activator.draw(2,e.action.entity,e.activator),!0),settle:async()=>!0},T]})),yield*[{name:"火の粉",calcHeal:()=>[0,-200]},{name:"雷鳴",calcHeal:()=>[0,-300]},{name:"ファイヤー・ボール",calcHeal:()=>[0,-500]},{name:"火あぶりの刑",calcHeal:()=>[0,-600]},{name:"昼夜の大火事",calcHeal:()=>[0,-800]},{name:"火炎地獄",calcHeal:()=>[-500,-1e3]},{name:"盗人ゴブリン",calcHeal:()=>[500,-500]},{name:"ブルー・ポーション",calcHeal:()=>[400,0]},{name:"レッド・ポーション",calcHeal:()=>[500,0]},{name:"ゴブリンの秘薬",calcHeal:()=>[600,0]},{name:"天使の生き血",calcHeal:()=>[800,0]},{name:"治療の神 ディアン・ケト",calcHeal:()=>[1e3,0]},{name:"恵みの雨",calcHeal:()=>[1e3,1e3]}].map(t=>({name:t.name,actions:[{title:"発動",isMandatory:!1,playType:"CardActivation",spellSpeed:"Normal",executableCells:["Hand","SpellAndTrapZone"],executablePeriods:["main1","main2"],executableDuelistTypes:["Controller"],prepare:async()=>{const[e,i]=t.calcHeal(),a=[];return e<0&&a.push("DamageToSelf"),i<0&&a.push("DamageToOpponent"),{selectedEntities:[],chainBlockTags:a}},execute:async e=>{const[i,a]=t.calcHeal();return a>0?e.activator.getOpponentPlayer().heal(a,e.action.entity):a<0&&e.activator.getOpponentPlayer().effectDamage(Math.abs(a),e),i>0?e.activator.heal(i,e.action.entity):i<0&&e.activator.effectDamage(Math.abs(i),e),!0},settle:async()=>!0},T]}))}const Di=Object.freeze(Object.defineProperty({__proto__:null,default:Nn},Symbol.toStringTag,{value:"Module"}));function*On(){yield{name:"強欲な瓶",actions:[T,{title:"発動",isMandatory:!1,playType:"CardActivation",spellSpeed:"Quick",executableCells:["SpellAndTrapZone"],executablePeriods:_,executableDuelistTypes:["Controller"],fixedTags:["Draw"],canExecute:t=>t.activator.getDeckCell().cardEntities.length>1&&t.activator.canDraw&&t.activator.canAddToHandFromDeck,prepare:S,execute:async t=>(await t.activator.draw(1,t.action.entity,t.activator),!0),settle:async()=>!0}]},yield{name:"戦線復帰",actions:[{title:"発動",isMandatory:!1,playType:"CardActivation",spellSpeed:"Quick",executableCells:["SpellAndTrapZone"],executablePeriods:_,executableDuelistTypes:["Controller"],hasToTargetCards:!0,fixedTags:["SpecialSummonFromGraveyard"],canExecute:t=>{const e=t.activator.getMonsterZones();return t.activator.getEnableSummonList(t.activator,"SpecialSummon",["Effect"],t.action,t.activator.getGraveyard().cardEntities.filter(a=>a.kind==="Monster").filter(a=>a.canBeTargetOfEffect(t)).map(a=>({monster:a,posList:["Defense"],cells:e})),[],!1).length>0},prepare:t=>ce(t,t.activator.getGraveyard().cardEntities.filter(e=>e.kind==="Monster").filter(e=>e.canBeTargetOfEffect(t)),["Defense"]),execute:(...t)=>J(...t,["Defense"]),settle:async()=>!0},T]},yield{name:"サンダー・ブレイク",actions:[{title:"発動",isMandatory:!1,playType:"CardActivation",spellSpeed:"Quick",executableCells:["SpellAndTrapZone"],executablePeriods:_,executableDuelistTypes:["Controller"],canPayCosts:Ae,payCosts:Me,...Z((t,e,i)=>t.action.entity.field.getCardsOnFieldStrictly().filter(a=>a!==t.action.entity).filter(a=>a.canBeTargetOfEffect(t)).filter(a=>{if(!i)return!0;const r=$r.flatMap(n=>i[n]??[]);return r.push(...r.flatMap(n=>n.info.equipEntities)),!r.includes(a)}),{message:"対象とするカードを選択。",do:"Destroy"}),execute:async t=>t.selectedEntities.every(e=>!e.isOnField)?!1:(await m.tryDestroy(t.selectedEntities,t),!0),settle:async()=>!0},T]}}const xi=Object.freeze(Object.defineProperty({__proto__:null,default:On},Symbol.toStringTag,{value:"Module"}));function*Bn(){for(const t of["炸裂装甲","次元幽閉"])yield{name:t,actions:[T,{title:"発動",playType:"CardActivation",spellSpeed:"Quick",isMandatory:!1,executableCells:["SpellAndTrapZone"],executablePeriods:["b1Battle","b2Battle"],executableDuelistTypes:["Controller"],hasToTargetCards:!0,isNoticedForcibly:!0,meetsConditions:(e,i)=>i.some(a=>a.action.playType==="DeclareAttack"),canExecute:e=>{if(e.activator.isTurnPlayer)return!1;const i=e.activator.duel.attackingMonster;return!(!i||!i.canBeTargetOfEffect(e)||!i.isOnFieldAsMonsterStrictly||t==="次元幽閉"&&!e.activator.canTryBanish(i,"BanishAsEffect",e.action))},prepare:async e=>{const i=e.activator.duel.attackingMonster;if(!i)throw new v("想定されない状態",e,i);const a=t==="炸裂装甲"?e.action.calcChainBlockTagsForDestroy(e.activator,[i]):["BanishFromField"];return{selectedEntities:[i],chainBlockTags:a}},execute:async e=>(t==="炸裂装甲"?await m.tryDestroy(e.selectedEntities,e):await m.tryBanish("BanishAsEffect",e.selectedEntities,e),!0),settle:async()=>!0}]}}const Ai=Object.freeze(Object.defineProperty({__proto__:null,default:Bn},Symbol.toStringTag,{value:"Module"}));function*Ln(){yield{name:"ご隠居の猛毒薬",actions:[T,{title:"発動",isMandatory:!1,playType:"CardActivation",spellSpeed:"Quick",executableCells:["Hand","SpellAndTrapZone"],executablePeriods:_,executableDuelistTypes:["Controller"],prepare:async(t,e,i)=>{const a=[{seq:0,text:"●自分は１２００ＬＰ回復する。",tags:[]},{seq:1,text:"●相手に８００ダメージを与える。",tags:["DamageToOpponent"]}],r=await t.activator.waitSelectText(a,"使用する効果を選択",i);if(r!==void 0)return{selectedEntities:[],chainBlockTags:r.tags}},execute:async t=>{if(t.data===0)t.activator.heal(1200,t.action.entity);else if(t.data===1)t.activator.getOpponentPlayer().effectDamage(800,t);else throw new v("値が正しくない。",t,t.data);return!0},settle:async()=>!0}]},yield{name:"月の書",actions:[{title:"発動",isMandatory:!1,playType:"CardActivation",spellSpeed:"Quick",executableCells:["Hand","SpellAndTrapZone"],executablePeriods:_,executableDuelistTypes:["Controller"],...Z(t=>t.action.entity.field.getMonstersOnFieldStrictly().filter(e=>e.canBeTargetOfEffect(t)).filter(e=>e.canBeSet).filter(e=>e.face==="FaceUp"),{message:"対象とするモンスターを選択。"}),execute:async t=>{const e=t.selectedEntities[0];return!e.isOnFieldAsMonsterStrictly||e.battlePosition==="Set"?!1:e.canBeEffected(t.activator,t.action.entity,t.action)?(await e.setBattlePosition("Set",["Effect"],t.action.entity,t.activator),!0):(t.activator.duel.log.info(`${e.toString()}は${t.action.entity.toString()}の効果を受けない。`),!1)},settle:async()=>!0},T]},yield{name:"突進",actions:[{title:"発動",isMandatory:!1,playType:"CardActivation",spellSpeed:"Quick",executableCells:["Hand","SpellAndTrapZone"],executablePeriods:[..._,...A],executableDuelistTypes:["Controller"],...Z(t=>t.action.entity.field.getMonstersOnFieldStrictly().filter(e=>e.face==="FaceUp").filter(e=>e.canBeTargetOfEffect(t)),{message:"対象とするモンスターを選択。"}),execute:async t=>{const e=t.selectedEntities[0];return!e.isOnFieldAsMonsterStrictly||e.battlePosition==="Set"?!1:e.canBeEffected(t.activator,t.action.entity,t.action)?(e.numericOprsBundle.push(L.createLingeringAddition("攻撃力上昇",i=>i.duel.clock.isSameTurn(i.isSpawnedAt),t.action.entity,t.action,"attack",(i,a,r)=>r+700)),!0):(t.activator.duel.log.info(`${e.toString()}は${t.action.entity.toString()}の効果を受けない。`),!1)},settle:async()=>!0},T]},yield{name:"手札断殺",actions:[{title:"発動",isMandatory:!1,playType:"CardActivation",spellSpeed:"Quick",executableCells:["Hand","SpellAndTrapZone"],executablePeriods:[..._,...A],executableDuelistTypes:["Controller"],fixedTags:["Draw"],canExecute:t=>{for(const e of[t.activator,t.activator.getOpponentPlayer()])if(!e.canDraw||e.getHandCell().cardEntities.filter(i=>i.canBeSentToGraveyard(t.activator,t.action.entity,"SendToGraveyardAsEffect",t.action)).filter(i=>i!==t.action.entity).length<2||e.getDeckCell().cardEntities.length<2)return!1;return!0},prepare:S,execute:async t=>{if(t.activator.getHandCell().cardEntities.length<2||t.activator.getOpponentPlayer().getHandCell().cardEntities.length<2)return!1;let e=0;for(const i of[t.activator,t.activator.getOpponentPlayer()]){const a=await i.waitSelectEntities(i.getHandCell().cardEntities,2,n=>n.length===2,"墓地に送るカードを２枚選択。",!1);if(!a)throw new k(t,i);const r=await m.sendManyToGraveyardForTheSameReason(a,["Effect"],t.action.entity,t.activator);e+=r.length}return e?(t.activator.duel.clock.incrementProcSeq(),await m.drawAtSameTime(t.activator,t.action.entity,2,2),!0):!1},settle:async()=>!0},T]},yield{name:"リロード",actions:[{title:"発動",isMandatory:!1,playType:"CardActivation",spellSpeed:"Quick",executableCells:["Hand","SpellAndTrapZone"],executablePeriods:[..._,...A],executableDuelistTypes:["Controller"],fixedTags:["Draw"],hasToTargetCards:!0,canExecute:t=>t.activator.canDraw,prepare:S,execute:async t=>{const e=t.activator.getHandCell().cardEntities;return e.length?(await m.returnManyToDeckForTheSameReason("Random",e,["Effect"],t.action.entity,t.activator),t.activator.duel.clock.incrementProcSeq(),await t.activator.draw(e.length,t.action.entity,t.activator),!0):!1},settle:async()=>!0},T]}}const Mi=Object.freeze(Object.defineProperty({__proto__:null,default:Ln},Symbol.toStringTag,{value:"Module"})),qn=(t,e,i,a,r,n,s)=>{if(!t.lvl||r.some(d=>!d.lvl))return;const o=r.map(d=>d.lvl??0).reduce((d,p)=>d+p,0),c=qe(...r.map(d=>d.lvl??0));if(o<t.lvl||s==="Equal"&&o!==t.lvl||s==="OrMore"&&o-c>=t.lvl||!n(r))return;const u=[...r.map(d=>({material:d,cell:d.fieldCell}))];if(e.activator.getEnableSummonList(e.activator,"RitualSummon",["Effect","SpecialSummon"],e.action,[{monster:e.action.entity,posList:i,cells:a}],u,!1).length)return u};function*Pi(t,...e){const[i,a,r,n,s]=e,o=t.activator.getCells(...i).flatMap(p=>p.cardEntities).filter(p=>{var f;return(f=p.status.monsterCategories)==null?void 0:f.includes("Ritual")}).filter(a);if(!o.length)return;const c=t.activator.getCells(...r).flatMap(p=>p.cardEntities).filter(p=>p.lvl).filter(p=>p.canBeReleased(t.activator,t.action.entity,["RitualMaterial","ReleaseAsEffect"],t.action));if(!c.length)return;const u=t.activator.getMonsterZones(),d=["Attack","Defense"];for(const p of o)for(const f of c.filter(h=>h!==p).getAllOnOffPattern()){const h=qn(p,t,d,u,f,n,s);h&&(yield{monster:p,materialInfos:h})}}const Rn=async(t,...e)=>{var d,p;const i=Pi(t,...e).toArray(),a=i.map(f=>f.monster).getDistinct(),r=await t.activator.waitSelectEntity(a,"儀式召喚するモンスターを選択。");if(!r)return!1;const n=i.filter(f=>f.monster===r).map(f=>f.materialInfos),s=n.map(f=>({infos:f,materialSeqList:f.map(h=>h.material.seq).sort()}));let o=n[0].map(f=>f.material);if(n.length>1){const f=n.flatMap(h=>h.map(y=>y.material)).getDistinct();o=await t.activator.waitSelectEntities(f,void 0,h=>{const y=h.map(w=>w.seq).sort();return s.some(w=>y.length===w.materialSeqList.length&&y.every((g,M)=>g===w.materialSeqList[M]))},"リリースするモンスターを選択",!1)??o}const c=o.map(f=>f.seq).sort(),u=(d=s.find(f=>c.length===f.materialSeqList.length&&c.every((h,y)=>h===f.materialSeqList[y])))==null?void 0:d.infos;if(!u)throw new v("想定されない状態",t,o);return await m.releaseManyForTheSameReason(o,["RitualMaterial","Effect","SpecialSummonMaterial"],t.action.entity,t.activator),await t.activator.summon("RitualSummon",["Effect","SpecialSummon"],t.action,r,C,t.activator.getMonsterZones(),u,!1),r.info.isRebornable=!((p=r.origin.monsterCategories)!=null&&p.includes("RegularSpecialSummonOnly")),u.map(f=>f.material).forEach(f=>f.onUsedAsMaterial(t,t.action.entity)),!0},Hn=(t,e,i,a,r)=>({canExecute:n=>Pi(n,t,e,i,a,r).some(s=>s.materialInfos.length),prepare:async()=>{const n=[];return t.includes("Hand")&&n.push("SpecialSummonFromHand"),t.includes("Graveyard")&&n.push("SpecialSummonFromGraveyard"),t.includes("ExtraDeck")&&n.push("SpecialSummonFromExtraDeck"),t.includes("Banished")&&n.push("SpecialSummonFromBanished"),t.includes("Deck")&&n.push("SpecialSummonFromDeck"),{selectedEntities:[],chainBlockTags:n}},execute:n=>Rn(n,t,e,i,a,r),settle:async()=>!0});function*Zn(){for(const t of[{spellName:"カオスの儀式",monsterName:"カオス・ソルジャー"},{spellName:"仮面魔獣の儀式",monsterName:"仮面魔獣マスクド・ヘルレイザー"},{spellName:"亀の誓い",monsterName:"クラブ・タートル"},{spellName:"ジャベリンビートルの契約",monsterName:"ジャベリンビートル"},{spellName:"ゼラの儀式",monsterName:"ゼラ"},{spellName:"カオス－黒魔術の儀式",monsterName:"マジシャン・オブ・ブラックカオス"},{spellName:"ガルマソードの誓い",monsterName:"ガルマソード"},{spellName:"ライオンの儀式",monsterName:"スーパー・ウォー・ライオン"},{spellName:"チャクラの復活",monsterName:"チャクラ"},{spellName:"要塞クジラの誓い",monsterName:"要塞クジラ"},{spellName:"ローの祈り",monsterName:"ローガーディアン"},{spellName:"スカルライダーの復活",monsterName:"スカルライダー"},{spellName:"踊りによる誘発",monsterName:"ダンシング・ソルジャー"},{spellName:"悪魔鏡の儀式",monsterName:"デビルズ・ミラー"},{spellName:"ハンバーガーのレシピ",monsterName:"ハングリーバーガー"}])yield{name:t.spellName,actions:[{title:"発動",isMandatory:!1,playType:"CardActivation",spellSpeed:"Normal",executableCells:["Hand","SpellAndTrapZone"],executablePeriods:["main1","main2"],executableDuelistTypes:["Controller"],...Hn(["Hand"],e=>e.nm===t.monsterName,["Hand","MonsterZone","ExtraMonsterZone"],()=>!0,"OrMore")},T]}}const Fi=Object.freeze(Object.defineProperty({__proto__:null,default:Zn},Symbol.toStringTag,{value:"Module"}));function*Gn(){for(const t of["大地の騎士ガイアナイト","スクラップ・デスデーモン"])yield{name:t,actions:[j()]};yield{name:"ナチュル・ガオドレイク",actions:[j(t=>t.length===1&&t.every(e=>e.attr.some(i=>i==="Earth")),t=>t.length>0&&t.every(e=>e.attr.some(i=>i==="Earth")))]},yield{name:"マジカル・アンドロイド",actions:[j(),{title:"回復",isMandatory:!0,playType:"IgnitionEffect",spellSpeed:"Normal",executableCells:["MonsterZone","ExtraMonsterZone"],executablePeriods:["end"],executableDuelistTypes:["Controller"],isOnlyNTimesPerTurnIfFaceup:1,meetsConditions:t=>t.activator.isTurnPlayer&&t.action.entity.face==="FaceUp",prepare:S,execute:async t=>(t.activator.heal(t.activator.getMonstersOnField().filter(e=>e.face==="FaceUp").filter(e=>e.types.includes("Psychic")).length*600,t.action.entity),!0),settle:async()=>!0}]}}const Ni=Object.freeze(Object.defineProperty({__proto__:null,default:Gn},Symbol.toStringTag,{value:"Module"}));function*$n(){yield{name:"にせアバター",actions:[],continuousEffects:[ke("THE_DEVILS_AVATAR","Monster",t=>[t],t=>["attack","defense"].map(e=>L.createContinuous("THE_DEVILS_AVATAR",i=>i.isSpawnedBy.isOnFieldStrictly&&i.isSpawnedBy.face==="FaceUp",t,(i,a)=>a.isOnFieldStrictly&&a.face==="FaceUp",e,"calculated","THE_DEVILS_AVATAR",()=>Number.MIN_VALUE)))]},yield{name:"にせドレッド・ルート",actions:[],continuousEffects:[Be("THE_DEVILS_DREAD-ROOT","Monster",t=>["attack","defense"].map(e=>L.createContinuous("THE_DEVILS_DREAD-ROOT",i=>i.isSpawnedBy.isOnFieldStrictly&&i.isSpawnedBy.face==="FaceUp",t,(i,a)=>a.isMonster&&a.isOnFieldStrictly&&a.face==="FaceUp"&&a!==i.isSpawnedBy,e,"calculated","THE_DEVILS_DREAD-ROOT",(i,a,r)=>Math.round(r/2))))]}}const Oi=Object.freeze(Object.defineProperty({__proto__:null,default:$n},Symbol.toStringTag,{value:"Module"})),jn=(t,e,i,a,r=2,n=2,s)=>{if(!t.action.entity.origin.rank||a.length<r||a.length>n||a.some(c=>!c.lvl)||a.some(c=>c.lvl!==t.action.entity.rank)||!s(a))return;const o=a.map(c=>({material:c,cell:c.fieldCell,level:c.status.level}));if(t.activator.getEnableSummonList(t.activator,"XyzSummon",["Rule","XyzSummon","SpecialSummon"],t.action,[{monster:t.action.entity,posList:e,cells:i}],o,!1).length)return o};function*Un(t,e=2,i=2,a=r=>r.length>1){const r=t.activator.getMonstersOnField().filter(s=>s.battlePosition!=="Set");if(r.length<e)return;const n=[...t.activator.getMonsterZones(),...t.activator.getAvailableExtraMonsterZones()];yield*r.getAllOnOffPattern().filter(s=>s.length>=e).filter(s=>s.length<=i).map(s=>jn(t,C,n,s,e,i,a)??[]).filter(s=>s.length)}const zn=async(t,e,i)=>{var c;const a=t.action.getEnableMaterialPatterns(t).toArray(),r=a.map(u=>({infos:u,materialSeqList:u.map(d=>d.material.seq).sort()}));let n=a[0].map(u=>u.material);if(a.length>1){const u=a.flatMap(p=>p.map(f=>f.material)).getDistinct(),d=await t.activator.waitSelectEntities(u,void 0,p=>{const f=p.map(h=>h.seq).sort();return r.some(h=>f.length===h.materialSeqList.length&&f.every((y,w)=>y===h.materialSeqList[w]))},"エクシーズ素材とするモンスターを選択",i);if(!d)return;n=d}const s=n.map(u=>u.seq).sort(),o=(c=r.find(u=>s.length===u.materialSeqList.length&&s.every((d,p)=>d===u.materialSeqList[p])))==null?void 0:c.infos;if(!o)throw new v("想定されない状態",t,n);return await m.convertManyToXyzMaterials(o.map(u=>u.material),["XyzMaterial","Rule","Cost"],t.action.entity,t.activator),{summonMaterialInfos:o}},Vn=(t=2,e=2,i=a=>a.length>1)=>({title:"エクシーズ召喚",isMandatory:!1,playType:"SpecialSummon",spellSpeed:"Normal",executableCells:["ExtraDeck"],executablePeriods:["main1","main2"],executableDuelistTypes:["Controller"],getEnableMaterialPatterns:a=>Un(a,t,e,i),canPayCosts:a=>a.action.getEnableMaterialPatterns(a).some(r=>r.length),canExecute:a=>!a.ignoreCosts||a.activator.getAvailableExtraMonsterZones().length+a.activator.getAvailableMonsterZones().length>0,payCosts:zn,prepare:a=>ee(a,"XyzSummon",["Rule","SpecialSummon","XyzSummon"],["Attack","Defense"]),execute:te,settle:async()=>!0});function*Wn(){yield*[{name:"ジェムナイト・パール",qty:2},{name:"覚醒の勇士 ガガギゴ",qty:3}].map(t=>({name:t.name,actions:[Vn(t.qty,t.qty)]}))}const Bi=Object.freeze(Object.defineProperty({__proto__:null,default:Wn},Symbol.toStringTag,{value:"Module"}));function*Qn(){yield{name:"シューティング・ライザー・ドラゴン",actions:[j(),{title:"①墓地送り",isMandatory:!1,playType:"TriggerEffect",spellSpeed:"Normal",executableCells:N,executablePeriods:[..._,...A],executableDuelistTypes:["Controller"],fixedTags:["SendToGraveyardFromDeck","IfSpecialSummonSucceed"],isOnlyNTimesPerTurn:1,canExecute:t=>t.action.entity.hasBeenArrivalNow(["SynchroSummon"])&&t.activator.getDeckCell().cardEntities.some(e=>(e.lvl??12)<(t.action.entity.lvl??0)),prepare:S,execute:async t=>{const e=t.activator.getDeckCell().cardEntities.filter(r=>(r.lvl??12)<(t.action.entity.lvl??0));if(e.length===0)return!1;const i=await t.activator.waitSelectEntity(e,"墓地に送るモンスターを選択",!1);if(!i)throw new v("想定されない状況",t);await i.sendToGraveyard(["Effect"],t.action.entity,t.activator);const a=i.lvl??0;return t.action.entity.numericOprsBundle.push(L.createLingeringAddition("レベル減少",()=>!0,t.action.entity,t.action,"level",(r,n,s)=>s-a)),!0},settle:async()=>!0},mi({title:"②シンクロ召喚",isOnlyNTimesPerChain:1})]}}const Li=Object.freeze(Object.defineProperty({__proto__:null,default:Qn},Symbol.toStringTag,{value:"Module"})),Xn=(t,e,i,a,r,n)=>{const s=t.fusionMaterialInfos.filter(u=>u.type!=="Overmuch");if(!s.length||!r.length||s.length!==r.length||!n(e,t,r)||!t.validateFusionMaterials(r))return;const o=s.map(u=>{const d=[];return le(u)?d.push(...r.filter(p=>u.cardName===p.nm||p.status.fusionSubstitute)):d.push(...r.filter(u.filter)),{require:u,materials:d}});if(o.some(u=>!u.materials.length)||o.flatMap(u=>u.materials).getDistinct().length<r.length)return;let c=[[]];for(const u of o)c=[...c.flatMap(d=>u.materials.map(p=>{if(d.some(h=>h.material===p))return[...d];const f={material:p,cell:p.fieldCell};return le(u.require)&&(f.name=u.require.cardName),[...d,f]}))];return c=c.filter(u=>u.length===r.length).filter(u=>u.filter(d=>d.name&&d.material.nm!==d.name).length<2),c.find(u=>e.activator.getEnableSummonList(e.activator,"FusionSummon",["Effect","SpecialSummon"],e.action,[{monster:e.action.entity,posList:i,cells:a}],u,!1).length)};function*qi(t,...e){const[i,a,r,n]=e,s=t.activator.getCells(...i).flatMap(d=>d.cardEntities).filter(d=>{var p;return(p=d.status.monsterCategories)==null?void 0:p.includes("Fusion")}).filter(d=>a(t,d));if(!s.length)return;const o=t.activator.getCells(...r).flatMap(d=>d.cardEntities).filter(d=>d.isMonster).filter(d=>d.canBeEffected(t.activator,t.action.entity,t.action));if(!o.length)return;const c=[...t.activator.getMonsterZones(),...t.activator.duel.field.getCells("ExtraMonsterZone")],u=["Attack","Defense"];for(const d of s){const p=d.fusionMaterialInfos.filter(f=>f.type!=="Overmuch");if(p.length&&!(o.every(f=>!f.status.fusionSubstitute)&&p.filter(le).some(f=>o.every(h=>h.nm!==f.cardName)))&&!p.filter(Ls).some(f=>o.every(h=>!f.filter(h))))for(const f of o.filter(h=>h!==d).getAllOnOffPattern().filter(h=>h.length===p.length)){const h=Xn(d,t,u,c,f,n);h&&(yield{monster:d,materialInfos:h},console.log(d,h))}}}const Kn=async(t,...e)=>{var p;const i=qi(t,...e).toArray(),a=i.map(f=>f.monster).getDistinct(),r=await t.activator.waitSelectEntity(a,"融合召喚するモンスターを選択。");if(!r)return!1;const n=r.fusionMaterialInfos.filter(qs),s=i.filter(f=>f.monster===r).map(f=>f.materialInfos),o=s.map(f=>({infos:f,requiredSeqList:f.map(h=>h.material.seq)}));let c=s[0].map(f=>f.material);if(s.length>1||n.length){const f=s.flatMap(h=>h.map(y=>y.material)).getDistinct();c=await t.activator.waitSelectEntities(f,void 0,h=>o.some(y=>y.requiredSeqList.every(w=>h.map(g=>g.seq).includes(w))&&h.filter(w=>!y.requiredSeqList.includes(w.seq)).every(w=>n.some(g=>g.filter(w)))),"融合素材とするモンスターを選択",!1)??c}const u=o.find(f=>f.requiredSeqList.every(h=>c.map(y=>y.seq).includes(h))&&c.filter(h=>!f.requiredSeqList.includes(h.seq)).every(h=>n.some(y=>y.filter(h))));if(!u)throw new v("想定されない状態",t,c);const d=u.infos;return d.push(...c.filter(f=>!u.requiredSeqList.includes(f.seq)).map(f=>({material:f,cell:f.fieldCell}))),await m.sendManyToGraveyardForTheSameReason(c,["FusionMaterial","Effect","SpecialSummonMaterial"],t.action.entity,t.activator),await t.activator.summon("FusionSummon",["Effect","SpecialSummon"],t.action,r,C,[...t.activator.getMonsterZones(),...t.activator.duel.field.getCells("ExtraMonsterZone")],d,!1),r.info.isRebornable=!((p=r.origin.monsterCategories)!=null&&p.includes("RegularSpecialSummonOnly")),d.map(f=>f.material).forEach(f=>f.onUsedAsMaterial(t,t.action.entity)),!0},mt=(t,e,i,a,r)=>({fixedTags:["SpecialSummonFromExtraDeck"],canExecute:n=>qi(n,t,e,i,a,r).some(s=>s.materialInfos.length),prepare:S,execute:n=>Kn(n,t,e,i,a,r),settle:async()=>!0});function*Jn(){for(const t of["心眼の女神","沼地の魔獣王","イリュージョン・シープ","破壊神 ヴァサーゴ"])yield{name:t,actions:[],continuousEffects:[tt]};yield{name:"沼地の魔神王",actions:[{title:"融合サーチ",isMandatory:!1,playType:"IgnitionEffect",spellSpeed:"Normal",executableCells:["Hand"],executablePeriods:["main1","main2"],executableDuelistTypes:["Controller"],fixedTags:["SearchFromDeck"],canPayCosts:Vr,canExecute:t=>t.activator.getDeckCell().cardEntities.some(e=>e.nm==="融合")&&t.activator.canAddToHandFromDeck,getDests:t=>[t.activator.getGraveyard()],payCosts:Wr,prepare:S,execute:async t=>{const e=t.activator.getDeckCell().cardEntities.filter(a=>a.nm==="融合");if(!e.length)return!1;const i=await t.activator.waitSelectEntity(e,"手札に加えるカードを選択",!1);return i?(await i.addToHand(["Effect"],t.action.entity,t.activator),t.activator.getDeckCell().shuffle(),!0):!1},settle:async()=>!0}],continuousEffects:[tt]},yield{name:"パラサイト・フュージョナー",actions:[{title:"融合",isMandatory:!1,playType:"TriggerEffect",spellSpeed:"Normal",executableCells:["MonsterZone"],executablePeriods:_,executableDuelistTypes:["Controller"],...mt(["ExtraDeck"],()=>!0,["MonsterZone","ExtraMonsterZone"],(t,e,i)=>i.includes(t.action.entity),"Graveyard"),settle:async()=>!0}],summonFilter:(t,e,i,a,r,n,s,o,c,u)=>{const d={posList:c,cells:u},p={posList:[],cells:[]};if(!r.includes("FusionSummon"))return d;const f=o.find(h=>h.material===t.isSpawnedBy);return f?f.name&&f.name!==t.isSpawnedBy.nm?d:p:d},continuousEffects:[tt]}}const Ri=Object.freeze(Object.defineProperty({__proto__:null,default:Jn},Symbol.toStringTag,{value:"Module"}));function*Yn(){yield{name:"魔導サイエンティスト",actions:[{title:"特殊召喚",isMandatory:!1,playType:"IgnitionEffect",spellSpeed:"Normal",executableCells:["MonsterZone"],executablePeriods:["main1","main2"],executableDuelistTypes:["Controller"],fixedTags:["SpecialSummonFromExtraDeck"],canPayCosts:t=>t.activator.lp>=1e3,canExecute:t=>{const e=t.activator.getMonsterZones();return t.activator.getEnableSummonList(t.activator,"SpecialSummon",["Effect"],t.action,t.activator.getExtraDeck().cardEntities.filter(a=>{var r;return(r=a.status.monsterCategories)==null?void 0:r.includes("Fusion")}).filter(a=>a.lvl&&a.lvl<7).map(a=>({monster:a,posList:C,cells:e})),[],!1).length>0},payCosts:(t,e)=>ve(t,e,1e3),prepare:S,execute:async t=>{const e=t.activator.getMonsterZones(),i=await t.activator.summonOne(t.activator,"SpecialSummon",["Effect"],t.action,t.activator.getExtraDeck().cardEntities.filter(a=>{var r;return(r=a.status.monsterCategories)==null?void 0:r.includes("Fusion")}).filter(a=>a.lvl&&a.lvl<7).map(a=>({monster:a,posList:C,cells:e})),[],!1,!1);return i?(i.procFilterBundle.push(ye.createLingering("直接攻撃不可",()=>!0,t.action.entity,t.action,(a,r)=>r.face==="FaceUp"&&r.isOnFieldAsMonsterStrictly,["BattleTarget"],(a,r,n,s,o)=>a!==n?!0:o.every(c=>c.entityType!=="Duelist"))),i.counterHolder.setCurfewFlg(t.action.entity),!0):!1},settle:async()=>!0},{title:"自発帰還",isMandatory:!0,playType:"LingeringEffect",spellSpeed:"Normal",executableCells:K,executablePeriods:["end"],executableDuelistTypes:me,canExecute:t=>t.action.entity.field.getMonstersOnFieldStrictly().some(e=>e.counterHolder.getCurfewFlg(t.action.entity)),prepare:S,execute:async t=>{const e=t.action.entity.field.getMonstersOnFieldStrictly().filter(a=>a.counterHolder.getCurfewFlg(t.action.entity));if(!e.length)throw new v("想定されない状態",t);let i=e[0];if(e.length>1){const a=await t.activator.waitSelectEntity(e,"帰還させるカードを選択。",!1);if(!a)throw new k(t);i=a}return await i.returnToDeck("Bottom",["Effect"],t.action.entity,t.activator),!0},settle:async()=>!0}]}}const Hi=Object.freeze(Object.defineProperty({__proto__:null,default:Yn},Symbol.toStringTag,{value:"Module"}));function*In(){for(const t of[{name:"マンジュ・ゴッド",kinds:["Monster","Spell"]},{name:"センジュ・ゴッド",kinds:["Monster"]},{name:"ソニックバード",kinds:["Spell"]}])yield{name:t.name,actions:[{title:"①儀式サーチ",isMandatory:!1,playType:"TriggerEffect",spellSpeed:"Normal",executableCells:["MonsterZone"],executablePeriods:_,executableDuelistTypes:["Controller"],fixedTags:["SearchFromDeck"],meetsConditions:e=>e.action.entity.hasBeenArrivalNow(["NormalSummon","FlipSummon"]),canExecute:e=>e.activator.canAddToHandFromDeck&&e.activator.getDeckCell().cardEntities.filter(i=>t.kinds.includes(i.kind)).some(i=>{var a;return i.status.spellCategory==="Ritual"||((a=i.status.monsterCategories)==null?void 0:a.includes("Ritual"))}),prepare:S,execute:async e=>{if(!e.activator.canAddToHandFromDeck)return!1;const i=e.activator.getDeckCell().cardEntities.filter(r=>t.kinds.includes(r.kind)).filter(r=>{var n;return r.status.spellCategory==="Ritual"||((n=r.status.monsterCategories)==null?void 0:n.includes("Ritual"))});if(!i.length)return!1;const a=await e.activator.waitSelectEntity(i,"手札に加えるカードを選択",!1);if(!a)throw new k(e,i);return await a.addToHand(["Effect"],e.action.entity,e.activator),e.activator.getDeckCell().shuffle(),!0},settle:async()=>!0}]}}const Zi=Object.freeze(Object.defineProperty({__proto__:null,default:In},Symbol.toStringTag,{value:"Module"}));function*es(){yield{name:"儀式の準備",actions:[{title:"発動",isMandatory:!1,playType:"CardActivation",spellSpeed:"Normal",executableCells:["Hand","SpellAndTrapZone"],executablePeriods:["main1","main2"],executableDuelistTypes:["Controller"],fixedTags:["SearchFromDeck","ReturnToHandFromGraveyard"],canExecute:t=>t.activator.getDeckCell().cardEntities.filter(e=>{var i;return(i=e.status.monsterCategories)==null?void 0:i.includes("Ritual")}).some(e=>e.lvl&&e.lvl<8)&&t.activator.canAddToHandFromDeck,prepare:S,execute:async t=>{if(!t.activator.canAddToHandFromDeck)return!1;const e=t.activator.getDeckCell().cardEntities.filter(n=>{var s;return(s=n.status.monsterCategories)==null?void 0:s.includes("Ritual")}).filter(n=>n.lvl&&n.lvl<8);if(!e.length)return!1;const i=await t.activator.waitSelectEntity(e,"手札に加えるカードを選択",!1);if(!i)return!1;if(await i.addToHand(["Effect"],t.action.entity,t.activator),t.activator.getDeckCell().shuffle(),!t.activator.canAddToHandFromGraveyard)return!0;const a=t.activator.getGraveyard().cardEntities.filter(n=>n.status.spellCategory==="Ritual");if(a.length===1&&!await t.activator.waitYesNo("儀式カードをサルベージする？"))return!0;const r=await t.activator.waitSelectEntity(a,"手札に加えるカードを選択",!0);return r&&(t.activator.duel.clock.incrementProcSeq(),await r.addToHand(["Effect"],t.action.entity,t.activator)),!0},settle:async()=>!0},T]},yield{name:"儀式の下準備",actions:[{title:"発動",isMandatory:!1,playType:"CardActivation",spellSpeed:"Normal",executableCells:["Hand","SpellAndTrapZone"],executablePeriods:["main1","main2"],executableDuelistTypes:["Controller"],isOnlyNTimesPerTurn:1,fixedTags:["SearchFromDeck","ReturnToHandFromGraveyard"],canExecute:t=>{if(!t.activator.canAddToHandFromDeck)return!1;const e=t.activator.getDeckCell().cardEntities.filter(a=>a.status.spellCategory==="Ritual").flatMap(a=>a.status.textTags??[]),i=["Deck"];return t.activator.canAddToHandFromGraveyard&&i.push("Graveyard"),t.activator.getCells(...i).flatMap(a=>a.cardEntities).filter(a=>{var r;return(r=a.status.monsterCategories)==null?void 0:r.includes("Ritual")}).some(a=>e.includes(a.nm))},prepare:S,execute:async t=>{if(!t.activator.canAddToHandFromDeck)return!1;let e=t.activator.getDeckCell().cardEntities.filter(o=>o.status.spellCategory==="Ritual").flatMap(o=>o.status.textTags??[]);if(!e.length)return!1;const i=["Deck"];if(t.activator.canAddToHandFromGraveyard&&i.push("Graveyard"),e=t.activator.getCells(...i).flatMap(o=>o.cardEntities).filter(o=>{var c;return(c=o.status.monsterCategories)==null?void 0:c.includes("Ritual")}).filter(o=>e.includes(o.nm)).map(o=>o.nm),!e.length)return!1;const a=t.activator.getDeckCell().cardEntities.filter(o=>o.status.spellCategory==="Ritual").filter(o=>o.status.textTags&&o.status.textTags.union(e).length);if(!a.length)return!1;const r=await t.activator.waitSelectEntity(a,"手札に加えるカードを選択",!1);if(!r)throw new k(t);const n=t.activator.getCells(...i).flatMap(o=>o.cardEntities).filter(o=>{var c;return(c=o.status.monsterCategories)==null?void 0:c.includes("Ritual")}).filter(o=>{var c;return(c=r.status.textTags)==null?void 0:c.includes(o.nm)});if(!n.length)throw console.error(r.status.textTags),new v("想定されない状態",t,r,r.status.textTags);const s=await t.activator.waitSelectEntity(n,"手札に加えるカードを選択",!1);if(!s)throw new k(t,a);return await m.addManyToHand([r,s],["Effect"],t.action.entity,t.activator),t.activator.getDeckCell().shuffle(),!0},settle:async()=>!0},T]}}const Gi=Object.freeze(Object.defineProperty({__proto__:null,default:es},Symbol.toStringTag,{value:"Module"}));function*ts(){yield{name:"折れ竹光",actions:[he(),T]},yield{name:"妖刀竹光",actions:[he(),T,{title:"②直接攻撃付与",isMandatory:!1,playType:"IgnitionEffect",spellSpeed:"Normal",executableCells:["SpellAndTrapZone"],executablePeriods:["main1","main2"],executableDuelistTypes:["Controller"],isOnlyNTimesPerTurn:1,...Z(t=>t.activator.getSpellTrapsOnField().filter(e=>{var i;return(i=e.status.nameTags)==null?void 0:i.includes("竹光")}).filter(e=>e!==t.action.entity).filter(e=>e.status.spellCategory==="Equip"),{message:"手札に戻すカードを選択。",tags:["BounceToHand"]}),execute:async t=>{const e=t.action.entity.info.equipedBy;return e?(await m.returnManyToHandForTheSameReason(t.selectedEntities,["Effect"],t.action.entity,t.activator),e.statusOperatorBundle.push(new R({title:"直接攻撃",validateAlive:i=>i.duel.clock.isSameTurn(i.isSpawnedAt),isContinuous:!1,isSpawnedBy:t.action.entity,actionAttr:t.action,isApplicableTo:(i,a)=>a.isOnFieldAsMonsterStrictly&&a.face==="FaceUp",statusCalculator:()=>({canDirectAttack:!0})})),!0):!1},settle:async()=>!0},{title:"③サーチ",isMandatory:!1,playType:"TriggerEffect",spellSpeed:"Normal",executableCells:["Graveyard"],executablePeriods:[..._,...A],executableDuelistTypes:["Controller"],fixedTags:["SearchFromDeck"],meetsConditions:t=>t.action.entity.wasMovedAtPreviousChain&&t.action.entity.wasMovedFrom.cellType!=="Banished",canExecute:t=>t.activator.canAddToHandFromDeck&&t.activator.getDeckCell().cardEntities.filter(e=>{var i;return(i=e.status.nameTags)==null?void 0:i.includes("竹光")}).some(e=>e.status.name!=="妖刀竹光"),prepare:S,execute:async t=>{const e=t.activator.getDeckCell().cardEntities.filter(a=>{var r;return(r=a.status.nameTags)==null?void 0:r.includes("竹光")}).filter(a=>a.status.name!=="妖刀竹光");if(!e.length)return!1;const i=await t.activator.waitSelectEntity(e,"手札に加えるカードを選択。",!1);if(!i)throw new k(t);return await i.addToHand(["Effect"],t.action.entity,t.activator),t.activator.getDeckCell().shuffle(),!0},settle:async()=>!0}]},yield{name:"真刀竹光",actions:[he(),T,{title:"②相手モンスター破壊",isMandatory:!1,playType:"TriggerEffect",spellSpeed:"Normal",executableCells:["SpellAndTrapZone"],executablePeriods:["b1DAfterDmgCalc","b2DAfterDmgCalc"],executableDuelistTypes:["Controller"],canExecute:t=>{const e=t.action.entity.info.equipedBy;return!(!e||!e.info.battleLog.filter(i=>t.activator.duel.clock.isPreviousStage(i.timestamp)).some(i=>i.enemy.entityType==="Duelist")||!t.activator.getOpponentPlayer().getMonstersOnField().length||!t.activator.getOpponentPlayer().lifeLog.filter(i=>t.activator.duel.clock.isPreviousStage(i.clock)).some(i=>i.entity===e))},prepare:async t=>({selectedEntities:[],chainBlockTags:t.action.calcChainBlockTagsForDestroy(t.activator,t.activator.getOpponentPlayer().getMonstersOnField()),prepared:void 0}),execute:async t=>(await m.tryDestroy(t.activator.getOpponentPlayer().getMonstersOnField(),t)).length>0,settle:async()=>!0},{title:"③竹光入替",isMandatory:!1,playType:"IgnitionEffect",spellSpeed:"Normal",executableCells:["SpellAndTrapZone"],executablePeriods:["main1","main2"],executableDuelistTypes:["Controller"],canPayCosts:t=>t.action.entity.info.equipedBy?jr(t):!1,canExecute:t=>!!(t.action.entity.info.equipedBy&&t.activator.getDeckCell().cardEntities.filter(e=>{var i;return(i=e.status.nameTags)==null?void 0:i.includes("竹光")}).filter(e=>e.status.name!=="真刀竹光").some(e=>e.status.spellCategory==="Equip"))&&t.activator.duel.field.getMonstersOnFieldStrictly().some(e=>e.canBeTargetOfEffect(t)),payCosts:Ur,prepare:S,execute:async t=>{const e=t.activator.getDeckCell().cardEntities.filter(o=>{var c;return(c=o.status.nameTags)==null?void 0:c.includes("竹光")}).filter(o=>o.status.name!=="真刀竹光").filter(o=>o.status.spellCategory==="Equip");if(!e.length)return!1;const i=t.activator.getAvailableSpellTrapZones();if(!i.length)return!1;const a=t.activator.duel.field.getMonstersOnFieldStrictly().filter(o=>o.canBeTargetOfEffect(t));if(!a.length)return!1;const r=await t.activator.waitSelectEntity(e,"装備するカードを選択。",!1);if(!r)throw new k("竹光選択",t);const n=await t.activator.duel.view.waitSelectDestination(t.activator,r,i,"装備カードを置く場所を選択。","装備",!1);if(!n)throw new k("配置場所選択",t);await r.putDirectly(n,"Spell",["Effect"],t.action.entity,t.activator),t.activator.getDeckCell().shuffle();const s=await t.activator.waitSelectEntity(a,"装備する対象を選択。",!1);if(!s)throw new k("装備対象選択",t);return r.info.equipedBy=s,r.info.effectTargets[t.action.seq]=[s],s.info.equipEntities.push(r),!0},settle:async()=>!0}]}}const $i=Object.freeze(Object.defineProperty({__proto__:null,default:ts},Symbol.toStringTag,{value:"Module"}));function*is(){yield{name:"黄金色の竹光",actions:[{title:"発動",isMandatory:!1,playType:"CardActivation",spellSpeed:"Normal",executableCells:["Hand","SpellAndTrapZone"],executablePeriods:["main1","main2"],executableDuelistTypes:["Controller"],priorityForNPC:20,fixedTags:["Draw"],meetsConditions:t=>t.activator.getSpellTrapsOnField().filter(e=>{var i;return(i=e.status.nameTags)==null?void 0:i.includes("竹光")}).filter(e=>e.face==="FaceUp").some(e=>e.status.spellCategory==="Equip"),canExecute:t=>t.activator.getDeckCell().cardEntities.length>0&&t.activator.canDraw,prepare:S,execute:async t=>(await t.activator.draw(2,t.action.entity,t.activator),!0),settle:async()=>!0},T]}}const ji=Object.freeze(Object.defineProperty({__proto__:null,default:is},Symbol.toStringTag,{value:"Module"}));function*as(){yield{name:"ＢＦ－疾風のゲイル",actions:[{title:"①特殊召喚",isMandatory:!1,playType:"SpecialSummon",spellSpeed:"Normal",executableCells:["Hand"],executablePeriods:["main1","main2"],executableDuelistTypes:["Controller"],canExecute:t=>t.activator.getMonstersOnField().filter(e=>(e.status.nameTags??[]).includes("ＢＦ")).some(e=>e.nm!==t.action.entity.origin.name)&&$(t,C,[],["Rule"]),getDests:t=>Q(t,C,[],["Rule"]),prepare:t=>ee(t,"SpecialSummon",["SpecialSummon","Rule"],C),execute:te,settle:async()=>!0},{title:"②攻守半減",isMandatory:!1,playType:"IgnitionEffect",spellSpeed:"Normal",executableCells:["MonsterZone"],executablePeriods:["main1","main2"],executableDuelistTypes:["Controller"],isOnlyNTimesPerTurnIfFaceup:1,...Z(t=>t.activator.getOpponentPlayer().getMonstersOnField().filter(e=>e.face==="FaceUp").filter(e=>e.canBeTargetOfEffect(t)),{message:"対象モンスターを選択。"}),execute:async t=>{const e=t.selectedEntities.filter(i=>i.isOnFieldAsMonsterStrictly).filter(i=>i.face==="FaceUp").find(i=>i.canBeEffected(t.activator,t.action.entity,t.action));return e?(["attack","defense"].map(i=>L.createLingeringFixation("②攻守半減",()=>!0,t.action.entity,t.action,i,(a,r,n)=>Math.round(n/2))).forEach(i=>e.numericOprsBundle.push(i)),!0):!1},settle:async()=>!0}]}}const Ui=Object.freeze(Object.defineProperty({__proto__:null,default:as},Symbol.toStringTag,{value:"Module"}));function*rs(){yield{name:"水晶機巧－ハリファイバー",actions:[yt(t=>t.length===2&&t.some(e=>{var i;return(i=e.status.monsterCategories)==null?void 0:i.includes("Tuner")})),{title:"①リクルート",isMandatory:!1,playType:"TriggerEffect",spellSpeed:"Normal",executableCells:N,executablePeriods:[..._,...A],executableDuelistTypes:["Controller"],fixedTags:["SpecialSummonFromDeck"],meetsConditions:t=>t.action.entity.hasBeenArrivalNow(["LinkSummon"]),canExecute:t=>{const e=[t.activator.getHandCell(),t.activator.getDeckCell()].flatMap(r=>r.cardEntities).filter(r=>(r.lvl??12)<4).filter(r=>{var n;return(n=r.status.monsterCategories)==null?void 0:n.includes("Tuner")}),i=t.activator.getMonsterZones();return t.activator.getEnableSummonList(t.activator,"SpecialSummon",["Effect"],t.action,e.map(r=>({monster:r,cells:i,posList:["Defense"]})),[],!1).length>0},prepare:S,execute:async t=>{const e=[t.activator.getHandCell(),t.activator.getDeckCell()].flatMap(r=>r.cardEntities).filter(r=>(r.lvl??12)<4).filter(r=>{var n;return(n=r.status.monsterCategories)==null?void 0:n.includes("Tuner")}),i=t.activator.getMonsterZones(),a=await t.activator.summonOne(t.activator,"SpecialSummon",["Effect"],t.action,e.map(r=>({monster:r,cells:i,posList:["Defense"]})),[],!1,!1);if(!a)throw new k(t);return a.statusOperatorBundle.push(new R({title:"効果発動不可",validateAlive:r=>r.duel.clock.isSameTurn(r.isSpawnedAt),isContinuous:!1,isSpawnedBy:t.action.entity,actionAttr:t.action,isApplicableTo:(r,n)=>r.duel.clock.isSameTurn(r.isSpawnedAt)&&n.isOnFieldAsMonsterStrictly&&n.face==="FaceUp",statusCalculator:()=>({canActivateEffect:!1})})),!0},settle:async()=>!0},{title:"②シンクロ召喚",isMandatory:!1,playType:"QuickEffect",spellSpeed:"Quick",executableCells:N,executablePeriods:["main1","main2"],executableDuelistTypes:["Controller"],isOnlyNTimesPerChain:1,canPayCosts:xe,meetsConditions:t=>!t.activator.isTurnPlayer,canExecute:t=>{const e=[...t.activator.getMonsterZones(),...t.activator.duel.field.getCells("ExtraMonsterZone")],i=t.activator.getExtraDeck().cardEntities.filter(r=>{var n;return(n=r.status.monsterCategories)==null?void 0:n.includes("Synchro")}).filter(r=>{var n;return(n=r.status.monsterCategories)==null?void 0:n.includes("Tuner")});return t.activator.getEnableSummonList(t.activator,"SynchroSummon",["SpecialSummon","Effect"],t.action,i.map(r=>({monster:r,cells:e,posList:C})),[{material:t.action.entity,cell:t.action.entity.fieldCell}],!1).length>0},payCosts:We,prepare:S,execute:async t=>{const e=[...t.activator.getMonsterZones(),...t.activator.duel.field.getCells("ExtraMonsterZone")],i=t.activator.getExtraDeck().cardEntities.filter(r=>{var n;return(n=r.status.monsterCategories)==null?void 0:n.includes("Synchro")}).filter(r=>{var n;return(n=r.status.monsterCategories)==null?void 0:n.includes("Tuner")});return!!await t.activator.summonOne(t.activator,"SynchroSummon",["SpecialSummon","Effect"],t.action,i.map(r=>({monster:r,cells:e,posList:C})),[],!1,!1)},settle:async()=>!0}]}}const zi=Object.freeze(Object.defineProperty({__proto__:null,default:rs},Symbol.toStringTag,{value:"Module"}));function*ns(){yield{name:"Ｄ－ＨＥＲＯ ディアボリックガイ",actions:[{title:"①リクルート",isMandatory:!1,playType:"IgnitionEffect",spellSpeed:"Normal",executableCells:["Graveyard"],executablePeriods:["main1","main2"],executableDuelistTypes:["Controller"],fixedTags:["SpecialSummonFromDeck"],priorityForNPC:10,canPayCosts:xe,canExecute:t=>{const e=t.activator.getDeckCell().cardEntities.find(r=>r.nm==="Ｄ－ＨＥＲＯ ディアボリックガイ");if(!e)return!1;const i=t.activator.getMonsterZones();return t.activator.getEnableSummonList(t.activator,"SpecialSummon",["Effect"],t.action,[{monster:e,posList:C,cells:i}],[],!1).length>0},payCosts:We,prepare:S,execute:async t=>{const e=t.activator.getDeckCell().cardEntities.find(i=>i.nm==="Ｄ－ＨＥＲＯ ディアボリックガイ");return e?Kr(t,[e]):!1},settle:async()=>!0}]},yield{name:"Ｄ－ＨＥＲＯ ダイヤモンドガイ",actions:[{title:"魔法効果予約",isMandatory:!1,playType:"IgnitionEffect",spellSpeed:"Normal",executableCells:["MonsterZone"],executablePeriods:["main1","main2"],executableDuelistTypes:["Controller"],isOnlyNTimesPerTurnIfFaceup:1,canExecute:t=>t.action.entity.face==="FaceUp"&&t.activator.getDeckCell().cardEntities.length>0,prepare:S,execute:async t=>{const e=await m.excavateFromDeck(t.activator,["Effect"],t.action.entity,t.activator);if(!e)return!1;if(e.kind!=="Spell"||e.status.spellCategory!=="Normal")return t.activator.duel.view.requireUpdate(),await Re(500),t.activator.writeInfoLog(`${e.toString()}は通常魔法ではないため、デッキボトムに戻った。`),await e.returnToDeck("Bottom",["Effect"],t.action.entity,t.activator),!1;await e.sendToGraveyard(["Effect"],t.action.entity,t.activator);const i=e.actions.filter(n=>n.playType==="CardActivation").find(n=>!n.needsToPayRegularCosts);if(!i)return t.activator.writeInfoLog(`${e.toString()}は${t.action.entity.toString()}の効果では発動できない。`),!0;const a=t.activator.duel.clock.getClone(),r={...i.definition};return r.title+=`(${t.action.entity.toString()})`,r.playType="IgnitionEffect",r.canExecute=(n,s)=>n.activator.duel.clock.turn>a.turn+2||n.action.entity.wasMovedAfter(a)?"RemoveMe":n.activator.duel.clock.turn<a.turn+2?!1:!i.definition.canExecute||i.definition.canExecute(n,s),r.executableCells=["Graveyard"],r.meetsConditions=void 0,r.canPayCosts=void 0,r.payCosts=void 0,r.settle=async()=>!0,r.isOnlyNTimesPerTurn=1,e.actions.push(se.createNew(e,r)),!0},settle:async()=>!0}]}}const Vi=Object.freeze(Object.defineProperty({__proto__:null,default:ns},Symbol.toStringTag,{value:"Module"}));function*ss(){yield{name:"Ｅ・ＨＥＲＯ プリズマー",actions:[{title:"リフレクト・チェンジ",isMandatory:!1,playType:"IgnitionEffect",spellSpeed:"Normal",executableCells:["MonsterZone"],executablePeriods:["main1","main2"],executableDuelistTypes:["Controller"],isOnlyNTimesPerTurnIfFaceup:1,needsToPayRegularCost:!0,canPayCosts:t=>{const e=t.activator.getExtraDeck().cardEntities.flatMap(i=>i.fusionMaterialInfos).filter(le).map(i=>i.cardName).getDistinct();return t.activator.getDeckCell().cardEntities.filter(i=>e.includes(i.nm)).some(i=>i.canBeSentToGraveyard(t.activator,t.action.entity,"SendToGraveyardAsCost",t.action))},canExecute:t=>t.action.entity.face==="FaceUp",payCosts:async(t,e,i)=>{const a=t.activator.getExtraDeck().cardEntities.flatMap(c=>c.fusionMaterialInfos).filter(le).map(c=>c.cardName).getDistinct(),r=t.activator.getDeckCell().cardEntities.filter(c=>a.includes(c.nm)).filter(c=>c.canBeSentToGraveyard(t.activator,t.action.entity,"SendToGraveyardAsCost",t.action));if(r.length===0)throw new v("想定されない状態",t);const n=await t.activator.waitSelectEntity(r,"墓地に送るモンスターを選択",i);if(!n){if(!i)throw new k(t);return}const s=t.activator.getExtraDeck().cardEntities.filter(c=>c.fusionMaterialInfos.filter(le).some(u=>u.cardName===n.nm)),o=await t.activator.waitSelectEntity(s,"公開するモンスターを選択",i);if(!o)throw new v("想定されない状態",t);return t.activator.writeInfoLog(`公開：${o.toString()}`),await n.sendToGraveyard(["Effect"],t.action.entity,t.activator),t.activator.getDeckCell().shuffle(),{sendToGraveyard:[n]}},prepare:S,execute:async t=>{const e=t.costInfo.sendToGraveyard;if(!e||!e.length)throw new v("コスト情報が取得できない",t);const i=e[0];return t.action.entity.statusOperatorBundle.push(new R({title:t.action.title,validateAlive:a=>a.duel.clock.isSameTurn(a.isSpawnedAt),isContinuous:!1,isSpawnedBy:t.action.entity,actionAttr:t.action,isApplicableTo:(a,r)=>r.isOnFieldAsMonsterStrictly&&r.face==="FaceUp",statusCalculator:()=>({name:i.origin.name})})),!0},settle:async()=>!0}]}}const Wi=Object.freeze(Object.defineProperty({__proto__:null,default:ss},Symbol.toStringTag,{value:"Module"}));function*ls(){yield{name:"封印されしエクゾディア",actions:[{title:"封印開放",isMandatory:!0,playType:"Exodia",spellSpeed:"Normal",executableCells:["Hand"],executablePeriods:q,executableDuelistTypes:["Controller"],canExecute:t=>t.activator.getHandCell().cardEntities.filter(i=>{var a;return(a=i.origin.nameTags)==null?void 0:a.includes("封印されし")}).map(i=>i.origin.name).getDistinct().length===5,prepare:async t=>(await m.sendManyToGraveyardForTheSameReason(t.activator.duel.field.getCardsOnFieldStrictly(),["Rule"],t.action.entity,t.activator),{selectedEntities:[],chainBlockTags:[],nextChainBlockFilter:()=>!1}),execute:async t=>{const e=t.activator.getOpponentPlayer().getHandCell().cardEntities.filter(a=>{var r;return(r=a.origin.nameTags)==null?void 0:r.includes("封印されし")}).map(a=>a.origin.name).getDistinct().length===5,i=[{name:"封印されし者の左足",column:4},{name:"封印されし者の右足",column:2},{name:"封印されし者の左腕",column:5},{name:"封印されし者の右腕",column:1},{name:"封印されしエクゾディア",column:3}];for(const a of i){const r=[t.activator.getHandCell().cardEntities.find(n=>n.origin.name===a.name),t.activator.getOpponentPlayer().getHandCell().cardEntities.find(n=>n.origin.name===a.name)].filter(n=>n!==void 0);if(!r.length)throw new v("想定されない状態",t.activator.getHandCell().cardEntities,a.name);await D.moveMany(r.map(n=>({entity:n,to:n.controller.getMonsterZones().find(s=>s.column===(n.controller.seat==="Above"?6-a.column:a.column))??n.controller.getFieldZone(),kind:"Monster",face:"FaceUp",orientation:"Vertical",pos:"Top",movedAs:["Rule"],movedBy:void 0,actionOwner:void 0,chooser:void 0})))}throw e?new B(void 0,`お互いが、${t.action.entity.toString()}の特殊勝利条件を同時に満たした。`):new B(t.activator,`${t.activator.name}が${t.action.entity.toString()}の特殊勝利条件を満たした。`)},settle:async()=>!0}]}}const Qi=Object.freeze(Object.defineProperty({__proto__:null,default:ls},Symbol.toStringTag,{value:"Module"}));function*os(){yield{name:"ファイアウォール・ドラゴン・シンギュラリティ",actions:[yt(t=>t.length>2),{title:"①バウンス＆自己強化",isMandatory:!1,playType:"QuickEffect",spellSpeed:"Quick",executableCells:N,executablePeriods:[..._,...A],executableDuelistTypes:["Controller"],isOnlyNTimesPerTurn:1,hasToTargetCards:!0,fixedTags:["BounceToHand"],canExecute:t=>[...t.activator.getGraveyard().cardEntities,...t.activator.getMonstersOnField()].flatMap(r=>r.status.monsterCategories??[]).getDistinct().union(["Ritual","Fusion","Synchro","Xyz"]).length<1?!1:[...t.activator.getOpponentPlayer().getGraveyard().cardEntities,...t.activator.getOpponentPlayer().getEntiteisOnField()].filter(r=>r.canBeTargetOfEffect(t)).length>0,prepare:async(t,e,i)=>{const r=[...t.activator.getGraveyard().cardEntities,...t.activator.getMonstersOnField()].flatMap(c=>c.status.monsterCategories??[]).getDistinct().union(["Ritual","Fusion","Synchro","Xyz"]).length;if(r<1)return;const n=[...t.activator.getOpponentPlayer().getGraveyard().cardEntities,...t.activator.getOpponentPlayer().getEntiteisOnField()].filter(c=>c.canBeTargetOfEffect(t));if(n.length<1)return;const s=n.length===1?1:void 0,o=await t.activator.waitSelectEntities(n,s,c=>c.length>0&&c.length<=r,"手札に戻すカードを選択。",i);if(o)return{selectedEntities:o}},execute:async t=>{const e=t.selectedEntities.filter(a=>a.isOnFieldStrictly||a.fieldCell.cellType==="Graveyard").filter(a=>a.canBeEffected(t.activator,t.action.entity,t.action));await m.returnManyToHandForTheSameReason(e,["Effect"],t.action.entity,t.activator);const i=e.filter(a=>a.fieldCell.cellType==="Hand"||a.fieldCell.cellType==="ExtraDeck").length;return t.action.entity.numericOprsBundle.push(L.createLingeringAddition(t.action.title,a=>a.isSpawnedBy.isEffective,t.action.entity,t.action,"attack",(a,r,n)=>n+500*i)),!0},settle:async()=>!0},{title:"②蘇生",isMandatory:!1,playType:"TriggerEffect",spellSpeed:"Normal",executableCells:N,executablePeriods:q,executableDuelistTypes:["Controller"],isOnlyNTimesPerTurn:1,fixedTags:["SpecialSummonFromGraveyard"],meetsConditions:t=>{const e=t.action.entity.moveLog.latestRecord.movedAt,i=t.action.duel.field.moveLog.getPriviousChainLog().filter(a=>a.entity.fieldCell.cellType==="Graveyard"||a.movedAs.includes("Battle")&&a.movedAs.includes("Destroy")).filter(a=>a.movedAt.totalProcSeq>e.totalProcSeq).map(a=>a.entity.wasMovedFrom).toArray();return t.action.entity.linkArrowDests.union(i).length>0},canExecute:t=>{const e=t.activator.getMonsterZones();return t.activator.getEnableSummonList(t.activator,"SpecialSummon",["Effect"],t.action,t.activator.getGraveyard().cardEntities.filter(a=>a.kind==="Monster").filter(a=>a.types.includes("Cyberse")).filter(a=>a.canBeTargetOfEffect(t)).map(a=>({monster:a,posList:C,cells:e})),[],!1).length>0},prepare:t=>ce(t,t.activator.getGraveyard().cardEntities.filter(e=>e.kind==="Monster").filter(e=>e.types.includes("Cyberse")).filter(e=>e.canBeTargetOfEffect(t)),C),execute:J,settle:async()=>!0}]}}const Xi=Object.freeze(Object.defineProperty({__proto__:null,default:os},Symbol.toStringTag,{value:"Module"}));function*cs(){yield{name:"融合",actions:[{title:"発動",isMandatory:!1,playType:"CardActivation",spellSpeed:"Normal",executableCells:["Hand","SpellAndTrapZone"],executablePeriods:["main1","main2"],executableDuelistTypes:["Controller"],...mt(["ExtraDeck"],()=>!0,["Hand","MonsterZone","ExtraMonsterZone"],()=>!0,"Graveyard")},T]};for(const t of[{name:"簡易融合",lvlUpperBound:5,filter:()=>!0},{name:"簡素融合",lvlUpperBound:6,filter:e=>{var i;return!((i=e.status.monsterCategories)!=null&&i.includes("Effect"))}}])yield{name:t.name,actions:[{title:"発動",isMandatory:!1,playType:"CardActivation",spellSpeed:"Normal",executableCells:["Hand","SpellAndTrapZone"],executablePeriods:["main1","main2"],executableDuelistTypes:["Controller"],isOnlyNTimesPerTurn:1,fixedTags:["SpecialSummonFromExtraDeck"],canPayCosts:e=>e.activator.lp>=1e3,canExecute:e=>{const i=e.activator.getMonsterZones();return e.activator.getEnableSummonList(e.activator,"SpecialSummon",["Effect"],e.action,e.activator.getExtraDeck().cardEntities.filter(r=>{var n;return(n=r.status.monsterCategories)==null?void 0:n.includes("Fusion")}).filter(r=>r.lvl&&r.lvl<=t.lvlUpperBound).filter(t.filter).map(r=>({monster:r,posList:C,cells:i})),[],!1).length>0},payCosts:(e,i)=>ve(e,i,1e3),prepare:S,execute:async e=>{var r;const i=e.activator.getMonsterZones(),a=await e.activator.summonOne(e.activator,"FusionSummon",["Effect"],e.action,e.activator.getExtraDeck().cardEntities.filter(n=>{var s;return(s=n.status.monsterCategories)==null?void 0:s.includes("Fusion")}).filter(n=>n.lvl&&n.lvl<=t.lvlUpperBound).filter(t.filter).map(n=>({monster:n,posList:C,cells:i})),[],!1,!1);return a?(a.statusOperatorBundle.push(new R({title:"攻撃不可",validateAlive:()=>!0,isContinuous:!1,isSpawnedBy:e.action.entity,actionAttr:e.action,isApplicableTo:(n,s)=>s.face==="FaceUp"&&s.isOnFieldAsMonsterStrictly,statusCalculator:()=>({canAttack:!1})})),a.counterHolder.setSelfDestructionFlg(e.action.entity),a.info.isRebornable=!((r=a.origin.monsterCategories)!=null&&r.includes("RegularSpecialSummonOnly")),!0):!1},settle:async()=>!0},T,{title:"自壊",isMandatory:!0,playType:"LingeringEffect",spellSpeed:"Normal",executableCells:K,executablePeriods:["end"],executableDuelistTypes:me,canExecute:e=>e.action.entity.field.getMonstersOnFieldStrictly().some(i=>i.counterHolder.getSelfDestructionFlg(e.action.entity)),prepare:S,execute:async e=>{const i=e.action.entity.field.getMonstersOnFieldStrictly().filter(r=>r.counterHolder.getSelfDestructionFlg(e.action.entity));if(!i.length)throw new v("想定されない状態",e);let a=i[0];if(i.length>1){const r=await e.activator.waitSelectEntity(i,"自壊させるカードを選択。",!1);if(!r)throw new k(e);a=r}return await m.tryDestroy([a],e),!0},settle:async()=>!0}]}}const Ki=Object.freeze(Object.defineProperty({__proto__:null,default:cs},Symbol.toStringTag,{value:"Module"}));function*us(){yield*["イグナイト・イーグル","イグナイト・マグナム","イグナイト・ドラグノフ","イグナイト・マスケット","イグナイト・デリンジャー","イグナイト・ライオット","イグナイト・ウージー","イグナイト・キャリバー"].map(t=>({name:t,actions:[I,{title:"①サーチ",isMandatory:!1,playType:"IgnitionEffect",spellSpeed:"Normal",executableCells:["SpellAndTrapZone"],executablePeriods:["main1","main2"],executableDuelistTypes:["Controller"],fixedTags:["Destroy","DestroyMultiple","DestroyMultipleOnField","DestroySpellTrapOnField","DestroySpellTrapsOnField"],meetsConditions:e=>{var a;const i=e.activator.getPendulumScaleMonsters().find(r=>r!==e.action.entity);return!(!i||!((a=i.status.nameTags)!=null&&a.includes("イグナイト")))},canExecute:e=>e.activator.getDeckCell().cardEntities.some(i=>{var a;return(a=i.status.nameTags)==null?void 0:a.includes("イグナイト")}),prepare:async e=>({selectedEntities:[],chainBlockTags:["SearchFromDeck",...e.action.calcChainBlockTagsForDestroy(e.activator,e.activator.getPendulumScaleMonsters())],prepared:void 0}),execute:async e=>{if(!(await m.tryDestroy(e.activator.getPendulumScaleMonsters(),e)).length)return!1;const a=e.activator.getDeckCell().cardEntities.filter(n=>{var s;return(s=n.status.nameTags)==null?void 0:s.includes("イグナイト")});if(!a.length)return!1;const r=await e.activator.waitSelectEntity(a,"手札に加えるカードを選択。",!1);return r?(await r.addToHand(["Effect"],e.action.entity,e.activator),!0):!1},settle:async()=>!0}]}))}const Ji=Object.freeze(Object.defineProperty({__proto__:null,default:us},Symbol.toStringTag,{value:"Module"}));function*ds(){{const t=e=>e.activator.getGraveyard().cardEntities.filter(i=>i.kind==="Trap").filter(i=>i.status.trapCategory==="Normal").filter(i=>e.activator.canTryBanish(i,"BanishAsCost",e.action)).filter(i=>i.canBeBanished("BanishAsCost",e.activator,e.action.entity,e.action)).flatMap(i=>i.actions).filter(i=>i.playType==="CardActivation").filter(i=>!i.needsToPayRegularCosts).filter(i=>i.validate(e.activator,[],["IgnoreRegularCosts","CopyEffectOnly"],{banish:[e.action.entity]}));yield{name:"ジャンク・コレクター",actions:[{title:"罠コピー",isMandatory:!1,playType:"QuickEffect",spellSpeed:"Quick",executableCells:N,executablePeriods:_,executableDuelistTypes:["Controller"],needsToPayRegularCost:!0,canPayCosts:e=>xe(e)&&t(e).length>0,payCosts:async(e,i,a)=>{const r=t(e).map(o=>o.entity),n=await e.activator.waitSelectEntity(r,"コピーする罠を選択。",a);if(!n)return;const s=[e.action.entity,n];return await m.banishManyForTheSameReason(s,["Cost"],e.action.entity,e.activator),{banish:s}},prepare:async(e,i)=>{var s;const a=(s=e.costInfo.banish)==null?void 0:s.find(o=>o!==e.action.entity);if(!a)throw new v("正規のコストを支払わずにジャンク・コレクターの効果処理を行おうとした。",e,e.costInfo);const r=a.actions.find(o=>o.playType==="CardActivation");if(!r)throw new v("カードの効果の発動を持たないカードをジャンク・コレクターでコピーしようとした。",e,e.costInfo,a);const n={...await r.prepare(e.activator,void 0,void 0,i,!1,!0)};return n.appendix=[`コピー対象：${a.toString()}`,...n.appendix??[]],n},execute:async(e,i)=>{var n;const a=(n=e.costInfo.banish)==null?void 0:n.find(s=>s!==e.action.entity);if(!a)throw new v("想定されない状況",e,e.costInfo);const r=a.actions.find(s=>s.playType==="CardActivation");if(!r)throw new v("想定されない状況",e,e.costInfo,a);return await r.execute(e,i,{indirectly:!0})},settle:async()=>!0}]}}}const Yi=Object.freeze(Object.defineProperty({__proto__:null,default:ds},Symbol.toStringTag,{value:"Module"}));function*ps(){yield{name:"ソーラー・エクスチェンジ",actions:[{title:"発動",isMandatory:!1,playType:"CardActivation",spellSpeed:"Normal",executableCells:["Hand","SpellAndTrapZone"],executablePeriods:["main1","main2"],executableDuelistTypes:["Controller"],fixedTags:["Draw","SendToGraveyardFromDeck","DiscordAsCost"],priorityForNPC:40,canPayCosts:(...t)=>Ae(...t,e=>{var i;return e.kind==="Monster"&&!!((i=e.status.nameTags)!=null&&i.includes("ライトロード"))}),canExecute:t=>t.activator.getDeckCell().cardEntities.length>3,payCosts:(...t)=>Me(...t,e=>{var i;return e.kind==="Monster"&&!!((i=e.status.nameTags)!=null&&i.includes("ライトロード"))}),prepare:async()=>({selectedEntities:[]}),execute:async t=>{await t.activator.draw(2,t.action.entity,t.activator),t.activator.duel.clock.incrementProcSeq();const e=t.activator.getDeckCell().cardEntities.slice(0,2);return await m.sendManyToGraveyardForTheSameReason(e,["Effect"],t.action.entity,t.activator),!0},settle:async()=>!0},T]},yield{name:"光の援軍",actions:[{title:"発動",isMandatory:!1,playType:"CardActivation",spellSpeed:"Normal",executableCells:["Hand","SpellAndTrapZone"],executablePeriods:["main1","main2"],executableDuelistTypes:["Controller"],fixedTags:["SearchFromDeck"],priorityForNPC:40,canPayCosts:t=>t.activator.getDeckCell().cardEntities.length>3,canExecute:t=>t.activator.getDeckCell().cardEntities.filter(e=>e.kind==="Monster").filter(e=>(e.lvl??13)<5).some(e=>e.status.nameTags&&e.status.nameTags.includes("ライトロード")),payCosts:async t=>{const e=t.activator.getDeckCell().cardEntities.slice(0,3);return await m.sendManyToGraveyardForTheSameReason(e,["Cost"],t.action.entity,t.activator),{sendToGraveyard:e}},prepare:async()=>({selectedEntities:[]}),execute:async t=>{const e=t.activator.getDeckCell().cardEntities.filter(a=>a.kind==="Monster").filter(a=>(a.lvl??13)<5).filter(a=>a.status.nameTags&&a.status.nameTags.includes("ライトロード"));if(e.length===0)return!1;const i=await t.activator.waitSelectEntity(e,"手札に加えるモンスターを選択",!1);if(!i)throw new k(t);return await i.addToHand(["Effect"],t.action.entity,t.activator),t.activator.getDeckCell().shuffle(),!0},settle:async()=>!0},T]}}const Ii=Object.freeze(Object.defineProperty({__proto__:null,default:ps},Symbol.toStringTag,{value:"Module"})),ea=(t,e)=>({title:`${t}墓地送り(${e})`,isMandatory:!0,playType:"IgnitionEffect",spellSpeed:"Normal",executableCells:N,executablePeriods:["end"],executableDuelistTypes:["Controller"],executableFaces:["FaceUp"],isOnlyNTimesPerTurnIfFaceup:1,meetsConditions:i=>i.activator.isTurnPlayer,prepare:S,execute:async i=>{const a=i.activator.getDeckCell().cardEntities.slice(0,e);return await m.sendManyToGraveyardForTheSameReason(a,["Effect"],i.action.entity,i.activator),!0},settle:async()=>!0}),fs=(t,e)=>({title:`${t}墓地送り(${e})`,isMandatory:!0,playType:"TriggerEffect",spellSpeed:"Normal",executableCells:N,executablePeriods:[..._,...A],executableDuelistTypes:["Controller"],executableFaces:["FaceUp"],isOnlyNTimesPerTurnIfFaceup:1,meetsConditions:i=>i.activator.duel.chainBlockLog.records.filter(a=>{var r;return(r=a.chainBlockInfo.action.entity.status.nameTags)==null?void 0:r.includes("ライトロード")}).filter(a=>a.chainBlockInfo.action.entity.kind==="Monster").filter(a=>a.chainBlockInfo.action.entity!==i.action.entity).filter(a=>a.chainBlockInfo.action.isWithChainBlock).filter(a=>i.activator.duel.clock.isPreviousChain(a.clock)).filter(a=>!a.chainBlockInfo.isNegatedActivationBy).some(a=>a.chainBlockInfo.activator===i.activator),prepare:S,execute:async i=>{const a=i.activator.getDeckCell().cardEntities.slice(0,e);return await m.sendManyToGraveyardForTheSameReason(a,["Effect"],i.action.entity,i.activator),!0},settle:async()=>!0});function*gs(){yield{name:"ライトロード・サモナー ルミナス",actions:[{title:"①蘇生",isMandatory:!1,playType:"IgnitionEffect",spellSpeed:"Normal",executableCells:N,executablePeriods:["main1","main2"],executableDuelistTypes:["Controller"],isOnlyNTimesPerTurnIfFaceup:1,fixedTags:["SpecialSummonFromGraveyard","DiscordAsCost"],canPayCosts:Ae,payCosts:Me,...Z(t=>t.activator.getGraveyard().cardEntities.filter(e=>e.kind==="Monster").filter(e=>(e.lvl??12)<5).filter(e=>{var i;return(i=e.status.nameTags)==null?void 0:i.includes("ライトロード")}),{do:"Reborn"}),execute:J,settle:async()=>!0},ea("②",3)]},yield{name:"トワイライトロード・シャーマン ルミナス",actions:[{title:"①蘇生帰還",isMandatory:!1,playType:"IgnitionEffect",spellSpeed:"Normal",executableCells:N,executablePeriods:["main1","main2"],executableDuelistTypes:["Controller"],isOnlyNTimesPerTurnIfFaceup:1,fixedTags:["SpecialSummonFromGraveyard","DiscordAsCost"],...zr(t=>t.activator.getCells("Hand","Graveyard").flatMap(e=>e.cardEntities).filter(e=>{var i;return(i=e.status.nameTags)==null?void 0:i.includes("ライトロード")}).filter(e=>e.kind==="Monster")),...Z(t=>t.activator.getBanished().cardEntities.filter(e=>e.kind==="Monster").filter(e=>{var i;return(i=e.status.nameTags)==null?void 0:i.includes("ライトロード")}),{do:"Reborn"}),execute:J,settle:async()=>!0},fs("②",3)]}}const ta=Object.freeze(Object.defineProperty({__proto__:null,default:gs},Symbol.toStringTag,{value:"Module"}));function*hs(){yield{name:"ライトロード・アサシン ライデン",actions:[{title:"①墓地送り＆自己強化",isMandatory:!1,playType:"IgnitionEffect",spellSpeed:"Normal",executableCells:N,executablePeriods:["main1","main2"],executableDuelistTypes:["Controller"],executableFaces:["FaceUp"],isOnlyNTimesPerTurn:1,canExecute:t=>t.activator.getDeckCell().cardEntities.length>1,prepare:S,execute:async t=>{const e=t.activator.getDeckCell().cardEntities.slice(0,2);await m.sendManyToGraveyardForTheSameReason(e,["Effect"],t.action.entity,t.activator);const i=e.filter(a=>a.kind==="Monster").filter(a=>{var r;return(r=a.status.nameTags)==null?void 0:r.includes("ライトロード")}).length;return i&&t.action.entity.numericOprsBundle.push(L.createLingeringAddition(t.action.title,a=>a.isSpawnedBy.isEffective&&a.duel.clock.turn-a.isSpawnedAt.turn<2,t.action.entity,t.action,"attack",(a,r,n)=>n+200*i)),!0},settle:async()=>!0},ea("②",2)]},yield{name:"ライトロード・ビースト ウォルフ",actions:[{title:"①自己再生",isMandatory:!0,playType:"TriggerEffect",spellSpeed:"Normal",executableCells:["Graveyard"],executablePeriods:[..._,...A],executableDuelistTypes:["Controller"],fixedTags:["SpecialSummonFromGraveyard"],meetsConditions:t=>t.action.entity.wasMovedAtPreviousChain&&t.action.entity.wasMovedFrom.cellType==="Deck",getDests:t=>Q(t,C,[],["Effect"]),canExecute:t=>$(t,C,[],["Effect"]),prepare:S,execute:t=>ie(t),settle:async()=>!0}]},yield{name:"ライトロード・アーチャー フェリス",actions:[{title:"①自己再生",isMandatory:!0,playType:"TriggerEffect",spellSpeed:"Normal",executableCells:["Graveyard"],executablePeriods:[..._,...A],executableDuelistTypes:["Controller"],fixedTags:["SpecialSummonFromGraveyard"],meetsConditions:t=>t.action.entity.wasMovedAtPreviousChain&&t.action.entity.wasMovedFrom.cellType==="Deck"&&t.action.entity.moveLog.latestRecord.entity.kind==="Monster"&&t.action.entity.moveLog.latestRecord.movedAs.includes("Effect"),getDests:t=>Q(t,C,[],["Effect"]),canExecute:t=>$(t,C,[],["Effect"]),prepare:S,execute:t=>ie(t),settle:async()=>!0},{title:"②モンスター破壊＆墓地送り",isMandatory:!1,playType:"IgnitionEffect",spellSpeed:"Normal",executableCells:N,executablePeriods:["main1","main2"],executableDuelistTypes:["Controller"],fixedTags:["Destroy","DestroyMonsterOnField","DestroyOnOpponentField","DestroyOnField"],canPayCosts:Qe,canExecute:t=>t.activator.getDeckCell().cardEntities.length>2,payCosts:Xe,...Z(t=>t.activator.getOpponentPlayer().getMonstersOnField().filter(e=>e.canBeTargetOfEffect(t)),{do:"Destroy"}),execute:async t=>{if(t.selectedEntities.every(a=>!a.isOnField)||!await m.tryDestroy(t.selectedEntities,t))return!1;t.activator.duel.clock.incrementProcSeq();const i=t.activator.getDeckCell().cardEntities.slice(0,3);return await m.sendManyToGraveyardForTheSameReason(i,["Effect"],t.action.entity,t.activator),!0},settle:async()=>!0}]}}const ia=Object.freeze(Object.defineProperty({__proto__:null,default:hs},Symbol.toStringTag,{value:"Module"}));function*ys(){for(const t of["メタルフォーゼ・ゴルドライバー","メタルフォーゼ・シルバード","メタルフォーゼ・スティエレン","メタルフォーゼ・ヴォルフレイム"])yield{name:t,actions:[I,{title:"①サーチ",isMandatory:!1,playType:"IgnitionEffect",spellSpeed:"Normal",executableCells:["SpellAndTrapZone"],executablePeriods:["main1","main2"],executableDuelistTypes:["Controller"],isOnlyNTimesPerTurnIfFaceup:1,fixedTags:["Destroy"],...Z(e=>{let i=e.activator.getEntiteisOnField().filter(a=>a.face==="FaceUp").filter(a=>a.canBeTargetOfEffect(e)).filter(a=>a!==e.action.entity);return e.activator.getAvailableSpellTrapZones.length||(i=i.filter(a=>a.fieldCell.cellType==="SpellAndTrapZone")),i},{message:"破壊するカードを選択。",do:"Destroy",canExecute:e=>e.activator.canSet&&e.activator.getDeckCell().cardEntities.filter(i=>i.kind==="Spell"||i.kind==="Trap").some(i=>{var a;return(a=i.status.nameTags)==null?void 0:a.includes("メタルフォーゼ")})}),execute:async e=>{if(!(await m.tryDestroy(e.selectedEntities,e)).length||!e.activator.canSet)return!1;const a=e.activator.getAvailableSpellTrapZones();if(!a.length)return!1;const r=e.activator.getDeckCell().cardEntities.filter(o=>o.kind==="Spell"||o.kind==="Trap").filter(o=>{var c;return(c=o.status.nameTags)==null?void 0:c.includes("メタルフォーゼ")});if(!r.length)return!1;const n=await e.activator.waitSelectEntity(r,"セットするカードを選択。",!1);if(!n)return!1;const s=await e.activator.duel.view.waitSelectDestination(e.activator,n,a,"セットする先を選択","セット",!1);if(!s)throw new k("セット先選択",e);return await n.setAsSpellTrap(s,n.kind,["Effect"],e.action.entity,e.activator),!0},settle:async()=>!0}]}}const aa=Object.freeze(Object.defineProperty({__proto__:null,default:ys},Symbol.toStringTag,{value:"Module"}));function*ms(){yield{name:"錬装融合",actions:[{title:"発動",isMandatory:!1,playType:"CardActivation",spellSpeed:"Normal",executableCells:["Hand","SpellAndTrapZone"],executablePeriods:["main1","main2"],executableDuelistTypes:["Controller"],...mt(["ExtraDeck"],(t,e)=>{var i;return!!((i=e.status.nameTags)!=null&&i.includes("メタルフォーゼ"))},["Hand","MonsterZone","ExtraMonsterZone"],()=>!0,"Graveyard")},{title:"②ドロー",isMandatory:!1,playType:"IgnitionEffect",spellSpeed:"Normal",executableCells:["Graveyard"],executablePeriods:["main1","main2"],executableDuelistTypes:["Controller"],isOnlyNTimesPerTurn:1,canExecute:t=>t.activator.getDeckCell().cardEntities.length>0&&t.activator.canDraw,prepare:async t=>(await t.action.entity.returnToDeck("Random",["Effect"],t.action.entity,t.activator),{selectedEntities:[],chainBlockTags:["Draw"]}),execute:async t=>(await t.activator.draw(1,t.action.entity,t.activator),!0),settle:async()=>!0},T]}}const ra=Object.freeze(Object.defineProperty({__proto__:null,default:ms},Symbol.toStringTag,{value:"Module"}));function*vs(){yield{name:"ダーク・リゾネーター",actions:[],substituteEffects:[yn(1)]},yield{name:"レッド・リゾネーター",actions:[{title:"①特殊召喚",isMandatory:!1,playType:"TriggerEffect",spellSpeed:"Normal",executableCells:["MonsterZone"],executablePeriods:[..._,...A],executableDuelistTypes:["Controller"],fixedTags:["SpecialSummonFromHand","IfNormarlSummonSucceed","SpecialSummon"],meetsConditions:t=>t.action.entity.hasBeenArrivalNow(["NormalSummon"]),canExecute:t=>{const e=t.activator.getMonsterZones();return t.activator.getEnableSummonList(t.activator,"SpecialSummon",["Effect"],t.action,t.activator.getHandCell().cardEntities.filter(a=>a.kind==="Monster").filter(a=>(a.lvl??12)<5).map(a=>({monster:a,posList:C,cells:e})),[],!1).length>0},prepare:S,execute:async t=>{const e=t.activator.getMonsterZones(),i=t.activator.getHandCell().cardEntities.filter(r=>r.kind==="Monster").filter(r=>(r.lvl??12)<5).map(r=>({monster:r,posList:C,cells:e}));return!!await t.activator.summonOne(t.activator,"SpecialSummon",["Effect"],t.action,i,[],!1,!1)},settle:async()=>!0},{title:"②回復",isMandatory:!1,playType:"TriggerEffect",spellSpeed:"Normal",executableCells:["MonsterZone"],executablePeriods:[..._,...A],executableDuelistTypes:["Controller"],isOnlyNTimesPerTurn:1,meetsConditions:t=>t.action.entity.hasBeenArrivalNow(["SpecialSummon"]),...Z(t=>t.activator.getMonstersOnField().filter(e=>e.canBeTargetOfEffect(t)).filter(e=>(e.atk??0)>0).filter(e=>e.info.summonKinds.includes("SpecialSummon")),{message:"対象モンスターを選択。"}),execute:async t=>{const e=t.activator.lp;return t.selectedEntities.filter(i=>i.isOnFieldAsMonsterStrictly).forEach(i=>t.activator.heal(i.atk??0,t.action.entity)),t.activator.lp!==e},settle:async()=>!0}]}}const na=Object.freeze(Object.defineProperty({__proto__:null,default:vs},Symbol.toStringTag,{value:"Module"})),Bt=(t,e)=>{const i=e?`魔力充填可能(${e})`:"魔力充填可能";return _e(i,t,a=>[a],a=>[new R({title:i,validateAlive:()=>!0,isContinuous:!0,isSpawnedBy:a,actionAttr:{},isApplicableTo:(r,n)=>r.isSpawnedBy===n,statusCalculator:(r,n,s)=>(s.maxCounterQty.SpellCounter=e??Number.MAX_VALUE,{maxCounterQty:s.maxCounterQty})})])},it={},Ss=(t,e=1)=>(it[e]||(it[e]={title:`魔力回収(${e})`,isMandatory:!0,playType:"AfterChainBlock",spellSpeed:"Normal",executableCells:["MonsterZone"],executablePeriods:q,executableDuelistTypes:["Controller"],canExecute:i=>!!(i.targetChainBlock&&i.targetChainBlock.action.playType==="CardActivation"&&i.targetChainBlock.action.entity.kind==="Spell"&&i.action.entity.isEffective&&i.action.entity.face==="FaceUp"&&i.action.entity.counterHolder.getQty("SpellCounter")<(i.action.entity.status.maxCounterQty.SpellCounter??0)&&i.action.entity.hadArrivedToFieldAt().totalProcSeq<=i.targetChainBlock.isActivatedAt.totalProcSeq),prepare:S,execute:async i=>i.action.entity.face==="FaceDown"||!i.action.entity.isOnFieldAsMonsterStrictly||!i.action.entity.isEffective?!1:(i.action.entity.counterHolder.add("SpellCounter",e,i.action.entity),!0),settle:async()=>!0}),{...it[e],title:`${t}魔力回収(${e})`}),ct=(t,e,i)=>t.action.entity.counterHolder.getQty("SpellCounter")>=i,ut=(t,e,i,a)=>{const r=a[0];return t.action.entity.counterHolder.remove("SpellCounter",r),{counter:r}};function*Cs(){yield{name:"魔導戦士 ブレイカー",actions:[{title:"①魔力充填",isMandatory:!0,playType:"TriggerEffect",spellSpeed:"Normal",executableCells:["MonsterZone"],executablePeriods:["main1","main2"],executableDuelistTypes:["Controller"],fixedTags:["IfNormarlSummonSucceed"],meetsConditions:t=>t.action.entity.hasBeenArrivalNow(["NormalSummon"]),prepare:S,execute:async t=>t.action.entity.face==="FaceDown"?!1:(t.action.entity.counterHolder.setQty("SpellCounter",1,t.action.entity),!0),settle:async()=>!0},{title:"③マナブレイク",isMandatory:!1,playType:"IgnitionEffect",spellSpeed:"Normal",executableCells:["MonsterZone"],executablePeriods:["main1","main2"],executableDuelistTypes:["Controller"],fixedTags:["Destroy","DestroyOnField","DestroySpellTrapOnField"],canPayCosts:(t,e)=>ct(t,e,1),payCosts:async(t,e,i)=>ut(t,e,i,[1]),...Z(t=>t.activator.duel.field.getSpellTrapsOnFieldStrictly().filter(e=>e.canBeTargetOfEffect(t)),{message:"破壊する対象を選択。",do:"Destroy"}),execute:async t=>t.selectedEntities.every(e=>!e.isOnFieldAsSpellTrapStrictly)?!1:(await m.tryDestroy(t.selectedEntities,t),!0),settle:async()=>!0}],continuousEffects:[Bt("Monster",1),ke("②攻撃力上昇","Monster",t=>[t],t=>[L.createContinuous("②攻撃力上昇",()=>!0,t,()=>!0,"attack","wip","Addition",(e,i,a)=>e.isEffective?a+e.counterHolder.getQty("SpellCounter")*300:a)])]},yield{name:"王立魔法図書館",actions:[{...Ss("①",1)},{title:"②ドロー",isMandatory:!1,playType:"IgnitionEffect",spellSpeed:"Normal",executableCells:["MonsterZone"],executablePeriods:["main1","main2"],executableDuelistTypes:["Controller"],canPayCosts:(t,e)=>ct(t,e,3),canExecute:t=>t.activator.getDeckCell().cardEntities.length>0,payCosts:async(t,e,i)=>ut(t,e,i,[3]),prepare:S,execute:async t=>(await t.activator.draw(1,t.action.entity,t.activator),!0),settle:async()=>!0}],continuousEffects:[Bt("Monster",3)]}}const sa=Object.freeze(Object.defineProperty({__proto__:null,canPaySpellCounters:ct,default:Cs,paySpellCounters:ut},Symbol.toStringTag,{value:"Module"}));function*Ts(){yield{name:"スターダスト・ドラゴン",actions:[j(),{title:"①ヴィクテム・サンクチュアリ",isMandatory:!1,playType:"QuickEffect",spellSpeed:"Quick",executableCells:["MonsterZone","ExtraMonsterZone"],executablePeriods:q,executableDuelistTypes:["Controller"],canPayCosts:Qe,canExecute:t=>!!(t.targetChainBlock&&t.targetChainBlock.action.isWithChainBlock&&t.targetChainBlock.chainBlockTags.includes("DestroyOnField")),payCosts:Xe,prepare:async t=>{if(!t.targetChainBlock)throw new v("想定されない状態",t);return{selectedEntities:[],chainBlockTags:t.action.calcChainBlockTagsForDestroy(t.activator,[t.targetChainBlock.action.entity]),prepared:void 0}},execute:async(t,e)=>{const i=e[t.index-1];return i.isNegatedActivationBy=t.action,await m.tryDestroy([i.action.entity],t),!0},settle:async()=>!0},{title:"②自己再生",playType:"IgnitionEffect",isMandatory:!1,spellSpeed:"Normal",executableCells:["Graveyard"],executablePeriods:["end"],executableDuelistTypes:["Controller"],fixedTags:["SpecialSummonFromGraveyard"],canExecute:t=>{const e=t.action.entity.moveLog.latestRecord;if(e.movedBy!==t.action.entity||!t.activator.duel.clock.isSameTurn(e.movedAt)||!e.movedAs.includes("Cost"))return!1;const i=t.activator.duel,a=t.action.entity.actionLogRecords.filter(r=>i.clock.isSameTurn(r.clock)).map(r=>r.chainBlockInfo).findLast(r=>r.action.title==="①ヴィクテム・サンクチュアリ");return!a||a.state!=="done"?!1:$(t,C,[],["Effect"])},prepare:S,execute:t=>ie(t),settle:async()=>!0}]},yield{name:"閃珖竜 スターダスト",actions:[j(),{title:"波動音壁",isMandatory:!1,playType:"QuickEffect",spellSpeed:"Quick",executableCells:N,executablePeriods:_,executableDuelistTypes:["Controller"],isOnlyNTimesPerTurnIfFaceup:1,...Z(t=>t.activator.getEntiteisOnField().filter(e=>e.face==="FaceUp").filter(e=>e.canBeTargetOfEffect(t))),execute:async t=>(t.selectedEntities.filter(e=>e.isOnFieldStrictly).filter(e=>e.face==="FaceUp").filter(e=>e.canBeEffected(t.activator,t.action.entity,t.action)).forEach(e=>{e.counterHolder.add("SonicBarrier",1,t.action.entity)}),!0),settle:async()=>!0}],substituteEffects:[{title:"波動音壁（適用）",playType:"LingeringEffect",isMandatory:!0,executableCells:K,executablePeriods:q,executableDuelistTypes:["Controller"],isApplicableTo:(t,e,i)=>i.filter(a=>a.counterHolder.getQty("SonicBarrier",t.entity)>0),substitute:async(t,e,i)=>{const a=i.filter(r=>r.counterHolder.getQty("SonicBarrier",t.entity)>0);return a.forEach(r=>{r.counterHolder.removeAll("SonicBarrier",t.entity),t.entity.controller.writeInfoLog(`波動音壁により${r.toString()}は１ターンに１度だけ戦闘効果では破壊されない。`)}),a}}]},yield{name:"真閃珖竜 スターダスト・クロニクル",actions:[j(t=>t.length===1&&t.every(e=>{var i;return(i=e.status.monsterCategories)==null?void 0:i.includes("Synchro")}),t=>t.length>0&&t.every(e=>{var i;return(i=e.status.monsterCategories)==null?void 0:i.includes("Synchro")})),{title:"波動護魂",isMandatory:!1,playType:"QuickEffect",spellSpeed:"Quick",executableCells:N,executablePeriods:_,executableDuelistTypes:["Controller"],isOnlyNTimesPerTurnIfFaceup:1,canPayCosts:t=>ri(t,t.activator.getGraveyard().cardEntities.filter(e=>{var i;return(i=e.status.monsterCategories)==null?void 0:i.includes("Synchro")})),payCosts:t=>ni(t,t.activator.getGraveyard().cardEntities.filter(e=>{var i;return(i=e.status.monsterCategories)==null?void 0:i.includes("Synchro")}),e=>e.length===1,1),prepare:S,execute:async t=>(t.action.entity.procFilterBundle.push(ye.createLingering(t.action.title,e=>e.duel.clock.isSameTurn(e.isSpawnedAt),t.action.entity,t.action,()=>!0,["Effect"],()=>!1)),!0),settle:async()=>!0},{title:"②蘇生",isMandatory:!1,playType:"TriggerEffect",spellSpeed:"Normal",executableCells:["Banished"],executablePeriods:[..._,...A],executableDuelistTypes:["Controller"],fixedTags:["SpecialSummonFromGraveyard"],meetsConditions:t=>t.action.entity.wasMovedAtPreviousChain&&t.action.entity.moveLog.latestRecord.actionOwner!==t.activator&&(t.action.entity.wasMovedFrom.owner===t.activator||t.action.entity.wasMovedFrom.cellType==="ExtraMonsterZone"),canExecute:t=>{const e=t.activator.getMonsterZones();return t.activator.getEnableSummonList(t.activator,"SpecialSummon",["Effect"],t.action,t.activator.getBanished().cardEntities.filter(a=>a.kind==="Monster").filter(a=>a.face==="FaceUp").filter(a=>a.types.includes("Dragon")).filter(a=>{var r;return(r=a.status.monsterCategories)==null?void 0:r.includes("Synchro")}).filter(a=>a.canBeTargetOfEffect(t)).map(a=>({monster:a,posList:C,cells:e})),[],!1).length>0},prepare:t=>ce(t,t.activator.getBanished().cardEntities.filter(e=>e.kind==="Monster").filter(e=>e.face==="FaceUp").filter(e=>e.types.includes("Dragon")).filter(e=>{var i;return(i=e.status.monsterCategories)==null?void 0:i.includes("Synchro")}).filter(e=>e.canBeTargetOfEffect(t))),execute:J,settle:async()=>!0}]},yield{name:"聖珖神竜 スターダスト・シフル",actions:[j(t=>t.length===1&&t.every(e=>{var i;return(i=e.status.monsterCategories)==null?void 0:i.includes("Synchro")}),t=>t.length>1&&t.every(e=>{var i;return(i=e.status.monsterCategories)==null?void 0:i.includes("Synchro")})),{title:"②珖波動反撃",isMandatory:!1,playType:"QuickEffect",spellSpeed:"Quick",executableCells:["Hand"],executablePeriods:_,executableDuelistTypes:["Controller"],isOnlyNTimesPerTurnIfFaceup:1,negatePreviousBlock:!0,fixedTags:["NegateCardEffect","DestroyOnField"],canExecute:t=>!!(t.targetChainBlock&&t.targetChainBlock.action.entity.isMonster&&t.targetChainBlock.action.isWithChainBlock&&t.activator!==t.targetChainBlock.activator),prepare:S,execute:async t=>{if(!t.targetChainBlock)return!1;const e=t.targetChainBlock;e.isNegatedEffectBy=t.action;const i=await t.activator.waitSelectEntity(t.action.duel.field.getCardsOnFieldStrictly(),"破壊するカードを選択。",!1);return(await m.tryDestroy(i?[i]:[],t)).length>0},settle:async()=>!0},{title:"③蘇生",isMandatory:!1,playType:"IgnitionEffect",spellSpeed:"Normal",executableCells:["Graveyard"],executablePeriods:["main1","main2"],executableDuelistTypes:["Controller"],priorityForNPC:10,fixedTags:["SpecialSummonFromGraveyard"],canPayCosts:xe,canExecute:t=>{const e=t.activator.getMonsterZones();return t.activator.getEnableSummonList(t.activator,"SpecialSummon",["Effect"],t.action,t.activator.getGraveyard().cardEntities.filter(a=>{var r;return(r=a.status.nameTags)==null?void 0:r.includes("スターダスト")}).filter(a=>(a.lvl??12)<9).filter(a=>a.canBeTargetOfEffect(t)).map(a=>({monster:a,posList:C,cells:e})),[],!1).length>0},payCosts:We,prepare:t=>ce(t,t.activator.getGraveyard().cardEntities.filter(e=>{var i;return(i=e.status.nameTags)==null?void 0:i.includes("スターダスト")}).filter(e=>(e.lvl??12)<9),C,e=>e.length===1),execute:J,settle:async()=>!0}],substituteEffects:[{title:"波動聖句",playType:"ContinuousEffect",isMandatory:!0,executableCells:["MonsterZone"],executablePeriods:q,executableDuelistTypes:["Controller"],isApplicableTo:(t,e,i)=>i.filter(a=>a.controller===t.entity.controller).filter(a=>a.counterHolder.getQty("SonicVerse",t.entity)===0),substitute:async(t,e,i)=>{if(!t.entity.isEffective)return[];const a=i.filter(r=>r.controller===t.entity.controller).filter(r=>r.counterHolder.getQty("SonicVerse",t.entity)===0);return a.forEach(r=>{r.counterHolder.add("SonicVerse",1,t.entity),t.entity.controller.writeInfoLog(`${t.entity.toString()}の効果により${r.toString()}は１ターンに１度だけ破壊されない。`)}),a}}]}}const la=Object.freeze(Object.defineProperty({__proto__:null,default:Ts},Symbol.toStringTag,{value:"Module"}));function*_s(){yield{name:"調律",actions:[{title:"発動",isMandatory:!1,playType:"CardActivation",spellSpeed:"Normal",executableCells:["Hand","SpellAndTrapZone"],executablePeriods:["main1","main2"],executableDuelistTypes:["Controller"],fixedTags:["SearchFromDeck","SendToGraveyardFromDeck"],priorityForNPC:40,canExecute:t=>{const e=t.activator.getDeckCell().cardEntities;return e.length<2?!1:e.filter(i=>{var a;return(a=i.status.nameTags)==null?void 0:a.includes("シンクロン")}).some(i=>{var a;return(a=i.status.monsterCategories)==null?void 0:a.includes("Tuner")})},prepare:S,execute:async t=>{const e=t.activator.getDeckCell().cardEntities;if(e.length<2)return!1;const i=e.filter(r=>{var n;return(n=r.status.nameTags)==null?void 0:n.includes("シンクロン")}).filter(r=>{var n;return(n=r.status.monsterCategories)==null?void 0:n.includes("Tuner")});if(i.length===0)return!1;const a=await t.activator.waitSelectEntity(i,"手札に加えるモンスターを選択",!1);if(!a)throw new k(t);return await a.addToHand(["Effect"],t.action.entity,t.activator),t.activator.getDeckCell().shuffle(),t.activator.duel.clock.incrementProcSeq(),await t.activator.getDeckCell().cardEntities[0].sendToGraveyard(["Effect"],t.action.entity,t.activator),!0},settle:async()=>!0},T]}}const oa=Object.freeze(Object.defineProperty({__proto__:null,default:_s},Symbol.toStringTag,{value:"Module"}));function*Es(){yield{name:"フォーミュラ・シンクロン",actions:[j(),{title:"①ドロー",isMandatory:!1,playType:"TriggerEffect",spellSpeed:"Normal",executableCells:N,executablePeriods:[..._,...A],executableDuelistTypes:["Controller"],fixedTags:["Draw","IfSpecialSummonSucceed"],meetsConditions:t=>t.action.entity.hasBeenArrivalNow(["SynchroSummon"],C,!0),canExecute:t=>t.activator.canDraw&&t.activator.getDeckCell().cardEntities.length>0,prepare:S,execute:async t=>(await t.activator.draw(1,t.action.entity,t.activator),!0),settle:async()=>!0},mi({title:"②シンクロ召喚",isOnlyNTimesPerChain:1})]}}const ca=Object.freeze(Object.defineProperty({__proto__:null,default:Es},Symbol.toStringTag,{value:"Module"}));function*ws(){yield{name:"トゥーン・ワールド",actions:[{...I,canPayCosts:t=>t.activator.lp>=1e3,payCosts:(t,e)=>ve(t,e,1e3)},T]}}const ua=Object.freeze(Object.defineProperty({__proto__:null,default:ws},Symbol.toStringTag,{value:"Module"}));function*bs(){yield{name:"無の煉獄",actions:[{title:"発動",isMandatory:!1,playType:"CardActivation",spellSpeed:"Normal",executableCells:["Hand","SpellAndTrapZone"],executablePeriods:["main1","main2"],executableDuelistTypes:["Controller"],fixedTags:["Draw","DiscordAsEffect"],meetsConditions:t=>t.activator.getHandCell().cardEntities.length>2,canExecute:t=>t.activator.canDraw&&t.activator.status.canDiscardAsEffect&&t.activator.getDeckCell().cardEntities.length>0,prepare:S,execute:async t=>(await t.activator.draw(1,t.action.entity,t.activator),t.activator.entity.counterHolder.add("IntoTheVoid",1,t.action.entity),!0),settle:async()=>!0},{title:"手札抹殺",isMandatory:!0,playType:"LingeringEffect",spellSpeed:"Normal",executableCells:K,executablePeriods:["end"],executableDuelistTypes:me,meetsConditions:t=>t.activator.entity.counterHolder.getQty("IntoTheVoid",t.action.entity)>0,prepare:S,execute:async t=>(await m.discardManyForTheSameReason(t.activator.getHandCell().cardEntities,["Effect"],t.action.entity,t.activator),t.activator.entity.counterHolder.remove("IntoTheVoid",1,t.action.entity),!0),settle:async()=>!0},T]}}const da=Object.freeze(Object.defineProperty({__proto__:null,default:bs},Symbol.toStringTag,{value:"Module"}));function*ks(){yield{name:"星杯の妖精リース",actions:[{title:"①サーチ",isMandatory:!1,playType:"TriggerEffect",spellSpeed:"Normal",executableCells:["MonsterZone"],executablePeriods:[..._,...A],executableDuelistTypes:["Controller"],isOnlyNTimesPerTurn:1,fixedTags:["SearchFromDeck"],meetsConditions:t=>t.action.entity.hasBeenArrivalNow(["NormalSummon","SpecialSummon"]),canExecute:t=>t.activator.canAddToHandFromDeck&&t.activator.getDeckCell().cardEntities.filter(e=>e.kind==="Monster").some(e=>{var i;return(i=e.status.nameTags)==null?void 0:i.includes("星杯")}),prepare:async t=>{const e=t.action.entity.hasBeenArrivalNow(["NormalSummon"])?["IfNormarlSummonSucceed"]:["IfSpecialSummonSucceed"];return{selectedEntities:[],chainBlockTags:e}},execute:async t=>{const e=t.activator.getDeckCell().cardEntities.filter(a=>a.kind==="Monster").filter(a=>{var r;return(r=a.status.nameTags)==null?void 0:r.includes("星杯")});if(e.length===0)return!1;const i=await t.activator.waitSelectEntity(e,"手札に加えるモンスターを選択",!1);if(!i)throw new v("想定されない状態",t);return await i.addToHand(["Effect"],t.action.entity,t.activator),t.activator.getDeckCell().shuffle(),!0},settle:async()=>!0},{title:"②自己サルベージ",isMandatory:!1,playType:"IgnitionEffect",spellSpeed:"Normal",executableCells:["Graveyard"],executablePeriods:["main1","main2"],executableDuelistTypes:["Controller"],isOnlyNTimesPerTurn:1,canPayCosts:t=>[...t.activator.getMonstersOnField(),...t.activator.getHandCell().cardEntities.filter(e=>e.kind==="Monster")].some(e=>e.canBeSentToGraveyard(t.activator,t.action.entity,"SendToGraveyardAsCost",t.action)),payCosts:async t=>{const e=[...t.activator.getMonstersOnField(),...t.activator.getHandCell().cardEntities.filter(a=>a.kind==="Monster")].filter(a=>a.canBeSentToGraveyard(t.activator,t.action.entity,"SendToGraveyardAsCost",t.action)),i=await t.activator.waitSelectEntity(e,"墓地に送るモンスターを選択。",!0);if(i)return await i.sendToGraveyard(["Cost"],t.action.entity,t.activator),{sendToGraveyard:[i]}},fixedTags:["SearchFromDeck"],prepare:S,execute:async t=>t.action.entity.wasMovedAfter(t.isActivatedAt)?!1:(await t.action.entity.addToHand(["Effect"],t.action.entity,t.activator),!0),settle:async()=>!0}]},yield{name:"星遺物－『星杯』",actions:[{title:"①墓地送り",isMandatory:!1,playType:"TriggerEffect",spellSpeed:"Normal",executableCells:["MonsterZone"],executablePeriods:[..._,...A],executableDuelistTypes:["Controller"],canPayCosts:Qe,canExecute:t=>t.activator.duel.field.moveLog.getPriviousChainLog().filter(e=>e.movedAs.includes("SpecialSummon")).map(e=>e.entity).some(e=>e.wasMovedFrom.cellType==="ExtraDeck"),payCosts:Xe,prepare:S,execute:async t=>{const e=t.activator.duel.field.moveLog.getPriviousChainLog().filter(i=>i.movedAs.includes("SpecialSummon")).map(i=>i.entity).filter(i=>i.wasMovedFrom.cellType==="ExtraDeck").filter(i=>i.isOnFieldAsMonsterStrictly).filter(i=>i.canBeEffected(t.activator,t.action.entity,t.action)).toArray();return await m.sendManyToGraveyardForTheSameReason(e,["Effect"],t.action.entity,t.activator),!0},settle:async()=>!0},{title:"②リクルート",isMandatory:!1,playType:"TriggerEffect",spellSpeed:"Normal",executableCells:["Hand","Graveyard","Banished"],executablePeriods:[..._,...A],executableDuelistTypes:["Controller"],meetsConditions:t=>t.action.entity.wasMovedAtPreviousChain&&t.action.entity.info.summonKinds.includes("NormalSummon")&&t.action.entity.moveLog.previousPlaceRecord.face==="FaceUp",canExecute:t=>{const e=t.activator.getDeckCell().cardEntities.filter(r=>r.kind==="Monster").filter(r=>{var n;return(n=r.status.nameTags)==null?void 0:n.includes("星杯")}).filter(r=>r.nm!=="星遺物－『星杯』"),i=t.activator.getMonsterZones();return t.activator.getEnableSummonList(t.activator,"SpecialSummon",["Effect"],t.action,e.map(r=>({monster:r,cells:i,posList:C})),[],!1).length>1},prepare:S,execute:async t=>{const e=t.activator.getDeckCell().cardEntities.filter(r=>r.kind==="Monster").filter(r=>{var n;return(n=r.status.nameTags)==null?void 0:n.includes("星杯")}).filter(r=>r.nm!=="星遺物－『星杯』"),i=t.activator.getMonsterZones();return(await t.activator.summonMany(t.activator,"SpecialSummon",["Effect"],t.action,e.map(r=>({monster:r,cells:i,posList:C})),[],!1,2,r=>r.length==2,!1)??[]).length?(t.activator.getDeckCell().shuffle(),!0):!1},settle:async()=>!0},{title:"③サーチ",isMandatory:!1,playType:"IgnitionEffect",spellSpeed:"Normal",executableCells:["Graveyard"],executablePeriods:["main1","main2"],executableDuelistTypes:["Controller"],canPayCosts:xe,meetsConditions:t=>!t.action.entity.wasMovedAtCurrentTurn,canExecute:t=>t.activator.canAddToHandFromDeck&&t.activator.getDeckCell().cardEntities.filter(e=>{var i;return(i=e.status.nameTags)==null?void 0:i.includes("星遺物")}).length>0,payCosts:We,fixedTags:["SearchFromDeck"],prepare:S,execute:async t=>{const e=await t.activator.waitSelectEntity(t.activator.getDeckCell().cardEntities.filter(i=>{var a;return(a=i.status.nameTags)==null?void 0:a.includes("星遺物")}),"手札に加えるカードを選択",!1);return e?(await e.addToHand(["Effect"],t.action.entity,t.activator),!0):!1},settle:async()=>!0}]}}const pa=Object.freeze(Object.defineProperty({__proto__:null,default:ks},Symbol.toStringTag,{value:"Module"}));function*Ds(){yield{name:"ドットスケーパー",actions:[{title:"①自己再生",isMandatory:!1,playType:"TriggerEffect",spellSpeed:"Normal",executableCells:["Graveyard"],executablePeriods:[..._,...A],executableDuelistTypes:["Controller"],isOnlyNTimesPerDuel:1,actionGroupName:"ドットスケーパー",fixedTags:["SpecialSummonFromGraveyard"],meetsConditions:t=>t.action.entity.wasMovedAtPreviousChain&&t.action.entity.wasMovedFrom.cellType!=="Banished",canExecute:t=>$(t,C,[],["Effect"]),prepare:S,execute:t=>ie(t),settle:async()=>!0},{title:"②自己帰還",isMandatory:!1,playType:"TriggerEffect",spellSpeed:"Normal",executableCells:["Banished"],executablePeriods:[..._,...A],executableDuelistTypes:["Controller"],isOnlyNTimesPerDuel:1,actionGroupName:"ドットスケーパー",fixedTags:["SpecialSummonFromBanished"],meetsConditions:t=>t.action.entity.wasMovedAtPreviousChain,canExecute:t=>$(t,C,[],["Effect"]),prepare:S,execute:t=>ie(t),settle:async()=>!0}]}}const fa=Object.freeze(Object.defineProperty({__proto__:null,default:Ds},Symbol.toStringTag,{value:"Module"}));function*xs(){yield{name:"ゼラの天使",actions:[j(),{title:"②自己帰還",isMandatory:!0,playType:"IgnitionEffect",spellSpeed:"Normal",executableCells:["Banished"],executablePeriods:["stanby"],executableDuelistTypes:["Controller"],fixedTags:["SpecialSummonFromBanished"],meetsConditions:t=>t.action.entity.wasMovedAtPreviousTurn,canExecute:t=>$(t,C,[],["Effect"]),prepare:S,execute:t=>ie(t),settle:async()=>!0}],continuousEffects:[ke("②攻撃力上昇","Monster",t=>[t],t=>[L.createContinuous("①攻撃力上昇",()=>!0,t,()=>!0,"attack","wip","Addition",(e,i,a)=>e.isEffective?a+e.controller.getOpponentPlayer().getBanished().cardEntities.length*100:a)])]}}const ga=Object.freeze(Object.defineProperty({__proto__:null,default:xs},Symbol.toStringTag,{value:"Module"}));function*As(){yield{name:"死霊騎士デスカリバー・ナイト",actions:[{title:"①モンスター効果無効",isMandatory:!0,playType:"TriggerEffect",spellSpeed:"Quick",executableCells:N,executablePeriods:[..._,...A],executableDuelistTypes:["Controller"],negatePreviousBlock:!0,canPayCosts:Qe,canExecute:t=>!!(t.targetChainBlock&&t.targetChainBlock.action.entity.isMonster&&t.targetChainBlock.action.isWithChainBlock),payCosts:Xe,prepare:async(t,e)=>{const i=t.targetChainBlock,a=e[t.index-1];return i!==a?{selectedEntities:[]}:{selectedEntities:[],chainBlockTags:["NegateCardEffect",...t.action.calcChainBlockTagsForDestroy(t.activator,[i.action.entity])],prepared:void 0}},execute:async(t,e)=>{const i=e.find(r=>r.action.entity.isMonster&&r.action.isWithChainBlock),a=e[t.index-1];return a!==i?!1:(a.isNegatedActivationBy=t.action,await m.tryDestroy([a.action.entity],t),!0)},settle:async()=>!0}]}}const ha=Object.freeze(Object.defineProperty({__proto__:null,default:As},Symbol.toStringTag,{value:"Module"}));function*Ms(){yield{name:"召喚僧サモンプリースト",actions:[{title:"①表示形式変更",isMandatory:!0,playType:"TriggerEffect",spellSpeed:"Normal",executableCells:["MonsterZone"],executablePeriods:[..._,...A],executableDuelistTypes:["Controller"],meetsConditions:t=>t.action.entity.hasBeenArrivalNow(["NormalSummon","FlipSummon"]),fixedTags:["IfNormarlSummonSucceed"],prepare:S,execute:async t=>t.action.entity.battlePosition!=="Attack"||!t.action.entity.isOnFieldAsMonsterStrictly?!1:(await t.action.entity.setBattlePosition("Defense",["Effect"],t.action.entity,t.activator),!0),settle:async()=>!0},{title:"③リクルート",isMandatory:!1,playType:"IgnitionEffect",spellSpeed:"Normal",executableCells:["MonsterZone"],executablePeriods:["main1","main2"],executableDuelistTypes:["Controller"],isOnlyNTimesPerTurnIfFaceup:1,fixedTags:["SpecialSummonFromDeck"],canPayCosts:t=>t.activator.status.canDiscardAsCost?t.activator.getHandCell().cardEntities.some(e=>e.kind==="Spell"):!1,canExecute:t=>{const e=t.activator.getDeckCell().cardEntities.filter(r=>r.kind==="Monster").filter(r=>r.lvl===4),i=t.activator.getMonsterZones();return t.activator.getEnableSummonList(t.activator,"SpecialSummon",["Effect"],t.action,e.map(r=>({monster:r,posList:C,cells:i})),[],!1).length>0},payCosts:async(t,e,i)=>{const a=t.activator.getHandCell().cardEntities.filter(n=>n.kind==="Spell"),r=await t.activator.waitSelectEntity(a,"手札コストを選択",i);if(!r&&!i)throw new k(t);if(r)return await r.discard(["Cost"],t.action.entity,t.activator),{discard:[r]}},prepare:S,execute:async t=>{const e=t.activator.getDeckCell().cardEntities.filter(r=>r.lvl===4),i=t.activator.getMonsterZones(),a=await t.activator.summonOne(t.activator,"SpecialSummon",["Effect"],t.action,e.map(r=>({monster:r,posList:C,cells:i})),[],!1,!1);return!a||(a.statusOperatorBundle.push(new R({title:"攻撃不可",validateAlive:r=>r.duel.clock.isSameTurn(r.isSpawnedAt),isContinuous:!1,isSpawnedBy:t.action.entity,actionAttr:t.action,isApplicableTo:()=>!0,statusCalculator:()=>({canAttack:!1})})),!a)?!1:(t.activator.getDeckCell().shuffle(),!0)},settle:async()=>!0}],continuousEffects:[Xt("②リリース不可","Monster",t=>[t],t=>[ye.createContinuous("②リリース不可",()=>!0,t,()=>!0,["AdvanceSummonRelease","ReleaseAsEffect","ReleaseAsCost"],()=>!1)])]}}const ya=Object.freeze(Object.defineProperty({__proto__:null,default:Ms},Symbol.toStringTag,{value:"Module"}));function*Ps(){yield{name:"アンカモフライト",actions:[I,{title:"特殊召喚",isMandatory:!1,playType:"SpecialSummon",spellSpeed:"Normal",executableCells:["ExtraDeck"],executablePeriods:["main1","main2"],executableDuelistTypes:["Controller"],isOnlyNTimesPerDuel:1,meetsConditions:t=>t.activator.getExtraDeck().cardEntities.every(e=>e.nm==="アンカモフライト"),canExecute:t=>t.action.entity.face==="FaceUp"&&$(t,C,[],["Rule"]),getDests:t=>Q(t,C,[],["Rule"]),prepare:t=>ee(t,"SpecialSummon",["SpecialSummon","Rule"],C),execute:te,settle:async()=>!0},{title:"①ドロー",isMandatory:!1,playType:"IgnitionEffect",spellSpeed:"Normal",executableCells:["SpellAndTrapZone"],executablePeriods:["main1","main2"],executableDuelistTypes:["Controller"],priorityForNPC:20,isOnlyNTimesPerTurn:1,fixedTags:["DestroySpellTrapOnField","Draw"],meetsConditions:t=>t.activator.getExtraDeck().cardEntities.every(e=>e.nm==="アンカモフライト"),canExecute:t=>t.activator.getDeckCell().cardEntities.length>0&&t.activator.canDraw,prepare:async()=>({selectedEntities:[]}),execute:async t=>(await m.tryDestroy([t.action.entity],t)).length?(t.action.entity.field.duel.clock.incrementProcSeq(),await t.activator.draw(1,t.action.entity,t.activator),!0):!1,settle:async()=>!0}],summonFilter:(t,e,i,a,r,n,s,o,c,u)=>{const d={posList:c,cells:u},p={posList:[],cells:[]};return s!==e||n.entity===e?d:p},continuousEffects:[_e("除外予定","Monster",t=>[t],t=>[new R({title:"除外予定",validateAlive:()=>!0,isContinuous:!0,isSpawnedBy:t,actionAttr:{},isApplicableTo:(e,i)=>i.isOnFieldAsMonsterStrictly&&i.face==="FaceUp",statusCalculator:()=>({willBeBanished:!0})})])]}}const ma=Object.freeze(Object.defineProperty({__proto__:null,default:Ps},Symbol.toStringTag,{value:"Module"}));function*Fs(){yield{name:"エキセントリック・ボーイ",actions:[],summonFilter:(t,e,i,a,r,n,s,o,c,u)=>{const d={posList:c,cells:u},p={posList:[],cells:[]};if(!r.includes("SynchroSummon"))return d;const f=o.find(h=>h.material===t.isSpawnedBy);return f?!f.cell.isMonsterZoneLikeCell||o.length!==2?p:o.filter(h=>h!==f).every(h=>h.cell.cellType==="Hand")?d:p:d},defaultStatus:{allowHandSynchro:!0},onUsedAsMaterial:(t,e)=>{e.info.summonKinds.includes("SynchroSummon")&&(t.action.entity.statusOperatorBundle.push(new R({title:"除外予定",validateAlive:()=>!0,isContinuous:!1,isSpawnedBy:t.action.entity,actionAttr:t.action,isApplicableTo:(i,a)=>a.isOnFieldAsMonsterStrictly&&a.face==="FaceUp",statusCalculator:()=>({willBeBanished:!0})})),e.info.isEffectiveIn=e.info.isEffectiveIn.filter(i=>i!=="ExtraMonsterZone").filter(i=>i!=="MonsterZone"))}}}const va=Object.freeze(Object.defineProperty({__proto__:null,default:Fs},Symbol.toStringTag,{value:"Module"})),Ns={title:"ペンデュラム召喚",isMandatory:!1,playType:"SpecialSummon",spellSpeed:"Normal",executableCells:["Hand"],executablePeriods:["main1","main2"],executableDuelistTypes:["Controller"],isOnlyNTimesPerTurn:1,canExecute:t=>{const e=t.activator.getPendulumScales();if(!e||e.upperBound-e.lowerBound<2)return!1;const i=[...t.activator.getHandCell().cardEntities.filter(n=>n.kind==="Monster"),...t.activator.getExtraDeck().cardEntities.filter(n=>n.face==="FaceUp")].filter(n=>n.kind==="Monster").filter(n=>n.lvl&&n.lvl>e.lowerBound).filter(n=>n.lvl&&n.lvl<e.upperBound);if(!i.length)return!1;const a=[...t.activator.getMonsterZones(),...t.activator.getAvailableMonsterZones()];return t.activator.getEnableSummonList(t.activator,"PendulumSummon",["Rule"],t.action,i.map(n=>({monster:n,cells:a,posList:C})),[],!1).length>0},prepare:async t=>{const e=t.activator.getPendulumScales();if(!e||e.upperBound-e.lowerBound<2)return;const i=[...t.activator.getHandCell().cardEntities.filter(r=>r.kind==="Monster"),...t.activator.getExtraDeck().cardEntities.filter(r=>r.face==="FaceUp")].filter(r=>r.kind==="Monster").filter(r=>r.lvl&&r.lvl>e.lowerBound).filter(r=>r.lvl&&r.lvl<e.upperBound);if(!i.length)return;const a=[...t.activator.getMonsterZones(),...t.activator.getAvailableExtraMonsterZones()];return await t.activator.summonMany(t.activator,"PendulumSummon",["Rule"],t.action,i.map(r=>({monster:r,posList:C,cells:a})),[],!1,void 0,r=>r.length>0,!1),S()},execute:async t=>(t.activator.getPendingMonstersOnField().forEach(e=>e.determine()),!0),settle:async()=>!0},Os={title:"強制勝利",isMandatory:!0,playType:"LingeringEffect",spellSpeed:"Normal",executableCells:["Hand"],executablePeriods:["main2"],executableDuelistTypes:["Controller"],isOnlyNTimesPerTurn:1,canExecute:t=>t.activator.duel.clock.turn>1,prepare:async t=>(await m.sendManyToGraveyardForTheSameReason(t.activator.duel.field.getCardsOnFieldStrictly(),["Rule"],t.action.entity,t.activator),{selectedEntities:[],nextChainBlockFilter:()=>!1}),execute:async t=>{const e=[{name:"封印されし者の左足",column:4},{name:"封印されし者の右足",column:2},{name:"封印されし者の左腕",column:5},{name:"封印されし者の右腕",column:1},{name:"封印されしエクゾディア",column:3}];for(const i of e){const a=[t.activator.duel.field.getAllCardEntities().filter(r=>r.owner===t.activator).find(r=>r.origin.name===i.name),t.activator.getOpponentPlayer().getHandCell().cardEntities.find(r=>r.origin.name===i.name)].filter(r=>r!==void 0);if(!a.length)throw new v("想定されない状態",t.activator.getHandCell().cardEntities,i.name);await D.moveMany(a.map(r=>({entity:r,to:r.controller.getMonsterZones().find(n=>n.column===(r.controller.seat==="Above"?6-i.column:i.column))??r.controller.getFieldZone(),kind:"Monster",face:"FaceUp",orientation:"Vertical",pos:"Top",movedAs:["Rule"],movedBy:void 0,actionOwner:void 0,chooser:void 0})))}throw new B(t.activator,`${t.activator.getOpponentPlayer().name}がワンターンキルに失敗した。`)},settle:async()=>!0},Bs=t=>{const e=[Ns];return t.profile.npcType==="FtkChallenge"&&e.push(Os),{name:t.profile.name,actions:e,staticInfo:{name:t.profile.name,kind:"Monster",wikiEncodedName:"%A5%D7%A5%EC%A5%A4%A5%E4%A1%BC"}}},le=t=>t.type==="Name",Ls=t=>t.type==="Filter",qs=t=>t.type==="Overmuch";function*Rs(){const t={...Object.assign({"/src/ygo_entity_proc/card_proc_definitions/CardProcDefinitions_ContinuousSpell.ts":li,"/src/ygo_entity_proc/card_proc_definitions/CardProcDefinitions_ContinuousTrap.ts":oi,"/src/ygo_entity_proc/card_proc_definitions/CardProcDefinitions_CounterTrap.ts":ci,"/src/ygo_entity_proc/card_proc_definitions/CardProcDefinitions_EquipSpell.ts":ui,"/src/ygo_entity_proc/card_proc_definitions/CardProcDefinitions_EquipSpell_Preset.ts":di,"/src/ygo_entity_proc/card_proc_definitions/CardProcDefinitions_FieldSpell.ts":pi,"/src/ygo_entity_proc/card_proc_definitions/CardProcDefinitions_FieldSpell_Preset.ts":fi,"/src/ygo_entity_proc/card_proc_definitions/CardProcDefinitions_FusionMonster.ts":gi,"/src/ygo_entity_proc/card_proc_definitions/CardProcDefinitions_LinkMonster.ts":vi,"/src/ygo_entity_proc/card_proc_definitions/CardProcDefinitions_Monster.ts":Si,"/src/ygo_entity_proc/card_proc_definitions/CardProcDefinitions_Monster_Preset_Catapult.ts":Ci,"/src/ygo_entity_proc/card_proc_definitions/CardProcDefinitions_Monster_Preset_DirectAttacker.ts":Ti,"/src/ygo_entity_proc/card_proc_definitions/CardProcDefinitions_Monster_Preset_Recruiter.ts":_i,"/src/ygo_entity_proc/card_proc_definitions/CardProcDefinitions_NormalSpell.ts":Ei,"/src/ygo_entity_proc/card_proc_definitions/CardProcDefinitions_NormalSpell_General_Draw.ts":wi,"/src/ygo_entity_proc/card_proc_definitions/CardProcDefinitions_NormalSpell_General_Mill.ts":bi,"/src/ygo_entity_proc/card_proc_definitions/CardProcDefinitions_NormalSpell_General_Salvage.ts":ki,"/src/ygo_entity_proc/card_proc_definitions/CardProcDefinitions_NormalSpell_Preset.ts":Di,"/src/ygo_entity_proc/card_proc_definitions/CardProcDefinitions_NormalTrap.ts":xi,"/src/ygo_entity_proc/card_proc_definitions/CardProcDefinitions_NormalTrap_UponAttackDeclaration.ts":Ai,"/src/ygo_entity_proc/card_proc_definitions/CardProcDefinitions_QuickPlaySpell.ts":Mi,"/src/ygo_entity_proc/card_proc_definitions/CardProcDefinitions_RitualSpell.ts":Fi,"/src/ygo_entity_proc/card_proc_definitions/CardProcDefinitions_SynchroMonster.ts":Ni,"/src/ygo_entity_proc/card_proc_definitions/CardProcDefinitions_TestMonster.ts":Oi,"/src/ygo_entity_proc/card_proc_definitions/CardProcDefinitions_XyzMonster.ts":Bi}),...Object.assign({"/src/ygo_entity_proc/card_proc_definitions/character_yusei/CardProcDefinitions_Yusei_SyncroTunerMonster.ts":Li,"/src/ygo_entity_proc/card_proc_definitions/support_fusion/CardProcDefinitions_FustionSubstitude_Monster.ts":Ri,"/src/ygo_entity_proc/card_proc_definitions/support_fusion/CardProcDefinitions_FustionSupport_Monster.ts":Hi,"/src/ygo_entity_proc/card_proc_definitions/support_retual/CardProcDefinitions_RetualSupport_Monster.ts":Zi,"/src/ygo_entity_proc/card_proc_definitions/support_retual/CardProcDefinitions_RetualSupport_NormalSpell.ts":Gi,"/src/ygo_entity_proc/card_proc_definitions/tag_b/CardProcDefinitions_BambooSword_EquipSpell.ts":$i,"/src/ygo_entity_proc/card_proc_definitions/tag_b/CardProcDefinitions_BambooSword_NormalSpell.ts":ji,"/src/ygo_entity_proc/card_proc_definitions/tag_b/CardProcDefinitions_Blackwing_Monster.ts":Ui,"/src/ygo_entity_proc/card_proc_definitions/tag_c/CardProcDefinitions_Crystron_LinkMonster.ts":zi,"/src/ygo_entity_proc/card_proc_definitions/tag_d/CardProcDefinitions_DestinyHero_Monster.ts":Vi,"/src/ygo_entity_proc/card_proc_definitions/tag_e/CardProcDefinitions_ElementalHero_Monster.ts":Wi,"/src/ygo_entity_proc/card_proc_definitions/tag_e/CardProcDefinitions_Exodia_Monster.ts":Qi,"/src/ygo_entity_proc/card_proc_definitions/tag_f/CardProcDefinitions_Firewall_LinkMonster.ts":Xi,"/src/ygo_entity_proc/card_proc_definitions/tag_f/CardProcDefinitions_Fusion_NormalSpell.ts":Ki,"/src/ygo_entity_proc/card_proc_definitions/tag_i/CardProcDefinitions_Igknight_Monster.ts":Ji,"/src/ygo_entity_proc/card_proc_definitions/tag_j/CardProcDefinitions_Junk_Monster.ts":Yi,"/src/ygo_entity_proc/card_proc_definitions/tag_l/CardProcDefinitions_Lightsworn_NormalSpell.ts":Ii,"/src/ygo_entity_proc/card_proc_definitions/tag_l/CardProcDefinitions_Lightsworn_lv3_Monster.ts":ta,"/src/ygo_entity_proc/card_proc_definitions/tag_l/CardProcDefinitions_Lightsworn_lv4_Monster.ts":ia,"/src/ygo_entity_proc/card_proc_definitions/tag_m/CardProcDefinitions_Metalfoes_Monster.ts":aa,"/src/ygo_entity_proc/card_proc_definitions/tag_m/CardProcDefinitions_Metalfoes_NormalSpell.ts":ra,"/src/ygo_entity_proc/card_proc_definitions/tag_r/CardProcDefinitions_Resonator_Monster.ts":na,"/src/ygo_entity_proc/card_proc_definitions/tag_s/CardProcDefinitions_SpellCounter_Monster.ts":sa,"/src/ygo_entity_proc/card_proc_definitions/tag_s/CardProcDefinitions_Stardust_Monster.ts":la,"/src/ygo_entity_proc/card_proc_definitions/tag_s/CardProcDefinitions_Synchron_NormalSpell.ts":oa,"/src/ygo_entity_proc/card_proc_definitions/tag_s/CardProcDefinitions_Synchron_SyncroMonster.ts":ca,"/src/ygo_entity_proc/card_proc_definitions/tag_t/CardProcDefinitions_Toon_ContinuousSpell.ts":ua,"/src/ygo_entity_proc/card_proc_definitions/tag_v/CardProcDefinitions_Void_NormalSpell.ts":da,"/src/ygo_entity_proc/card_proc_definitions/tag_w/CardProcDefinitions_WorldChalice_Monster.ts":pa,"/src/ygo_entity_proc/card_proc_definitions/type_Cyberse/CardProcDefinitions_Earth_Cyberse_lvl1_Monster.ts":fa,"/src/ygo_entity_proc/card_proc_definitions/type_Fairy/CardProcDefinitions_Light_Fairy_lvl8_SyncroMonster.ts":ga,"/src/ygo_entity_proc/card_proc_definitions/type_Fiend/CardProcDefinitions_Dark_Fiend_lvl4_Monster.ts":ha,"/src/ygo_entity_proc/card_proc_definitions/type_Spellcaster/CardProcDefinitions_Dark_Spellcaster_lvl4_Monster.ts":ya,"/src/ygo_entity_proc/card_proc_definitions/type_Spellcaster/CardProcDefinitions_Light_Spellcaster_lvl5_PendulumMonster.ts":ma,"/src/ygo_entity_proc/card_proc_definitions/type_Spellcaster/CardProcDefinitions_Wind_Spellcaster_lvl3_Monster.ts":va})};for(const e of Object.keys(t))t[e].default&&(yield*t[e].default())}function*Hs(...t){var a,r;const e={...Object.assign({"/src/ygo_entity_proc/card_proc_definitions/CardProcDefinitions_ContinuousSpell.ts":li,"/src/ygo_entity_proc/card_proc_definitions/CardProcDefinitions_ContinuousTrap.ts":oi,"/src/ygo_entity_proc/card_proc_definitions/CardProcDefinitions_CounterTrap.ts":ci,"/src/ygo_entity_proc/card_proc_definitions/CardProcDefinitions_EquipSpell.ts":ui,"/src/ygo_entity_proc/card_proc_definitions/CardProcDefinitions_EquipSpell_Preset.ts":di,"/src/ygo_entity_proc/card_proc_definitions/CardProcDefinitions_FieldSpell.ts":pi,"/src/ygo_entity_proc/card_proc_definitions/CardProcDefinitions_FieldSpell_Preset.ts":fi,"/src/ygo_entity_proc/card_proc_definitions/CardProcDefinitions_FusionMonster.ts":gi,"/src/ygo_entity_proc/card_proc_definitions/CardProcDefinitions_LinkMonster.ts":vi,"/src/ygo_entity_proc/card_proc_definitions/CardProcDefinitions_Monster.ts":Si,"/src/ygo_entity_proc/card_proc_definitions/CardProcDefinitions_Monster_Preset_Catapult.ts":Ci,"/src/ygo_entity_proc/card_proc_definitions/CardProcDefinitions_Monster_Preset_DirectAttacker.ts":Ti,"/src/ygo_entity_proc/card_proc_definitions/CardProcDefinitions_Monster_Preset_Recruiter.ts":_i,"/src/ygo_entity_proc/card_proc_definitions/CardProcDefinitions_NormalSpell.ts":Ei,"/src/ygo_entity_proc/card_proc_definitions/CardProcDefinitions_NormalSpell_General_Draw.ts":wi,"/src/ygo_entity_proc/card_proc_definitions/CardProcDefinitions_NormalSpell_General_Mill.ts":bi,"/src/ygo_entity_proc/card_proc_definitions/CardProcDefinitions_NormalSpell_General_Salvage.ts":ki,"/src/ygo_entity_proc/card_proc_definitions/CardProcDefinitions_NormalSpell_Preset.ts":Di,"/src/ygo_entity_proc/card_proc_definitions/CardProcDefinitions_NormalTrap.ts":xi,"/src/ygo_entity_proc/card_proc_definitions/CardProcDefinitions_NormalTrap_UponAttackDeclaration.ts":Ai,"/src/ygo_entity_proc/card_proc_definitions/CardProcDefinitions_QuickPlaySpell.ts":Mi,"/src/ygo_entity_proc/card_proc_definitions/CardProcDefinitions_RitualSpell.ts":Fi,"/src/ygo_entity_proc/card_proc_definitions/CardProcDefinitions_SynchroMonster.ts":Ni,"/src/ygo_entity_proc/card_proc_definitions/CardProcDefinitions_TestMonster.ts":Oi,"/src/ygo_entity_proc/card_proc_definitions/CardProcDefinitions_XyzMonster.ts":Bi}),...Object.assign({"/src/ygo_entity_proc/card_proc_definitions/character_yusei/CardProcDefinitions_Yusei_SyncroTunerMonster.ts":Li,"/src/ygo_entity_proc/card_proc_definitions/support_fusion/CardProcDefinitions_FustionSubstitude_Monster.ts":Ri,"/src/ygo_entity_proc/card_proc_definitions/support_fusion/CardProcDefinitions_FustionSupport_Monster.ts":Hi,"/src/ygo_entity_proc/card_proc_definitions/support_retual/CardProcDefinitions_RetualSupport_Monster.ts":Zi,"/src/ygo_entity_proc/card_proc_definitions/support_retual/CardProcDefinitions_RetualSupport_NormalSpell.ts":Gi,"/src/ygo_entity_proc/card_proc_definitions/tag_b/CardProcDefinitions_BambooSword_EquipSpell.ts":$i,"/src/ygo_entity_proc/card_proc_definitions/tag_b/CardProcDefinitions_BambooSword_NormalSpell.ts":ji,"/src/ygo_entity_proc/card_proc_definitions/tag_b/CardProcDefinitions_Blackwing_Monster.ts":Ui,"/src/ygo_entity_proc/card_proc_definitions/tag_c/CardProcDefinitions_Crystron_LinkMonster.ts":zi,"/src/ygo_entity_proc/card_proc_definitions/tag_d/CardProcDefinitions_DestinyHero_Monster.ts":Vi,"/src/ygo_entity_proc/card_proc_definitions/tag_e/CardProcDefinitions_ElementalHero_Monster.ts":Wi,"/src/ygo_entity_proc/card_proc_definitions/tag_e/CardProcDefinitions_Exodia_Monster.ts":Qi,"/src/ygo_entity_proc/card_proc_definitions/tag_f/CardProcDefinitions_Firewall_LinkMonster.ts":Xi,"/src/ygo_entity_proc/card_proc_definitions/tag_f/CardProcDefinitions_Fusion_NormalSpell.ts":Ki,"/src/ygo_entity_proc/card_proc_definitions/tag_i/CardProcDefinitions_Igknight_Monster.ts":Ji,"/src/ygo_entity_proc/card_proc_definitions/tag_j/CardProcDefinitions_Junk_Monster.ts":Yi,"/src/ygo_entity_proc/card_proc_definitions/tag_l/CardProcDefinitions_Lightsworn_NormalSpell.ts":Ii,"/src/ygo_entity_proc/card_proc_definitions/tag_l/CardProcDefinitions_Lightsworn_lv3_Monster.ts":ta,"/src/ygo_entity_proc/card_proc_definitions/tag_l/CardProcDefinitions_Lightsworn_lv4_Monster.ts":ia,"/src/ygo_entity_proc/card_proc_definitions/tag_m/CardProcDefinitions_Metalfoes_Monster.ts":aa,"/src/ygo_entity_proc/card_proc_definitions/tag_m/CardProcDefinitions_Metalfoes_NormalSpell.ts":ra,"/src/ygo_entity_proc/card_proc_definitions/tag_r/CardProcDefinitions_Resonator_Monster.ts":na,"/src/ygo_entity_proc/card_proc_definitions/tag_s/CardProcDefinitions_SpellCounter_Monster.ts":sa,"/src/ygo_entity_proc/card_proc_definitions/tag_s/CardProcDefinitions_Stardust_Monster.ts":la,"/src/ygo_entity_proc/card_proc_definitions/tag_s/CardProcDefinitions_Synchron_NormalSpell.ts":oa,"/src/ygo_entity_proc/card_proc_definitions/tag_s/CardProcDefinitions_Synchron_SyncroMonster.ts":ca,"/src/ygo_entity_proc/card_proc_definitions/tag_t/CardProcDefinitions_Toon_ContinuousSpell.ts":ua,"/src/ygo_entity_proc/card_proc_definitions/tag_v/CardProcDefinitions_Void_NormalSpell.ts":da,"/src/ygo_entity_proc/card_proc_definitions/tag_w/CardProcDefinitions_WorldChalice_Monster.ts":pa,"/src/ygo_entity_proc/card_proc_definitions/type_Cyberse/CardProcDefinitions_Earth_Cyberse_lvl1_Monster.ts":fa,"/src/ygo_entity_proc/card_proc_definitions/type_Fairy/CardProcDefinitions_Light_Fairy_lvl8_SyncroMonster.ts":ga,"/src/ygo_entity_proc/card_proc_definitions/type_Fiend/CardProcDefinitions_Dark_Fiend_lvl4_Monster.ts":ha,"/src/ygo_entity_proc/card_proc_definitions/type_Spellcaster/CardProcDefinitions_Dark_Spellcaster_lvl4_Monster.ts":ya,"/src/ygo_entity_proc/card_proc_definitions/type_Spellcaster/CardProcDefinitions_Light_Spellcaster_lvl5_PendulumMonster.ts":ma,"/src/ygo_entity_proc/card_proc_definitions/type_Spellcaster/CardProcDefinitions_Wind_Spellcaster_lvl3_Monster.ts":va})},i=[];for(const n of Object.values(e))if(n.default){for(const s of n.default())if(t.includes(s.name)){const o={...Y[s.name]};let c=s.summonFilter;o.kind==="Monster"&&o.monsterCategories&&!s.summonFilter&&o.monsterCategories.union(Zt).length&&(c=hn),s.fusionMaterialInfos&&s.fusionMaterialInfos.some(d=>d.type==="Name")&&(o.textTags=[...o.textTags??[],...s.fusionMaterialInfos.filter(le).map(d=>d.cardName)]);const u={...s,summonFilter:c,staticInfo:o};(a=o.monsterCategories)!=null&&a.includes("Link")?u.actions=[...yi,...u.actions]:(r=o.monsterCategories)!=null&&r.includes("SpecialSummon")?u.actions=[...Ze,...u.actions]:u.actions=[...Nt,...s.actions],yield u,i.push(s.name)}}yield*t.filter(n=>!i.includes(n)).map(n=>Y[n]).filter(n=>n).filter(n=>n.kind==="Monster").filter(n=>{var s;return!((s=n.monsterCategories)!=null&&s.includes("Effect"))}).filter(n=>{var s;return!((s=n.monsterCategories)!=null&&s.includes("Pendulum"))}).map(n=>{var s;return i.push(n.name),{name:n.name,actions:(s=n.monsterCategories)!=null&&s.includes("SpecialSummon")?Ze:Nt,staticInfo:n}}),i.length!==t.length&&console.log(t.filter(n=>!i.includes(n)))}const Zs=t=>({...Bs(t),staticInfo:{name:t.profile.name,kind:"Monster",wikiEncodedName:"%A5%D7%A5%EC%A5%A4%A5%E4%A1%BC"}}),Gs=new Set,dt=ka;let Sa=0,Ca=0;for(const t of Rs()){if(Gs.has(t.name))throw new Error(`カード定義重複${t.name}`);dt[t.name]&&(dt[t.name].isImplemented=!0,Sa++)}const Y=Object.values(dt).reduce((t,e)=>{var i;return e.kind==="Monster"&&e.monsterCategories&&!((i=e.monsterCategories)!=null&&i.includes("Effect"))&&!e.monsterCategories.includes("Pendulum")&&(e.isImplemented=!0,Ca++),e.isForTest&&e.isImplemented,t[e.name]=e,t},{}),hl=Sa,yl=Ca,pt=[{id:-1,name:"サンプルデッキ１",deckType:"NPC",description:"",cardNames:["アンノウン・シンクロン","六武衆のご隠居","ジャンク・フォアード","ジャンク・フォアード","ジャンク・フォアード","チューン・ウォリアー","チューン・ウォリアー","ガード・オブ・フレムベル","ガード・オブ・フレムベル","守護竜ユスティア","守護竜ユスティア","エンジェル・トランペッター","エンジェル・トランペッター","ジェムナイト・サフィア","ジェムナイト・サフィア","魂虎","魂虎","暗黒界の番兵 レンジ","暗黒界の番兵 レンジ","バトルフットボーラー","バトルフットボーラー","球騎士の三人娘","球騎士の三人娘","エンジェル・トランペッター","エンジェル・トランペッター","Ｇ戦隊 シャインブラック","Ｇ戦隊 シャインブラック","しゃりの軍貫","しゃりの軍貫","ジョングルグールの幻術師","ジョングルグールの幻術師","ゾンビーノ","ゾンビーノ","メガロスマッシャーＸ","メガロスマッシャーＸ","ライドロン","ライドロン","機界騎士アヴラム","機界騎士アヴラム","幻のグリフォン","幻のグリフォン","幻殻竜","幻殻竜","アレキサンドライドラゴン","アレキサンドライドラゴン","ジェネティック・ワーウルフ","ジェネティック・ワーウルフ","サイバー・ドラゴン","フロストザウルス","フロストザウルス","フロストザウルス","青眼の白龍","マジカル・アンドロイド","マジカル・アンドロイド","マジカル・アンドロイド","大地の騎士ガイアナイト","大地の騎士ガイアナイト","大地の騎士ガイアナイト","スクラップ・デスデーモン","スクラップ・デスデーモン","スクラップ・デスデーモン","スターダスト・ドラゴン","スターダスト・ドラゴン","スターダスト・ドラゴン","ナチュル・ガオドレイク","ナチュル・ガオドレイク","ナチュル・ガオドレイク"]},{id:-2,name:"サンプルデッキ２",deckType:"NPC",description:"",cardNames:["アンノウン・シンクロン","六武衆のご隠居","ジャンク・フォアード","グローアップ・バルブ","ガード・オブ・フレムベル","伝説の白石","伝説の白石","伝説の白石","守護竜ユスティア","ギャラクシーサーペント","ジェネクス・コントローラー","Ｅ・ＨＥＲＯ フェザーマン","Ｅ・ＨＥＲＯ バーストレディ","チューン・ウォリアー","Ｅ・ＨＥＲＯ クレイマン","Ｅ・ＨＥＲＯ スパークマン","しゃりの軍貫","ジョングルグールの幻術師","ゾンビーノ","ジェネティック・ワーウルフ","ライトロード・ビースト ウォルフ","サイバー・ドラゴン","サイバー・ドラゴン","サイバー・ドラゴン","ラブラドライドラゴン","Ｄ－ＨＥＲＯ ディアボリックガイ","Ｄ－ＨＥＲＯ ディアボリックガイ","Ｄ－ＨＥＲＯ ディアボリックガイ","フロストザウルス","Ｅ・ＨＥＲＯ ネオス","青眼の白龍","青眼の白龍","青眼の白龍","Ｅ－エマージェンシーコール","おろかな埋葬","トレード・イン","トレード・イン","トレード・イン","闇の量産工場","強欲な壺","強欲な壺","強欲な壺","死者蘇生","死者蘇生","死者蘇生","召喚師のスキル","召喚師のスキル","召喚師のスキル","成金ゴブリン","成金ゴブリン","成金ゴブリン","戦士の生還","増援","調和の宝札","調和の宝札","調和の宝札","天使の施し","天使の施し","天使の施し","貪欲な壺","貪欲な壺","貪欲な壺","マジカル・アンドロイド","マジカル・アンドロイド","マジカル・アンドロイド","大地の騎士ガイアナイト","大地の騎士ガイアナイト","大地の騎士ガイアナイト","スクラップ・デスデーモン","スクラップ・デスデーモン","スクラップ・デスデーモン","スターダスト・ドラゴン","スターダスト・ドラゴン","スターダスト・ドラゴン","ナチュル・ガオドレイク","ナチュル・ガオドレイク","ナチュル・ガオドレイク"]},{id:-3,name:"サンプルデッキ３",deckType:"NPC",description:"",cardNames:["アンノウン・シンクロン","六武衆のご隠居","ジャンク・フォアード","グローアップ・バルブ","ガード・オブ・フレムベル","伝説の白石","伝説の白石","伝説の白石","守護竜ユスティア","ギャラクシーサーペント","ジェネクス・コントローラー","Ｅ・ＨＥＲＯ フェザーマン","Ｅ・ＨＥＲＯ バーストレディ","チューン・ウォリアー","Ｅ・ＨＥＲＯ クレイマン","Ｅ・ＨＥＲＯ スパークマン","しゃりの軍貫","ジョングルグールの幻術師","ゾンビーノ","ジェネティック・ワーウルフ","ライトロード・ビースト ウォルフ","サイバー・ドラゴン","サイバー・ドラゴン","サイバー・ドラゴン","ラブラドライドラゴン","Ｄ－ＨＥＲＯ ディアボリックガイ","Ｄ－ＨＥＲＯ ディアボリックガイ","Ｄ－ＨＥＲＯ ディアボリックガイ","フロストザウルス","Ｅ・ＨＥＲＯ ネオス","青眼の白龍","青眼の白龍","青眼の白龍","Ｅ－エマージェンシーコール","おろかな埋葬","トレード・イン","トレード・イン","トレード・イン","闇の量産工場","強欲な壺","強欲な壺","強欲な壺","死者蘇生","死者蘇生","死者蘇生","召喚師のスキル","召喚師のスキル","召喚師のスキル","成金ゴブリン","成金ゴブリン","成金ゴブリン","戦士の生還","増援","調和の宝札","調和の宝札","調和の宝札","天使の施し","天使の施し","天使の施し","貪欲な壺","貪欲な壺","貪欲な壺","マジカル・アンドロイド","マジカル・アンドロイド","マジカル・アンドロイド","大地の騎士ガイアナイト","大地の騎士ガイアナイト","大地の騎士ガイアナイト","スクラップ・デスデーモン","スクラップ・デスデーモン","スクラップ・デスデーモン","スターダスト・ドラゴン","スターダスト・ドラゴン","スターダスト・ドラゴン","ナチュル・ガオドレイク","ナチュル・ガオドレイク","ナチュル・ガオドレイク"]},{id:-9007199254740991,name:"FtkChallenge",deckType:"NPC",description:"FtkChallenge",cardNames:["封印されし者の右足","封印されし者の右腕","封印されし者の左足","封印されし者の左腕","封印されしエクゾディア","スカゴブリン","スカゴブリン","スカゴブリン","スカゴブリン","スカゴブリン","スカゴブリン","スカゴブリン","スカゴブリン","スカゴブリン","スカゴブリン","スカゴブリン","スカゴブリン","スカゴブリン","スカゴブリン","スカゴブリン","スカゴブリン","スカゴブリン","スカゴブリン","スカゴブリン","スカゴブリン","スカゴブリン","スカゴブリン","スカゴブリン","スカゴブリン","スカゴブリン","スカゴブリン","スカゴブリン","スカゴブリン","スカゴブリン","スカゴブリン","スカゴブリン","スカゴブリン","スカゴブリン","スカゴブリン","スカゴブリン","スカゴブリン","スカゴブリン","スカゴブリン","スカゴブリン","スカゴブリン","スカゴブリン","スカゴブリン","スカゴブリン","スカゴブリン","スカゴブリン","スカゴブリン","スカゴブリン","スカゴブリン","スカゴブリン","スカゴブリン","スカゴブリン","スカゴブリン","スカゴブリン","スカゴブリン","スカゴブリン"]},{id:-1e3,name:"図書館エクゾプリセット",deckType:"Preset",description:"プリセット",cardNames:["封印されし者の右足","封印されし者の右腕","封印されし者の左足","封印されし者の左腕","封印されしエクゾディア","王立魔法図書館","王立魔法図書館","王立魔法図書館","召喚僧サモンプリースト","召喚僧サモンプリースト","召喚僧サモンプリースト","アンカモフライト","ダーク・バースト","チキンレース","チキンレース","チキンレース","テラ・フォーミング","トゥーン・ワールド","トゥーンのもくじ","トゥーンのもくじ","トゥーンのもくじ","一時休戦","黄金色の竹光","黄金色の竹光","黄金色の竹光","手札断殺","手札断殺","手札断殺","真刀竹光","成金ゴブリン","成金ゴブリン","成金ゴブリン","打ち出の小槌","打ち出の小槌","無の煉獄","無の煉獄","無の煉獄","妖刀竹光","妖刀竹光","妖刀竹光"]}],E=class E{constructor(e,i){l(this,"id");l(this,"name");l(this,"deckType");l(this,"description");l(this,"lastUsedAt");l(this,"cardNames");l(this,"getIllegalCardNames",()=>Array.from(new Set(this.cardNames.filter(e=>!Object.keys(Y).includes(e)))));l(this,"getDisableCardNames",()=>Array.from(new Set(this.cardNames.filter(e=>!Object.keys(Y).includes(e)))));l(this,"createCardInfos",()=>{const e=this.getIllegalCardNames();if(e.length>0)throw new Error(`存在しないカード名からデッキを生成しようとした。${e}`);return this.cardNames.map(i=>Y==null?void 0:Y[i]).filter(i=>i)});l(this,"copy",async()=>E.createNewDeck(this.name,this.description,this.cardNames));l(this,"updateTimestamp",async()=>{await E.tblHeader.update(this.id,e=>({...e,lastUsedAt:new Date}))});l(this,"saveDeckInfo",async e=>{const i=e??this;await E.tblHeader.update(this.id,n=>({...n,name:i.name,description:i.description,deckType:"User",lastUsedAt:new Date}));const a=(await E.tblDetail.getAll()).filter(n=>n.deckId===this.id);await E.tblDetail.delete(a.map(n=>n.id));const r=await E.tblDetail.insertMany(i.cardNames.map((n,s)=>({deckId:this.id,seq:s,name:n,description:""})));return new E(await E.tblHeader.get(this.id),r)});l(this,"delete",async()=>{await E.tblHeader.delete([this.id]);const e=(await E.tblDetail.getAll()).filter(i=>i.deckId===this.id);await E.tblDetail.delete(e.map(i=>i.id))});this.id=e.id,this.name=e.name,this.deckType=e.deckType,this.description=e.description,this.lastUsedAt=e.lastUsedAt,this.cardNames=i.filter(a=>a.deckId===this.id).map(a=>a.name)}};l(E,"toJson",e=>{const i=e.map(a=>{const{id:r,name:n,description:s,lastUsedAt:o,cardNames:c}=a;return{id:r,name:n,description:s,lastUsedAt:o,cardNames:c}});return i.forEach(a=>{a.cardNames=a.cardNames.map(r=>Y[r]).sort(jt).map(r=>r.name)}),JSON.stringify(i,null,2)}),l(E,"convertToObjectURL",e=>{const i=E.toJson(e),a=new Blob([i],{type:"text/plain"});return window.URL.createObjectURL(a)}),l(E,"idb"),l(E,"tblHeader"),l(E,"tblDetail"),l(E,"getAllDeckInfo",async e=>{if(e&&(E.idb=e),!E.idb)throw new Error("illegal argument: idb is undefined.");E.tblHeader||(E.tblHeader=new $s(E.idb)),E.tblDetail||(E.tblDetail=new js(E.idb));const i=await E.tblHeader.getAll(),a=await E.tblDetail.getAll();return i.length?i.map(r=>new E(r,a)):[await E.prepareSampleDeck()]}),l(E,"createNewDeck",async(e,i,a)=>{const r=await E.tblHeader.insert({name:e,description:i,deckType:"User",lastUsedAt:new Date}),n=await E.tblDetail.insertMany(a.map((s,o)=>({deckId:r.id,seq:o,name:s,description:""})));return new E(r,n)}),l(E,"prepareSampleDeck",async()=>{const e=pt.find(i=>i.deckType==="Preset")??pt.slice(-1)[0];return await E.createNewDeck(e.name,e.description,e.cardNames)});let Lt=E;class $s extends ft{constructor(i){super(i,"TblDeckHeader");l(this,"_prepareInitialRecords",()=>[])}}class js extends ft{constructor(i){super(i,"TblDeckDetail");l(this,"_prepareInitialRecords",()=>[])}}const ml=pt.map(t=>({...t,lastUsedAt:new Date})).filter(t=>t.id<0);export{Lt as A,yl as B,hl as C,ot as D,Vs as E,Mt as F,Pt as G,ml as H,Ye as I,pl as J,dl as K,v as S,sl as a,Ys as b,Js as c,Ha as d,Re as e,ul as f,cl as g,Y as h,el as i,gl as j,fl as k,Ne as l,ll as m,jt as n,Xs as o,Qs as p,Ws as q,ol as r,al as s,nl as t,Da as u,rl as v,il as w,tl as x,Is as y,Ks as z};
