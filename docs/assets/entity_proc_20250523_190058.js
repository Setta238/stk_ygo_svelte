var ta=Object.defineProperty;var ia=(e,t,i)=>t in e?ta(e,t,{enumerable:!0,configurable:!0,writable:!0,value:i}):e[t]=i;var l=(e,t,i)=>ia(e,typeof t!="symbol"?t+"":t,i);import{j as aa}from"./json_20250523_190058.js";class us{constructor(t,i,a){l(this,"_dbname");l(this,"_dbversion");l(this,"dbPromise");l(this,"getTran",async(t,i)=>(await this.dbPromise).transaction(t,i));l(this,"reset",async()=>(await indexedDB.databases().then(t=>{console.log(t)}),await new Promise((t,i)=>{const a=indexedDB.deleteDatabase(this._dbname);a.onsuccess=()=>{console.log("onsuccess"),t()},a.onerror=n=>{console.log("onerror"),i(n)}})));l(this,"getAll",async t=>{const i=await this.dbPromise;return new Promise((a,n)=>{const o=i.transaction([t],"readonly").objectStore(t).getAll();o.onsuccess=()=>{a(o.result)},o.onerror=c=>{n(c)}})});l(this,"get",async(t,i)=>{const a=await this.dbPromise;return new Promise((n,r)=>{const c=a.transaction([t],"readonly").objectStore(t).get(i);c.onsuccess=()=>{n(c.result)},c.onerror=u=>{r(u)}})});l(this,"getMany",async(t,i)=>{const r=(await this.dbPromise).transaction([t],"readonly").objectStore(t),s=i.map(o=>new Promise((c,u)=>{const d=r.get(o);d.onsuccess=()=>{c(d.result)},d.onerror=p=>{u(p)}}));return await Promise.all(s)});l(this,"putRecords",async(t,i)=>{const n=(await this.dbPromise).transaction([t],"readwrite"),r=n.objectStore(t),s=i.map(o=>({record:o,request:r.put(o)}));return new Promise((o,c)=>{n.oncomplete=()=>o(s.map(u=>Object.assign({id:u.request.result},u.record))),n.onerror=u=>c(u)})});l(this,"deleteRecords",async(t,i)=>{const n=(await this.dbPromise).transaction([t],"readwrite"),r=n.objectStore(t),s=i.map(o=>({key:o,request:r.delete(o)}));return new Promise((o,c)=>{n.oncomplete=()=>{console.log(s.map(u=>u.request.result)),o()},n.onerror=u=>c(u)})});this._dbname=t,this._dbversion=i,this.dbPromise=new Promise((n,r)=>{const s=indexedDB.open(t,i);s.onsuccess=o=>{if(console.log(o),!o.target){console.log("event.target is undefined"),r("event.target is undefined");return}const c=o.target.result;if(!c){console.log("event.target.result is undefined"),r("event.target.result is undefined");return}c.onversionchange=u=>{console.log(u),c.close()},n(c)},s.onupgradeneeded=o=>{console.log("onupgradeneeded");const c=o.target.result;a.filter(u=>!c.objectStoreNames.contains(u)).map(u=>c.createObjectStore(u,{keyPath:"id",autoIncrement:!0}))},s.onerror=o=>{console.log(o),r(o)},s.onblocked=o=>{console.log(o),r(o)}}),console.log(this.dbPromise)}get dbversion(){return this._dbversion}}class F{constructor(){l(this,"handlers",[])}get length(){return this.handlers.length}append(t){this.handlers.push(t)}remove(t){this.handlers=this.handlers.filter(i=>i!==t)}trigger(t){this.handlers.slice(0).filter(i=>i(t)==="RemoveMe").forEach(i=>this.remove(i))}clear(){this.handlers.splice(0)}expose(){return this}}class ft{constructor(){l(this,"handler")}set(t){this.handler=t}async call(t){if(!this.handler)throw Error("illegal state error");return await this.handler(t)}expose(){return this}}class nt{constructor(t,i,a,n){l(this,"_name");l(this,"_createVersion");l(this,"mountResolver",()=>{});l(this,"_indexedDb");l(this,"onInsertEvent",new F);l(this,"onBeforeInsertEvent",new ft);l(this,"onUpdateEvent",new F);l(this,"onBeforeUpdateEvent",new ft);l(this,"onDeleteEvent",new F);l(this,"prepareInitialRecords",()=>{const t=new Date;return this._prepareInitialRecords().map(i=>Object.assign(i,{createdAt:t,updatedAt:t,dbVersion:this._createVersion}))});l(this,"resolveMount",()=>this.mountResolver());l(this,"patchForInsert",(t,i)=>{t.newRecords.forEach(a=>{i[a.id]=a})});l(this,"patchForUpdate",(t,i)=>{t.recordPairs.forEach(a=>{i[a.newRecord.id]={...a.newRecord}})});l(this,"patchForDelete",(t,i)=>{t.oldRecords.forEach(a=>{delete i[a.id]})});this._indexedDb=t,this._name=i,this._createVersion=t.dbversion,this.getAll().then(r=>r.reduce((s,o)=>(s[o.id]=o,s),{})).then(r=>{console.log(this.name,r),this.onBeforeInsertEvent.set(a??(()=>Promise.resolve())),this.onBeforeUpdateEvent.set(n??(()=>Promise.resolve()))})}get name(){return this._name}get createVersion(){return this._createVersion}get oninsert(){return this.onInsertEvent.expose()}get onbeforeinsert(){return this.onBeforeInsertEvent.expose()}get onupdate(){return this.onUpdateEvent.expose()}get onbeforeupdate(){return this.onBeforeUpdateEvent.expose()}get ondelete(){return this.onDeleteEvent.expose()}getAll(){return this._indexedDb.getAll(this.name)}get(t){return this._indexedDb.get(this.name,t)}async insertMany(t){const i=new Date,a=t.map(r=>{const s={createdAt:i,updatedAt:i,dbVersion:this._createVersion};return Object.assign(r,s)});await this.onBeforeInsertEvent.call({sender:this,newRecords:a,timestamp:i});const n=await this._indexedDb.putRecords(this.name,a);return this.onInsertEvent.trigger({sender:this,newRecords:n,timestamp:i}),n}async insert(t){return(await this.insertMany([t]))[0]}async updateMany(t,i){const a=new Date,n=[];return(await this._indexedDb.getMany(this.name,t)).forEach(s=>{const o={...s},c={...o};n.push({newRecord:Object.assign(i(c),{updatedAt:a,dbVersion:this._createVersion}),oldRecord:o})}),await this.onBeforeUpdateEvent.call({sender:this,recordPairs:n,timestamp:a}),await this._indexedDb.putRecords(this.name,n.map(s=>s.newRecord)),this.onUpdateEvent.trigger({sender:this,recordPairs:n,timestamp:a}),n.map(s=>s.newRecord)}async update(t,i){return(await this.updateMany([t],i))[0]}async delete(t){const i=new Date,a=await this._indexedDb.getMany(this.name,t);await this._indexedDb.deleteRecords(this.name,t),this.onDeleteEvent.trigger({sender:this,oldRecords:a,timestamp:i})}}const ds=["Deck","ExtraDeck"],ps={Deck:"メインデッキ",ExtraDeck:"エクストラデッキ"},na=["Monster","Spell","Trap","XyzMaterial"],fs={Monster:"モンスター",Spell:"魔法",Trap:"罠",XyzMaterial:"XYZ素材"},ke=["Fusion","Synchro","Xyz","Link"],Pt=[...ke,"SpecialSummon","Ritual"],xt=[...Pt,"NormalSummonOnly","RegularSpecialSummonOnly","FreeReborn"],ra=["Toon","Spirit","Union","Gemini","FlipEffect"],sa=["Tuner","Effect","Normal","Pendulum","Token"],gs=[...ra,...sa,...xt],hs={Synchro:"シンクロ",Fusion:"融合",Xyz:"エクシーズ",Link:"リンク",Ritual:"儀式",SpecialSummon:"特殊召喚",Toon:"トゥーン",Spirit:"スピリット",Union:"ユニオン",Gemini:"デュアル",FlipEffect:"リバース",Tuner:"チューナー",Effect:"効果",Normal:"通常",Pendulum:"ペンデュラム",Token:"トークン",FreeReborn:"特殊召喚モンスター（蘇生制限なし）",NormalSummonOnly:"特殊召喚不可",RegularSpecialSummonOnly:"正規の方法以外での特殊召喚不可"},ys={Synchro:"🎵",Fusion:"🌀",Xyz:"📰",Link:"⛓️",Ritual:"📜",SpecialSummon:"🔯",Toon:"📖",Spirit:"👻",Union:"🚗",Gemini:"👫",FlipEffect:"🔄",Tuner:"🎶",Effect:"✨",Normal:"🔘",Pendulum:"💠",Token:"🐏",FreeReborn:"🆓",NormalSummonOnly:"🔲",RegularSpecialSummonOnly:"❗"},ms=["Light","Dark","Earth","Water","Fire","Wind","Divine"],Ss={Light:"光",Dark:"闇",Earth:"地",Water:"水",Fire:"炎",Wind:"風",Divine:"神"},vs=["Aqua","Beast","BeastWarrior","CreatorGod","Cyberse","Dinosaur","DivineBeast","Dragon","Fairy","Fiend","Fish","Insect","Illusion","Machine","Plant","Psychic","Pyro","Reptile","Rock","SeaSerpent","Spellcaster","Thunder","Warrior","WingedBeast","Wyrm","Zombie"],Cs=["Normal","Continuous","Field","QuickPlay","Equip","Ritual","PendulumScale"],Ts={Normal:"通常",Continuous:"永続",Field:"フィールド",QuickPlay:"速攻",Equip:"装備",Ritual:"儀式",PendulumScale:"ペンデュラム"},Es=["Normal","Continuous","Counter"],ws={Normal:"通常",Continuous:"永続",Counter:"カウンター"},T=["Attack","Defense"],be={Attack:"攻撃表示",Defense:"守備表示",Set:"裏側守備表示"},Mt=["level","rank","attack","defense","pendulumScaleR","pendulumScaleL"],_s={Aqua:"水",Beast:"獣",BeastWarrior:"獣戦士",CreatorGod:"創造神",Cyberse:"サイバース",Dinosaur:"恐竜",DivineBeast:"幻獣神",Dragon:"ドラゴン",Fairy:"天使",Fiend:"悪魔",Fish:"魚",Insect:"昆虫",Illusion:"幻想魔",Machine:"機械",Plant:"植物",Psychic:"サイキック",Pyro:"炎",Reptile:"爬虫類",Rock:"岩石",SeaSerpent:"海竜",Spellcaster:"魔法使い",Thunder:"雷",Warrior:"戦士",WingedBeast:"鳥獣",Wyrm:"幻竜",Zombie:"アンデット"},bs={Aqua:"🚰",Beast:"🐅",BeastWarrior:"🦁",CreatorGod:"🔆",Cyberse:"💻️",Dinosaur:"🦖",DivineBeast:"💫",Dragon:"🐲",Fairy:"👼",Fiend:"👿",Fish:"🐟️",Insect:"🦋",Illusion:"🤡",Machine:"🤖",Plant:"🌱",Psychic:"👁️",Pyro:"🔥",Reptile:"🦎",Rock:"⛰",SeaSerpent:"🐍",Spellcaster:"🧙",Thunder:"⚡️",Warrior:"⚔️",WingedBeast:"🦅",Wyrm:"🐉",Zombie:"🦴"},la=["TopLeft","TopCenter","TopRight","MiddleLeft","MiddleRight","BottomLeft","BottomCenter","BottomRight"],Ft={TopLeft:{name:"左上",linkArrow:{offsetRow:-1,offsetColumn:-1}},TopCenter:{name:"上",linkArrow:{offsetRow:-1,offsetColumn:0}},TopRight:{name:"右上",linkArrow:{offsetRow:-1,offsetColumn:1}},MiddleLeft:{name:"左",linkArrow:{offsetRow:0,offsetColumn:-1}},MiddleRight:{name:"右",linkArrow:{offsetRow:0,offsetColumn:1}},BottomLeft:{name:"左下",linkArrow:{offsetRow:1,offsetColumn:-1}},BottomCenter:{name:"下",linkArrow:{offsetRow:1,offsetColumn:0}},BottomRight:{name:"右下",linkArrow:{offsetRow:1,offsetColumn:1}}};la.reduce((e,t)=>(e[Ft[t].name]=t,e),{});const ks=e=>e.cardId??!1?`https://www.db.yugioh-card.com/yugiohdb/card_search.action?ope=2&cid=${e.cardId}`:`https://www.db.yugioh-card.com/yugiohdb/card_search.action?ope=1&sess=1&rp=10&mode=&sort=1&keyword=${e.name}&stype=1&ctype=&othercon=2&starfr=&starto=&pscalefr=&pscaleto=&linkmarkerfr=&linkmarkerto=&link_m=2&atkfr=&atkto=&deffr=&defto=&releaseDStart=1&releaseMStart=1&releaseYStart=1999&releaseDEnd=&releaseMEnd=&releaseYEnd=`,Nt=(e,t)=>{const i=e.monsterCategories??[],a=t.monsterCategories??[];for(const n of ke.toReversed()){if(i.includes(n)&&!a.includes(n))return 1;if(!i.includes(n)&&a.includes(n))return-1}if(e.kind===t.kind){if(e.kind==="Monster"){if((e.link??0)!==(t.link??0))return(e.link??0)-(t.link??0);if((e.rank??0)!==(t.rank??0))return(e.rank??0)-(t.rank??0);if((e.level??0)!==(t.level??0))return(e.level??0)-(t.level??0);if((e.attack??0)!==(t.attack??0))return(e.attack??0)-(t.attack??0);if((e.defense??0)!==(t.defense??0))return(e.defense??0)-(t.defense??0)}return e.name.localeCompare(t.name,"Ja")}for(const n of na){if(e.kind===n)return-1;if(t.kind===n)return 1}return e.name.localeCompare(t.name,"Ja")},Ot=["Deck","ExtraDeck"],Bt=["Graveyard","Banished"],Lt=[...Ot,...Bt],oa=[...Lt,"Hand"],L=["MonsterZone","ExtraMonsterZone"],De=["SpellAndTrapZone","FieldSpellZone"],W=[...L,...De],qt=["XyzMaterialZone","WaitingRoom"],Q=[...oa,...W,...qt],Qe={0:{0:"Hand"},1:{0:"Deck",1:"SpellAndTrapZone",2:"SpellAndTrapZone",3:"SpellAndTrapZone",4:"SpellAndTrapZone",5:"SpellAndTrapZone",6:"ExtraDeck"},2:{0:"Graveyard",1:"MonsterZone",2:"MonsterZone",3:"MonsterZone",4:"MonsterZone",5:"MonsterZone",6:"FieldSpellZone"},3:{0:"Banished",1:"XyzMaterialZone",2:"ExtraMonsterZone",3:"WaitingRoom",4:"ExtraMonsterZone",5:"XyzMaterialZone",6:"Banished"},4:{0:"FieldSpellZone",1:"MonsterZone",2:"MonsterZone",3:"MonsterZone",4:"MonsterZone",5:"MonsterZone",6:"Graveyard"},5:{0:"ExtraDeck",1:"SpellAndTrapZone",2:"SpellAndTrapZone",3:"SpellAndTrapZone",4:"SpellAndTrapZone",5:"SpellAndTrapZone",6:"Deck"},6:{0:"Hand"}};class ca{constructor(t,i,a,n){l(this,"onUpdateEvent",new F);l(this,"field");l(this,"row");l(this,"column");l(this,"cellType");l(this,"_owner");l(this,"_requiresRecalcLinkArrows");l(this,"_linkArrowSources");l(this,"_needsShuffle",!1);l(this,"recalcLinkArrows",()=>{this.isMonsterZoneLikeCell&&(this._requiresRecalcLinkArrows=!1,this._linkArrowSources=this.neighbors.filter(t=>t.isMonsterZoneLikeCell).filter(t=>t.cardEntities.length).filter(t=>t.cardEntities[0].linkArrows.some(i=>this.row===t.row+i.offsetRow&&this.column===t.column+i.offsetColumn)).map(t=>t.cardEntities[0]))});l(this,"_entities");l(this,"releaseEntities",t=>{var i;return this._entities=this._entities.filter(a=>a!==t),this.isMonsterZoneLikeCell&&((i=t.origin.monsterCategories)!=null&&i.includes("Link"))&&(this._requiresRecalcLinkArrows=!0),this.onUpdateEvent.trigger(),t});l(this,"acceptEntities",(t,i)=>{var a;if(i==="Fix"){if(!this._entities.includes(t))throw new S("引数とセルの状態が矛盾している。",this,t,i)}else i==="Top"?this._entities.unshift(t):this._entities.push(t),i==="Random"&&(console.log(this._needsShuffle,i),this._needsShuffle=!0),this._entities.forEach(n=>{n.fieldCell=this}),this.isMonsterZoneLikeCell&&((a=t.origin.monsterCategories)!=null&&a.includes("Link"))&&(this._requiresRecalcLinkArrows=!0);this.onUpdateEvent.trigger()});l(this,"shuffle",()=>{this._entities=this.entities.shuffle(),this._needsShuffle=!1,this.field.duel.log.info("デッキをシャッフル。",this.owner)});l(this,"toString",()=>this.isMonsterZoneLikeCell||this.cellType==="SpellAndTrapZone"?`${this.cellType}(${this.row},${this.column})`:this.cellType);this.field=t,this.row=i,this.column=a,this.cellType=Qe[i][a],this._owner=n,this._entities=[],this._linkArrowSources=[],this._requiresRecalcLinkArrows=!1}get onUpdate(){return this.onUpdateEvent.expose()}get owner(){var t;return this._owner||((t=this.cardEntities[0])==null?void 0:t.owner)}get requiresRecalcLinkArrows(){return this._requiresRecalcLinkArrows}get linkArrowSources(){return this._linkArrowSources}get needsShuffle(){return this._needsShuffle}get entities(){return this._entities}get visibleEntities(){return this._entities.filter(t=>mt.find(i=>i===t.entityType))}get cardEntities(){return this._entities.filter(t=>mt.find(i=>i===t.entityType)).filter(t=>t.kind!=="XyzMaterial")}get xyzMaterials(){return this._entities.filter(t=>t.kind==="XyzMaterial")}get targetForAttack(){return this.cellType==="Hand"?this._entities.find(t=>t.entityType==="Duelist"):this.cardEntities[0]}get isAvailable(){return this.cardEntities.length===0&&this._entities.filter(t=>Ia.find(i=>i===t.entityType)).length===0}get isAvailableForPendulum(){return this.isAvailable&&this.isSpellTrapZoneLikeCell&&(this.column===1||this.column===5)}get isStackCell(){return Lt.some(t=>t===this.cellType)}get isPlayFieldCell(){return W.some(t=>t===this.cellType)}get isMonsterZoneLikeCell(){return L.some(t=>t===this.cellType)}get isSpellTrapZoneLikeCell(){return De.some(t=>t===this.cellType)}get isDisabledCell(){return qt.some(t=>t===this.cellType)}get isTrashCell(){return Bt.some(t=>t===this.cellType)}get neighbors(){const t=[this.row-1,this.row,this.row+1].filter(a=>a>=0&&a<=6),i=[this.column-1,this.column,this.column+1].filter(a=>a>=0&&a<=6);return t.flatMap(a=>i.map(n=>this.field.cells[a][n])).filter(a=>a.isMonsterZoneLikeCell).filter(a=>a!==this)}}Array.prototype.shuffle=function(){return this.map(t=>({item:t,seq:Math.random()})).toSorted((t,i)=>t.seq-i.seq).map(t=>t.item)};Array.prototype.randomPickMany=function(e){return this.shuffle().slice(0,e)};Array.prototype.randomPick=function(){return this.shuffle().slice(0,1)[0]};Array.prototype.reset=function(...e){this.splice(0),this.push(...e)};Array.prototype.union=function(e){return this.filter(t=>e.find(i=>t===i))};Array.prototype.getAllOnOffPattern=function*(){const e=[[]];yield[];for(const t of this){const i=e.map(a=>[...a,t]);yield*i,e.push(...i)}};Array.prototype.getDistinct=function(){return Array.from(new Set(this))};Array.prototype.distinct=function(){this.reset(...this.getDistinct())};const Rt=["NormalSummon","SpecialSummon","FlipSummon"],rt=["IgnitionEffect","TriggerEffect","QuickEffect","CardActivation"],ua=[...Rt,...rt,"DeclareAttack"],da=e=>e==="CardActivation"?"CardActivation":rt.some(t=>t===e)?"EffectActivation":"NonActivate",Oe=class Oe{constructor(t,i,a){l(this,"seq");l(this,"entity");l(this,"_definition");l(this,"validateDuelist",t=>this.entity.controller===t?this.executableDuelistTypes.includes("Controller"):this.executableDuelistTypes.includes("Opponent"));l(this,"canExecute",t=>this.executableCells.includes(this.entity.fieldCell.cellType)&&this.executableFaces.includes(this.entity.face)&&this.executablePeriods.includes(this.entity.duel.clock.period.key)&&this.validateDuelist(t??this.entity.controller));this.seq=t==="AutoSeq"?Oe.nextSeq++:t,this.entity=i,this._definition=a}get definition(){return this._definition}get title(){return this.definition.title}get playType(){return this.definition.playType}get isMandatory(){return this.definition.isMandatory}get executableCells(){return this.definition.executableCells}get executablePeriods(){return this.definition.executablePeriods}get executableFaces(){return this.definition.executableFaces??Xa}get executableDuelistTypes(){return this.definition.executableDuelistTypes??["Controller"]}get isOnlyNTimesPerDuel(){return this.definition.isOnlyNTimesPerDuel??0}get isOnlyNTimesPerTurn(){return this.definition.isOnlyNTimesPerTurn??0}get isOnlyNTimesPerTurnIfFaceup(){return this.definition.isOnlyNTimesPerTurnIfFaceup??0}get isOnlyNTimesIfFaceup(){return this.definition.isOnlyNTimesIfFaceup??0}get isOnlyNTimesPerChain(){return this.definition.isOnlyNTimesPerChain??0}get actionGroupName(){return this.definition.actionGroupName}get duel(){return this.entity.duel}};l(Oe,"nextSeq",0);let Se=Oe;class Te{constructor(){l(this,"pooledOperators",[]);l(this,"bundles",[]);l(this,"excludesExpired",()=>{this.bundles.forEach(t=>t.excludesExpired()),this.pooledOperators=this.pooledOperators.filter(t=>t.validateAlive())});l(this,"append",t=>{this.bundles.push(t)});l(this,"push",t=>{if(!t.isContinuous)throw new S("staticへの追加は永続以外不可",t);this.excludesExpired(),this.distribute(t),this.pooledOperators.push(t)});l(this,"distributeAll",t=>(this.excludesExpired(),this.pooledOperators.flatMap(this.distribute).getDistinct().forEach(i=>i.operators.sort((a,n)=>a.seq-n.seq)),this.afterDistributeAll(t)));l(this,"distribute",t=>this.bundles.filter(i=>i.entity.exist).filter(i=>i.operators.every(a=>a.seq!==t.seq)).filter(i=>t.isApplicableTo(i.entity)).filter(i=>i.entity.canBeEffected(t.effectOwner,t.isSpawnedBy,t.actionAttr)).map(i=>(i.push(t),i)));l(this,"removeItem",t=>{this.pooledOperators=this.pooledOperators.filter(i=>i.seq!==t)})}}class Ee{constructor(t,i){l(this,"pool");l(this,"entity");l(this,"_operators");l(this,"excludesExpired",()=>{this._operators=this._operators.filter(t=>{const i=t.validateAlive()&&t.isApplicableTo(this.entity);return i||(console.info(`before remove ${this.entity.toString} ${t.title}`),t.beforeRemove(this)),i})});l(this,"push",t=>this.entity.procFilterBundle.filter(["Effect"],t.effectOwner,t.isSpawnedBy,t.actionAttr,[])?(this.beforePush(t),this._operators.push(t),!0):!1);l(this,"removeItem",t=>{this._operators=this._operators.filter(i=>i.seq!==t?!0:(i.beforeRemove(this),!1))});this.pool=t,this.entity=i,this._operators=[],this.pool.append(this)}get operators(){return this._operators}get effectiveOperators(){return this.operators.filter(t=>t.isSpawnedBy.isEffective||!t.isContinuous)}}const Be=class Be{constructor(t){l(this,"seq");l(this,"title");l(this,"validateAlive");l(this,"isContinuous");l(this,"isSpawnedBy");l(this,"isSpawnedAt");l(this,"activateType");l(this,"actionAttr");l(this,"isApplicableTo");l(this,"effectOwner");this.seq=Be.nextSeq++,this.title=t.title,this.validateAlive=()=>t.validateAlive(this),this.isContinuous=t.isContinuous,this.isSpawnedBy=t.isSpawnedBy,this.isSpawnedAt=t.isSpawnedBy.duel.clock.getClone(),this.isApplicableTo=i=>t.isApplicableTo(this,i),this.actionAttr=t.actionAttr,this.activateType=this.actionAttr.playType?da(this.actionAttr.playType):"NonActivate",this.effectOwner=this.isSpawnedBy.controller}get isEffective(){return!this.isContinuous||this.activateType==="NonActivate"?!0:this.isSpawnedBy.isEffective}};l(Be,"nextSeq",0);let re=Be;class pa extends Te{constructor(){super(...arguments);l(this,"afterDistributeAll",()=>this.bundles.every(i=>i.applyEffectFilter()))}}class fa extends Ee{constructor(){super(...arguments);l(this,"applyEffectFilter",()=>{const i=this.entity.allStickyEffectOperators.length,a=[];for(;;){const n=this.effectiveOperators.filter(r=>r.procTypes.includes("Effect")).filter(r=>r.isContinuous).find(r=>!a.includes(r.seq));if(!n)break;a.push(n.seq),n.eraseOperators(this.entity)}return this.entity.allStickyEffectOperators.length===i});l(this,"filter",(i,a,n,r,s)=>this.effectiveOperators.filter(o=>o.procTypes.union(i).length).every(o=>o.filter(this.entity,a,n,r,s)));l(this,"beforePush",i=>i.eraseOperators(this.entity))}}const de=class de extends re{constructor(i){super(i);l(this,"beforeRemove",()=>{});l(this,"procTypes");l(this,"filter");l(this,"eraseOperators",i=>{if(!this.procTypes.includes("Effect"))return 0;const a=i.allStickyEffectOperators.filter(n=>n.isContinuous).filter(n=>!this.filter(i,n.effectOwner,n.isSpawnedBy,n.actionAttr,[])).map(n=>n.seq);return a.forEach(i.procFilterBundle.removeItem),a.forEach(i.statusOperatorBundle.removeItem),a.forEach(i.numericOprsBundle.removeItem),a.length});this.procTypes=i.procTypes,this.filter=i.filter}};l(de,"createContinuous",(i,a,n,r,s,o)=>new de({title:i,validateAlive:a,isContinuous:!0,isSpawnedBy:n,actionAttr:{},isApplicableTo:r,procTypes:s,filter:o})),l(de,"createLingering",(i,a,n,r,s,o,c)=>new de({title:i,validateAlive:a,isContinuous:!1,isSpawnedBy:n,actionAttr:r,isApplicableTo:s,procTypes:o,filter:c}));let ge=de;const gt={level:1,rank:1,attack:0,defense:0,pendulumScaleR:0,pendulumScaleL:0};class ga extends Te{constructor(){super(...arguments);l(this,"afterDistributeAll",i=>{if(this.bundles.forEach(n=>n.calcStateAll()),i.field.getMonstersOnFieldStrictly().flatMap(n=>n.numericOprsBundle).flatMap(n=>n.effectiveOperators).some(n=>n.targetStateGen==="calculated")){const r=i.field.getMonstersOnFieldStrictly().filter(s=>(s.atk??0)>=0).map(s=>s.atk??0).reduce((s,o)=>s>o?s:o,0);i.field.getMonstersOnFieldStrictly().forEach(s=>{s.numericOprsBundle.effectiveOperators.filter(o=>o.targetStateGen==="calculated").forEach(o=>{var c;if(!((c=s.status.monsterCategories)!=null&&c.includes("Link")&&o.targetState==="defense")){if(o.stateOperationType==="THE_DEVILS_AVATAR"){s.numericStatus.calculated[o.targetState]=r+100;return}s.numericStatus.calculated[o.targetState]=o.calcValue(s,s.numericStatus.calculated[o.targetState]??0)}})})}return!0})}}class ha extends Ee{constructor(){super(...arguments);l(this,"beforePush",i=>{const a=this.effectiveOperators.filter(r=>r.targetState===i.targetState).filter(r=>r.isEffective);if(i.kind==="O-L-F"||i.kind==="O-C-F"?(a.filter(r=>r.kind==="O-L-F").forEach(r=>r.negate()),a.filter(r=>r.kind==="L-F").forEach(r=>r.negate())):i.kind==="L-F"||i.kind==="C-F"?a.filter(r=>r.kind==="L-F"||r.kind==="L-A").forEach(r=>r.negate()):i.kind==="X-C-X"&&a.filter(r=>!r.isContinuous).forEach(r=>r.negate()),a.filter(r=>r.isEffective).some(r=>r.kind==="X-C-X")&&!i.isContinuous)return;if(i.stateOperationType!=="Addition"&&i.targetStateGen==="wip"&&a.filter(r=>!r.isContinuous).forEach(r=>r.negate()),i.stateOperationType==="THE_DEVILS_AVATAR"||i.stateOperationType==="Gradius'_Option"){this.entity.numericStatus.calculated[i.targetState]=-Number.MAX_VALUE;return}const n=this.entity.numericStatus.calculated[i.targetState]??0;if(i.stateOperationType==="THE_DEVILS_DREAD-ROOT"){this.entity.numericStatus.calculated[i.targetState]=i.calcValue(this.entity,n);return}if(i.kind==="L-F"){this.entity.numericStatus.wip[i.targetState]=i.calcValue(this.entity,n);return}});l(this,"calcStateAll",()=>Mt.forEach(this.calcState));l(this,"calcState",i=>{if(!this.entity.isPendulumScale&&!this.entity.isMonster){this.entity.numericStatus.calculated[i]=void 0;return}if(!this.entity.status.monsterCategories){this.entity.numericStatus.calculated[i]=void 0;return}if(this.entity.status.monsterCategories.includes("Link")&&i!=="attack"){this.entity.numericStatus.calculated[i]=void 0;return}if(this.entity.status.monsterCategories.includes("Xyz")&&i==="level"){this.entity.numericStatus.calculated[i]=void 0;return}if(!this.entity.status.monsterCategories.includes("Xyz")&&i==="rank"){this.entity.numericStatus.calculated[i]=void 0;return}if(!this.entity.status.monsterCategories.includes("Pendulum")&&(i==="pendulumScaleL"||i==="pendulumScaleR")){this.entity.numericStatus.calculated[i]=void 0;return}if(i!=="level"&&!this.entity.isOnFieldStrictly){this.entity.numericStatus.origin[i]=this.entity.origin[i],this.entity.numericStatus.wip[i]=this.entity.origin[i],this.entity.numericStatus.calculated[i]=this.entity.origin[i];return}const a=this.entity.origin[i]??0,n=this.entity.numericStatus.wip[i]??0,r=this._operators.filter(d=>d.targetState===i).filter(d=>d.isEffective);if(r.some(d=>d.stateOperationType==="THE_DEVILS_AVATAR"||d.stateOperationType==="Gradius'_Option")&&this.entity.isEffective){this.entity.numericStatus.calculated[i]=-Number.MAX_VALUE;return}const s=r.filter(d=>d.targetState===i).findLast(d=>d.targetStateGen==="origin"),o=s?s.calcValue(this.entity,a??0):a;this.entity.numericStatus.origin[i]=o;let c=o;const u=r.filter(d=>d.targetState===i).filter(d=>d.targetStateGen==="wip").findLast(d=>d.stateOperationType==="Fixation");if(!u)c=r.filter(d=>d.stateOperationType==="Addition").reduce((d,p)=>p.calcValue(this.entity,d),c),this.entity.numericStatus.wip[i]=c;else if(u.isContinuous)c=u.calcValue(this.entity,c),c=r.filter(d=>d.stateOperationType==="Addition").reduce((d,p)=>p.calcValue(this.entity,d),c),this.entity.numericStatus.wip[i]=c;else{let d=!1;c=r.filter(p=>(d=d||p===u,d&&p!==u)).filter(p=>p.stateOperationType==="Addition").reduce((p,f)=>f.calcValue(this.entity,p),n)}c<gt[i]&&(c=gt[i]),this.entity.numericStatus.calculated[i]=c})}}const z=class z extends re{constructor(i){super(i);l(this,"beforeRemove",()=>{});l(this,"targetState");l(this,"targetStateGen");l(this,"stateOperationType");l(this,"calcValue");l(this,"_isEffective");l(this,"negate",()=>{this._isEffective=!1});this._isEffective=!0,this.targetState=i.targetState,this.targetStateGen=i.targetStateGen,this.stateOperationType=i.stateOperationType,this.calcValue=(a,n)=>i.calcValue(this.isSpawnedBy,a,n)}get isEffective(){return this._isEffective&&super.isEffective}get kind(){if(this.targetStateGen==="origin"){if(this.stateOperationType==="Fixation")return this.isContinuous?"O-C-F":"O-L-F";throw new S("矛盾したプロパティ",this)}if(this.targetStateGen==="wip"){if(this.stateOperationType==="Addition")return this.isContinuous?"C-A":"L-A";if(this.stateOperationType==="Fixation")return this.isContinuous?"C-F":"L-F";throw new S("矛盾したプロパティ",this)}if(this.stateOperationType==="THE_DEVILS_DREAD-ROOT")return"X-C-F";if(this.stateOperationType==="THE_DEVILS_AVATAR"||this.stateOperationType==="Gradius'_Option")return"X-C-X";throw new S("矛盾したプロパティ",this)}};l(z,"createContinuous",(i,a,n,r,s,o,c,u)=>new z({title:i,validateAlive:a,isContinuous:!0,isSpawnedBy:n,actionAttr:{},isApplicableTo:r,targetState:s,targetStateGen:o,stateOperationType:c,calcValue:u})),l(z,"createLingering",(i,a,n,r,s,o,c)=>new z({title:i,validateAlive:a,isContinuous:!1,isSpawnedBy:n,actionAttr:r,isApplicableTo:(u,d)=>d.isOnFieldAsMonsterStrictly,targetState:s,targetStateGen:"wip",stateOperationType:o,calcValue:c})),l(z,"createLingeringFixation",(i,a,n,r,s,o)=>z.createLingering(i,a,n,r,s,"Fixation",o)),l(z,"createLingeringAddition",(i,a,n,r,s,o)=>z.createLingering(i,a,n,r,s,"Addition",o));let q=z;const ya=e=>Object.keys(e),ma={draw:"ドローフェイズ",standby:"スタンバイフェイズ",main1:"メインフェイズ１",battle1:"バトルフェイズ",battle2:"バトルフェイズ（追加）",main2:"メインフェイズ２",end:"エンドフェイズ"},Sa={start:"スタートステップ",battle:"バトルステップ",damage:"ダメージステップ",end:"エンドステップ"},va={start:"ダメージステップ開始時",beforeDmgCalc:"ダメージ計算前",dmgCalc:"ダメージ計算時",afterDmgCalc:"ダメージ計算後",end:"ダメージステップ終了時"},w=["draw","stanby","main1","b1Start","b1Battle","b1End","b2Start","b2Battle","b2End","main2","end"],N=["b1DStart","b1DBeforeDmgCalc","b1DAfterDmgCalc","b1DEnd","b2DStart","b2DBeforeDmgCalc","b2DAfterDmgCalc","b2DEnd"],Ca=["b1DDmgCalc","b2DDmgCalc"],R=[...w,...N,...Ca],ht={draw:{phase:"draw",step:void 0,stage:void 0},stanby:{phase:"standby",step:void 0,stage:void 0},main1:{phase:"main1",step:void 0,stage:void 0},b1Start:{phase:"battle1",step:"start",stage:void 0},b1Battle:{phase:"battle1",step:"battle",stage:void 0},b1DStart:{phase:"battle1",step:"battle",stage:"start"},b1DBeforeDmgCalc:{phase:"battle1",step:"battle",stage:"beforeDmgCalc"},b1DDmgCalc:{phase:"battle1",step:"battle",stage:"dmgCalc"},b1DAfterDmgCalc:{phase:"battle1",step:"battle",stage:"afterDmgCalc"},b1DEnd:{phase:"battle1",step:"battle",stage:"end"},b1End:{phase:"battle1",step:"end",stage:void 0},b2Start:{phase:"battle2",step:"start",stage:void 0},b2Battle:{phase:"battle2",step:"battle",stage:void 0},b2DStart:{phase:"battle2",step:"battle",stage:"start"},b2DBeforeDmgCalc:{phase:"battle2",step:"battle",stage:"beforeDmgCalc"},b2DDmgCalc:{phase:"battle2",step:"battle",stage:"dmgCalc"},b2DAfterDmgCalc:{phase:"battle2",step:"battle",stage:"afterDmgCalc"},b2DEnd:{phase:"battle2",step:"battle",stage:"end"},b2End:{phase:"battle2",step:"end",stage:void 0},main2:{phase:"main2",step:void 0,stage:void 0},end:{phase:"end",step:void 0,stage:void 0}},Ta=e=>e.stage?va[e.stage]:e.step?Sa[e.step]:ma[e.phase],ee=ya(ht).reduce((e,t)=>(e[t].key=t,e[t].name=Ta(e[t]),e),ht),Le=class Le{constructor(t,i){l(this,"entity");l(this,"isRegular");l(this,"_isStarted");l(this,"info");l(this,"continuousEffectBase");l(this,"updateState",async()=>{if(this.hasToStart!==this.isStarted){if(this.isStarted){if(!this.info)throw new S("illegal state");this._isStarted=!1,await this.continuousEffectBase.finish(this.entity,this.info),this.info=void 0;return}this.info=await this.continuousEffectBase.start(this.entity),this._isStarted=!0}});this._isStarted=!1,this.entity=t,this.continuousEffectBase=i,this.isRegular=this.appliableCellTypes.every(a=>W.find(n=>n===a))&&this.faceList.length===1&&this.faceList[0]==="FaceUp"}get isStarted(){return this._isStarted}get appliableCellTypes(){return this.continuousEffectBase.appliableCellTypes}get appliableDuelPeriodKeys(){return this.continuousEffectBase.appliableDuelPeriodKeys}get faceList(){return this.continuousEffectBase.faceList}get hasToStart(){return!this.appliableCellTypes.includes(this.entity.fieldCell.cellType)||!this.appliableDuelPeriodKeys.includes(this.entity.duel.clock.period.key)||!this.faceList.includes(this.entity.face)?!1:this.continuousEffectBase.canStart(this.entity)}};l(Le,"createNew",(t,i)=>new Le(t,i));let Xe=Le;const Ea=(e,t,i,a)=>({title:e,appliableCellTypes:t==="Monster"?["MonsterZone","ExtraMonsterZone"]:["FieldSpellZone","SpellAndTrapZone"],appliableDuelPeriodKeys:R,faceList:["FaceUp"],canStart:n=>!n.info.isPending&&!n.info.isDying,start:async n=>{const r=i(n);return r.forEach(a(n).push),r.map(s=>s.seq)},finish:async(n,r)=>{r.forEach(s=>a(n).removeItem(s))}}),He=(e,t,i,a,n)=>({title:e,appliableCellTypes:t==="Monster"?["MonsterZone","ExtraMonsterZone"]:["FieldSpellZone","SpellAndTrapZone"],appliableDuelPeriodKeys:R,faceList:["FaceUp"],canStart:r=>!r.info.isPending&&!r.info.isDying,start:async r=>{const s=a(r),o=i(r);return console.info(`start : ${r.toString()} ⇒ ${o.map(c=>c.toString()).join(" ")} (${s.map(c=>c.title).join(" ")})`),o.map(n).forEach(c=>s.forEach(c.push)),{targets:o,seqList:s.map(c=>c.seq)}},finish:async(r,s)=>{s.targets.map(n).forEach(o=>s.seqList.forEach(c=>o.removeItem(c)))}}),Ht=(e,t,i,a)=>He(e,t,i,a,n=>n.procFilterBundle),Ae=(e,t,i)=>Ea(e,t,i,a=>a.field.numericStateOperatorPool),we=(e,t,i,a)=>He(e,t,i,a,n=>n.numericOprsBundle),ve=(e,t,i,a)=>He(e,t,i,a,n=>n.statusOperatorBundle),wa=(e,t,i,a)=>He(e,t,i,a,n=>n.damageFilterBundle),_a=e=>!isNaN(Number(e)),Pe=(...e)=>e.length?e.reduce((t,i)=>t>i?t:i):-Number.MAX_VALUE,xe=(...e)=>e.length?e.reduce((t,i)=>t<i?t:i):Number.MAX_VALUE,ce=(e,t)=>{if((e[0]??Number.MAX_VALUE)>t)return 0;if(e.slice(-1)[0]<t)return e.length;let i=0,a=e.length-1;for(;;){const n=Math.round((i+a)/2);if(n===a||n===i)return e[i]<t?a:i;if(e[n]<t){i=n;continue}a=n}},U=[3,5,5,6,6,6,7,8,9,10,11,11,11,12,12,13,13,14,15,15,15,15,15,15,16,16,16,17,18,18,18,21,21,21,22,23,25,25,26,28,28,28,30,30,31,32,32,33,33,34,35,35,36,36,36,37,37,38,38,38,39,41,42,42,43,45,45,45,45,48,48,48,50,51,52,54,54,54,54,56,57,58,59,59,59,59,60,61,63,65,65,65,65,66,67,67,67,69,69,71,71,72,73,73,73,73,73,74,75,75,76,76,77,78,79,80,80,80,80,84,84,84,84,84,84,85,85,85,87,90,91,94,96,96,97,98,101,101,101,101,101];U.forEach((e,t)=>{((U[ce(U,t)-1]||-Number.MAX_VALUE)>=t||(U[ce(U,t)]||Number.MAX_VALUE)<t)&&console.log(t,ce(U,t),(U[ce(U,t)-1]||-Number.MAX_VALUE)<t,(U[ce(U,t)]||Number.MAX_VALUE)>=t)});class ba{constructor(t){l(this,"_field");l(this,"_records",[]);l(this,"getIndexOfStartPoint",t=>ce(this._records.map(i=>i.movedAt.totalProcSeq),t));l(this,"push",t=>{this._records.push(t)});l(this,"getCurrentTurnLog",()=>this.getTermLog("Current","turn"));l(this,"getPriviousChainLog",()=>this.getTermLog("Previous","chainSeq"));this._field=t}*getTermLog(t,i){const a=t==="Current"?this._field.duel.clock.currentStartPoints[i]:this._field.duel.clock.previousStartPoints[i];for(let n=this.getIndexOfStartPoint(a);n<this._records.length;n++)yield this._records[n]}}class ka{constructor(t){l(this,"entity");l(this,"_records");l(this,"_push",t=>{this.entity.field.moveLog.push(t),this._records.push(t)});l(this,"pushForRuleAction",t=>{this._push({entity:this.entity,kind:this.entity.origin.kind,cell:this.entity.fieldCell,face:this.entity.face,orientation:this.entity.orientation,isPending:this.entity.info.isPending,movedAt:this.entity.duel.clock.getClone(),movedAs:[...t,"Rule"]})});l(this,"push",(t,i,a,n,r)=>{let s=this.entity.fieldCell;this.entity.kind==="XyzMaterial"&&(s=this.entity.controller.getXyzMaterialZone()),this._push({entity:this.entity,kind:t,cell:s,face:this.entity.face,orientation:this.entity.orientation,isPending:this.entity.info.isPending,movedAt:this.entity.duel.clock.getClone(),movedAs:i.getDistinct(),movedBy:a,actionOwner:n,chooser:r??n})});l(this,"finalize",()=>{if(!this.latestRecord.isPending)throw new S("想定されない状況");if(this.entity.info.isPending)throw new S("想定されない状況");this._push({...this.latestRecord,isPending:!1,movedAt:this.entity.duel.clock.getClone()})});l(this,"negateSummon",(t,i)=>{const a=this.records.slice(-1)[0];a.cell=this.entity.field.getWaitingRoomCell(),a.movedBy=t,a.movedAs=["SummonNegated"],a.actionOwner=i});this.entity=t,this._records=[]}get records(){return this._records}get latestRecord(){return this.records.slice(-1)[0]}get previousPlaceRecord(){return this.records.findLast(t=>t.cell.cellType!==this.entity.fieldCell.cellType)??this._records[0]}get currentProcRecords(){return this.records.filter(t=>t.movedAt.totalProcSeq===this.entity.duel.clock.totalProcSeq)}get latestArrivalRecord(){if(this.entity.isOnFieldAsMonsterStrictly)return this.records.findLast(t=>t.movedAs.union(["NormalSummon","SpecialSummon","FlipSummon","Flip","ComeBackAlive"]))}}const Da={name:"SpellCounter",type:"Actual",text:"魔力カウンター",emoji:"🔮",sticky:!1,temporary:!1,isOnlyOnField:!0},Aa={name:"KaijuCounter",type:"Actual",text:"壊獣カウンター",emoji:"☢",sticky:!1,temporary:!1,isOnlyOnField:!0},Pa={name:"NamelessCounter",type:"Actual",text:"カウンター",emoji:"💠",sticky:!1,temporary:!1,isOnlyOnField:!0},xa={name:"IceCounter",type:"Actual",text:"アイスカウンター",emoji:"❄",sticky:!1,temporary:!1,isOnlyOnField:!0},Ma={name:"Curfew",type:"System",text:"自発帰還",emoji:"",sticky:!1,temporary:!1,isOnlyOnField:!0},Fa={name:"SelfDestruction",type:"System",text:"自壊",emoji:"",sticky:!1,temporary:!1,isOnlyOnField:!0},Na={name:"CycleFlip",type:"System",text:"サイクルリバース",emoji:"",sticky:!0,temporary:!0,isOnlyOnField:!0},Oa={name:"SonicBarrier",type:"System",text:"波動音壁",emoji:"",sticky:!0,temporary:!0,isOnlyOnField:!0},Ba={name:"SonicVerse",type:"System",text:"波動聖句（適用済）",emoji:"",sticky:!0,temporary:!0,isOnlyOnField:!0},La={name:"IntoTheVoid",type:"System",text:"無の煉獄",emoji:"",sticky:!0,temporary:!0,isOnlyOnField:!1},qa={name:"GoldSarcophagus",type:"System",text:"封印の黄金櫃",emoji:"",sticky:!0,temporary:!1,isOnlyOnField:!1},Ra={SpellCounter:Da,KaijuCounter:Aa,NamelessCounter:Pa,IceCounter:xa,Curfew:Ma,SelfDestruction:Fa,CycleFlip:Na,SonicBarrier:Oa,SonicVerse:Ba,IntoTheVoid:La,GoldSarcophagus:qa},ue=Ra,yt=Object.values(ue).filter(e=>e.type==="Actual").filter(e=>e.sticky||e.temporary||!e.isOnlyOnField);if(yt.length)throw new Error(`カウンターの設定誤り。${yt.map(e=>e.name).join(", ")}`);const Ds=e=>ue[e].emoji;class Ha{constructor(t){l(this,"dic");l(this,"temporaryCounterNames");l(this,"entity");l(this,"add",(t,i=1,a)=>{this.dic[t]=[...this.dic[t]??[],...Array(i).fill(a)];const n=this.entity.status.maxCounterQty[t]??0;return n&&(this.dic[t]=this.dic[t].slice(0,n)),this.dic[t]});l(this,"setQty",(t,i=1,a)=>(this.dic[t]=[...Array(i).fill(a)],this.dic[t]));l(this,"remove",(t,i=1,a)=>{const n=this.dic[t].length;if(n===void 0)return[];if(i>=n)return delete this.dic[t],[];if(a){const r=this.dic[t].filter(o=>o===a),s=this.dic[t].filter(o=>o!==a);this.dic[t]=[...r.slice(i),...s]}else this.dic[t]=this.dic[t].slice(i);return this.dic[t]});l(this,"removeAll",(t,i)=>{if(i){const n=this.dic[t].filter(r=>r===i).length;return this.dic[t]=this.dic[t].filter(r=>r!==i),n}const a=this.dic[t];return delete this.dic[t],a});l(this,"getQty",(t,i)=>this.dic[t]?i?this.dic[t].filter(a=>a===i).length:this.dic[t].length??0:0);l(this,"setSelfDestructionFlg",t=>{this.add("SelfDestruction",1,t)});l(this,"getSelfDestructionFlg",t=>this.getQty("SelfDestruction",t)>0);l(this,"setCurfewFlg",t=>{this.add("Curfew",1,t)});l(this,"getCurfewFlg",t=>this.getQty("Curfew",t)>0);l(this,"incrementActionCountPerTurn",t=>{this.temporaryCounterNames.push(t.title),this.incrementActionCount(t)});l(this,"incrementActionCount",t=>{this.dic[t.title]=[t.entity,...this.dic[t.title]??[]]});l(this,"getActionCount",t=>this.dic[t.title]?this.dic[t.title].filter(i=>i===t.entity).length:0);l(this,"corpseDisposal",()=>{this.temporaryCounterNames.forEach(t=>delete this.dic[t]),this.temporaryCounterNames.reset(),Object.values(ue).filter(t=>t.temporary).forEach(t=>delete this.dic[t.name])});l(this,"removeAllActualCounters",()=>{Object.values(ue).filter(t=>t.type==="Actual").forEach(t=>delete this.dic[t.name])});l(this,"removeAllWhenfaceDown",()=>{this.temporaryCounterNames.forEach(t=>delete this.dic[t]),this.temporaryCounterNames.reset(),Object.values(ue).filter(t=>!t.sticky).forEach(t=>delete this.dic[t.name])});l(this,"clear",()=>{this.temporaryCounterNames.forEach(t=>delete this.dic[t]),this.temporaryCounterNames.reset(),Object.values(ue).filter(t=>t.isOnlyOnField).forEach(t=>delete this.dic[t.name])});this.dic={},this.temporaryCounterNames=[],this.entity=t}}class Za extends Te{constructor(){super(...arguments);l(this,"afterDistributeAll",i=>i.field.getAllEntities().map(a=>a.statusOperatorBundle).every(a=>a.calcStatus()))}}class Ga extends Ee{constructor(){super(...arguments);l(this,"calcStatus",()=>{const i=this.entity.isEffective;return this.entity.resetStatus(),this.entity.status=this._operators.filter(a=>a.isSpawnedBy.isEffective||!a.isContinuous).reduce((a,n)=>({...a,...n.statusCalculator(this.entity,n,a)}),this.entity.status),this.entity.isEffective===i});l(this,"beforePush",()=>{})}}class H extends re{constructor(i){super(i);l(this,"beforeRemove",()=>{});l(this,"statusCalculator");this.statusCalculator=i.statusCalculator}}const me=class me extends Se{constructor(){super(...arguments);l(this,"isApplicableTo",(i,a,n)=>{const r=this.entity.counterHolder.getActionCount(this);return this.isOnlyNTimesPerTurnIfFaceup>0&&r>=this.isOnlyNTimesPerTurnIfFaceup?this.entity.counterHolder.incrementActionCountPerTurn(this):this.isOnlyNTimesIfFaceup>0&&r>=this.isOnlyNTimesIfFaceup&&this.entity.counterHolder.incrementActionCount(this),this.definition.isApplicableTo(this,i,a,n)});l(this,"substitute",async(i,a,n)=>{const r=await this.definition.substitute(this,i,a,n);return this.isOnlyNTimesPerTurnIfFaceup>0?this.entity.counterHolder.incrementActionCountPerTurn(this):this.isOnlyNTimesIfFaceup>0&&this.entity.counterHolder.incrementActionCount(this),r});l(this,"getClone",()=>new me(this.seq,this.entity,this.definition))}get definition(){return super.definition}};l(me,"createNew",(i,a)=>new me("AutoSeq",i,a));let Ke=me;class $a extends Te{constructor(){super(...arguments);l(this,"afterDistributeAll",()=>!0)}}class ja extends Ee{constructor(){super(...arguments);l(this,"beforePush",()=>{});l(this,"filter",(i,a,n,r,s,o,c)=>this.effectiveOperators.filter(u=>u.summonKinds.includes(a)).reduce((u,d)=>({...u,...d.filter(this.entity,i,s.summoner,[a,...n],r,s.monster,o,u.posList,u.cells,c)}),s))}}class Ua extends re{constructor(i){super(i);l(this,"beforeRemove",()=>{});l(this,"summonKinds");l(this,"filter");this.summonKinds=i.summonKinds,this.filter=(...a)=>i.filter(this,...a)}}const b=class b{constructor(){}};l(b,"_tryMarkForDestory",(t,i)=>{if(t.info.isDying||t.kind==="XyzMaterial"||!t.isOnFieldStrictly&&t.fieldCell.cellType!=="Deck"&&t.fieldCell.cellType!=="Hand")return!1;const a=i.action.playType==="Battle"?"BattleDestroy":"EffectDestroy",n=a==="BattleDestroy"&&i.action.entity===t?i.selectedEntities[0]:i.action.entity;return t.info.isDying=t.validateDestory(a,i.activator,n,i.action),t.info.isDying&&(t.info.causeOfDeath=[a],t.info.isKilledBy=n,t.info.isKilledByWhom=i.activator,a==="BattleDestroy"&&(t.info.isKilledByWhom=n.controller)),t.info.isDying}),l(b,"excavateFromDeck",async(t,i,a,n)=>{const r=await b.excavateManyFromDeck(t,1,i,a,n);return r.length?r[0]:void 0}),l(b,"excavateManyFromDeck",async(t,i,a,n,r)=>{const s=t.getDeckCell().cardEntities.slice(0,i);return await k.moveMany(s.map(o=>({entity:o,to:o.fieldCell,kind:o.kind,face:"FaceUp",orientation:o.orientation,pos:"Fix",movedAs:["Excavate",...a],movedBy:n,actionOwner:r,chooser:void 0}))),s}),l(b,"releaseManyForTheSameReason",(t,i,a,n)=>t.length?(i.includes("Cost")&&n.writeInfoLog(`${t.map(r=>r.toString()).join(" ")}をリリースし――、`),b.bringManyToSameCellForTheSameReason("Graveyard","Top",t,"FaceUp","Vertical",["Release",...i],a,n)):Promise.resolve([])),l(b,"sendManyToGraveyardForTheSameReason",(t,i,a,n)=>t.length?(n&&i.includes("Cost")&&(i.includes("FusionMaterial")?n.writeInfoLog(`${t.map(r=>r.toString()).join(" ")}を融合素材とし――、`):i.includes("SynchroMaterial")?n.writeInfoLog(`${t.map(r=>r.toString()).join(" ")}をシンクロと素材し――、`):i.includes("LinkMaterial")?n.writeInfoLog(`${t.map(r=>r.toString()).join(" ")}をリンクマーカーにセッティング――、`):n.writeInfoLog(`${t.map(r=>r.toString()).join(" ")}を墓地に送り――、`)),b.bringManyToSameCellForTheSameReason("Graveyard","Top",t,"FaceUp","Vertical",i,a,n)):Promise.resolve([])),l(b,"addManyToHand",(t,i,a,n)=>t.length?b.bringManyToSameCellForTheSameReason("Hand","Bottom",t,"FaceDown","Vertical",i,a,n):Promise.resolve([])),l(b,"discardManyForTheSameReason",(t,i,a,n)=>t.length?(n&&i.includes("Cost")&&n.writeInfoLog(`${t.map(r=>r.toString()).join(" ")}を手札から捨て――、`),b.bringManyToSameCellForTheSameReason("Graveyard","Top",t,"FaceUp","Vertical",["Discard",...i],a,n)):Promise.resolve([])),l(b,"banishManyForTheSameReason",(t,i,a,n)=>t.length?(n&&i.includes("Cost")&&n.writeInfoLog(`${t.map(r=>r.toString()).join(" ")}をゲームから除外し――、`),b.bringManyToSameCellForTheSameReason("Banished","Top",t,"FaceUp","Vertical",i,a,n)):Promise.resolve([])),l(b,"returnManyToDeckForTheSameReason",(t,i,a,n,r)=>i.length?(r&&a.includes("Cost")&&r.writeInfoLog(`${i.map(s=>s.toString()).join(" ")}をデッキに戻し――、`),b.bringManyToSameCellForTheSameReason("Deck",t,i,"FaceDown","Vertical",a,n,r)):Promise.resolve([])),l(b,"returnManyToHandForTheSameReason",(t,i,a,n)=>t.length?(n&&i.includes("Cost")&&n.writeInfoLog(`${t.map(r=>r.toString()).join(" ")}を手札に戻し――、`),b.bringManyToSameCellForTheSameReason("Hand","Bottom",t,"FaceDown","Vertical",i,a,n)):Promise.resolve([])),l(b,"convertManyToXyzMaterials",(t,i,a,n)=>t.length?(n&&i.includes("Cost")&&n.writeInfoLog(`${t.map(r=>r.toString()).join(" ")}によって、オーバーレイネットワークを構築――、`),k.moveMany(t.map(r=>({entity:r,to:r.fieldCell,kind:"XyzMaterial",face:"FaceUp",orientation:"Vertical",pos:"Top",movedAs:i,movedBy:a,actionOwner:n,chooser:n})))):Promise.resolve()),l(b,"moveToXyzOwner",(t,i,a,n,r)=>i.length?(a.includes("Effect")&&r.writeInfoLog(`${i.map(s=>s.toString()).join(" ")}をXYZ素材として吸収。`),k.moveMany(i.map(s=>({entity:s,to:t,kind:"XyzMaterial",face:"FaceUp",orientation:"Vertical",pos:"Top",movedAs:a,movedBy:n,actionOwner:r,chooser:r})))):Promise.resolve()),l(b,"banishMany",(t,i)=>k.bringManyToSameCell("Banished","Top",t.map(a=>({...a,face:"FaceUp",orientation:"Vertical"})),i)),l(b,"bringManyToSameCellForTheSameReason",(t,i,a,n,r,s,o,c)=>k.bringManyToSameCell(t,i,a.map(u=>({entity:u,face:n,orientation:r,movedAs:s,movedBy:o,activator:c})))),l(b,"tryDestroy",async(t,i)=>{const a=await b.tryMarkForDestory(t,i);return await b.waitCorpseDisposal(i.activator.duel),a}),l(b,"waitCorpseDisposal",t=>k.sendManyToGraveyard([...t.field.getDyingCardsOnField(),...t.field.getPendingCardsOnField()].filter(i=>i.info.isDying).map(i=>({entity:i,movedAs:i.info.causeOfDeath??[],movedBy:i.info.isKilledBy,activator:i.info.isKilledByWhom})))),l(b,"tryMarkForDestory",async(t,i)=>{let a=t.filter(o=>b._tryMarkForDestory(o,i));if(!a.length)return[];const n=i.action.playType==="Battle"?"BattleDestroy":"EffectDestroy";(await Promise.all(t[0].field.getAllEntities().flatMap(o=>o.substituteEffects.filter(c=>c.isMandatory).filter(c=>c.executableCells.includes(o.fieldCell.cellType)).filter(c=>c.isApplicableTo(n,t,i).length).flatMap(c=>c.substitute(n,t,i))))).flatMap(o=>o).forEach(o=>{o.resetCauseOfDeath()}),a=a.filter(o=>o.info.isDying);let r=t[0].field.getAllEntities().flatMap(o=>o.substituteEffects.filter(c=>!c.isMandatory).filter(c=>c.executableCells.includes(o.fieldCell.cellType)).filter(c=>c.isApplicableTo(n,t,i).length).map(c=>({chooser:o.owner,effect:c,sacrifice:o})));for(const o of r.map(c=>c.sacrifice.controller).getDistinct()){const c=r.filter(d=>d.sacrifice.controller===o),u=await o.duel.view.waitSelectAction(o,c.map(d=>({entity:d.sacrifice,title:d.effect.title,origin:d.effect})),"身代わり効果を適用する？",!0);if(u){if((await u.substitute(n,a,i)).forEach(d=>{d.resetCauseOfDeath()}),a=a.filter(d=>d.info.isDying),!a.length)return[];r=r.filter(d=>d.effect.isApplicableTo(n,t,i).length)}}const s=a.filter(o=>o.info.isDying);return s.forEach(o=>o.duel.log.info(`${o.toString()}を${Ya[n]}。`,o.info.isKilledByWhom)),s}),l(b,"tryBanish",async(t,i,a)=>{const n=i.filter(r=>r.canBeBanished(t,a.activator,a.action.entity,a.action));return await b.banishManyForTheSameReason(n,["Effect"],a.action.entity,a.activator),n.filter(r=>r.fieldCell.cellType==="Banished").filter(r=>r.moveLog.latestRecord.movedBy===a.action.entity)}),l(b,"negateSummonMany",(t,i)=>{const a=i.duel.field.getPendingMonstersOnField();return a.forEach(n=>{n.info.summonKinds=[],n.info.materials=[],n.moveLog.negateSummon(t,i)}),i.writeInfoLog(`${a.map(n=>n.toString()).join(" ")}.の召喚は無効にされた。`),a}),l(b,"drawAtSameTime",async(t,i,a,n)=>{const r=[],s=[],o=[t.draw(a,i,t),t.getOpponentPlayer().draw(n,i,t)].map(c=>c.catch(u=>{u instanceof B?u.winner&&r.push(u.winner):s.push(u)}));if(await Promise.all(o),s.length)throw new S("ドロー処理で想定されない例外が発生した。",t,a,n,i,...s);if(r.length!==0)throw r.length===1?new B(r[0],"対戦相手がデッキからドローできなかった。"):new B(void 0,"お互いにデッキからカードをドローできなかった。")});let m=b;class za extends Te{constructor(){super(...arguments);l(this,"afterDistributeAll",()=>!0)}}class Va extends Ee{constructor(){super(...arguments);l(this,"beforePush",()=>{})}}class Zt extends re{constructor(i){super(i);l(this,"beforeRemove",()=>{});l(this,"calcType");l(this,"filter");this.calcType=i.calcType,this.filter=(...a)=>i.filter(this,...a)}}const Ge=(e,t,...i)=>e.filter(a=>t.includes(a.calcType)).reduce((a,n)=>({...a,...n.filter(...i)}),{}),Gt=(...e)=>{const[t,i,a,n,r,s,o]=e,c=[a.entity,n,r].filter(p=>!!p).flatMap(p=>p.damageFilterBundle.effectiveOperators);let u=Ge(c,["double_typeA","eachOther_typeA","eachOther_typeB","asEffectDamage"],...e);const d={point:t,damageToOpponent1:0,damageToOpponent2:0,damageType:s};return u.double_typeA&&(d.point*=2),u.asEffectDamage&&(d.damageType="EffectDamage"),u={...Ge(c,["heal","zero_typeA","half","double_typeB","fix"],d.point,i,a,n,r,d.damageType,o),...u},u.fix!==void 0?d.point=u.fix:u.zero_typeA?d.point=0:(u.half&&(d.point=Math.round(d.point/2)),u.double_typeA&&(d.point*=2)),u={...Ge(c,["zero_typeB"],d.point,i,a,n,r,d.damageType,o),...u},u.zero_typeB&&(d.point=0),u.heal?d.damageType="Heal":(u.eachOther_typeA&&(d.damageToOpponent1=d.point),u.eachOther_typeB&&(d.damageToOpponent2=d.point,u.eachOther_typeB==="Substitude"&&(d.point=0))),d},Wa=(e,t,i)=>Gt(e,t.activator,i,t.action.entity,void 0,"EffectDamage",t.action),Qa=(e,t,i,a,n,r)=>Gt(e,t,i,a,n.entityType==="Duelist"?void 0:n,"BattleDamage",r),Me=e=>new Promise(t=>setTimeout(t,e)),$t=()=>{let e=()=>{},t=()=>{};return{promise:new Promise((a,n)=>{e=a,t=n}),resolve:e,reject:t}},qe=class qe extends Se{constructor(i,a,n){super(i,a,{...n,playType:"ContinuousEffect",isMandatory:!1,executableDuelistTypes:["Controller"]});l(this,"toString",()=>this.title);l(this,"toFullString",()=>`${this.entity.toString()}の${this.toString()}`);l(this,"execute",async(i,a)=>{if(console.log(this.toFullString()),!this.canExecute())return;const n=await this.definition.execute(this,i,a);return n==="RemoveMe"&&this.entity.immediatelyActions.reset(...this.entity.immediatelyActions.filter(r=>r!==this)),n})}get definition(){return super.definition}get playType(){return this.definition.playType}};l(qe,"createNew",(i,a)=>new qe("AutoSeq",i,a));let Je=qe;const Xa=["FaceUp","FaceDown"],jt=["FusionSummon","SynchroSummon","XyzSummon","PendulumSummon","LinkSummon","RitualSummon","FlipSummon"],Ka={FusionSummon:"融合召喚",SynchroSummon:"シンクロ召喚",XyzSummon:"エクシーズ召喚",PendulumSummon:"ペンデュラム召喚",LinkSummon:"リンク召喚",RitualSummon:"儀式召喚",FlipSummon:"反転召喚"},Ja=[...jt,"AdvanceSummon","NormalSummon","SpecialSummon"],Ya={BattleDestroy:"戦闘破壊",EffectDestroy:"効果破壊",RuleDestroy:"ルール破壊"},Ut=e=>e+"Summon",mt=["Card","Token"],Ia=["Duelist","Squatter"],As=(e,t)=>Nt(e.origin,t.origin),M=class M{constructor(t,i,a,n,r,s,o){l(this,"seq");l(this,"origin");l(this,"entityType");l(this,"summonFilterBundle");l(this,"procFilterBundle");l(this,"numericOprsBundle");l(this,"statusOperatorBundle");l(this,"damageFilterBundle");l(this,"moveLog");l(this,"counterHolder");l(this,"parent");l(this,"face");l(this,"orientation");l(this,"owner");l(this,"fieldCell");l(this,"_status");l(this,"_numericStatus");l(this,"_info");l(this,"actions",[]);l(this,"immediatelyActions",[]);l(this,"continuousEffects",[]);l(this,"substituteEffects",[]);l(this,"canBeReleased",(t,i,a,n)=>!this.isInTrashCell&&this.procFilterBundle.filter(a,t,i,n,[this]));l(this,"canBeSentToGraveyard",(t,i,a,n)=>!this.status.willBeBanished&&!this.status.willReturnToDeck&&this.procFilterBundle.filter([a],t,i,n,[this]));l(this,"_exists",!0);l(this,"validateFusionMaterials",t=>this.definition.fusionMaterialInfos?this.definition.validateFusionMaterials?this.definition.validateFusionMaterials(t):!0:!1);l(this,"definition");l(this,"toString",()=>{let t=this.nm;return this.nm!==this.origin.name&&(t=`${t}(${this.origin.name})`),this.entityType==="Card"?`《${t}》`:t});l(this,"onUsedAsMaterial",(t,i)=>{this.definition.onUsedAsMaterial&&this.definition.onUsedAsMaterial(t,i)});l(this,"setBattlePosition",async(t,i,a,n)=>{let r=`表示形式の変更：${this.toString()}（${this.battlePositionName}⇒${be[t]}）`;const s=[...i];this.battlePosition==="Set"&&(s.push("Flip"),i.includes("Rule")&&(this.info.isPending=!0,r=`${this.toString()}を反転召喚`,this.info.summonKinds.push("FlipSummon"),s.push("FlipSummon"),s.push("AttackSummon"))),this.duel.log.info(r,n),await this.moveAlone(this.fieldCell,"Monster",t==="Set"?"FaceDown":"FaceUp",t==="Attack"?"Vertical":"Horizontal","Top",s,a,n,n)});l(this,"activateAsPendulumScale",(t,i,a,n)=>this.moveAlone(t,"Spell","FaceUp","Vertical","Top",["CardActivation",...i],a,n,n));l(this,"setNonFieldMonsterPosition",async(t,i,a,n,r)=>{this.moveAlone(this.fieldCell,t,i==="FaceUp"?"FaceUp":"FaceDown","Vertical","Top",a,n,r,r)});l(this,"setAsSpellTrap",async(t,i,a,n,r)=>{await this.moveAlone(t,i,"FaceDown","Vertical","Top",[...a,"SpellTrapSet"],n,r,r)});l(this,"activateSpellTrapFromHand",async(t,i,a,n,r)=>{await this.moveAlone(t,i,"FaceUp","Vertical","Top",[...a,"CardActivation"],n,r,r)});l(this,"putDirectly",async(t,i,a,n,r)=>{await this.moveAlone(t,i,"FaceUp","Vertical","Top",[...a,"PutDirectly"],n,r,r)});l(this,"activateSpellTrapOnField",async(t,i,a,n)=>{await this.moveAlone(this.fieldCell,t,"FaceUp","Vertical","Top",[...i,"CardActivation"],a,n,n)});l(this,"draw",async(t,i,a)=>await this.addToHand([...t,"Draw"],i,a));l(this,"addToHand",async(t,i,a)=>await this.moveAlone(this.owner.getHandCell(),this.origin.kind,"FaceDown","Vertical","Bottom",[...t],i,a,a));l(this,"summon",(t,i,a,n,r,s,o)=>M.summonMany([{monster:this,dest:t,summoner:o??s,pos:i}],a,n,r,s));l(this,"moveForcibly",async(t,i,a,n,r,s,o)=>{await this.moveAlone(t,this.origin.kind,i,a,n,["Rule",...r],s,o,o)});l(this,"moveAlone",async(t,i,a,n,r,s,o,c,u)=>(await M.moveMany([{entity:this,to:t,kind:i,face:a,orientation:n,pos:r,movedAs:s,movedBy:o,actionOwner:c,chooser:u}],void 0),this.fieldCell));l(this,"determine",()=>{this.info.isPending&&(this.info.isPending=!1,this.moveLog.finalize(),this.continuousEffects.forEach(t=>t.updateState()))});l(this,"_move",async t=>{if(!t.to)throw new Error("illegal argument: to");for(const a of[this,...this.field.getCardsOnFieldStrictly()].getDistinct().flatMap(n=>n.immediatelyActions))await a.execute(this,t);this.face=t.face,this.orientation=t.orientation;let i=!1;return t.to!==this.fieldCell&&(this.fieldCell.cellType==="WaitingRoom"?(this.duel.log.info(`生成：${this.toString()}`,t.actionOwner),i=!0):t.to.cellType==="WaitingRoom"?(this.duel.log.info(`消滅：${this.toString()}`,t.actionOwner),this._exists=!1,await this.duel.view.waitTokenAnimation()):this.field.duel.clock.turn&&(this.duel.log.info(`移動：${this.toString()}  ${this.fieldCell.toString()} ⇒ ${t.to.toString()}`,t.actionOwner),await this.field.duel.view.waitAnimation({entity:this,to:t.to,index:t.pos,count:0}))),(t.to!==this.fieldCell||t.pos==="Random")&&(this.fieldCell.releaseEntities(this),this.fieldCell.isPlayFieldCell&&!t.to.isPlayFieldCell&&(this.counterHolder.clear(),this.resetCauseOfDeath()),this.fieldCell.isMonsterZoneLikeCell&&!t.to.isMonsterZoneLikeCell||t.kind!=="Monster"?(this.resetNumericStatus(),this.info.isEffectiveIn.push(...W),this.info.equipEntities.filter(a=>a.isOnFieldAsSpellTrapStrictly).forEach(a=>{a.info.isDying=!0,a.info.causeOfDeath=["RuleDestroy"],this.controller.writeInfoLog(`装備対象${this.toString()}不在により${a.toString()}は破壊された。`)}),this.info.equipEntities=[],this.kind!=="XyzMaterial"&&this.fieldCell.xyzMaterials.forEach(a=>{a.info.isDying=!0,a.info.causeOfDeath=["LostXyzOwner"],this.controller.writeInfoLog(`エクシーズモンスター${this.toString()}不在により${a.toString()}は墓地に送られた。`)})):this.fieldCell.cellType==="SpellAndTrapZone"&&t.to.cellType!=="SpellAndTrapZone"&&(this.info.equipedBy=void 0,this.info.equipedAs=void 0,this.info.isEffectiveIn.push(...W)),t.to.acceptEntities(this,t.pos),i&&(await Me(1),this._exists=!0,await this.duel.view.waitTokenAnimation()),(t.to===this.isBelongTo||t.to.cellType==="Hand"||t.to.cellType==="Banished"&&this.face==="FaceDown")&&(this.counterHolder.clear(),this.resetInfoAll(),this.resetStatusAll())),(this.isOnFieldStrictly&&this.face==="FaceDown"||t.kind==="XyzMaterial")&&(this.info.equipEntities.forEach(a=>{a.info.isDying=!0,a.info.causeOfDeath=["RuleDestroy"],this.controller.writeInfoLog(`装備対象${this.toString()}不在により${a.toString()}は破壊された。`)}),this.counterHolder.removeAllWhenfaceDown(),this.info.materials=[],this._status.isEffective=!0,this.info.isEffectiveIn=[...Q],this.resetNumericStatus(),this.info.isSettingSickness=this.kind==="Trap"||this.status.spellCategory==="QuickPlay"),this._info.kind=t.kind,this.moveLog.push(t.kind,t.movedAs,t.movedBy,t.actionOwner,t.chooser),t.to});l(this,"initForTurn",()=>{this.info.isSettingSickness=!1,this.info.attackDeclareCount=0,this.info.battlePotisionChangeCount=0,this.counterHolder.corpseDisposal()});l(this,"resetInfoIfLeavesTheField",()=>{this._info={...this._info,isDying:!1,isPending:!1,causeOfDeath:[],isKilledBy:void 0,isKilledByWhom:void 0,effectTargets:{},attackDeclareCount:0,battlePotisionChangeCount:0,materials:[],equipedBy:void 0,equipedAs:void 0,equipEntities:[]},this._info.isEffectiveIn.push(...W),this._info.isEffectiveIn.distinct()});l(this,"resetInfoAll",()=>{var t;this._info={kind:this.origin.kind,isDying:!1,isPending:!1,isEffectiveIn:[...Q],causeOfDeath:[],isKilledBy:void 0,isKilledByWhom:void 0,isVanished:!1,isRebornable:((t=this.origin.monsterCategories)==null?void 0:t.union(Pt).length)===0,isSettingSickness:!1,summonKinds:[],materials:[],effectTargets:{},attackDeclareCount:0,battlePotisionChangeCount:0,equipedBy:void 0,equipedAs:void 0,validateEquipOwner:()=>!0,equipEntities:[],battleLog:[]},this.counterHolder.clear()});l(this,"resetNumericStatus",()=>{const t=Mt.reduce((i,a)=>(i[a]=this.origin[a],i),{});this._numericStatus={origin:{...t},wip:{...t},calculated:{...t}}});l(this,"resetStatus",()=>{this._status={...this.origin,canAttack:!0,isEffective:!0,canDirectAttack:!1,canActivateEffect:!0,isSelectableForAttack:!0,allowHandSynchro:!1,allowHandLink:!1,willBeBanished:!1,willReturnToDeck:void 0,fusionSubstitute:!1,maxCounterQty:{},piercingTo:[]}});l(this,"resetStatusAll",()=>{this.resetNumericStatus(),this.resetStatus()});l(this,"resetCauseOfDeath",()=>{this.info.isDying=!1,this.info.causeOfDeath=[],this.info.isKilledBy=void 0,this.info.isKilledByWhom=void 0});this.seq=M.nextEntitySeq++,this.counterHolder=new Ha(this),this.definition=n,this.owner=t,this.fieldCell=i,this.entityType=a,this.parent=o,this.origin=n.staticInfo,this._status=JSON.parse(JSON.stringify(n.staticInfo)),this._numericStatus=JSON.parse(JSON.stringify(n.staticInfo)),this.resetStatusAll(),this._info={kind:this.origin.kind,isEffectiveIn:[...Q],attackDeclareCount:0,battlePotisionChangeCount:0,isDying:!1,isPending:!1,causeOfDeath:[],isKilledBy:void 0,isKilledByWhom:void 0,isVanished:!1,isRebornable:!0,isSettingSickness:!1,summonKinds:[],materials:[],effectTargets:{},equipedBy:void 0,equipedAs:void 0,validateEquipOwner:()=>!0,equipEntities:[],battleLog:[]},this.resetInfoAll(),this.face=r,this.orientation=s,this.summonFilterBundle=new ja(i.field.summonFilterPool,this),this.procFilterBundle=new fa(i.field.procFilterPool,this),this.numericOprsBundle=new ha(i.field.numericStateOperatorPool,this),this.statusOperatorBundle=new Ga(i.field.statusOperatorPool,this),this.damageFilterBundle=new Va(i.field.damageFilterPool,this),this._exists=this.entityType==="Card",i.acceptEntities(this,"Top"),this.moveLog=new ka(this),this.moveLog.pushForRuleAction(["Spawn"]);let c=[];c=n.continuousEffects??[],this.substituteEffects.push(...(n.substituteEffects??[]).map(u=>Ke.createNew(this,u))),this.origin.kind==="Monster"&&this.entityType==="Card"&&n.summonFilter&&this.summonFilterBundle.push(new Ua({title:"default",validateAlive:()=>!0,isContinuous:!0,isSpawnedBy:this,actionAttr:{},isApplicableTo:()=>!0,summonKinds:Ja,filter:n.summonFilter})),n.defaultStatus&&this.statusOperatorBundle.push(new H({title:"default",validateAlive:()=>!0,isContinuous:!0,isSpawnedBy:this,actionAttr:{},isApplicableTo:()=>!0,statusCalculator:()=>n.defaultStatus??{}})),this.actions.push(...n.actions.map(u=>ie.createNew(this,u))),this.immediatelyActions.push(...(n.immediatelyActions??[]).map(u=>Je.createNew(this,u))),this.continuousEffects.push(...c.map(u=>Xe.createNew(this,u)))}get isUnderControl(){return this.face==="FaceUp"||Ot.every(t=>t!==this.fieldCell.cellType)}get controller(){return this.fieldCell.owner??this.owner}get field(){return this.owner.duel.field}get duel(){return this.owner.duel.field.duel}get actionLogRecords(){return this.duel.chainBlockLog.records.filter(t=>t.chainBlockInfo.action.entity===this)}get status(){return this._status}set status(t){this._status={...t}}get numericStatus(){return this._numericStatus}get info(){return this._info}get kind(){return this.info.kind}get nm(){return this.status.name}get atk(){return this._numericStatus.calculated.attack}get def(){return this._numericStatus.calculated.defense}get lvl(){return this._numericStatus.calculated.level}get rank(){return this._numericStatus.calculated.rank}get attr(){return this.status.attributes??[]}get types(){return this.status.types??[]}get psL(){return this._numericStatus.calculated.pendulumScaleL}get psR(){return this._numericStatus.calculated.pendulumScaleR}get linkArrows(){let t=(this.origin.linkArrowKeys??[]).map(i=>Ft[i].linkArrow);return this.controller.seat==="Above"&&(t=t.map(i=>({offsetColumn:i.offsetColumn*-1,offsetRow:i.offsetRow*-1}))),t}get linkArrowDests(){var t;return(t=this.origin.monsterCategories)!=null&&t.includes("Link")?this.isOnFieldAsMonsterStrictly?this.linkArrows.map(i=>[this.fieldCell.row+i.offsetRow,this.fieldCell.column+i.offsetColumn]).map(([i,a])=>this.field.cells[i][a]).filter(i=>i.isMonsterZoneLikeCell):[]:[]}get linkedEntities(){return this.isOnFieldAsMonsterStrictly?[...this.linkArrowDests.map(t=>t.cardEntities[0]).map(t=>t),...this.fieldCell.linkArrowSources].getDistinct():[]}get coLinkedEntities(){var t;return this.isOnFieldAsMonsterStrictly?(t=this.origin.monsterCategories)!=null&&t.includes("Link")?this.linkArrowDests.map(i=>i.cardEntities[0]).filter(i=>i).union(this.fieldCell.linkArrowSources):[]:[]}get isEffective(){return this.status.isEffective&&this.info.isEffectiveIn.includes(this.fieldCell.cellType)}get canBeSet(){var t;return this.entityType==="Card"&&!((t=this.status.monsterCategories)!=null&&t.includes("Link"))}get isEffectiveWeakly(){return this.status.isEffective}get battlePosition(){if(this.isOnFieldStrictly&&this.kind==="Monster")return this.orientation==="Vertical"?"Attack":this.face==="FaceUp"?"Defense":"Set"}get battlePositionName(){const t=this.battlePosition;if(t)return be[t]}get wasMovedAtCurrentProc(){return this.field.duel.clock.totalProcSeq===this.moveLog.latestRecord.movedAt.totalProcSeq}get wasMovedAtPreviousProc(){return this.field.duel.clock.totalProcSeq===this.moveLog.latestRecord.movedAt.totalProcSeq+1}get wasMovedAtCurrentTurn(){return this.field.duel.clock.isSameTurn(this.moveLog.latestRecord.movedAt)}get wasMovedAtCurrentChain(){return this.field.duel.clock.isSameChain(this.moveLog.latestRecord.movedAt)}get wasMovedAtPreviousChain(){return this.field.duel.clock.isPreviousChain(this.moveLog.latestRecord.movedAt)}get wasMovedAtPreviousTurn(){return this.field.duel.clock.isPreviousTurn(this.moveLog.latestRecord.movedAt)}get wasMovedFrom(){return this.moveLog.previousPlaceRecord.cell}get isPendulumScale(){var t;return!(!((t=this.origin.monsterCategories)!=null&&t.includes("Pendulum"))||!this.isOnField||!this.fieldCell.isSpellTrapZoneLikeCell||this.status.spellCategory)}get isOnField(){return this.fieldCell.isPlayFieldCell}get isOnFieldStrictly(){return this.isOnField&&!this.info.isPending&&!this.info.isDying&&this.kind!=="XyzMaterial"}get isOnFieldAsMonsterStrictly(){return this.fieldCell.isMonsterZoneLikeCell&&this.isOnFieldStrictly}get isMonster(){return this.isOnFieldAsMonsterStrictly||this.kind==="Monster"}get isOnFieldAsSpellTrapStrictly(){return this.isOnFieldStrictly&&(this.kind==="Spell"||this.kind==="Trap")}get isInTrashCell(){return this.fieldCell.isTrashCell}get isLikeContinuousSpell(){return this.status.spellCategory==="Continuous"||this.status.spellCategory==="Field"||this.status.spellCategory==="Equip"||this.status.trapCategory==="Continuous"||(this.status.monsterCategories??[]).includes("Pendulum")}get isBelongTo(){return this.origin.monsterCategories&&this.origin.monsterCategories.union(ke).length?this.owner.getExtraDeck():this.owner.getDeckCell()}get exist(){return this._exists}get allStickyEffectOperators(){return[...this.procFilterBundle.effectiveOperators,...this.numericOprsBundle.effectiveOperators]}get fusionMaterialInfos(){return this.definition.fusionMaterialInfos??[]}};l(M,"nextEntitySeq",0),l(M,"splitBattlePos",t=>({face:t==="Set"?"FaceDown":"FaceUp",orientation:t==="Attack"?"Vertical":"Horizontal"})),l(M,"recreateArray",(t,i)=>{if(!i.length)return[];const a=t.getAllCells().flatMap(n=>n.entities);return i.map(n=>n.seq).map(n=>a.find(r=>r.seq===n)).filter(n=>n!==void 0)}),l(M,"createPlayerEntity",t=>{const i=t.getHandCell();return new M(t,i,"Duelist",ns(t),"FaceUp","Vertical")}),l(M,"createCardEntity",(t,i)=>{const a=i.staticInfo.monsterCategories&&i.staticInfo.monsterCategories.union(ke).length?t.getExtraDeck():t.getDeckCell();return new M(t,a,"Card",i,"FaceDown","Vertical")}),l(M,"createTokenEntity",(t,i,a)=>new M(t,t.duel.field.getWaitingRoomCell(),"Token",a,"FaceUp","Vertical",i)),l(M,"moveMany",async(t,i)=>{if(!t.length)return;const a=t[0].entity.duel,r=[...t.filter(o=>o.entity.fieldCell!==o.to).map(o=>o.entity).filter(o=>!(i??[]).includes(o)),...a.field.getCardsOnFieldStrictly().filter(o=>o.info.isDying)],s=new Map;for(t.forEach(({entity:o,to:c,kind:u,face:d,orientation:p,pos:f,...h})=>{var A;let y=c,_=u,g=d,P=f,Z=p;o.status.willBeBanished?(y=o.owner.getBanished(),g="FaceUp",Z="Vertical"):o.status.willReturnToDeck?(y=o.isBelongTo,g="FaceDown",P=o.status.willReturnToDeck,Z="Vertical"):(A=o.status.monsterCategories)!=null&&A.includes("Pendulum")&&o.isOnField&&!o.info.isPending&&o.kind!=="XyzMaterial"&&o.face==="FaceUp"&&c.isTrashCell&&(y=o.owner.getExtraDeck(),g="FaceUp",P="Top",Z="Vertical"),y.cellType==="ExtraDeck"&&(P=g==="FaceUp"?"Top":"Bottom"),o.isBelongTo.cellType==="ExtraDeck"&&(y.cellType==="Hand"||y.cellType==="Deck")&&(y=o.isBelongTo,g="FaceDown",Z="Vertical"),y.isPlayFieldCell||(_=o.origin.kind,o.entityType==="Token"&&(y=o.field.getWaitingRoomCell())),y.isMonsterZoneLikeCell||(Z="Vertical"),s.set(y,[{entity:o,to:y,kind:_,face:g,orientation:Z,pos:P,...h},...s.get(y)??[]])});;){const o=Array.from(s.values()).map(u=>u.pop()).filter(u=>u!==void 0).map(u=>u.entity._move(u));if(!o.length)break;await Promise.all(o),console.log("hoge");const c=a.field.getDyingCardsOnField().filter(u=>!r.includes(u)).map(u=>({entity:u,movedAs:u.info.causeOfDeath??[],movedBy:u.info.isKilledBy,activator:u.info.isKilledByWhom}));c.length&&await M.sendManyToGraveyard(c,r)}M.settleEntityMove(a)}),l(M,"summonMany",async(t,i,a,n,r)=>{if(!t.length)return;const s={Attack:"AttackSummon",Defense:"DefenseSummon",Set:"SetSummon"},o=t.map(({monster:c,dest:u,pos:d,summoner:p})=>{if(c.info.summonKinds=[i],i==="NormalSummon"||i==="AdvanceSummon"){c.info.summonKinds.push("NormalSummon");const y=i==="AdvanceSummon"?"アドバンス":"";d==="Attack"?c.field.duel.log.info(`${c.toString()}を${y}召喚`,p):c.duel.log.info(`${c.toString()}を${y}セット`,p),a.includes("Rule")?p.info.ruleNormalSummonCountQty++:p.info.effectNormalSummonCountQty++}else i==="SpecialSummon"?c.duel.log.info(`${c.toString()}を${be[d]}で特殊召喚`,p):(c.info.summonKinds.push("SpecialSummon"),c.duel.log.info(`${c.toString()}を${be[d]}で${Ka[i]}！`,p)),p.info.specialSummonCountQty++;c.info.summonKinds=c.info.summonKinds.getDistinct(),c.info.battlePotisionChangeCount=1;const{face:f,orientation:h}=M.splitBattlePos(d);return a.includes("Rule")&&(c.info.isPending=!0),{entity:c,args:{to:u,kind:"Monster",face:f,orientation:h,pos:"Top",movedAs:[i,s[d],...a],movedBy:n,actionOwner:r,chooser:p}}}).map(c=>c.entity._move(c.args));await Promise.all(o),t.map(c=>c.summoner).forEach(c=>{i==="NormalSummon"||i==="AdvanceSummon"?a.includes("Rule")?c.info.ruleNormalSummonCount++:c.info.effectNormalSummonCount++:c.info.specialSummonCount++}),M.settleEntityMove(t[0].monster.duel)}),l(M,"sendManyToGraveyard",(t,i)=>M.bringManyToSameCell("Graveyard","Top",t.map(a=>({...a,face:"FaceUp",orientation:"Vertical"})),i)),l(M,"bringManyToSameCell",async(t,i,a,n)=>(await M.moveMany(a.map(r=>({...r,to:r.entity.field.getCells(t).filter(s=>s.owner===r.entity.owner)[0],kind:r.entity.origin.kind,pos:i,chooser:r.activator,actionOwner:r.activator})),n),a.map(r=>r.entity).filter(r=>r.fieldCell.cellType===t))),l(M,"settleEntityMove",t=>{t.field.recalcLinkArrows(),t.distributeOperators(t.clock);const i=t.field.getAllEntities().filter(a=>a.wasMovedAtCurrentProc);i.filter(a=>!a.isOnFieldStrictly&&!a.info.isPending).forEach(a=>a.resetInfoIfLeavesTheField()),i.filter(a=>a.face==="FaceDown").filter(a=>a.fieldCell===a.isBelongTo).forEach(a=>{a.resetInfoAll(),a.resetStatusAll()}),i.flatMap(a=>a.continuousEffects).forEach(a=>a.updateState()),t.field.getAllCells().filter(a=>a.needsShuffle).map(a=>a.shuffle())});let k=M;k.prototype.hasBeenSummonedNow=function(e,t=["Attack","Defense"]){const i=this,a=t.map(Ut),n=i.moveLog.latestRecord.movedAs;return!(!i.wasMovedAtPreviousChain||!n.union(e).length||!n.union(a).length)};k.prototype.hasBeenSummonedJustNow=function(e,t=["Attack","Defense"]){const i=this,a=t.map(Ut),n=i.moveLog.latestRecord.movedAs;return!(!i.wasMovedAtPreviousProc||!n.union(e).length||!n.union(a).length)};k.prototype.getAttackTargets=function(){const e=this.controller.getOpponentPlayer().getMonstersOnField().filter(t=>t.status.isSelectableForAttack);return(this.status.canDirectAttack||!e.length)&&e.push(this.controller.getOpponentPlayer().entity),e.filter(t=>t.canBeTargetOfBattle(this.controller,this)).filter(t=>this.procFilterBundle.filter(["BattleTarget"],this.controller,this,{},[t]))};k.prototype.canBeEffected=function(e,t,i){return this.procFilterBundle.filter(["Effect"],e,t,i,[this])};const en=(e,t,i,a,n)=>e.canBeEffected(i,a,n)&&e.procFilterBundle.filter([t],i,a,n,[e]);k.prototype.canBeTargetOfEffect=function(e){return this.procFilterBundle.filter(["EffectTarget"],e.activator,e.action.entity,e.action,[this])};k.prototype.canBeBanished=function(e,t,i,a){return this.fieldCell.cellType==="Banished"?!1:en(this,e,t,i,a)};k.prototype.canBeTargetOfBattle=function(e,t){return this.procFilterBundle.filter(["BattleTarget"],e,t,{},[this])};k.prototype.validateDestory=function(e,t,i,a){let n=this.procFilterBundle.filter([e],t,i,a??{},[this]);return n&&e==="EffectDestroy"&&(n=this.canBeEffected(t,i,a)),n};k.prototype.getIndexInCell=function(){const e=this;if(e.info.isVanished)return-1;const t=e.fieldCell.cardEntities.indexOf(e);if(t<0)throw new S("エンティティとセルの状態が矛盾している。",[e,e.fieldCell]);return t};k.prototype.getXyzMaterials=function(){const e=this;return(e.status.monsterCategories??[]).includes("Xyz")?e.fieldCell.xyzMaterials:[]};k.prototype.wasMovedAfter=function(e){return this.moveLog.latestRecord.movedAt.totalProcSeq>e.totalProcSeq};k.prototype.hadArrivedToFieldAt=function(){let e=this.moveLog.latestRecord.movedAt;return this.moveLog.records.findLast(t=>!t.cell.isPlayFieldCell||t.isPending||t.kind!==this.kind||t.face==="FaceDown"?!0:(e=t.movedAt,!1)),e};k.prototype.release=async function(e,t,i){return await this.sendToGraveyard([...e,"Release"],t,i),this.info.isVanished?void 0:this.fieldCell};k.prototype.ruleDestory=async function(){return await this.sendToGraveyard(["RuleDestroy"],void 0,void 0),this.info.isVanished?void 0:this.fieldCell};k.prototype.sendToGraveyard=async function(e,t,i){await m.sendManyToGraveyardForTheSameReason([this],e,t,i)};k.prototype.discard=async function(e,t,i){await m.discardManyForTheSameReason([this],e,t,i)};k.prototype.returnToDeck=async function(e,t,i,a){await m.returnManyToDeckForTheSameReason(e,[this],t,i,a)};k.prototype.banish=async function(e,t,i){await m.banishManyForTheSameReason([this],e,t,i)};class tn{constructor(t){l(this,"cells");l(this,"duel");l(this,"summonFilterPool");l(this,"procFilterPool");l(this,"numericStateOperatorPool");l(this,"statusOperatorPool");l(this,"damageFilterPool");l(this,"moveLog");l(this,"getAllCells",()=>this.cells.flat());l(this,"getCells",(...t)=>this.getAllCells().filter(i=>t.includes(i.cellType)));l(this,"getAvailableExtraMonsterZones",()=>this.getCells("ExtraMonsterZone").filter(t=>t.isAvailable));l(this,"getWaitingRoomCell",()=>this.getCells("WaitingRoom")[0]);l(this,"getAllEntities",()=>this.getAllCells().map(t=>t.entities).flat());l(this,"getAllCardEntities",()=>this.getAllCells().map(t=>t.cardEntities).flat());l(this,"getCardsOnFieldStrictly",()=>this.getCells(...W).map(t=>t.cardEntities).filter(t=>t.length>0).map(t=>t[0]).filter(t=>t.isOnFieldStrictly));l(this,"getMonstersOnFieldStrictly",()=>this.getCardsOnFieldStrictly().filter(t=>t.isOnFieldAsMonsterStrictly));l(this,"getSpellTrapsOnFieldStrictly",()=>this.getCardsOnFieldStrictly().filter(t=>t.isOnFieldAsSpellTrapStrictly));l(this,"getPendulumScalesOnFieldStrictly",()=>this.getCardsOnFieldStrictly().filter(t=>{var i;return(i=t.origin.monsterCategories)==null?void 0:i.includes("Pendulum")}).filter(t=>t.isOnFieldAsSpellTrapStrictly).filter(t=>!t.status.spellCategory));l(this,"getPendingCardsOnField",()=>this.getCells(...W).map(t=>t.cardEntities).filter(t=>t.length>0).map(t=>t[0]).filter(t=>t.info.isPending));l(this,"getDyingCardsOnField",()=>this.getCells(...W).map(t=>t.cardEntities).filter(t=>t.length>0).map(t=>t[0]).filter(t=>t.info.isDying));l(this,"getPendingMonstersOnField",()=>this.getPendingCardsOnField().filter(t=>t.kind==="Monster"));l(this,"getEntities",t=>this.getAllEntities().filter(i=>i.controller===t));l(this,"recalcLinkArrows",()=>{const t=this.getAllCells().filter(i=>i.isMonsterZoneLikeCell);t.some(i=>i.recalcLinkArrows)&&t.forEach(i=>i.recalcLinkArrows())});l(this,"canExtraLink",(t,i)=>{if(!t.linkArrows.length)return!1;const a=i.map(u=>u.material),n=this.getCells("ExtraMonsterZone").filter(u=>u.isAvailable||a.includes(u.cardEntities[0]));if(n.length!==1)return!1;const r=n[0],s=t.linkArrows.map(u=>this.cells[r.row+u.offsetRow][r.column+u.offsetColumn]);let o=r.linkArrowSources.filter(u=>!a.includes(u)).filter(u=>s.includes(u.fieldCell));if(!o.length)return!1;let c=-1;for(;c!==o.length;){const u=o.flatMap(d=>d.coLinkedEntities).filter(d=>!a.includes(d));if(u.some(d=>d.fieldCell.cellType==="ExtraMonsterZone"))return!0;o=[...o,...u].getDistinct(),c=o.length}return!1});l(this,"drawAtSameTime",async(t,i,a,n,r,s)=>{const o=[],c=[],u=[t.draw(i,r,s),a.draw(n,r,s)].map(d=>d.catch(p=>{p instanceof B?p.winner&&o.push(p.winner):c.push(p)}));if(await Promise.all(u),c.length)throw new S("ドロー処理で想定されない例外が発生した。",t,i,a,n,r,...c);if(o.length!==0)throw o.length===1?new B(o[0],"対戦相手がデッキからドローできなかった。"):new B(void 0,"お互いにデッキからカードをドローできなかった。")});l(this,"sendToGraveyard",async(t,i,a,n,r,s,o,c)=>{if(n>0&&a.length<n)return;const u=await this.duel.view.waitSelectEntities(i,{selectables:a,qty:n,validator:r,cancelable:c??!1},t);if(u)return await k.sendManyToGraveyard(u.map(d=>({entity:d,movedAs:s,movedBy:o,activator:i}))),this.duel.log.info(`${u.map(d=>d.status.name).join(", ")}を墓地に送った（${s.getDistinct().join(", ")}）。`,i),u});this.duel=t,this.cells=[...Array(7)].map(()=>[]);for(const i of Object.keys(Qe).map(Number))for(const a of Object.keys(Qe[i]).map(Number))this.cells[i][a]=new ca(this,i,a,i<3?t.duelists.Above:i>3?t.duelists.Below:a<2?t.duelists.Above:a>4?t.duelists.Below:void 0);this.summonFilterPool=new $a,this.procFilterPool=new pa,this.numericStateOperatorPool=new ga,this.statusOperatorPool=new Za,this.damageFilterPool=new za,this.moveLog=new ba(this)}}class an{constructor(t){l(this,"onUpdateEvent",new F);l(this,"nextSeq");l(this,"records",[]);l(this,"duel");l(this,"dispose",()=>{this.onUpdateEvent.clear()});l(this,"error",t=>{console.error(t);const i=["エラー発生"];t instanceof Error?(t instanceof S&&(i.push("-- エラーメッセージ --"),i.push(t.message),i.push("-- 関連オブジェクト --"),t.items.forEach(a=>i.push(JSON.stringify(a))),console.error(t.items)),i.push("-- エラー名称 --"),i.push(t.name||"エラー名称取得失敗"),i.push("-- スタックトレース --"),i.push(t.stack||"スタックトレース取得失敗")):(i.push("-- エラー型特定失敗 --"),i.push(JSON.stringify(t))),this.write("error","System",i,void 0,void 0,void 0,void 0,void 0)});l(this,"warn",t=>{this.write("warn","System",["【注意】",t],void 0,void 0,void 0,void 0,void 0)});l(this,"info",(t,i)=>{this.write("info","Others",[t],i,void 0,void 0,void 0,void 0)});l(this,"pushMoveLog",(t,i,a,n)=>{this.write("info","EntityMove",["移動"],t,i,void 0,a,n)});l(this,"write",(t,i,a,n,r,s,o,c)=>{const u=a.join(`
`);this.records.push({seq:this.nextSeq++,lvl:t,type:i,clock:this.duel.clock.getClone(),text:u,duelist:n,mainEntity:r,subEntities:s??[],from:o,to:c}),this.onUpdateEvent.trigger(this.nextSeq-1)});this.nextSeq=0,this.duel=t}get onUpdate(){return this.onUpdateEvent.expose()}get lastRecord(){return this.records.slice(-1)[0]}}class $e{constructor(t){l(this,"onUpdateEvent",new F);l(this,"_state","Disable");l(this,"defaultArgs");l(this,"_args");l(this,"resolve",()=>{});l(this,"show",t=>{this._args=t,this._state="Shown",this.onUpdateEvent.trigger();const{promise:i,resolve:a}=$t();return this.resolve=n=>{this._state="Disable",a(n),this.resolve=()=>{},this.onUpdateEvent.trigger()},i});l(this,"cancel",()=>{console.log(this),this.args.cancelable&&(this._state!=="Disable"&&this.resolve(void 0),this.terminate())});l(this,"terminate",()=>{this._state="Disable",this._args=this.defaultArgs,this.resolve=()=>{}});this.defaultArgs=t,this._args=t}get onUpdate(){return this.onUpdateEvent.expose()}get state(){return this._state}get args(){return this._args}}class nn{constructor(t){l(this,"onUpdateEvent",new F);l(this,"actionSelector",new $e({title:"カード操作を選択。",activator:void 0,dummyActionInfos:[],cancelable:!1}));l(this,"entitySelector",new $e({title:"対象を選択",entitiesChoices:{selectables:[],validator:()=>!0,cancelable:!1},cancelable:!1,chainBlockInfos:[]}));l(this,"textSelector",new $e({title:"カード操作を選択。",choises:[],cancelable:!1}));l(this,"modals",[this.actionSelector,this.entitySelector,this.textSelector]);l(this,"view");l(this,"terminateAll",()=>{this.modals.forEach(t=>t.terminate()),this.onUpdateEvent.trigger()});this.view=t,this.modals.forEach(i=>i.onUpdate.append(()=>this.onUpdateEvent.trigger()))}get onUpdate(){return this.onUpdateEvent.expose()}}const St=e=>{let t=[];do{const i=e.qty&&e.qty>0?e.qty:Math.floor(Math.random()*e.selectables.length+1);t=e.selectables.randomPickMany(i)}while(!e.validator(t));return t};class rn{constructor(t){l(this,"onStateChangeEvent",new F);l(this,"_stateLog",[]);l(this,"_state");this._stateLog.push({state:t,timestamp:new Date}),this._state=t}get stateLog(){return this._stateLog}get wasSpawnedAt(){return this.stateLog[0].timestamp}get onStateChange(){return this.onStateChangeEvent.expose()}get state(){return this._state}set state(t){this._stateLog.push({state:t,timestamp:new Date}),this._state=t,this.onStateChangeEvent.trigger(t)}}const sn=[{seq:10,name:"Internet Explorer",key:"msie"},{seq:20,name:"Internet Explorer",key:"trident"},{seq:30,name:"Edge",key:"edge"},{seq:40,name:"Google Chrome",key:"chrome"},{seq:50,name:"Safari",key:"safari"},{seq:60,name:"Mozilla Firefox",key:"firefox"},{seq:70,name:"Opera",key:"opera"}],ln=[{seq:10,name:"Microsoft Windows",key:"windows nt"},{seq:20,name:"Android",key:"android"},{seq:30,name:"iOS",key:"iphone"},{seq:40,name:"iOS",key:"ipad"},{seq:50,name:"macOS",key:"mac os x"}],Ce=window.navigator.userAgent.toLowerCase();var Dt;const on=((Dt=sn.find(e=>Ce.indexOf(e.key)!==-1))==null?void 0:Dt.name)??"Unknown Browser";var At;const st=((At=ln.find(e=>Ce.indexOf(e.key)!==-1))==null?void 0:At.name)??"Unknown OS",zt=Ce.indexOf("iphone")!==-1||st==="Android"&&Ce.indexOf("mobile")!==-1,cn=Ce.indexOf("ipad")!==-1||st==="Android"&&!zt,vt=zt?"Smart Phone":cn?"Tablet Device":"PC",je={canDragElement:vt==="PC",text:`${vt} ${st} ${on}`};class un{constructor(t){l(this,"onDuelUpdateEvent",new F);l(this,"requireUpdate",()=>{this.onDuelUpdateEvent.trigger()});l(this,"onWaitStartEvent",new F);l(this,"onWaitEndEvent",new F);l(this,"onDragStartEvent",new F);l(this,"onDragEndEvent",new F);l(this,"onAnimationStartEvent",new F);l(this,"onShowCardEntityEvent",new F);l(this,"duel");l(this,"modalController");l(this,"_message");l(this,"waitMode");l(this,"infoBoardState");l(this,"infoBoardCell");l(this,"getCell",(t,i)=>this.duel.field.cells[t][i]);l(this,"showCardInfo",(t,i)=>{this.onShowCardEntityEvent.trigger({card:t,mode:i})});l(this,"dispose",()=>{this.onDragStartEvent.clear(),this.onDragEndEvent.clear(),this.onDuelUpdateEvent.clear(),this.onWaitStartEvent.clear(),this.onWaitEndEvent.clear()});l(this,"waitFieldAction",async t=>{if(this.duel.getTurnPlayer().duelistType==="NPC"){const r=this.duel.getTurnPlayer().selectActionForNPC(t,[]);return r?{actionInfo:r}:{phaseChange:this.duel.nextPhaseList[0]}}const i=await this._waitDuelistAction(this.duel.getTurnPlayer(),t,"Free","",void 0,void 0,!1);if(!i.actionInfo)return{...i,actionInfo:void 0};const a={...i.actionInfo},n=t.find(r=>{var s;return((s=i.actionInfo)==null?void 0:s.originSeq)===r.originSeq});if(!n)throw new S("想定されない状態",t,i);return{...i,actionInfo:{dest:a.dest,battlePosition:a.battlePosition,action:n.action,originSeq:n.originSeq}}});l(this,"waitQuickEffect",async(t,i,a,n,r)=>{if(i.length===0)return;if(t.duelistType==="NPC")return t.selectActionForNPC(i,a);const s=[this.modalController.actionSelector.show({title:n,activator:t,dummyActionInfos:i,cancelable:r}),this._waitDuelistAction(t,i,"Modal",this.message,void 0,void 0,!1).then(u=>u.actionInfo)],o=await Promise.any(s);if(!o)return;this.infoBoardState="Default";const c=i.find(u=>o.originSeq===u.originSeq);if(!c)throw new S("想定されない状態",o);return{...c,dest:o.dest}});l(this,"waitSubAction",async(t,i,a,n=!1)=>{if(t.duelistType==="NPC")throw Error("Not implemented");const r=await this._waitDuelistAction(t,i,"Modal",a,void 0,void 0,n);if(r&&r.actionInfo)return r.actionInfo});l(this,"waitSelectEntities",async(t,i,a)=>{if(!i.selectables.length)return;if(i.qty&&i.selectables.length===i.qty)return[...i.selectables];if(t.duelistType==="NPC")return St(i);let n;i.selectables.some(s=>s.entityType==="Duelist")&&(n={...i,selectables:i.selectables.filter(s=>s.entityType==="Duelist").map(s=>s.fieldCell),qty:1,validator:s=>s.length===1});const r=await this._waitDuelistAction(t,[],"Modal",a,i,n,i.cancelable);return(r.selectedEntities||r.selectedCells)&&[...r.selectedEntities??[],...(r.selectedCells??[]).flatMap(s=>s.entities).filter(s=>s.entityType==="Duelist")]});l(this,"waitYesOrNo",async(t,i)=>{const a=await this.waitSelectText(t,[{seq:0,text:"Yes"},{seq:1,text:"No"}],i,!1);return(a==null?void 0:a.seq)===0});l(this,"waitSelectText",async(t,i,a,n=!1)=>{if(t.duelistType==="NPC")return i.randomPick();const r=await this.modalController.textSelector.show({title:a,choises:i,cancelable:n});if(r===void 0){if(!n)throw new D(t,i,a,n);return}return i.find(s=>s.seq===r)});l(this,"waitAnimation",async t=>{var i;return this._message="",this.waitMode="Animation",window.getSelection&&((i=window.getSelection())==null||i.removeAllRanges()),this.onDuelUpdateEvent.trigger(),new Promise(a=>this.onAnimationStartEvent.trigger({...t,resolve:a}))});l(this,"waitTokenAnimation",async()=>{this.requireUpdate(),await Me(450)});l(this,"setDraggingActions",t=>{this.onDragStartEvent.trigger(t),this.requireUpdate()});l(this,"removeDraggingActions",()=>{this.onDragEndEvent.trigger()});l(this,"waitSelectAction",async(t,i,a,n)=>{var c;const r=i.map(u=>ie.createDummyAction(u.entity,u.title,[],void 0,u.origin)),s=await this._waitDammyAction(t,r,a,n);if(!s)return;const o=(c=i.find(u=>u.origin.seq===s.originSeq))==null?void 0:c.origin;if(!o)throw new S("想定されない状態",i,s);return o});l(this,"waitSelectSummonDestination",async(t,i,a,n,r)=>{const s=a.length>1&&je.canDragElement?"カードを召喚先へドラッグ。":"表示形式を選択。";if(!a.length&&!n.length){if(r)return;throw new S("想定されない状態",t,i,a,n,r)}let o=[...n];for(;;){const c={dest:a.randomPick(),battlePosition:o[0]};if(o.length===1&&!je.canDragElement){const p=await this.waitSelectCell(t,a,r,"召喚先を選択。");return p?{...c,dest:p}:void 0}const u=o.map(p=>ie.createDummyAction(i,p,a,p)),d=await this._waitDammyAction(t,u,s,r);if(!d)return;if(d.battlePosition&&(o=[d.battlePosition]),!(a.length>1&&!d.dest))return c.dest=d.dest??c.dest,c.battlePosition=d.battlePosition??c.battlePosition,c}});l(this,"waitSelectDestination",async(t,i,a,n,r,s=!1)=>{if(!a.length)return;if(a.length===1)return a[0];if(!je.canDragElement)return await this.waitSelectCell(t,a,s,n);let o=a.randomPick();const c=[ie.createDummyAction(i,r,a,void 0)],u=await this._waitDammyAction(t,c,n,s);if(u)return o=u.dest??o,o});l(this,"_waitDammyAction",async(t,i,a,n=!1)=>{if(!i.length)return;const r=i.randomPick();let s={...r,dest:r.dest??r.dests.randomPick()};if(t.duelistType!=="NPC"){const o=[this.modalController.actionSelector.show({title:a,activator:t,dummyActionInfos:i,cancelable:n}),this.duel.view.waitSubAction(t,i,a,n)],c=await Promise.any(o);if(!c&&!n)throw new D(c,o);if(!c)return;s=c??s}return s});l(this,"waitSelectCell",async(t,i,a,n)=>i.length?t.duelistType==="NPC"?i.randomPick():(await this.waitSelectCells(t,{selectables:i,qty:1,validator:s=>s.length===1,cancelable:a},n)??[])[0]:void 0);l(this,"waitSelectCells",async(t,i,a)=>{if(!i.selectables.length)return;if(t.duelistType==="NPC")return St(i);const n=await this._waitDuelistAction(t,[],"Modal",a,void 0,i,i.cancelable);if((!n||!n.selectedCells)&&!i.cancelable)throw new D(t,i,a);return n.selectedCells});l(this,"_waitDuelistAction",async(t,i,a,n,r,s,o=!1)=>{for(this.waitMode=a,this._message=n;this.onDuelUpdateEvent.length<38;)console.log(this.onDuelUpdateEvent.length),await Me(1);this.onDuelUpdateEvent.trigger();const c=$t(),u={resolve:c.resolve,activator:t,dummyActionInfos:i,chainBlockInfos:t.duel.chainBlockInfos,entitiesChoices:r,cellsChoices:s};console.info("wait start",u),this.onWaitStartEvent.trigger(u);const d=await c.promise;if(console.info("response",d),this.modalController.terminateAll(),this.waitMode="None",this.onWaitEndEvent.trigger(),d.surrender)throw new B(t.getOpponentPlayer(),`${t.profile.name}がサレンダーした。`);if(!o&&d.cancel)throw new S("キャンセル不可のアクションがキャンセルされた。",d,i,a,r,s);return this.infoBoardState="Default",d});this.duel=t,this._message="",this.waitMode="None",this.infoBoardState="Default",this.infoBoardCell=t.duelists.Below.getExtraDeck(),this.modalController=new nn(this)}get onDuelUpdate(){return this.onDuelUpdateEvent.expose()}get onWaitStart(){return this.onWaitStartEvent.expose()}get onWaitEnd(){return this.onWaitEndEvent.expose()}get onDragStart(){return this.onDragStartEvent.expose()}get onDragEnd(){return this.onDragEndEvent.expose()}get onAnimation(){return this.onAnimationStartEvent.expose()}get onShowCardEntity(){return this.onShowCardEntityEvent.expose()}get message(){var t;return(this._message||((t=this.duel.log.lastRecord)==null?void 0:t.text))??""}}const Ye=["turn","phaseSeq","stepSeq","stageSeq","chainSeq","chainBlockSeq","procSeq"];[...Ye];const Re=class Re{constructor(){l(this,"onClockChangeEvents",{turn:new F,phaseSeq:new F,stepSeq:new F,stageSeq:new F,chainSeq:new F,chainBlockSeq:new F,procSeq:new F});l(this,"_turn",0);l(this,"_phaseSeq",0);l(this,"_stepSeq",0);l(this,"_stageSeq",0);l(this,"_chainSeq",0);l(this,"_chainBlockSeq",0);l(this,"_procSeq",0);l(this,"_totalProcSeq",0);l(this,"_periodKey");l(this,"_previousStartPoints",{turn:0,phaseSeq:0,stepSeq:0,stageSeq:0,chainSeq:0,chainBlockSeq:0,procSeq:0});l(this,"_currentStartPoints",{turn:0,phaseSeq:0,stepSeq:0,stageSeq:0,chainSeq:0,chainBlockSeq:0,procSeq:0});l(this,"setPhase",(t,i)=>{const a=Object.values(ee).filter(n=>n.phase===i).find(n=>(n.step??"start")==="start");if(!a)throw new S("想定されない状態",this.period,i,ee);i==="draw"?(this.turn>0&&t.log.info("ターン終了。",t.getTurnPlayer()),this._turn++,this._phaseSeq=0):(t.log.info(`フェイズ移行（${this.period.name}→${a.name}）`,t.getTurnPlayer()),this._phaseSeq++),this._stepSeq=0,this._stageSeq=0,this.periodKey=a.key});l(this,"setStep",(t,i)=>{const a=this.period.phase,n=Object.values(ee).filter(r=>r.phase===a).find(r=>(r.step??"")===i);if(!n)throw new S("想定されない状態",this.period,i,ee);this.period.name!==n.name&&(t.log.info(`ステップ移行（${this.period.name}→${n.name}）`,t.getTurnPlayer()),this._stepSeq++,this._stageSeq=0,this.periodKey=n.key)});l(this,"setStage",(t,i)=>{const a=this.period,n=Object.values(ee).filter(r=>r.phase===a.phase).filter(r=>r.step===a.step).find(r=>(r.stage??"")===i);if(!n)throw new S("想定されない状態",this.period,i,ee);t.log.info(`タイミング移行（${this.period.name}→${n.name}）`,t.getTurnPlayer()),this._stageSeq++,this.periodKey=n.key});l(this,"incrementChainSeq",()=>{this._chainSeq++,this._chainBlockSeq=0,this._procSeq=0,this.incrementTotalProcSeq()});l(this,"incrementChainBlockSeq",()=>{this._chainBlockSeq++,this._procSeq=0,this.incrementTotalProcSeq()});l(this,"incrementProcSeq",()=>{this._procSeq++,this.incrementTotalProcSeq()});l(this,"incrementTotalProcSeq",()=>{this._totalProcSeq++;let t=!0;Ye.toReversed().forEach(i=>{t&&(this._previousStartPoints[i]=this.currentStartPoints[i],this._currentStartPoints[i]=this.totalProcSeq),t=t&&this[i]===0}),Ye.toReversed().filter(i=>this._currentStartPoints[i]===this.totalProcSeq).filter(i=>i!=="procSeq").forEach(i=>this.onClockChangeEvents[i].trigger(this)),this.onClockChangeEvents.procSeq.trigger(this)});l(this,"toFullString",()=>`${this.totalProcSeq}(t${this.turn}-phs${this.phaseSeq}-stp${this.stepSeq}-stg${this.stepSeq}-c${this.chainSeq}-cb${this.chainBlockSeq}-prc${this.procSeq})`);l(this,"getClone",()=>({turn:this.turn,phaseSeq:this.phaseSeq,stepSeq:this.stepSeq,stageSeq:this.stageSeq,chainSeq:this.chainSeq,chainBlockSeq:this.chainBlockSeq,procSeq:this.procSeq,totalProcSeq:this.totalProcSeq,period:this.period}));l(this,"isSameTurn",t=>this.turn===t.turn);l(this,"isSameChain",t=>Re.isSameChain(this,t));l(this,"isPreviousChain",t=>this.turn===t.turn&&this.phaseSeq===t.phaseSeq&&this.stepSeq===t.stepSeq&&this.stageSeq===t.stageSeq&&this.chainSeq===t.chainSeq+1);l(this,"isPreviousStage",t=>this.turn===t.turn&&this.phaseSeq===t.phaseSeq&&this.stepSeq===t.stepSeq&&this.stageSeq===t.stageSeq+1);l(this,"isPreviousTurn",t=>this.turn===t.turn+1);l(this,"isPreviousProc",t=>this.totalProcSeq===t.totalProcSeq+1);this._periodKey="end"}get onTurnChange(){return this.onClockChangeEvents.turn.expose()}get onStageChange(){return this.onClockChangeEvents.stageSeq.expose()}get onProcSeqChange(){return this.onClockChangeEvents.procSeq.expose()}get previousStartPoints(){return this._previousStartPoints}get currentStartPoints(){return this._currentStartPoints}set periodKey(t){this._periodKey!==t&&(this._periodKey=t,this._chainSeq=0,this._chainBlockSeq=0,this._procSeq=0,this.incrementTotalProcSeq())}get periodKey(){return this._periodKey}get period(){return ee[this.periodKey]}get turn(){return this._turn}get phaseSeq(){return this._phaseSeq}get stepSeq(){return this._stepSeq}get stageSeq(){return this._stageSeq}get chainSeq(){return this._chainSeq}get chainBlockSeq(){return this._chainBlockSeq}get procSeq(){return this._procSeq}get totalProcSeq(){return this._totalProcSeq}get isFirstChain(){return this.chainSeq===0}};l(Re,"isSameChain",(t,i)=>t.turn===i.turn&&t.phaseSeq===i.phaseSeq&&t.stepSeq===i.stepSeq&&t.stageSeq===i.stageSeq&&t.chainSeq===i.chainSeq);let Ie=Re;class dn{constructor(t){l(this,"onInsertEvent",new F);l(this,"nextSeq");l(this,"records",[]);l(this,"duel");l(this,"push",t=>{const i={seq:this.nextSeq++,clock:this.duel.clock.getClone(),chainBlockInfo:t};this.records.push(i),this.onInsertEvent.trigger(i)});this.nextSeq=0,this.duel=t}get onInsert(){return this.onInsertEvent.expose()}}const pn=["PlayFirst","DrawFirst","Random"],Ps={PlayFirst:"先攻",DrawFirst:"後攻",Random:"ランダム"};class B extends Error{constructor(i,a){super(i?`デュエルが終了した。勝者：${i.profile.name}`:"デュエルが終了した。ドロー。");l(this,"winner");l(this,"message");this.winner=i,this.message=a}}class S extends Error{constructor(i,...a){super(i);l(this,"message");l(this,"items");this.message=i,this.items=a}}class D extends S{constructor(...t){super("キャンセル不可のアクションがキャンセルされた。",...t)}}class xs{constructor(t,i,a,n=[],r,s,o,c=[],u="Random"){l(this,"onDuelEndEvent",new F);l(this,"view");l(this,"log");l(this,"chainBlockLog");l(this,"clock");l(this,"nextPhaseList");l(this,"field");l(this,"attackingMonster");l(this,"targetForAttack");l(this,"_chainBlockInfos");l(this,"duelists");l(this,"priorityHolder");l(this,"isEnded");l(this,"winner");l(this,"coin",!1);l(this,"startMode");l(this,"distributeOperators",t=>{console.info(`[totalProcSeq]:${t.totalProcSeq}`);let i=0;for(;;){if(i++,i>10)throw new S("無限ループ発生");if(this.field.procFilterPool.distributeAll(this)&&this.field.statusOperatorPool.distributeAll(this)&&this.field.numericStateOperatorPool.distributeAll(this)&&this.field.summonFilterPool.distributeAll(this)&&this.field.damageFilterPool.distributeAll(this))return}});l(this,"getTurnPlayer",()=>this.clock.turn%2===0?this.secondPlayer:this.firstPlayer);l(this,"getNonTurnPlayer",()=>this.clock.turn%2===0?this.firstPlayer:this.secondPlayer);l(this,"main",async()=>{console.info("main start!"),this.coin=this.startMode==="PlayFirst"?!0:this.startMode==="DrawFirst"?!1:Math.random()>.5,this.priorityHolder=this.firstPlayer;const t=as(...Object.values(this.duelists).flatMap(i=>i.deckInfo.cardNames).getDistinct()).reduce((i,a)=>(i[a.name]=a,{...i}),{});for(const i of Object.values(this.duelists))i.pushDeck(t),i.getDeckCell().shuffle(),i.initHand.length&&i.initHand.forEach(a=>{const n=i.getDeckCell().cardEntities.find(r=>r.origin.name===a);if(!n){this.log.info(`初手操作により${a}を手札に加えようとしたが、デッキに存在しない。`);return}n.addToHand(["System"],void 0,void 0),this.log.info(`初手操作により${n.toString()}を手札に加えた`,i)}),await i.draw(5-i.getHandCell().cardEntities.length,void 0,void 0);this.log.info(`【デュエル開始】${this.firstPlayer.profile.name} V.S. ${this.secondPlayer.profile.name}`),this.log.info(`先攻：${this.firstPlayer.profile.name} 後攻：${this.secondPlayer.profile.name}`),this.moveNextPhase("draw");try{for(const i of Object.values(this.duelists))for(const a of this.getEnableActions(i,["Exodia"],["Normal"],[]))await a.action.directExecute(i,void 0,!1);for(;!this.isEnded&&(this.clock.period.phase==="draw"?await this.procDrawPhase():this.phase==="standby"?await this.procStanbyPhase():this.phase==="main1"?await this.procMainPhase():this.phase==="battle1"?await this.procBattlePhase():this.phase==="battle2"?await this.procBattlePhase():this.phase==="main2"?await this.procMainPhase():this.phase==="end"&&await this.procEndPhase(),!(this.clock.turn>1e3)););}catch(i){i instanceof B?(this.chainBlockLog.records.forEach(a=>{a.chainBlockInfo.state==="ready"?a.chainBlockInfo.state="failed":a.chainBlockInfo.state==="processing"&&(a.chainBlockInfo.state="done")}),this.clock.incrementChainSeq(),console.info(i),this.isEnded=!0,this.winner=i.winner,this.log.info(i.winner?`デュエル終了。勝者${i.winner.profile.name}。${i.message}`:`デュエル終了。引き分け。${i.message}`),this.onDuelEndEvent.trigger()):i instanceof Error&&this.log.error(i)}finally{this.log.dispose()}});l(this,"moveNextPhase",t=>{this.clock.setPhase(this,t),this.phase==="main2"||this.clock.turn===1?this.nextPhaseList=["end"]:this.phase==="battle1"||this.phase==="battle2"?this.nextPhaseList=["main2"]:this.phase==="main1"?this.nextPhaseList=["battle1","end"]:this.nextPhaseList=[]});l(this,"declareAttack",(t,i,a=!1)=>{var s;this.attackingMonster=t,this.targetForAttack=i;let n=" ("+((s=i.battlePosition==="Attack"?i.atk:i.def)==null?void 0:s.toString())+")";i.face==="FaceDown"&&(n=" (????)"),i.entityType==="Duelist"&&(n="");const r=a?"攻撃対象再選択":"攻撃宣言";a||t.info.attackDeclareCount++,this.log.info(`${r}:${t.toString()} (${t.atk})⇒ ${i.toString()}${n}`,t.controller)});l(this,"procDrawPhase",async()=>{if(Object.values(this.duelists).forEach(t=>t.initForDrawPhase()),this.log.info("ドローフェイズ開始。",this.getTurnPlayer()),this.clock.turn===1)this.log.info("先攻プレイヤーはドローできない。",this.getTurnPlayer());else{await this.getTurnPlayer().draw(1,void 0,void 0);for(const t of this.getEnableActions(this.getTurnPlayer(),["Exodia"],["Normal"],[]))await t.action.directExecute(this.getTurnPlayer(),void 0,!1)}this.field.getCardsOnFieldStrictly().forEach(t=>t.initForTurn()),await this.procSpellSpeed1(),this.moveNextPhase("standby")});l(this,"procStanbyPhase",async()=>{await this.procSpellSpeed1(),this.moveNextPhase("main1")});l(this,"procMainPhase",async()=>{for(;;){this.priorityHolder=this.getTurnPlayer();const t=await this.view.waitFieldAction(this.getEnableActions(this.priorityHolder,["NormalSummon","SpellTrapSet","SpecialSummon","FlipSummon","ChangeBattlePosition","IgnitionEffect","QuickEffect","CardActivation","LingeringEffect"],["Normal","Quick","Counter"],[]));if(t.actionInfo){if(await this.procChain({activator:this.priorityHolder,actionInfo:t.actionInfo},void 0)==="cancel")continue;await this.procFreeChain();continue}const i=t.phaseChange;if(i){this.priorityHolder=this.getNonTurnPlayer();let a="done";for(;;){const n=await this.view.waitQuickEffect(this.priorityHolder,this.getEnableActions(this.priorityHolder,["QuickEffect","CardActivation"],["Quick","Counter"],[]),[],"相手がフェイズを終了しようとしている。",!0);if(!n){this.moveNextPhase(i);return}if(a=await this.procChain({activator:this.priorityHolder,actionInfo:n},void 0),a==="done")break}if(a==="done"){await this.procFreeChain();continue}}}});l(this,"procBattlePhase",async()=>{await this.procBattlePhaseStartStep()&&await this.procBattlePhaseBattleStep(),await this.procBattlePhaseEndStep()});l(this,"procBattlePhaseStartStep",async()=>(this.clock.setStep(this,"start"),this.priorityHolder=this.getTurnPlayer(),this.attackingMonster=void 0,this.targetForAttack=void 0,await this.procSpellSpeed1()));l(this,"procBattlePhaseBattleStep",async()=>{for(;;){this.clock.setStep(this,"battle"),this.priorityHolder=this.getTurnPlayer();const t=await this.view.waitFieldAction(this.getEnableActions(this.priorityHolder,["DeclareAttack"],["Normal"],[]));if(t.phaseChange)break;if(t.actionInfo){if(await this.procChain({activator:this.priorityHolder,actionInfo:t.actionInfo},void 0)==="cancel")continue;for(;this.attackingMonster&&this.targetForAttack;){const a=this.clock.totalProcSeq,n=this.getNonTurnPlayer().getMonstersOnField(),r=await this.procChain(void 0,void 0);if(!this.attackingMonster)throw new S("想定されない状態");if(!this.canContinueBattle())break;const s=this.attackingMonster.getAttackTargets();if(n.some(o=>!o.isOnFieldAsMonsterStrictly)||this.getNonTurnPlayer().getMonstersOnField().flatMap(o=>o.moveLog.records).filter(o=>o.movedAt.totalProcSeq>a).some(o=>!o.cell.isMonsterZoneLikeCell)?(this.log.info("モンスターの数が増減したためバトルステップの巻き戻しが発生。"),this.targetForAttack=void 0):this.targetForAttack.entityType==="Duelist"&&s.every(o=>o!==this.targetForAttack)&&!this.attackingMonster.status.canDirectAttack&&(this.log.info(`${this.attackingMonster.toString()}が直接攻撃能力を喪失したため、バトルステップの巻き戻しが発生。`),this.targetForAttack=void 0),!this.targetForAttack){if(!s.length){this.log.info("攻撃可能な対象が存在しないため、攻撃対象選択を選択肢しなおせない。");break}if(this.getTurnPlayer().duelistType==="Player"&&!await this.view.waitYesOrNo(this.getTurnPlayer(),"攻撃対象選択を選択し直す？")){this.getTurnPlayer().writeInfoLog(`${this.attackingMonster.toString()}の攻撃宣言をキャンセル。`);break}if(this.targetForAttack=await this.getTurnPlayer().waitSelectEntity(s,"攻撃対象を選択。",!0),!this.targetForAttack){this.getTurnPlayer().writeInfoLog(`${this.attackingMonster.toString()}の攻撃宣言をキャンセル。`);break}this.declareAttack(this.attackingMonster,this.targetForAttack,!0);continue}if(r==="pass")break}this.attackingMonster&&this.targetForAttack&&await this.procBattlePhaseDamageStep()}}});l(this,"procBattlePhaseDamageStep",async()=>{if(!this.attackingMonster||!this.targetForAttack)throw new S("想定されない状態",this.attackingMonster,this.targetForAttack);if(this.targetForAttack.entityType!=="Duelist"&&!this.targetForAttack.isOnFieldAsMonsterStrictly)throw new S("想定されない状態",this.attackingMonster,this.targetForAttack);for(const t of[this.procBattlePhaseDamageStep1,this.procBattlePhaseDamageStep2,this.procBattlePhaseDamageStep3,this.procBattlePhaseDamageStep4,this.procBattlePhaseDamageStep5])if(!await t())return});l(this,"procBattlePhaseDamageStep1",async()=>(this.clock.setStage(this,"start"),await this.procFreeChain(this.canContinueBattle)));l(this,"procBattlePhaseDamageStep2",async()=>{if(!this.attackingMonster)throw new S("想定されない状態",this.attackingMonster);if(!this.targetForAttack)throw new S("想定されない状態",this.targetForAttack);const t=this.attackingMonster,i=this.targetForAttack;return this.clock.setStage(this,"beforeDmgCalc"),i.battlePosition==="Set"&&i.setBattlePosition("Defense",["Flip","FlipByBattle"],t,t.controller),await this.procFreeChain(this.canContinueBattle)});l(this,"procBattlePhaseDamageStep3",async()=>{if(!this.attackingMonster)throw new S("想定されない状態",this.attackingMonster);if(!this.targetForAttack)throw new S("想定されない状態",this.targetForAttack);const t=this.attackingMonster,i=this.targetForAttack;if(t.atk===void 0)throw new S("想定されない状態",this.attackingMonster,this.targetForAttack);if(this.clock.setStage(this,"dmgCalc"),!await this.procFreeChain(this.canContinueBattle))return!1;const a=t.atk,n=(i.battlePosition==="Attack"?i.atk:i.def)??0,r=this.getTurnPlayer(),s=t.actions.find(u=>u.playType==="Battle");if(!s)throw new S(`${t.toString()}に戦闘アクションが定義されていない。`);const o=await s.prepare(r,i.fieldCell,void 0,[],!1,!1);if(!o)throw new D("戦闘アクションがキャンセルされた。");this.chainBlockLog.push(o),i.entityType==="Duelist"?(r.writeInfoLog(`ダメージ計算：${t.toString()} (${a}) ⇒ ${i.toString()}`),t.controller.getOpponentPlayer().battleDamage(a-n,t,i,o)):(r.writeInfoLog(`ダメージ計算：${t.toString()} (${a}) ⇒ ${i.toString()} (${n})`),a>0&&a>n?i.battlePosition==="Attack"?t.controller.getOpponentPlayer().battleDamage(a-n,t,i,o):t.status.piercingTo.getDistinct().forEach(u=>u.battleDamage(a-n,t,i,o)):a<n&&t.controller.battleDamage(n-a,i,t,o),a>0&&(a>n||a===n&&i.battlePosition==="Attack")&&await m.tryMarkForDestory([i],o),i.battlePosition==="Attack"&&a<=n&&await m.tryMarkForDestory([t],o)),o.state=a>n?"done":"failed",t.info.battleLog.push({enemy:i,timestamp:this.clock.getClone()}),i.info.battleLog.push({enemy:t,timestamp:this.clock.getClone()});const c=Object.values(this.duelists).filter(u=>u.lp<=0);if(c.length)throw c.length===1?new B(c[0].getOpponentPlayer(),"戦闘ダメージによって、相手のライフポイントをゼロにした。"):new B(void 0,"戦闘ダメージによって、お互いのライフポイントがゼロになった。");return!0});l(this,"procBattlePhaseDamageStep4",async()=>(this.clock.setStage(this,"afterDmgCalc"),!!await this.procFreeChain()));l(this,"procBattlePhaseDamageStep5",async()=>(this.clock.setStage(this,"end"),await m.waitCorpseDisposal(this),this.clock.incrementChainSeq(),!!await this.procFreeChain()));l(this,"procBattlePhaseEndStep",async()=>{this.clock.setStep(this,"end"),this.priorityHolder=this.getTurnPlayer(),await this.procSpellSpeed1(),this.moveNextPhase("main2")});l(this,"procEndPhase",async()=>{for(await this.procSpellSpeed1();;){const i=this.getTurnPlayer().getHandCell().cardEntities.length;if(i<7)break;await this.getTurnPlayer().discard(i-6,"Rule")}this.moveNextPhase("draw")});l(this,"canContinueBattle",()=>this.attackingMonster?(this.attackingMonster.isOnFieldStrictly?this.attackingMonster.face==="FaceDown"?(this.log.info(`${this.attackingMonster.toString()}が裏側守備表示になったため、戦闘が中断された。`),this.attackingMonster=void 0):this.attackingMonster.orientation==="Horizontal"&&(this.log.info(`${this.attackingMonster.toString()}が守備表示になったため、戦闘が中断された。`),this.attackingMonster=void 0):(this.log.info(`${this.attackingMonster.toString()}がフィールドに存在しなくなっため、戦闘が中断された。`),this.attackingMonster=void 0),!!this.attackingMonster):!1);l(this,"procSpellSpeed1",async()=>{this.priorityHolder=this.getTurnPlayer();let t=0;const i={Above:Number.MAX_VALUE,Below:Number.MAX_VALUE};for(;;){const a=this.getEnableActions(this.priorityHolder,["IgnitionEffect","QuickEffect","CardActivation","LingeringEffect"],["Normal","Quick","Counter"],[]);if(i[this.priorityHolder.seat]=a.filter(o=>o.action.isMandatory).length,Object.values(i).every(o=>o===0)&&t>1)break;const n=a.find(o=>o.action.isMandatory);let r=n?{action:n.action,originSeq:n.action.seq}:void 0,s=!r;if(this.priorityHolder.isTurnPlayer?t===0&&(s=!0):i[this.getTurnPlayer().seat]&&(s=!0),a.length&&(a.length>1||!r)&&(this.priorityHolder.chainConfig.noticeFreeChain||a.some(o=>o.action.isNoticedForcibly))&&(r=await this.view.waitQuickEffect(this.priorityHolder,a,[],this.clock.period.name,s)),r){if(await this.procChain({activator:this.priorityHolder,actionInfo:r},void 0)==="cancel")continue;if(!await this.procFreeChain())return!1;this.priorityHolder=this.getTurnPlayer(),t=0;continue}this.priorityHolder=this.priorityHolder.getOpponentPlayer(),t++}return!0});l(this,"procFreeChain",async(t=()=>!0)=>{const i=this.clock.period.key;for(;await this.procChain(void 0,void 0)!=="pass";)if(this.clock.period.key!==i||!t())return!1;return!0});l(this,"procChain",async(t,i)=>{const a=this.chainBlockInfos.length===0;let n=t?[]:i??Object.values(this.duelists).flatMap(s=>this.getEnableActions(s,["TriggerEffect"],[this.chainBlockInfos.length?"Quick":"Normal"],this.chainBlockInfos).map(o=>({activator:s,actionInfo:o,targetChainBlock:this.chainBlockInfos.slice(-1)[0]}))),r;if(t)r={activator:t.activator,action:t.actionInfo.action,dest:t.actionInfo.dest,targetChainBlock:void 0},this.priorityHolder=r.activator;else if(n.length>0){const s=await this.selectTriggerEffect(n);s?(n=n.filter(o=>o!==s),r={...s,action:s.actionInfo.action},this.priorityHolder=r.activator):n=[]}if(!r){let s=0;for(;s<2;){this.priorityHolder=this.priorityHolder.getOpponentPlayer();const o=["Counter"];this.chainBlockInfos.every(d=>d.action.spellSpeed!=="Counter")&&o.push("Quick");let u=this.getEnableActions(this.priorityHolder,["QuickEffect","CardActivation"],o,this.chainBlockInfos).some(d=>d.action.isNoticedForcibly)||!!this.attackingMonster;if(u||(this.chainBlockInfos.length?u=this.priorityHolder.chainConfig.noticeSelfChain||this.chainBlockInfos.slice(-1)[0].activator!==this.priorityHolder:u=this.priorityHolder.chainConfig.noticeFreeChain),u){const d=this.chainBlockInfos.some(f=>f.action.isWithChainBlock)?"チェーンして効果を発動しますか？":"クイックエフェクト発動タイミング。効果を発動しますか？",p=await this.view.waitQuickEffect(this.priorityHolder,this.getEnableActions(this.priorityHolder,["QuickEffect","CardActivation"],o,this.chainBlockInfos),this.chainBlockInfos,d,!0);if(p){r={...p,activator:this.priorityHolder,targetChainBlock:this.chainBlockInfos.slice(-1)[0]};break}}s++}}if(console.info("selected action: ",r),r){const s=r.activator,o=await r.action.prepare(s,r.dest,r.targetChainBlock,this.chainBlockInfos,a,!1);if(!o)return"cancel";if(this.chainBlockLog.push(o),this._chainBlockInfos.push(o),this.clock.incrementProcSeq(),this.clock.incrementChainBlockSeq(),n=n.filter(c=>c.actionInfo.action.seq!==(r==null?void 0:r.action.seq)).filter(c=>c.actionInfo.action.validateCount(c.activator,this.chainBlockInfos)),o.action.isChainable&&await this.procChain(void 0,n.length?n:void 0),await o.action.execute(o,this.chainBlockInfos),o.state==="done"||o.state==="failed")for(const c of[this.getTurnPlayer(),this.getNonTurnPlayer()]){for(const u of this.getEnableActions(c,["Exodia"],["Normal"],[o]))await u.action.directExecute(c,o,!1);for(const u of this.getEnableActions(c,["AfterChainBlock"],["Normal"],[o])){await u.action.directExecute(c,o,!1);for(const d of this.getEnableActions(c,["Exodia"],["Normal"],[o]))await d.action.directExecute(c,o,!1)}}a?(await m.sendManyToGraveyardForTheSameReason(this._chainBlockInfos.filter(c=>c.action.playType==="CardActivation").filter(c=>!c.action.isLikeContinuousSpell).map(c=>c.action.entity).filter(c=>c.isOnFieldStrictly).filter(c=>c.face==="FaceUp"),["Rule"],void 0,void 0),this._chainBlockInfos.reset(),o.nextActionInfo&&await this.procChain({activator:o.activator,actionInfo:o.nextActionInfo},void 0),this.clock.incrementChainSeq()):(o.nextActionInfo&&await o.nextActionInfo.action.directExecute(o.activator,void 0,!1),this.clock.incrementChainBlockSeq())}return r?"done":"pass"});l(this,"selectTriggerEffect",async t=>{if(t.length>0)for(const i of[!0,!1])for(const a of[this.getTurnPlayer(),this.getNonTurnPlayer()]){const n=t.filter(s=>s.actionInfo.action.isMandatory===i&&s.activator===a);if(n.length===0)continue;if(n.length===1&&i)return n[0];const r=await this.view.waitQuickEffect(a,n.map(s=>s.actionInfo),this.chainBlockInfos,"トリガーエフェクトを選択。",!i);if(r)return n.find(s=>s.actionInfo.action===r.action)}});l(this,"executeSystemPeriodActions",()=>{Object.values(this.duelists).forEach(t=>this.getEnableActions(t,["SystemPeriodAction"],["Normal"],[]))});l(this,"getEnableActions",(t,i,a,n)=>{var s;const r=((s=n.slice(-1)[0])==null?void 0:s.nextChainBlockFilter)??(()=>!0);return[...this.field.getAllCardEntities(),t.entity].flatMap(o=>o.actions).filter(o=>o.canExecute(t)).filter(o=>a.includes(o.spellSpeed)).filter(o=>i.includes(o.playType)).filter(o=>r(t,o)).map(o=>o.validate(t,n)).filter(o=>o!==void 0)});this.clock=new Ie,this.nextPhaseList=[],this.isEnded=!1,this.startMode=u,this.duelists={Below:new Fe(this,"Below",t,i,a,n),Above:new Fe(this,"Above",r,s,o,c)},this.priorityHolder=this.firstPlayer,this._chainBlockInfos=[],this.field=new tn(this),this.clock.onProcSeqChange.append(this.distributeOperators),this.clock.onStageChange.append(this.executeSystemPeriodActions),this.view=new un(this),this.log=new an(this),this.chainBlockLog=new dn(this)}get onDuelEnd(){return this.onDuelEndEvent.expose()}get phase(){return this.clock.period.phase}get step(){return this.clock.period.step}get stage(){return this.clock.period.stage}get chainBlockInfos(){return this._chainBlockInfos}get firstPlayer(){return this.coin?this.duelists.Below:this.duelists.Above}get secondPlayer(){return this.coin?this.duelists.Above:this.duelists.Below}}const G=class G{constructor(t){l(this,"id");l(this,"name");l(this,"description");l(this,"chainConfig");l(this,"previousGameMode");l(this,"previousNpcId");l(this,"previousNpcDeckId");l(this,"previousStartMode");l(this,"npcLvl",Number.MAX_VALUE);l(this,"npcType","None");l(this,"save",async t=>{const i={id:this.id,name:this.name,description:this.description,chainConfig:this.chainConfig??{noticeSelfChain:!1,noticeFreeChainPhase:!1,noticeFreeChainStep:!1,noticeAfterChainInMainPhase:!1},previousGameMode:this.previousGameMode??"Preset",previousNpcId:this.previousNpcId??Number.MIN_SAFE_INTEGER,previousStartMode:this.previousStartMode,previousNpcDeckId:this.previousNpcDeckId>-1?this.previousNpcDeckId:Number.MIN_SAFE_INTEGER,...t},a=await G.tblHeader.update(this.id,n=>({...n,...i}));return console.log(this.previousNpcDeckId,Number.MIN_SAFE_INTEGER,i,a),new G(a)});var i;this.id=t.id,this.name=t.name,this.description=t.description,this.chainConfig=t.chainConfig,this.previousGameMode=t.previousGameMode,this.previousNpcId=((i=Tt.find(a=>a.id===t.previousNpcId))==null?void 0:i.id)??xe(...Tt.map(a=>a.id)),this.previousStartMode=pn.includes(t.previousStartMode)?t.previousStartMode:"Random",this.previousNpcDeckId=t.previousNpcDeckId}};l(G,"tblHeader"),l(G,"getOrCreateNew",async t=>{G.tblHeader||(G.tblHeader=new fn(t));const i=await G.tblHeader.getAll();if(i.length){let n=i[0];return n.chainConfig||(n={...n,chainConfig:{noticeSelfChain:!1,noticeFreeChain:!1}}),new G(n)}const a=await G.tblHeader.insert({name:"あなた",description:"ここの文字列を何に使うかは未定。",chainConfig:{noticeSelfChain:!1,noticeFreeChain:!1},previousGameMode:"Preset",previousNpcId:0,previousNpcDeckId:Number.MIN_SAFE_INTEGER,previousStartMode:"Random"});return new G(a)});let Ct=G;class fn extends nt{constructor(i){super(i,"TblDuelistProfile");l(this,"_prepareInitialRecords",()=>[])}}let Ue=-1;const Tt=[{id:Ue--,name:"サンドバッグくん棒立ち",description:"攻撃宣言なし、強制効果以外の効果の発動なし。",npcLvl:0,npcType:"Normal"},{id:Ue--,name:"サンドバッグくん非暴力",description:"攻撃宣言なし。",npcLvl:100,npcType:"Normal"},{id:Ue--,name:"サンドバッグくん白帯",description:"とくに制限なし。",npcLvl:200,npcType:"Normal"},{id:Number.MIN_SAFE_INTEGER,name:"FTK or Die",description:"FTKに失敗すると敗北。",npcLvl:Number.MIN_SAFE_INTEGER,npcType:"FtkChallenge"}],Ms=["noticeSelfChain","noticeFreeChain"],Fs={noticeSelfChain:"セルフチェーン",noticeFreeChain:"フリーチェーン"},pe=class pe{constructor(t,i,a,n,r,s=[]){l(this,"duel");l(this,"seat");l(this,"profile");l(this,"deckInfo");l(this,"info");l(this,"infoOrigin");l(this,"status");l(this,"statusOrigin");l(this,"duelistType");l(this,"lifeLog");l(this,"actionBlackListForNPC");l(this,"_lp");l(this,"initHand");l(this,"chainConfig");l(this,"writeInfoLog",t=>{this.duel.log.info(t,this)});l(this,"initForDrawPhase",()=>{this.info={...this.infoOrigin}});l(this,"canDiscard",t=>(this.status.canDiscardAsCost&&console.log(t),!0));l(this,"canSendToGraveyard",t=>(console.log(t),!0));l(this,"canRelease",t=>(console.log(t),!0));l(this,"canTryBanish",(t,i,a)=>this.entity.procFilterBundle.filter([i],this,this.entity,a,[t]));l(this,"battleDamage",(t,i,a,n)=>{const r=Qa(t,n.activator,this,i,a,n.action);return this.damage(i,r)});l(this,"effectDamage",(t,i)=>pe.effectDamage([{to:this,point:t}],i));l(this,"_effectDamage",(t,i)=>this.damage(i.action.entity,Wa(t,i,this)));l(this,"damage",(t,i)=>{const a=[];if(i.point){const n=i.damageType==="Heal"?i.point:i.point*-1;a.push(this.setLp(this._lp+n,t,i.damageType))}return i.damageToOpponent1&&a.push(this.getOpponentPlayer().setLp(this._lp-i.damageToOpponent1,t,i.damageType)),i.damageToOpponent2&&a.push(this.getOpponentPlayer().setLp(this._lp-i.damageToOpponent2,t,i.damageType)),a});l(this,"lostLp",(t,i)=>this.setLp(this._lp-t,i,"Lost"));l(this,"payLp",(t,i)=>{const a=this.setLp(this._lp-t,i,"Pay");if(this.lp<=0)throw new B(this.getOpponentPlayer(),`${i.toString()}へのライフポイント支払いにより、${this.name}のライフポイントが0になった。`);return a});l(this,"heal",(t,i)=>this.setLp(this._lp+t,i,"Heal"));l(this,"setLp",(t,i,a)=>{const n={duelist:this,clock:this.duel.clock.getClone(),reason:a||"Set",beforeLp:this._lp,afterLp:t,entity:i};return this.lifeLog.push(n),this._lp=t,this.writeInfoLog(`ライフポイント変動：${n.afterLp-n.beforeLp}（${n.beforeLp} ⇒ ${n.afterLp}）`),n});l(this,"getOpponentPlayer",()=>this.duel.firstPlayer===this?this.duel.secondPlayer:this.duel.firstPlayer);l(this,"getCells",(...t)=>this.duel.field.getCells(...t).filter(i=>{var a;return i.owner===this||((a=i.cardEntities[0])==null?void 0:a.owner)===this}));l(this,"getHandCell",()=>this.getCells("Hand")[0]);l(this,"getDeckCell",()=>this.getCells("Deck")[0]);l(this,"getExtraDeck",()=>this.getCells("ExtraDeck")[0]);l(this,"getGraveyard",()=>this.getCells("Graveyard")[0]);l(this,"getFieldZone",()=>this.getCells("FieldSpellZone")[0]);l(this,"getBanished",()=>this.getCells("Banished")[0]);l(this,"getMonsterZones",()=>this.getCells("MonsterZone"));l(this,"getExtraMonsterZones",()=>this.getCells("ExtraMonsterZone"));l(this,"getSpellTrapZones",()=>this.getCells("SpellAndTrapZone"));l(this,"getXyzMaterialZone",()=>this.getCells("XyzMaterialZone")[0]);l(this,"getEmptyMonsterZones",()=>this.getMonsterZones().filter(t=>t.cardEntities.length===0));l(this,"getAvailableMonsterZones",()=>this.getMonsterZones().filter(t=>t.isAvailable));l(this,"getAvailableExtraMonsterZones",()=>this.getExtraMonsterZones().length===0?this.duel.field.getCells("ExtraMonsterZone").filter(t=>t.isAvailable):[]);l(this,"getAvailableSpellTrapZones",()=>this.getSpellTrapZones().filter(t=>t.isAvailable));l(this,"getMonstersOnField",()=>this.duel.field.getMonstersOnFieldStrictly().filter(t=>t.controller===this));l(this,"getSpellTrapsOnField",()=>this.duel.field.getSpellTrapsOnFieldStrictly().filter(t=>t.controller===this));l(this,"getPendingMonstersOnField",()=>this.duel.field.getPendingMonstersOnField().filter(t=>t.controller===this));l(this,"getPendulumScaleMonsters",()=>this.duel.field.getCardsOnFieldStrictly().filter(t=>t.isPendulumScale).filter(t=>t.controller===this));l(this,"getPendulumScales",()=>{const t=this.getPendulumScaleMonsters();if(t.length<2)return;const i=t.find(s=>s.fieldCell.column===(this.seat==="Below"?1:5)),a=t.find(s=>s.fieldCell.column===(this.seat==="Below"?5:1));if(!i||!a)throw new S("想定されない状態",t);const n=i.psR,r=a.psL;if(n===void 0||r===void 0)throw new S("想定されない状態",t);return n>r?{upperBound:n,lowerBound:r}:{upperBound:r,lowerBound:n}});l(this,"getEntiteisOnField",()=>this.duel.field.getCardsOnFieldStrictly().filter(t=>t.controller===this));l(this,"pushDeck",t=>{this.deckInfo.cardNames.map(i=>t[i]).filter(i=>i).forEach(i=>k.createCardEntity(this,i)),this.duel.log.info(`デッキをセット。メイン${this.getDeckCell().cardEntities.length}枚。エクストラ${this.getExtraDeck().cardEntities.length}枚。`,this)});l(this,"draw",async(t,i,a)=>{var s;if(t<1)return;const n=this.getDeckCell(),r=[];this.writeInfoLog(`デッキからカードを${t}枚ドロー。`);for(const o of Array(t)){if(!n.cardEntities.length)throw this.writeInfoLog(r.length>0?`デッキからカードを${t}枚ドローしようとしたが、${r.length}枚しかドローできなかった。${r}`:"デッキからカードをドローできなかった。"),this.duel.isEnded=!0,this.setLp(0),new B(this.getOpponentPlayer(),"対戦相手がデッキからカードをドローできなかった。");const c=n.cardEntities[0];await c.draw(i?["Effect"]:["Rule"],i,a),r.push(((s=c.origin)==null?void 0:s.name)||"!名称取得失敗!")}});l(this,"summon",async(t,i,a,n,r,s,o,c)=>(await this.summonMany(this,t,i,a,[{monster:n,posList:r,cells:s}],o,!1,1,d=>d.length===1,c)??[])[0]);l(this,"waitSelectEntities",(t,i,a,n,r=!1)=>this.duel.view.waitSelectEntities(this,{selectables:t,qty:i,validator:a,cancelable:r},n));l(this,"waitSelectEntity",async(t,i,a=!1)=>{const n=await this.waitSelectEntities(t,1,r=>r.length===1,i,a);return n?n[0]:void 0});l(this,"waitYesNo",t=>this.duel.view.waitYesOrNo(this,t));l(this,"waitSelectText",(t,i,a=!1)=>this.duel.view.waitSelectText(this,t,i,a));l(this,"discard",async(t,i,a=()=>!0,n,r,s,o=!1)=>{const c=this.getHandCell().cardEntities.filter(a);if(c.length<t)return[];let u=[];if(c.length===t)u=c;else if((s||this).duelistType==="NPC")u=c.randomPickMany(t);else{const d=await this.duel.view.waitSelectEntities(s||this,{selectables:c,qty:t,validator:p=>p.length===t,cancelable:o},`${t}枚カードを捨てる。`);if(!d)return;u=d}return this.writeInfoLog(`手札からカードを${u.length}枚捨てた。${u.map(d=>{var p;return(p=d.origin)==null?void 0:p.name})}。`),await m.discardManyForTheSameReason(u,["Discard",i],n,r),u});l(this,"getEnableSummonList",(t,i,a,n,r,s,o)=>{const c=this.duel.field.getCells("ExtraMonsterZone"),u=c.filter(p=>!s.map(f=>f.material).includes(p.cardEntities[0])).filter(p=>p.owner===this),d=[];return u.length&&d.push(...c.filter(p=>!u.includes(p)).filter(p=>p.isAvailable)),r.map(p=>({...p,summoner:this})).map(p=>{var f;return(i!=="LinkSummon"||!this.duel.field.canExtraLink(p.monster,s))&&(p.cells=p.cells.filter(h=>!d.includes(h))),(f=p.monster.status.monsterCategories)!=null&&f.includes("Link")&&(p.posList=p.posList.filter(h=>h==="Attack")),p}).map(p=>({...p,cells:p.cells.filter(f=>f.cardEntities.length===0||s.some(h=>h.material===f.cardEntities[0]))})).map(p=>{var f,h;if(p.monster.fieldCell.cellType==="ExtraDeck"){if((f=p.monster.status.monsterCategories)!=null&&f.includes("Link")||(h=p.monster.status.monsterCategories)!=null&&h.includes("Pendulum"))return{...p,cells:p.cells.filter(y=>y.cellType==="ExtraMonsterZone"||y.linkArrowSources.filter(_=>!s.map(g=>g.material).includes(_)).length)}}else return{...p,cells:p.cells.filter(y=>y.cellType!=="ExtraMonsterZone")};return p}).filter(p=>p.cells.length&&p.posList.length).map(p=>this.entity.summonFilterBundle.filter(t,i,a,n,p,s,o)).filter(p=>p.cells.length&&p.posList.length).map(p=>p.monster.summonFilterBundle.filter(t,i,a,n,p,s,o)).filter(p=>p.cells.length&&p.posList.length).map(p=>s.map(f=>f.material.summonFilterBundle).reduce((f,h)=>h.filter(t,i,a,n,f,s,o),p)).filter(p=>p.cells.length&&p.posList.length)});l(this,"prepareToSummonMany",async(t,i,a,n,r,s,o,c,u,d,p="特殊召喚するモンスターを選択。")=>{const f=this.getEnableSummonList(t,i,a,n,r,s,o);if(!f.length)return[];let h=f.map(_=>({..._,cells:[..._.cells],posList:[..._.posList]}));const y=[];for(;h.length&&y.length<(c??Number.MAX_SAFE_INTEGER);){const _=d&&!y.length||u(y.map(x=>x.monster));let g=h.randomPick();if(h.length>1){const x=await this.waitSelectEntity(h.map(O=>O.monster),p,_);if(!x)return y;g=h.find(O=>O.monster===x)??g}let P=[...g.posList].randomPick(),Z=[...g.cells].randomPick();if((g.cells.length||g.posList.length)&&this.duelistType!=="NPC"){const x=await this.duel.view.waitSelectSummonDestination(g.summoner,g.monster,g.cells,g.posList,_);if(!x)return y;Z=x.dest,P=x.battlePosition}y.push({summoner:this,monster:g.monster,pos:P,dest:Z});const A=Z.cellType==="ExtraMonsterZone";h.forEach(x=>{x.cells=x.cells.filter(O=>!y.map(oe=>oe.dest).includes(O)),A&&(x.cells=x.cells.filter(O=>O.cellType!=="ExtraMonsterZone"))}),h=h.filter(x=>x!==g).filter(x=>x.cells.length)}return y});l(this,"summonAll",(t,i,a,n,r,s,o,c,u)=>this.summonMany(t,i,a,n,r,s,o,r.length,d=>d.length===r.length,c,u));l(this,"summonOne",async(t,i,a,n,r,s,o,c,u)=>{const d=await this.summonMany(t,i,a,n,r,s,o,1,p=>p.length===1,c,u);if(d)return d[0]});l(this,"summonMany",(t,i,a,n,r,s,o,c,u,d,p)=>pe.summonMany(t,i,a,n,r.map(f=>({...f,summoner:this})),s,o,c,u,d,p));l(this,"selectAttackTargetForNPC",(t,i)=>{const a=t.atk??0,n=t.getAttackTargets();if(!n.length)return;const r=n.find(s=>s.entityType==="Duelist");return r&&(a>=xe(1600,this.getOpponentPlayer().lp)||t.info.battlePotisionChangeCount>0)?r:n.find(s=>s.battlePosition==="Attack"?a>=(s.atk??0):a<(s.battlePosition==="Set"?1e3:s.def??0)?!1:s.validateDestory("BattleDestroy",this,t,i))});l(this,"selectActionForNPC",(t,i)=>{if(!t.length)return;const a=t.filter(g=>g.action.isMandatory);if(a.length)return a.randomPick();let n=t.filter(g=>!this.actionBlackListForNPC.includes(g.action.playType));console.log(n);const r=n.filter(g=>!Number.isNaN(g.action.priorityForNPC)).shuffle().sort((g,P)=>g.action.priorityForNPC-P.action.priorityForNPC);if(r.length)return r[0];const s=n.filter(g=>g.action.playType==="TriggerEffect");if(s.length)return s.randomPick();if(this.duel.phase!=="main1"&&this.duel.phase!=="main2"){const g=n.filter(P=>P.action.playType==="IgnitionEffect");if(g.length)return g.randomPick()}const o=n.filter(g=>g.action.playType==="DeclareAttack").sort((g,P)=>(g.action.entity.atk??0)-(P.action.entity.atk??0));if(o.length)return o.find(g=>this.selectAttackTargetForNPC(g.action.entity,g.action));n=n.filter(g=>g.action.playType!=="DeclareAttack");const c=n.length?i.slice(-1)[0]:void 0,u=n.filter(g=>g.action.negatePreviousBlock);if(c&&c.activator!==this&&u)return u.randomPick();if(n=n.filter(g=>!g.action.negatePreviousBlock),!n.length)return;const d=Pe(...this.getOpponentPlayer().getMonstersOnField().filter(g=>g.battlePosition==="Attack").map(g=>g.atk??0),1600),p=xe(...this.getOpponentPlayer().getMonstersOnField().map(g=>g.battlePosition==="Set"?1500:(g.battlePosition==="Attack"?g.atk:g.def)??0),1500),f=this.getMonstersOnField(),h=Pe(...f.filter(g=>g.battlePosition==="Attack").map(g=>g.atk??0),0);let y=n.filter(g=>g.action.playType!=="ChangeBattlePosition").filter(g=>g.action.entity.battlePosition!=="Attack").filter(g=>(g.action.entity.atk??0)>=d||(g.action.entity.atk??0)>p&&(g.action.entity.atk??0)>2300);if(y.length)return y.randomPick();n=n.filter(g=>g.action.playType!=="ChangeBattlePosition").filter(g=>g.action.playType!=="SpellTrapSet").filter(g=>g.action.entity.actions.filter(P=>P.playType!=="NormalSummon"&&P.playType!=="SpecialSummon").flatMap(P=>P.executableCells).every(P=>P!=="Hand")||g.action.playType!=="NormalSummon"&&g.action.playType!=="SpecialSummon");const _=[...n.filter(g=>g.action.playType==="NormalSummon").filter(g=>(g.action.entity.lvl??12)<5),...n.filter(g=>g.action.playType==="SpecialSummon"),...n.filter(g=>g.action.playType==="NormalSummon").filter(g=>(g.action.entity.atk??0)>2600||(g.action.entity.atk??0)>2300&&(g.action.entity.lvl??12)<7).filter(g=>(g.action.entity.atk??0)>=h),...n.filter(g=>g.action.entity.face==="FaceUp").filter(g=>g.action.entity.isOnFieldStrictly)];if(_.length)return _.randomPick();if(n=n.filter(g=>g.action.playType!=="NormalSummon").filter(g=>g.action.playType!=="SpecialSummon"),this.duel.phase==="main2"){if(y=t.filter(g=>g.action.playType==="ChangeBattlePosition").filter(g=>g.action.entity.battlePosition==="Attack").filter(g=>(g.action.entity.atk??0)<d||(g.action.entity.atk??0)>p&&(g.action.entity.atk??0)>2300),y.length)return y.randomPick();if(this.getAvailableSpellTrapZones.length>1)return t.filter(g=>g.action.playType==="SpellTrapSet").filter(g=>g.action.entity.kind!=="Spell"||g.action.entity.status.spellCategory==="QuickPlay").randomPick()}if(console.log(n),Math.random()<n.length/4)return n.randomPick()});this.duel=t,this.seat=i,this.profile=a,this.chainConfig=a.chainConfig??{noticeSelfChain:!0,noticeFreeChain:!0},this.duelistType=n,this.deckInfo=r,this.initHand=s,this.lifeLog=[],this.infoOrigin={maxRuleNormalSummonCount:1,ruleNormalSummonCount:0,ruleNormalSummonCountQty:0,effectNormalSummonCount:0,effectNormalSummonCountQty:0,specialSummonCount:0,specialSummonCountQty:0},this.info={...this.infoOrigin},this.statusOrigin={maxSpecialSummonCount:Number.MAX_VALUE,canDrawByEffect:!0,canSearchFromDeck:!0,canDiscardAsCost:!0,canDiscardAsEffect:!0},this.status={...this.statusOrigin},this._lp=8e3;const o=[];this.duelistType==="NPC"&&(this.profile.npcLvl<0&&o.push("NormalSummon","SpecialSummon","SpellTrapSet"),this.profile.npcLvl<1&&o.push("CardActivation","IgnitionEffect","TriggerEffect","QuickEffect"),this.profile.npcLvl<101&&o.push("DeclareAttack")),this.actionBlackListForNPC=o}get entity(){const t=this.getHandCell().entities.find(i=>i.entityType==="Duelist");return t||k.createPlayerEntity(this)}get name(){return this.profile.name}get lp(){return this._lp}get isTurnPlayer(){return this.duel.getTurnPlayer()===this}get canDraw(){return!0}get canAddToHandFromDeck(){return!0}get canAddToHandFromGraveyard(){return!0}get canSet(){return!0}};l(pe,"summonMany",async(t,i,a,n,r,s,o,c,u,d,p="特殊召喚するモンスターを選択。")=>{const f=r.map(y=>y.summoner).getDistinct(),h=[];for(const y of f){const _=await y.prepareToSummonMany(t,i,a,n,r.filter(g=>g.summoner===y),s,o,c,u,d,p);h.push(..._)}if(h.length)return h.forEach(y=>y.monster.info.materials.reset(...s)),await m.moveToXyzOwner(h[0].dest,s.map(y=>y.material).filter(y=>y.kind==="XyzMaterial"),["XyzMaterial","Rule"],h[0].monster,t),await k.summonMany(h,i,a,n.entity,t),h.map(y=>y.monster)}),l(pe,"effectDamage",(t,i)=>{if(!t.length)return[];const a=t.flatMap(r=>r.to._effectDamage(r.point,i)),n=Object.values(t[0].to.duel.duelists).filter(r=>r.lp>0);if(n.length===1)throw new B(n[0],`${i.action.toFullString()}により、${n[0].getOpponentPlayer().name}のライフポイントが0になった。`);if(!n.length)throw new B(void 0,`${i.action.toFullString()}により、お互いのライフポイントが0になった。`);return a});let Fe=pe;const he=["Controller","Opponent"],Et=["NormalSummon","AdvanceSummon","SpecialSummon","SpecialSummonFromDeck","SendToGraveyardFromDeck","Draw","SearchFromDeck","BanishFromDeck","BanishFromGraveyard","AddToHandFromGraveyard","ReturnToDeckFromGraveyard","SpecialSummonFromGraveyard","SpecialSummonFromBanished","ReturnToHandFromGraveyard","ReturnToHandFromField","BanishFromField","BanishFromHand","Destroy","DestroyMultiple","DestroyOnField","DestroyMultipleOnField","DestroyOnOpponentField","DestroyMultipleOnOpponentField","DestroyMonsterOnField","DestroyMonstersOnField","DestroySpellTrapOnField","DestroySpellTrapsOnField","SpecialSummonFromHand","SpecialSummonFromExtraDeck","SpecialSummonToken","IfNormarlSummonSucceed","IfSpecialSummonSucceed","DamageToOpponent","DamageToSelf","PayLifePoint","DiscordAsCost","DiscordAsEffect","RollDice","BounceToHand","NegateCardEffect","NegateCardActivation","NegateNormalSummon","NegateSpecialSummon"],te=class te extends Se{constructor(i,a,n,r){super(i,a,n);l(this,"getTargetableEntities",(i,a)=>{if(this.definition.hasToTargetCards&&!this.definition.getTargetableEntities)throw new S(`処理定義が矛盾している。${this.toFullString()}`,this);return this.definition.getTargetableEntities?this.definition.getTargetableEntities(i,a):[]});l(this,"toString",()=>this.playType==="CardActivation"?"カードの発動":this.isWithChainBlock?`«${this.title}»`:this.title);l(this,"toFullString",()=>`${this.entity.toString()}の${this.toString()}`);l(this,"addhocMaterialLimitation");l(this,"getClone",i=>new te(this.seq,this.entity,this.definition,i));l(this,"validateCount",(i,a)=>{const n=a.filter(s=>this.isSameGroup(s.action)).length;if(this.isOnlyNTimesPerDuel>0&&this.entity.field.duel.chainBlockLog.records.filter(s=>!s.chainBlockInfo.isNegatedActivationBy).filter(s=>this.isSameGroup(s.chainBlockInfo.action)).filter(s=>s.chainBlockInfo.activator===i).length+n>=this.isOnlyNTimesPerDuel||this.isOnlyNTimesPerTurn>0&&this.entity.field.duel.chainBlockLog.records.filter(s=>!s.chainBlockInfo.isNegatedActivationBy).filter(s=>this.isSameGroup(s.chainBlockInfo.action)).filter(s=>s.clock.turn===this.entity.field.duel.clock.turn).filter(s=>s.chainBlockInfo.activator===i).length+n>=this.isOnlyNTimesPerTurn||this.isOnlyNTimesPerChain>0&&n>=this.isOnlyNTimesPerChain)return!1;const r=n+this.entity.counterHolder.getActionCount(this);return!(this.isOnlyNTimesPerTurnIfFaceup>0&&r>=this.isOnlyNTimesPerTurnIfFaceup||this.isOnlyNTimesIfFaceup>0&&r>=this.isOnlyNTimesIfFaceup)});l(this,"validate",(i,a,n=[])=>{const r=n.includes("IgnoreCosts"),s=n.includes("IgnoreConditions"),o=n.includes("CopyEffectOnly");if(this.isWithChainBlock&&!this.entity.status.canActivateEffect||r&&this.needsToPayCost||!this.validateCount(i,a))return;const c=Pe(0,...a.map(p=>p.chainNumber??-1)),u={index:a.length,chainNumber:this.isWithChainBlock?c+1:void 0,action:this,activator:i,targetChainBlock:a.slice(-1)[0],state:"unloaded",dest:void 0,ignoreCost:!1};if(this.definition.canPayCosts&&!r&&!this.definition.canPayCosts(u,this.playType==="AfterChainBlock"?[]:a)||this.definition.meetsConditions&&!s&&!this.definition.meetsConditions(u,this.playType==="AfterChainBlock"?[]:a))return;if(this.definition.canExecute){const p=this.definition.canExecute(u,this.playType==="AfterChainBlock"?[]:a);if(p==="RemoveMe"){this.entity.actions.reset(...this.entity.actions.filter(f=>f.seq!==this.seq));return}if(!p)return}const d=[];if(this.definition.getDests&&d.push(...this.definition.getDests(u,this.playType==="AfterChainBlock"?[]:a)),this.playType==="CardActivation"&&!o){const p=this.getDestForCardActivation(i);if(!p)return;d.push(...p)}else this.playType==="SpellTrapSet"&&(this.entity.status.spellCategory==="Field"?d.push(i.getFieldZone()):d.push(...i.getAvailableSpellTrapZones()));return{action:this,dests:d,originSeq:this.seq}});l(this,"getDestForCardActivation",i=>{var n;if(this.entity.info.isPending||this.entity.info.isDying||this.entity.info.isSettingSickness)return;if(this.entity.isOnFieldAsSpellTrapStrictly)return this.entity.face==="FaceDown"?[]:void 0;if(this.entity.fieldCell.cellType!=="Hand"||this.definition.canActivateCardDirectly||!i.isTurnPlayer)return;if(this.entity.status.spellCategory==="Field")return[i.getFieldZone()];let a=i.getAvailableSpellTrapZones();return(n=this.entity.status.monsterCategories)!=null&&n.includes("Pendulum")&&(a=a.filter(r=>r.isAvailableForPendulum)),a});l(this,"prepare",async(i,a,n,r,s,o)=>{var P,Z;let c=a,u=s;const d=this.isWithChainBlock?Pe(0,...r.map(A=>A.chainNumber??-1))+1:void 0;let p="";if(d!==void 0&&(p+=`チェーン${d}: `),this.playType==="CardActivation"||this.playType==="SpellTrapSet")if(this.entity.fieldCell.cellType==="Hand"){let A=this.entity.status.spellCategory==="Field"?[i.getFieldZone()]:i.getAvailableSpellTrapZones();if((P=this.entity.status.monsterCategories)!=null&&P.includes("Pendulum")&&(A=A.filter(O=>O.isAvailableForPendulum)),c&&A.includes(c)&&(A=[c],c=void 0),this.entity.status.spellCategory==="Field"){const O=i.getFieldZone().cardEntities;if(O.length){const oe=O[0];await m.sendManyToGraveyardForTheSameReason(i.getFieldZone().cardEntities,["Rule"],this.entity,i),i.writeInfoLog(`フィールド魔法の上書きにより、${oe.toString()}は墓地に送られた。`),u=!1}}let x=A[0];if(A.length>1){x=A.randomPick();const O=this.playType==="SpellTrapSet"?"セット":"カードの発動",oe=await this.duel.view.waitSelectDestination(i,this.entity,A,"カードを移動先へドラッグ",O,u);if(!oe)return;x=oe}p+="手札から",this.playType==="SpellTrapSet"?p+="魔法・罠カードをセット。":p+=`${this.entity.toString()}を発動。`,i.writeInfoLog(p),u=!1,this.playType==="CardActivation"&&(this.entity.info.isPending=!0),(Z=this.entity.status.monsterCategories)!=null&&Z.includes("Pendulum")?await this.entity.activateAsPendulumScale(x,["CardActivation"],this.entity,i):this.playType==="CardActivation"?await this.entity.activateSpellTrapFromHand(x,this.entity.kind,["CardActivation"],this.entity,i):await this.entity.setAsSpellTrap(x,this.entity.kind,["SpellTrapSet"],this.entity,i)}else this.entity.isOnField&&this.entity.face==="FaceDown"&&(p+=`セットされていた${this.entity.toString()}を発動。`,i.writeInfoLog(p),u=!1,this.playType==="CardActivation"&&(this.entity.info.isPending=!0),await this.entity.setNonFieldMonsterPosition(this.entity.origin.kind,"FaceUp",["Rule"]));else d!==void 0&&(p+=`${this.toFullString()}を発動。`,i.writeInfoLog(p));const f={index:r.length,chainNumber:d,action:this,activator:i,targetChainBlock:n,isActivatedIn:this.entity.fieldCell,isActivatedAt:this.duel.clock.getClone(),enableCellTypes:[...this.entity.info.isEffectiveIn],costInfo:{},state:"ready",dest:c,ignoreCost:!1};if(this.definition.payCosts&&!o){const A=await this.definition.payCosts(f,r,u);if(!A)return;f.costInfo=A,u=!1}const h=await this.definition.prepare(f,r,u);if(h===void 0)return;const y={...h};if(y.selectedEntities=y.selectedEntities??[],y.chainBlockTags=[...y.chainBlockTags??[],...this.definition.fixedTags??[]],y.chainBlockTags.some(A=>A.startsWith("SpecialSummon"))&&y.chainBlockTags.push("SpecialSummon"),y.chainBlockTags=y.chainBlockTags.getDistinct(),Rt.some(A=>A===this.playType)){const A=h.nextChainBlockFilter??(()=>!0);y.nextChainBlockFilter=(x,O)=>O.negateSummon&&A(x,O)}const _=new rn(f.state),g={...y,...f};return Object.keys(g).filter(A=>A!=="state").forEach(A=>{_[A]=g[A]}),_});l(this,"execute",async(i,a)=>{if(i.action.isLikeContinuousSpell&&(i.action.entity.face==="FaceDown"||!i.action.entity.isOnField))return this.entity.info.isPending=!1,i.state="failed",!1;i.state="processing";let n=!1;if(i.chainNumber&&i.activator.writeInfoLog(`チェーン${i.chainNumber}: ${i.action.toFullString()}の効果処理。`),i.isNegatedActivationBy)i.state="nagated",i.chainNumber&&i.activator.writeInfoLog(`チェーン${i.chainNumber}: ${i.action.toFullString()}を${i.isNegatedActivationBy.toFullString()}によって発動が無効にされた。`);else{let r=i.action.entity.isEffective,s="";if(r){if(i.isNegatedEffectBy)s=`チェーン${i.chainNumber}: ${i.action.toFullString()}を${i.isNegatedEffectBy.toFullString()}によって効果を無効にした。`,r=!1;else if(this.isWithChainBlock&&!i.enableCellTypes.includes(i.isActivatedIn.cellType)){const o=i.action.entity.moveLog.records.findLast(c=>c.face==="FaceDown"&&c.orientation==="Horizontal");r=(o&&i.activator.duel.clock.isSameChain(o.movedAt))??!1}}r?(n=await this.definition.execute(i,a),i.state=n?"done":"failed"):(i.state="nagated",i.chainNumber&&(s=s||`チェーン${i.chainNumber}: カードの効果が無効となっているため${i.action.toFullString()}の効果処理を行えない。`),i.activator.writeInfoLog(s)),this.entity.determine(),this.isOnlyNTimesPerTurnIfFaceup>0?this.entity.counterHolder.incrementActionCountPerTurn(this):this.isOnlyNTimesIfFaceup>0&&this.entity.counterHolder.incrementActionCount(this),this.definition.settle(i,a)}return n});l(this,"directExecute",async(i,a,n)=>{const r=await this.prepare(i,void 0,a,[],!1,n);if(!r)throw new S("想定されない状態",this,i,n);return i.duel.chainBlockLog.push(r),await this.execute(r,[])});l(this,"isSame",i=>this.entity.origin.name===i.entity.origin.name&&this.title===i.title);l(this,"isSameGroup",i=>this.actionGroupName?this.entity.origin.name===i.entity.origin.name&&this.actionGroupName===i.actionGroupName:this.isSame(i));l(this,"calcChainBlockTagsForDestroy",(i,a)=>{if(!Et.length)return[];const n=["Destroy"];Et.length>1&&n.push("DestroyMultiple");const r=a.filter(u=>u.isOnFieldStrictly);r.length&&(n.push("DestroyOnField"),r.length>1&&n.push("DestroyMultipleOnField"));const s=r.filter(u=>u.kind==="Monster");s.length&&(n.push("DestroyMonsterOnField"),s.length>1&&n.push("DestroyMonstersOnField")),r.filter(u=>u.kind!=="Monster").length&&(n.push("DestroySpellTrapOnField"),s.length>1&&n.push("DestroySpellTrapsOnField"));const c=r.filter(u=>u.controller!==i);return c.length&&(n.push("DestroyOnOpponentField"),c.length>1&&n.push("DestroyMultipleOnOpponentField")),n});this.addhocMaterialLimitation=r??(()=>!0)}get definition(){return super.definition}get playType(){return this.definition.playType}get spellSpeed(){return this.definition.spellSpeed}get needsToPayCost(){return this.definition.needsToPayCost??!1}get hasToTargetCards(){return this.definition.hasToTargetCards??!1}get isWithChainBlock(){return rt.some(i=>i===this.playType)}get isChainable(){return ua.some(i=>i===this.playType)}get isLikeContinuousSpell(){return this.definition.isLikeContinuousSpell||this.entity.isLikeContinuousSpell&&this.playType==="CardActivation"}get isNoticedForcibly(){return this.isMandatory||this.definition.playType==="TriggerEffect"||this.definition.playType==="LingeringEffect"||this.negatePreviousBlock||this.negateSummon}get negatePreviousBlock(){return this.definition.negatePreviousBlock??!1}get negateSummon(){return this.definition.negateSummon??!1}get priorityForNPC(){return this.definition.priorityForNPC??Number.NaN}*getEnableMaterialPatterns(i){this.definition.getEnableMaterialPatterns&&(yield*this.definition.getEnableMaterialPatterns(i).filter(this.addhocMaterialLimitation))}};l(te,"createNew",(i,a)=>new te("AutoSeq",i,a)),l(te,"createDummyAction",(i,a,n,r,s)=>({action:te.createNew(i,{title:a,isMandatory:!1,executableCells:[],executablePeriods:[],executableDuelistTypes:[],playType:"Dammy",spellSpeed:"Dammy",getDests:()=>n,prepare:async()=>{},execute:async()=>!1,settle:async()=>!1}),dests:n,battlePosition:r,originSeq:(s==null?void 0:s.seq)??-1}));let ie=te;const C=async()=>({selectedEntities:[]}),ye=async(e,t,i)=>(e.activator.payLp(i,e.action.entity),{lifePoint:i}),gn=e=>e.activator.canSendToGraveyard([e.action.entity])&&e.action.entity.canBeSentToGraveyard(e.activator,e.action.entity,"SendToGraveyardAsCost",e.action),hn=async e=>(await e.action.entity.sendToGraveyard(["Cost"],e.action.entity,e.activator),{sendToGraveyard:[e.action.entity]}),_e=e=>e.activator.canTryBanish(e.action.entity,"BanishAsCost",e.action)&&e.action.entity.canBeBanished("BanishAsCost",e.activator,e.action.entity,e.action),Ze=async e=>(await e.action.entity.banish(["Cost"],e.action.entity,e.activator),{banish:[e.action.entity]}),yn=(e,t,i=1)=>t.filter(a=>e.activator.canTryBanish(a,"BanishAsCost",e.action)).filter(a=>a.canBeBanished("BanishAsCost",e.activator,e.action.entity,e.action)).length>=i,mn=async(e,t,i,a)=>{const n=t.filter(s=>e.activator.canTryBanish(s,"BanishAsCost",e.action)).filter(s=>s.canBeBanished("BanishAsCost",e.activator,e.action.entity,e.action)),r=await e.activator.waitSelectEntities(n,a,i,"コストとして除外するカードを選択",!1)??[];return await m.banishManyForTheSameReason(r,["Cost"],e.action.entity,e.activator),{banish:r}},lt=(e,t,i=()=>!0,a=1)=>e.activator.getHandCell().cardEntities.filter(i).filter(n=>e.activator.canDiscard([n])).length>=a,ot=async(e,t,i=!1,a=()=>!0,n=1)=>({discard:await e.activator.discard(n,"Cost",a,e.action.entity,e.activator,e.activator,i)}),Sn=(e,t)=>lt(e,t,i=>e.action.entity===i,1),vn=(e,t,i=!1)=>ot(e,t,i,a=>e.action.entity===a),Cn=(e,t)=>e.action.getTargetableEntities(e,t).filter(i=>i.isOnField).map(i=>i.fieldCell),V=(e,t={})=>({hasToTargetCards:!0,getTargetableEntities:e,canExecute:(i,a)=>e(i,a).filter(n=>n.canBeTargetOfEffect(i)).length>0&&(!t.canExecute||t.canExecute(i,a)),getDests:Cn,prepare:async(i,a,n)=>{let r=[];if(i.dest)r=[i.dest.cardEntities[0]];else{const o=i.action.getTargetableEntities(i,a).filter(u=>u.canBeTargetOfEffect(i)),c=await i.activator.waitSelectEntity(o,t.message??"対象とするカードを選択。",n);if(!c)return;r=[c]}const s=t.tags??[];return t.destoryTargets&&s.push(...i.action.calcChainBlockTagsForDestroy(i.activator,r)),{selectedEntities:r,chainBlockTags:s,appendix:[`対象：${r.map(o=>o.toString()).join(", ")}`]}}}),se=async(e,t,i=T,a=r=>r.length===1,n=1)=>{const r=e.activator.getMonsterZones(),s=e.activator.getEnableSummonList(e.activator,"SpecialSummon",["Effect"],e.action,t.filter(u=>u.kind==="Monster").filter(u=>u.canBeTargetOfEffect(e)).map(u=>({monster:u,posList:i,cells:r})),[],!1),o=await e.activator.waitSelectEntities(s.map(u=>u.monster),n,a,"特殊召喚するモンスターを選択",!1)??[];if(!o.length)throw new D(e);const c=o.map(u=>u.fieldCell.cellType).getDistinct().filter(u=>u==="Graveyard"||u==="Banished").map(u=>u==="Graveyard"?"SpecialSummonFromGraveyard":"SpecialSummonFromBanished");return{selectedEntities:o,chainBlockTags:c}},le=async(e,t=["Attack","Defense"],i=!0)=>{const a=e.activator.getMonsterZones(),n=e.selectedEntities.filter(r=>!r.wasMovedAfter(e.isActivatedAt)).map(r=>({monster:r,posList:t,cells:a}));return i&&(n.length!==e.selectedEntities.length||a.length<n.length)?!1:(await e.activator.summonAll(e.activator,"SpecialSummon",["Effect"],e.action,n,[],!1,!1),!0)},Tn=async(e,t,i=["Attack","Defense"])=>{const a=e.activator.getMonsterZones(),n=t.map(r=>({monster:r,posList:i,cells:a}));return await e.activator.summonAll(e.activator,"SpecialSummon",["Effect"],e.action,n,[],!1,!1),!0},En=(e,t,i)=>({title:e,playType:"SystemPeriodAction",spellSpeed:"Normal",executableCells:Q,executablePeriods:t,executableDuelistTypes:he,isMandatory:!0,canExecute:a=>(i(a),!1),prepare:C,execute:async()=>!0,settle:async()=>!0}),v={title:"セット",playType:"SpellTrapSet",spellSpeed:"Normal",executableCells:["Hand"],executablePeriods:["main1","main2"],executableDuelistTypes:["Controller"],isMandatory:!1,prepare:C,execute:async()=>!0,settle:async()=>!0},J={title:"発動",isMandatory:!1,playType:"CardActivation",spellSpeed:"Normal",executableCells:["Hand","SpellAndTrapZone","FieldSpellZone"],executablePeriods:["main1","main2"],executableDuelistTypes:["Controller"],prepare:C,execute:async()=>!0,settle:async()=>!0},wn=async(e,t,i,a,n)=>{const r=e.action.getTargetableEntities(e,t);if(!r)throw new S("CardAction定義が正しくない",e);const s=await e.activator.waitSelectEntity(r,"装備対象モンスターを選択",i);if(s)return e.action.entity.info.equipedBy=s,e.action.entity.info.effectTargets[e.action.seq]=[s],{chainBlockTags:a??[],selectedEntities:[s],prepared:n}},Vt=async(e,t,i=()=>!0)=>{const a=e.selectedEntities[0];return e.action.entity.info.equipedBy=a,e.action.entity.info.effectTargets[e.action.seq]=[a],i(a,e.action.entity)?(e.action.entity.info.equipedBy=a,e.action.entity.info.validateEquipOwner=i,a.info.equipEntities.push(e.action.entity),!0):(await e.action.entity.ruleDestory(),e.activator.writeInfoLog(`${a.toString()}が装備条件を満たさなくなったため、${e.action.entity.toString()}は破壊された。`),!1)},fe=(e=()=>!0)=>({title:"発動",isMandatory:!1,playType:"CardActivation",spellSpeed:"Normal",executableCells:["Hand","SpellAndTrapZone"],executablePeriods:["main1","main2"],executableDuelistTypes:["Controller"],getTargetableEntities:t=>t.action.entity.field.getMonstersOnFieldStrictly().filter(i=>i.face==="FaceUp").filter(i=>i.canBeTargetOfEffect(t)).filter(i=>e(i,t.action.entity)),getDests:(t,i)=>t.action.getTargetableEntities(t,i).filter(a=>a.isOnFieldAsMonsterStrictly).map(a=>a.fieldCell),prepare:(t,i,a)=>wn(t,i,a,[],void 0),execute:Vt,settle:async()=>!0});function*_n(){yield{name:"連合軍",actions:[J,v],continuousEffects:[Ae("発動","Spell",e=>[q.createContinuous("発動",t=>t.isSpawnedBy.isOnFieldStrictly&&t.isSpawnedBy.face==="FaceUp",e,(t,i)=>i.controller===t.isSpawnedBy.controller&&i.types.includes("Warrior")&&i.isOnFieldStrictly&&i.face==="FaceUp","attack","wip","Addition",(t,i,a)=>{if(!t.isEffective||i.face==="FaceDown")return a;const n=t.controller.getMonstersOnField().filter(r=>r.face==="FaceUp").filter(r=>r.types.includes("Warrior")||r.types.includes("Spellcaster")).length;return a+n*200})])]}}const Wt=Object.freeze(Object.defineProperty({__proto__:null,default:_n},Symbol.toStringTag,{value:"Module"}));function*bn(){const e=[{name:"リビングデッドの呼び声",pos:"Attack",filter:()=>!0},{name:"エンジェル・リフト",pos:"Attack",filter:t=>(t.lvl??12)<3},{name:"正統なる血統",pos:"Attack",filter:t=>{var i;return!!((i=t.status.monsterCategories)!=null&&i.includes("Normal"))}},{name:"蘇りし魂",pos:"Defense",filter:t=>{var i;return!!((i=t.status.monsterCategories)!=null&&i.includes("Normal"))}},{name:"リミット・リバース",pos:"Attack",filter:t=>(t.atk??9999)<=1e3,targetImmdAction:async(t,i)=>{if(!i.isOnFieldAsMonsterStrictly||i.face==="FaceDown")return"RemoveMe";if(t.entity.isEffective&&i.battlePosition==="Defense")return t.entity.controller.writeInfoLog(`${i.toString()}が守備表示になったため、${t.entity.toString()}とともに破壊される。`),await m.tryMarkForDestory([i,t.entity],{action:t,activator:t.entity.controller,selectedEntities:[i]}),"RemoveMe"}}];for(const t of e)yield{name:t.name,actions:[{title:"発動",isMandatory:!1,playType:"CardActivation",spellSpeed:"Quick",executableCells:["SpellAndTrapZone"],executablePeriods:w,executableDuelistTypes:["Controller"],fixedTags:["SpecialSummonFromGraveyard","SpecialSummon"],canExecute:i=>{const a=i.activator.getMonsterZones();return i.activator.getEnableSummonList(i.activator,"SpecialSummon",["Effect"],i.action,i.activator.getGraveyard().cardEntities.filter(r=>r.kind==="Monster").filter(t.filter).filter(r=>r.canBeTargetOfEffect(i)).map(r=>({monster:r,posList:["Attack"],cells:a})),[],!1).length>0},prepare:i=>se(i,i.activator.getGraveyard().cardEntities.filter(a=>a.kind==="Monster").filter(t.filter).filter(a=>a.canBeTargetOfEffect(i)),["Attack"]),execute:async i=>!await le(i,["Attack"])||!i.selectedEntities.length?!1:(i.action.entity.info.effectTargets[i.action.seq]=i.selectedEntities,!0),settle:async()=>!0},v],immediatelyActions:[{title:"自壊",executableCells:["SpellAndTrapZone"],executablePeriods:R,executableFaces:["FaceUp"],execute:async(i,a,n)=>{if(!n)return;const r=Object.values(i.entity.info.effectTargets).flatMap(o=>o);if(!r.length)return;const s=r[0];if(a===i.entity)return s.isOnFieldStrictly&&s.face==="FaceUp"&&i.entity.isEffective&&!n.to.isSpellTrapZoneLikeCell&&(i.entity.controller.writeInfoLog(`${i.entity.toString()}がフィールドを離れたため、対象モンスター${s.toString()}を破壊。`),await m.tryMarkForDestory([s],{action:i,activator:i.entity.controller,selectedEntities:r})),"RemoveMe";a===s&&t.targetImmdAction&&t.targetImmdAction(i,a,n)}}]}}const Qt=Object.freeze(Object.defineProperty({__proto__:null,default:bn},Symbol.toStringTag,{value:"Module"}));function*kn(){yield{name:"昇天の黒角笛",actions:[{title:"発動",isMandatory:!1,playType:"CardActivation",spellSpeed:"Counter",executableCells:["SpellAndTrapZone"],executablePeriods:R,executableDuelistTypes:["Controller"],negateSummon:!0,fixedTags:["NegateSpecialSummon"],canExecute:e=>(e.targetChainBlock&&e.targetChainBlock.action.playType==="SpecialSummon"&&e.targetChainBlock.activator!==e.activator&&e.activator.duel.field.getPendingMonstersOnField().length===1)??!1,prepare:async()=>({selectedEntities:[]}),execute:async e=>{const t=m.negateSummonMany(e.action.entity,e.activator);return await m.tryDestroy(t,e),!0},settle:async()=>!0},v]}}const Xt=Object.freeze(Object.defineProperty({__proto__:null,default:kn},Symbol.toStringTag,{value:"Module"}));function*Dn(){yield*[{name:"団結の力",filter:e=>e.isMonster&&e.face==="FaceUp",rate:800},{name:"魔導師の力",filter:e=>e.kind==="Spell"||e.kind==="Trap",rate:500}].map(e=>({name:e.name,actions:[fe(),v],continuousEffects:[we(e.name,"Spell",t=>t.info.equipedBy?[t.info.equipedBy]:[],t=>["attack","defense"].map(i=>q.createContinuous("発動",a=>a.isSpawnedBy.isOnFieldStrictly&&a.isSpawnedBy.face==="FaceUp",t,(a,n)=>n.isOnFieldStrictly&&n.face==="FaceUp",i,"wip","Addition",(a,n,r)=>{if(!a.isEffective)return r;const s=a.controller.getEntiteisOnField().filter(e.filter).length;return r+s*e.rate})))]})),yield{name:"早すぎた埋葬",actions:[{title:"発動",isMandatory:!1,playType:"CardActivation",spellSpeed:"Normal",executableCells:["Hand","SpellAndTrapZone"],executablePeriods:["main1","main2"],executableDuelistTypes:["Controller"],hasToTargetCards:!0,fixedTags:["SpecialSummonFromGraveyard"],canPayCosts:e=>e.activator.lp>=800,canExecute:e=>{const t=e.activator.getMonsterZones();return e.activator.getEnableSummonList(e.activator,"SpecialSummon",["Effect"],e.action,e.activator.getGraveyard().cardEntities.filter(a=>a.kind==="Monster").filter(a=>a.canBeTargetOfEffect(e)).map(a=>({monster:a,posList:["Attack"],cells:t})),[],!1).length>0},payCosts:(e,t)=>ye(e,t,800),prepare:async e=>{const t=await se(e,e.activator.getGraveyard().cardEntities,["Attack"]);return t.chainBlockTags.push("PayLifePoint"),t},execute:async(e,t)=>e.action.entity.info.equipedBy?(await e.action.entity.ruleDestory(),!1):await le(e,["Attack"])?Vt(e,t,(a,n)=>{var r;return(r=n.info.effectTargets[e.action.seq])==null?void 0:r.includes(a)}):(await e.action.entity.ruleDestory(),!1),settle:async()=>!0},v],immediatelyActions:[{title:"自壊",executableCells:["SpellAndTrapZone"],executablePeriods:R,executableFaces:["FaceUp"],execute:async(e,t,i)=>{if(console.log(e.toFullString(),t==null?void 0:t.toString(),i,e.entity.info.equipedBy),!i)return;const a=e.entity.info.equipedBy;if(a&&t===e.entity){a.isOnFieldStrictly&&a.face==="FaceUp"&&e.entity.isEffective&&!i.to.isSpellTrapZoneLikeCell&&i.movedAs.some(n=>n.endsWith("Destroy"))&&(e.entity.controller.writeInfoLog(`${e.entity.toString()}が破壊されたため、対象モンスター${a.toString()}を破壊。`),await m.tryMarkForDestory([a],{action:e,activator:e.entity.controller,selectedEntities:[a]}));return}}}]},yield{name:"幻惑の巻物",actions:[fe(),v],continuousEffects:[]}}const Kt=Object.freeze(Object.defineProperty({__proto__:null,default:Dn},Symbol.toStringTag,{value:"Module"}));function*An(){yield*[{name:"伝説の剣",attr:void 0,monType:"Warrior",atk:200,def:200},{name:"秘術の書",attr:void 0,monType:"Spellcaster",atk:200,def:200},{name:"ポセイドンの力",attr:void 0,monType:"Aqua",atk:200,def:200},{name:"紫水晶",attr:void 0,monType:"Zombie",atk:200,def:200},{name:"猛獣の歯",attr:void 0,monType:"Beast",atk:200,def:200},{name:"機械改造工場",attr:void 0,monType:"Machine",atk:200,def:200},{name:"体温の上昇",attr:void 0,monType:"Reptile",atk:200,def:200},{name:"魔菌",attr:void 0,monType:"Plant",atk:200,def:200},{name:"闇・エネルギー",attr:void 0,monType:"Fiend",atk:200,def:200},{name:"レーザー砲機甲鎧",attr:void 0,monType:"Insect",atk:200,def:200},{name:"銀の弓矢",attr:void 0,monType:"Fairy",atk:200,def:200},{name:"電撃鞭",attr:void 0,monType:"Thunder",atk:200,def:200},{name:"ドラゴンの秘宝",attr:void 0,monType:"Dragon",atk:200,def:200},{name:"フォロー・ウィンド",attr:void 0,monType:"WingedBeast",atk:200,def:200},{name:"魔性の月",attr:void 0,monType:"BeastWarrior",atk:200,def:200},{name:"エルフの光",attr:"Light",monType:void 0,atk:400,def:-200},{name:"覚醒",attr:"Earth",monType:void 0,atk:400,def:-200},{name:"灼熱の槍",attr:"Fire",monType:void 0,atk:400,def:-200},{name:"突風の扇",attr:"Wind",monType:void 0,atk:400,def:-200},{name:"はがねの甲羅",attr:"Water",monType:void 0,atk:400,def:-200},{name:"闇の破神剣",attr:"Dark",monType:void 0,atk:400,def:-200},{name:"火器付機甲鎧",attr:void 0,monType:"Insect",atk:700,def:0},{name:"サラマンドラ",attr:"Fire",monType:void 0,atk:700,def:0},{name:"シャイン・キャッスル",attr:"Light",monType:void 0,atk:700,def:0}].map(e=>({name:e.name,actions:[fe(t=>(!e.attr||t.attr.includes(e.attr))&&(!e.monType||t.types.includes(e.monType))),v],continuousEffects:[we(e.name,"Spell",t=>t.info.equipedBy?[t.info.equipedBy]:[],t=>{const i=[];return e.atk!==0&&i.push(["attack",e.atk]),e.def!==0&&i.push(["defense",e.def]),i.map(([a,n])=>q.createContinuous("発動",r=>r.isSpawnedBy.isOnFieldStrictly&&r.isSpawnedBy.face==="FaceUp",t,(r,s)=>s.isOnFieldStrictly&&s.face==="FaceUp"&&(!e.monType||s.types.includes(e.monType))&&(!e.attr||s.attr.includes(e.attr)),a,"wip","Addition",(r,s,o)=>r.isEffective?o+n:o))})]}))}const Jt=Object.freeze(Object.defineProperty({__proto__:null,default:An},Symbol.toStringTag,{value:"Module"}));function*Pn(){yield{name:"チキンレース",actions:[J,v,{title:"②効果発動",isMandatory:!1,playType:"IgnitionEffect",spellSpeed:"Normal",executableCells:["FieldSpellZone"],executablePeriods:["main1","main2"],executableDuelistTypes:he,isOnlyNTimesPerTurnIfFaceup:1,canPayCosts:e=>e.activator.lp>=1e3,canExecute:e=>e.action.entity.face==="FaceUp",payCosts:(e,t)=>ye(e,t,1e3),prepare:async(e,t,i)=>{let a=[{seq:0,text:"●デッキから１枚ドローする。",tags:["Draw"]},{seq:1,text:"●このカードを破壊する。",tags:e.action.calcChainBlockTagsForDestroy(e.activator,[e.action.entity])},{seq:2,text:"●相手は1000LP回復する。",tags:[]}];e.activator.getDeckCell().cardEntities.length||(a=a.filter(r=>r.seq));const n=await e.activator.waitSelectText(a,"使用する効果を選択",i);if(n!==void 0)return e.data=n.seq,{selectedEntities:[],chainBlockTags:n.tags,nextChainBlockFilter:()=>!1}},execute:async e=>{if(e.data===0)await e.activator.draw(1,e.action.entity,e.activator);else if(e.data===1)await m.tryDestroy([e.action.entity],e);else if(e.data===2)e.activator.getOpponentPlayer().heal(1e3,e.action.entity);else throw new S("値が正しくない。",e,e.data);return!0},settle:async()=>!0}],continuousEffects:[wa("①ダメージ無効","Spell",e=>[e.controller,e.controller.getOpponentPlayer()].map(t=>t.entity),e=>[new Zt({title:"①ダメージ無効",validateAlive:()=>!0,isContinuous:!0,isSpawnedBy:e,actionAttr:{},isApplicableTo:()=>!0,calcType:"zero_typeA",filter:(t,i,a,n)=>t.isSpawnedBy.fieldCell.cellType!=="FieldSpellZone"?{}:n.lp>=n.getOpponentPlayer().lp?{}:(a.writeInfoLog(`${n.profile.name}はチキンレースの効果でダメージを受けない。`),{zero_typeA:!0})})])]}}const Yt=Object.freeze(Object.defineProperty({__proto__:null,default:Pn},Symbol.toStringTag,{value:"Module"}));function*xn(){yield*[{name:"草原",up:["Warrior","BeastWarrior"],down:[]},{name:"森",up:["Insect","Plant","Beast","BeastWarrior"],down:[]},{name:"山",up:["Dragon","WingedBeast","Thunder"],down:[]},{name:"荒野",up:["Dinosaur","Zombie","Rock"],down:[]},{name:"海",up:["Aqua","SeaSerpent","Fish"],down:["Machine","Pyro"]},{name:"闇",up:["Fiend","Spellcaster"],down:["Fairy"]}].map(e=>({name:e.name,actions:[J,v],continuousEffects:[Ae("発動","Spell",t=>["attack","defense"].flatMap(i=>["up","down"].map(a=>q.createContinuous("発動",n=>n.isSpawnedBy.isOnFieldStrictly&&n.isSpawnedBy.face==="FaceUp",t,(n,r)=>r.isOnFieldStrictly&&r.face==="FaceUp"&&(r.status.monsterCategories??!1)&&e[a].union(r.types).length>0,i,"wip","Addition",(n,r,s)=>!n.isEffective||r.face==="FaceDown"?s:s+(a==="up"?200:-200)))))]})),yield*[{name:"バーニングブラッド",attr:"Fire"},{name:"ウォーターワールド",attr:"Water"},{name:"ガイアパワー",attr:"Earth"},{name:"シャインスパーク",attr:"Light"},{name:"ダークゾーン",attr:"Dark"},{name:"デザートストーム",attr:"Wind"}].map(e=>({name:e.name,actions:[J,v],continuousEffects:[Ae("発動","Spell",t=>["attack","defense"].flatMap(i=>q.createContinuous("発動",a=>a.isSpawnedBy.isOnFieldStrictly&&a.isSpawnedBy.face==="FaceUp",t,(a,n)=>n.isOnFieldStrictly&&n.face==="FaceUp"&&n.attr.includes(e.attr),i,"wip","Addition",(a,n,r)=>!a.isEffective||n.face==="FaceDown"?r:r+(i==="attack"?500:-400))))]}))}const It=Object.freeze(Object.defineProperty({__proto__:null,default:xn},Symbol.toStringTag,{value:"Module"}));function*Mn(){const e=[{name:"カルボナーラ戦士",materialInfos:[{type:"Name",cardName:"マグネッツ１号"},{type:"Name",cardName:"マグネッツ２号"}]},{name:"クリッチー",materialInfos:[{type:"Name",cardName:"クリッター"},{type:"Name",cardName:"黒き森のウィッチ"}]},{name:"スケルゴン",materialInfos:[{type:"Name",cardName:"メデューサの亡霊"},{type:"Name",cardName:"暗黒の竜王"}]},{name:"スチームジャイロイド",materialInfos:[{type:"Name",cardName:"ジャイロイド"},{type:"Name",cardName:"スチームロイド"}]},{name:"バラに棲む悪霊",materialInfos:[{type:"Name",cardName:"グレムリン"},{type:"Name",cardName:"スネーク・パーム"}]},{name:"バロックス",materialInfos:[{type:"Name",cardName:"キラーパンダ"},{type:"Name",cardName:"ガーゴイル"}]},{name:"フュージョニスト",materialInfos:[{type:"Name",cardName:"プチテンシ"},{type:"Name",cardName:"スリーピィ"}]},{name:"ブラキオレイドス",materialInfos:[{type:"Name",cardName:"二頭を持つキング・レックス"},{type:"Name",cardName:"屍を貪る竜"}]},{name:"プラグティカル",materialInfos:[{type:"Name",cardName:"トラコドン"},{type:"Name",cardName:"フレイム・ヴァイパー"}]},{name:"マブラス",materialInfos:[{type:"Name",cardName:"タイホーン"},{type:"Name",cardName:"邪炎の翼"}]},{name:"ミノケンタウロス",materialInfos:[{type:"Name",cardName:"ミノタウルス"},{type:"Name",cardName:"ケンタウロス"}]},{name:"暗黒火炎龍",materialInfos:[{type:"Name",cardName:"火炎草"},{type:"Name",cardName:"プチリュウ"}]},{name:"炎の騎士 キラー",materialInfos:[{type:"Name",cardName:"モンスター・エッグ"},{type:"Name",cardName:"スティング"}]},{name:"炎の剣士",materialInfos:[{type:"Name",cardName:"炎を操る者"},{type:"Name",cardName:"伝説の剣豪 ＭＡＳＡＫＩ"}]},{name:"音楽家の帝王",materialInfos:[{type:"Name",cardName:"黒き森のウィッチ"},{type:"Name",cardName:"ハイ・プリーステス"}]},{name:"金色の魔象",materialInfos:[{type:"Name",cardName:"メデューサの亡霊"},{type:"Name",cardName:"ドラゴン・ゾンビ"}]},{name:"紅陽鳥",materialInfos:[{type:"Name",cardName:"セイント・バード"},{type:"Name",cardName:"スカイ・ハンター"}]},{name:"轟きの大海蛇",materialInfos:[{type:"Name",cardName:"魔法のランプ"},{type:"Name",cardName:"ひょうすべ"}]},{name:"黒き人食い鮫",materialInfos:[{type:"Name",cardName:"シーカーメン"},{type:"Name",cardName:"キラー・ブロッブ"},{type:"Name",cardName:"海原の女戦士"}]},{name:"砂の魔女",materialInfos:[{type:"Name",cardName:"岩石の巨兵"},{type:"Name",cardName:"エンシェント・エルフ"}]},{name:"裁きの鷹",materialInfos:[{type:"Name",cardName:"冠を戴く蒼き翼"},{type:"Name",cardName:"コケ"}]},{name:"裁きを下す女帝",materialInfos:[{type:"Name",cardName:"女王の影武者"},{type:"Name",cardName:"響女"}]},{name:"朱雀",materialInfos:[{type:"Name",cardName:"赤き剣のライムンドス"},{type:"Name",cardName:"炎の魔神"}]},{name:"深海に潜むサメ",materialInfos:[{type:"Name",cardName:"神魚"},{type:"Name",cardName:"舌魚"}]},{name:"水陸両用バグロス",materialInfos:[{type:"Name",cardName:"陸戦型 バグロス"},{type:"Name",cardName:"海を守る戦士"}]},{name:"戦場の死装束",materialInfos:[{type:"Name",cardName:"音女"},{type:"Name",cardName:"斬首の美女"}]},{name:"魔装騎士ドラゴネス",materialInfos:[{type:"Name",cardName:"アーメイル"},{type:"Name",cardName:"一眼の盾竜"}]},{name:"魔導騎士ギルティア",materialInfos:[{type:"Name",cardName:"冥界の番人"},{type:"Name",cardName:"王座の守護者"}]},{name:"雷神の怒り",materialInfos:[{type:"Name",cardName:"エンゼル・イヤーズ"},{type:"Name",cardName:"メガ・サンダーボール"}]},{name:"カイザー・ドラゴン",materialInfos:[{type:"Name",cardName:"砦を守る翼竜"},{type:"Name",cardName:"フェアリー・ドラゴン"}]},{name:"スカルビショップ",materialInfos:[{type:"Name",cardName:"悪魔の知恵"},{type:"Name",cardName:"魔天老"}]},{name:"デビル・ボックス",materialInfos:[{type:"Name",cardName:"マーダーサーカス"},{type:"Name",cardName:"ドリーム・ピエロ"}]},{name:"ヒューマノイド・ドレイク",materialInfos:[{type:"Name",cardName:"ワームドレイク"},{type:"Name",cardName:"ヒューマノイド・スライム"}]},{name:"ブラック・デーモンズ・ドラゴン",materialInfos:[{type:"Name",cardName:"デーモンの召喚"},{type:"Name",cardName:"真紅眼の黒竜"}]},{name:"マスター・オブ・ＯＺ",materialInfos:[{type:"Name",cardName:"ビッグ・コアラ"},{type:"Name",cardName:"デス・カンガルー"}]},{name:"メテオ・ブラック・ドラゴン",materialInfos:[{type:"Name",cardName:"真紅眼の黒竜"},{type:"Name",cardName:"メテオ・ドラゴン"}]},{name:"召喚獣メガラニカ",materialInfos:[{type:"Name",cardName:"召喚師アレイスター"},{type:"Name",cardName:"地属性モンスター"}]},{name:"聖女ジャンヌ",materialInfos:[{type:"Name",cardName:"慈悲深き修道女"},{type:"Name",cardName:"堕天使マリー"}]},{name:"青眼の究極竜",materialInfos:[{type:"Name",cardName:"青眼の白龍"},{type:"Name",cardName:"青眼の白龍"},{type:"Name",cardName:"青眼の白龍"}]},{name:"千年竜",materialInfos:[{type:"Name",cardName:"時の魔術師"},{type:"Name",cardName:"ベビードラゴン"}]},{name:"双頭の雷龍",materialInfos:[{type:"Name",cardName:"サンダー・ドラゴン"},{type:"Name",cardName:"サンダー・ドラゴン"}]},{name:"迷宮の魔戦車",materialInfos:[{type:"Name",cardName:"ギガテック・ウルフ"},{type:"Name",cardName:"キャノン・ソルジャー"}]},{name:"竜騎士ガイア",materialInfos:[{type:"Name",cardName:"暗黒騎士ガイア"},{type:"Name",cardName:"カース・オブ・ドラゴン"}]},{name:"アクア・ドラゴン",materialInfos:[{type:"Name",cardName:"フェアリー・ドラゴン"},{type:"Name",cardName:"海原の女戦士"}]},{name:"アンデット・ウォーリアー",materialInfos:[{type:"Name",cardName:"ワイト"},{type:"Name",cardName:"格闘戦士アルティメーター"}]},{name:"カオス・ウィザード",materialInfos:[{type:"Name",cardName:"ホーリー・エルフ"},{type:"Name",cardName:"黒魔族のカーテン"}]},{name:"クワガー・ヘラクレス",materialInfos:[{type:"Name",cardName:"クワガタ・アルファ"},{type:"Name",cardName:"ヘラクレス・ビートル"}]},{name:"ソウル・ハンター",materialInfos:[{type:"Name",cardName:"ランプの魔人"},{type:"Name",cardName:"異次元からの侵略者"}]},{name:"デス・バード",materialInfos:[{type:"Name",cardName:"タクヒ"},{type:"Name",cardName:"髑髏の寺院"}]},{name:"フラワー・ウルフ",materialInfos:[{type:"Name",cardName:"シルバー・フォング"},{type:"Name",cardName:"魔界のイバラ"}]},{name:"フレイム・ゴースト",materialInfos:[{type:"Name",cardName:"ワイト"},{type:"Name",cardName:"マグマン"}]},{name:"マリン・ビースト",materialInfos:[{type:"Name",cardName:"水の魔導師"},{type:"Name",cardName:"ベヒゴン"}]},{name:"メカ・ザウルス",materialInfos:[{type:"Name",cardName:"ミスター・ボンバー"},{type:"Name",cardName:"二頭を持つキング・レックス"}]},{name:"メタル・ドラゴン",materialInfos:[{type:"Name",cardName:"鋼鉄の巨神像"},{type:"Name",cardName:"レッサー・ドラゴン"}]},{name:"レア・フィッシュ",materialInfos:[{type:"Name",cardName:"フュージョニスト"},{type:"Name",cardName:"恍惚の人魚"}]},{name:"無の畢竟 オールヴェイン",materialInfos:[{type:"Filter",filter:t=>{var i;return((i=t.status.monsterCategories)==null?void 0:i.includes("Normal"))??!1}},{type:"Filter",filter:t=>{var i;return((i=t.status.monsterCategories)==null?void 0:i.includes("Normal"))??!1}}]},{name:"テセウスの魔棲物",materialInfos:[{type:"Filter",filter:t=>{var i;return((i=t.status.monsterCategories)==null?void 0:i.includes("Tuner"))??!1}},{type:"Filter",filter:t=>{var i;return((i=t.status.monsterCategories)==null?void 0:i.includes("Tuner"))??!1}}]},{name:"ジェムナイト・ジルコニア",materialInfos:[{type:"Filter",filter:t=>{var i;return((i=t.status.nameTags)==null?void 0:i.includes("ジェムナイト"))??!1}},{type:"Filter",filter:t=>t.types.includes("Rock")??!1}]},{name:"メタルフォーゼ・アダマンテ",materialInfos:[{type:"Filter",filter:t=>{var i;return((i=t.status.nameTags)==null?void 0:i.includes("メタルフォーゼ"))??!1}},{type:"Filter",filter:t=>(t.atk??9999)<=2500}]},{name:"メタルフォーゼ・カーディナル",materialInfos:[{type:"Filter",filter:t=>{var i;return((i=t.status.nameTags)==null?void 0:i.includes("メタルフォーゼ"))??!1}},{type:"Filter",filter:t=>(t.atk??9999)<=3e3},{type:"Filter",filter:t=>(t.atk??9999)<=3e3}]}];for(const t of e)yield{name:t.name,actions:[],fusionMaterialInfos:t.materialInfos}}const ei=Object.freeze(Object.defineProperty({__proto__:null,default:Mn},Symbol.toStringTag,{value:"Module"})),Fn=async(e,t,i=!1)=>{if(!e.action.entity.lvl)return;if(e.action.entity.lvl<5)return{};const a=e.activator.getAvailableMonsterZones();let n=e.activator.getMonstersOnField().filter(u=>u.canBeReleased(e.activator,e.action.entity,["AdvanceSummonRelease"],e.action));const r=e.activator.getExtraMonsterZones(),s=e.action.entity.lvl<7?1:2;r.length>=s&&(n=n.filter(u=>u.fieldCell.cellType!=="ExtraMonsterZone"));const o=await e.activator.waitSelectEntities(n,s,u=>(i||u.length>0)&&(s<0||u.length===s)&&(a.length>0||u.some(d=>d.fieldCell.cellType==="ExtraMonsterZone")),"リリースするモンスターを選択",i)??[];return o.length?(await m.releaseManyForTheSameReason(o,["Cost","AdvanceSummonRelease","Rule"],e.action.entity,e.activator),{summonMaterialInfos:o.map(u=>({material:u,cell:u.fieldCell}))}):void 0},Nn=async e=>{var n;const t=["Rule","NormalSummon"];let i="NormalSummon";(n=e.costInfo.summonMaterialInfos)!=null&&n.length&&(i="AdvanceSummon",t.push("AdvanceSummon"));const a=e.dest?[e.dest]:e.activator.getAvailableMonsterZones();return Y(e,i,t,["Attack","Set"],a)},Y=async(e,t,i,a,n)=>{let r=e.dest?[e.dest]:n;return r||(r=e.activator.getMonsterZones(),e.action.entity.fieldCell.cellType==="ExtraDeck"&&r.push(...e.activator.duel.field.getCells("ExtraMonsterZone"))),await e.activator.summon(t,i,e.action,e.action.entity,a,r,e.costInfo.summonMaterialInfos??[],!1),{selectedEntities:[]}},I=async e=>{var t,i;return e.action.entity.info.isRebornable=!((t=e.action.entity.origin.monsterCategories)!=null&&t.includes("RegularSpecialSummonOnly")),e.action.entity.determine(),(i=e.costInfo.summonMaterialInfos)==null||i.map(a=>a.material).forEach(a=>a.onUsedAsMaterial(e,e.action.entity)),!0},On={title:"通常召喚",isMandatory:!1,playType:"NormalSummon",spellSpeed:"Normal",executableCells:["Hand"],executablePeriods:["main1","main2"],executableDuelistTypes:["Controller"],canPayCosts:e=>{if(!e.action.entity.lvl)return!1;if(e.action.entity.lvl<5)return e.activator.getEnableSummonList(e.activator,"NormalSummon",["Rule"],e.action,[{monster:e.action.entity,posList:["Attack","Set"],cells:e.activator.getMonsterZones()}],[],!1).length>0;const t=e.activator.getMonstersOnField().filter(n=>n.canBeReleased(e.activator,e.action.entity,["AdvanceSummonRelease"],e.action)),i=e.action.entity.lvl<7?1:2;return t.length<i?!1:t.getAllOnOffPattern().filter(n=>n.length===i).some(n=>e.activator.getEnableSummonList(e.activator,"AdvanceSummon",["Rule","NormalSummon"],e.action,[{monster:e.action.entity,posList:["Attack","Set"],cells:e.activator.getMonsterZones()}],n.map(r=>({material:r,cell:r.fieldCell})),!1).length)},meetsConditions:e=>e.activator.info.ruleNormalSummonCount<e.activator.info.maxRuleNormalSummonCount&&!!e.action.entity.lvl,getDests:e=>e.action.entity.lvl?e.action.entity.lvl>4?[]:e.activator.getEnableSummonList(e.activator,"NormalSummon",["Rule"],e.action,[{monster:e.action.entity,posList:["Attack","Set"],cells:e.activator.getMonsterZones()}],[],!1).flatMap(i=>i.cells).getDistinct():[],payCosts:Fn,prepare:Nn,execute:I,settle:async()=>!0},K=(e,t,i,a)=>{const n=e.activator.getMonsterZones();return e.action.entity.fieldCell.cellType==="ExtraDeck"&&n.push(...e.activator.getAvailableExtraMonsterZones()),e.activator.getEnableSummonList(e.activator,"SpecialSummon",a,e.action,[{monster:e.action.entity,posList:t,cells:n}],i,!1).flatMap(s=>s.cells)},j=(...e)=>K(...e).length>0,Bn={title:"攻撃宣言",isMandatory:!1,playType:"DeclareAttack",spellSpeed:"Normal",executableCells:["MonsterZone","ExtraMonsterZone"],executablePeriods:["b1Battle","b2Battle"],executableDuelistTypes:["Controller"],hasToTargetCards:!0,getTargetableEntities:e=>e.action.entity.getAttackTargets(),canExecute:(e,t)=>!e.activator.isTurnPlayer||!e.action.entity.isMonster||!e.action.entity.status.canAttack||e.action.entity.info.attackDeclareCount>0||e.action.entity.battlePosition!=="Attack"?!1:e.action.getTargetableEntities(e,t).length>0,getDests:(e,t)=>e.action.getTargetableEntities(e,t).map(i=>i.fieldCell),prepare:async(e,t)=>{var n,r;if(e.action.entity.info.attackDeclareCount>0||e.action.entity.battlePosition!=="Attack")return;const i=e.action.getTargetableEntities(e,t);if(i.length===0)throw new S("攻撃対象の選択肢がない状態で実行された。",e);let a=i[0];for(;i.length!==1;){if((n=e.dest)!=null&&n.targetForAttack){a=e.dest.entities.find(c=>c.entityType==="Duelist")??((r=e.dest)==null?void 0:r.targetForAttack);break}if(e.activator.duelistType==="NPC"){let o=e.activator.selectAttackTargetForNPC(e.action.entity,e.action);o||(e.activator.duel.log.warn("NPCの攻撃対象選択に失敗したため、ランダムに攻撃対象を選択。"),o=i.randomPick());break}const s=await e.activator.waitSelectEntity(i,"攻撃対象を選択。",!0);if(!s)return;a=s;break}return e.action.entity.field.duel.declareAttack(e.action.entity,a),{selectedEntities:[a]}},execute:async()=>!0,settle:async()=>!0},Ln={title:"戦闘",isMandatory:!1,playType:"Battle",spellSpeed:"Normal",executableCells:["MonsterZone","ExtraMonsterZone"],executablePeriods:["b1DDmgCalc","b2DDmgCalc"],executableDuelistTypes:["Controller"],hasToTargetCards:!0,canExecute:e=>!!e.activator.duel.targetForAttack&&e.activator.duel.attackingMonster===e.action.entity&&e.action.entity.isMonster,prepare:async e=>{if(e.activator.duel.attackingMonster!==e.action.entity)throw new S("canExecuteの判定が正しく行われなかった",e,e.activator.duel.attackingMonster,e.activator.duel.targetForAttack);if(!e.activator.duel.targetForAttack)throw new S("canExecuteの判定が正しく行われなかった",e,e.activator.duel.attackingMonster,e.activator.duel.targetForAttack);return{selectedEntities:[e.activator.duel.targetForAttack]}},execute:async()=>!0,settle:async()=>!0},ti=async e=>{if(!(e.action.entity.info.battlePotisionChangeCount>0||!e.activator.isTurnPlayer))return await e.action.entity.setBattlePosition(e.action.entity.battlePosition==="Attack"?"Defense":"Attack",["Rule"],e.action.entity,e.activator),e.action.entity.info.battlePotisionChangeCount++,{selectedEntities:[]}},qn={title:"反転召喚",isMandatory:!1,playType:"FlipSummon",spellSpeed:"Normal",executableCells:["MonsterZone","ExtraMonsterZone"],executablePeriods:["main1","main2"],executableDuelistTypes:["Controller"],canExecute:e=>e.action.entity.info.battlePotisionChangeCount===0&&e.action.entity.info.attackDeclareCount===0&&e.activator.isTurnPlayer&&e.action.entity.face==="FaceDown"&&e.action.entity.isMonster,prepare:ti,execute:async e=>(e.action.entity.determine(),!0),settle:async()=>!0},Rn={title:"表示形式変更",isMandatory:!1,playType:"ChangeBattlePosition",spellSpeed:"Normal",executableCells:["MonsterZone","ExtraMonsterZone"],executablePeriods:["main1","main2"],executableDuelistTypes:["Controller"],canExecute:e=>e.action.entity.info.battlePotisionChangeCount===0&&e.action.entity.info.attackDeclareCount===0&&e.activator.isTurnPlayer&&e.action.entity.face==="FaceUp"&&e.action.entity.isMonster,prepare:ti,execute:async e=>(e.action.entity.determine(),!0),settle:async()=>!0},ae=async(e,t=["Attack","Defense"])=>{const i=e.activator.getMonsterZones();return e.action.entity.wasMovedAfter(e.isActivatedAt)?!1:(await e.activator.summon("SpecialSummon",["Effect"],e.action,e.action.entity,t,i,[],!1),!0)},ii=[Bn,Ln],Ne=[...ii,Rn,qn],wt=[On,...Ne],Hn=(e,t,i,a,n,r,s,o,c,u,d)=>{const p={posList:c,cells:u},f={posList:[],cells:[]};return t!==s||!s.isMonster||!s.origin.monsterCategories?p:s.origin.monsterCategories.includes("NormalSummonOnly")?n.includes("NormalSummon")||n.includes("AdvanceSummon")?p:f:s.origin.monsterCategories.includes("SpecialSummon")?s.isInTrashCell&&!s.origin.monsterCategories.includes("RegularSpecialSummonOnly")?s.info.isRebornable||s.origin.monsterCategories.includes("FreeReborn")?p:f:n.includes("PendulumSummon")&&s.origin.monsterCategories.includes("FreeReborn")?f:n.union(jt).length?p:s.origin.monsterCategories.includes("RegularSpecialSummonOnly")?d?p:f:p:p},ze={},Zn=e=>(ze[e]||(ze[e]={title:`戦闘破壊耐性(${e})`,playType:"ContinuousEffect",isMandatory:!0,executableCells:["MonsterZone"],executablePeriods:["b1DDmgCalc","b2DDmgCalc"],executableDuelistTypes:["Controller"],isOnlyNTimesPerTurnIfFaceup:e,isApplicableTo:(t,i,a)=>a.includes(t.entity)?i!=="BattleDestroy"?[]:[t.entity]:[],substitute:async(t,i,a)=>a.includes(t.entity)?i!=="BattleDestroy"?[]:t.entity.isEffective?(t.entity.controller.writeInfoLog(`${t.entity.toString()}は１ターンに１度だけ戦闘では破壊されない。`),[t.entity]):[]:[]}),ze[e]),ct=e=>e.activator.canRelease([e.action.entity])&&e.action.entity.canBeReleased(e.activator,e.action.entity,["ReleaseAsCost"],e.action),ut=async e=>(await e.action.entity.release(["Cost"],e.action.entity,e.activator),{release:[e.action.entity]}),ai=e=>({title:"シンクロ召喚",isMandatory:!1,playType:"QuickEffect",spellSpeed:"Quick",executableCells:L,executablePeriods:["main1","main2"],executableDuelistTypes:["Controller"],isOnlyNTimesPerChain:1,meetsConditions:t=>!t.activator.isTurnPlayer,canExecute:t=>t.activator.getExtraDeck().cardEntities.filter(i=>{var a;return(a=i.status.monsterCategories)==null?void 0:a.includes("Synchro")}).flatMap(i=>i.actions).filter(i=>i.playType==="SpecialSummon").map(i=>({index:-1,chainNumber:void 0,action:i,activator:t.activator,targetChainBlock:void 0,isActivatedIn:i.entity.fieldCell,costInfo:{},state:"unloaded",dest:void 0,ignoreCost:!1})).some(i=>i.action.getEnableMaterialPatterns(i).some(a=>{const n=a.map(r=>r.material);return n.every(r=>r.controller===t.activator)&&n.every(r=>r.isOnFieldAsMonsterStrictly)&&n.includes(t.action.entity)})),prepare:C,execute:async t=>{if(t.activator!==t.action.entity.controller||t.activator.getMonstersOnField().filter(s=>s.lvl!==void 0).length<2)return!1;const i=t.activator.getExtraDeck().cardEntities.filter(s=>{var o;return(o=s.status.monsterCategories)==null?void 0:o.includes("Synchro")}).flatMap(s=>s.actions).filter(s=>s.playType==="SpecialSummon").map(s=>({index:-1,chainNumber:void 0,action:s,activator:t.activator,targetChainBlock:void 0,isActivatedIn:s.entity.fieldCell,isActivatedAt:t.isActivatedAt,costInfo:{},state:"unloaded",dest:void 0,ignoreCost:!1})).filter(s=>s.action.getEnableMaterialPatterns(s).some(o=>{const c=o.map(u=>u.material);return c.every(u=>u.controller===t.activator)&&c.every(u=>u.isOnFieldAsMonsterStrictly)&&c.includes(t.action.entity)})).map(s=>s.action.entity).getDistinct();if(!i.length)return!1;const a=await t.activator.waitSelectEntities(i,1,s=>s.length===1,"シンクロ召喚するモンスターを選択。",!1)??[];if(!a.length)throw new S("想定されない状態",t);const n=a[0].actions.find(s=>s.playType==="SpecialSummon");if(!n)throw new S("想定されない状態",t);const r=n.getClone(s=>{const o=s.map(c=>c.material);return o.every(c=>c.controller===t.activator)&&o.every(c=>c.isOnFieldAsMonsterStrictly)&&o.includes(t.action.entity)});return t.nextActionInfo={action:r,originSeq:r.seq},!0},settle:async()=>!0,...e}),Gn=ve("直接攻撃","Monster",e=>[e],e=>[new H({title:"直接攻撃",validateAlive:()=>!0,isContinuous:!0,isSpawnedBy:e,actionAttr:{},isApplicableTo:(t,i)=>t.isSpawnedBy===i,statusCalculator:()=>({canDirectAttack:!0})})]),Ve={title:"融合素材代用",appliableCellTypes:["MonsterZone","ExtraMonsterZone","Hand","Graveyard "],appliableDuelPeriodKeys:R,faceList:["FaceUp","FaceDown"],canStart:()=>!0,start:async e=>{const t=new H({title:"融合素材代用",validateAlive:()=>!0,isContinuous:!0,isSpawnedBy:e,actionAttr:{},isApplicableTo:()=>!0,statusCalculator:(i,a,n)=>(a.isSpawnedBy.isEffective&&(n.fusionSubstitute=!0),n)});return e.statusOperatorBundle.push(t),{targets:[e],seq:t.seq}},finish:async(e,t)=>{t.targets.forEach(i=>i.statusOperatorBundle.removeItem(t.seq))}},$n=(e,t,i,a)=>{if(!e.action.entity.origin.link||e.action.entity.origin.link<i.length)return;let n=i.map(s=>({material:s,cell:s.fieldCell,link:1}));if(e.action.entity.origin.link>i.length){if(i.every(c=>(c.origin.link??1)<2))return;const s=[n];i.filter(c=>(c.origin.link??1)>1).forEach(c=>{[...s].forEach(u=>{s.push([...u.filter(d=>d.material!==c),{material:c,cell:c.fieldCell,link:c.origin.link??1}])})});const o=s.find(c=>c.reduce((u,d)=>u+d.link,0)===e.action.entity.origin.link);if(!o)return;n=o}if(!a(i)||!e.activator.getEnableSummonList(e.activator,"LinkSummon",["Rule","SpecialSummon"],e.action,[{monster:e.action.entity,posList:["Attack"],cells:t}],n,!1).length)return;if(e.activator.getAvailableExtraMonsterZones().length)return n;const r=e.activator.duel.field.getCells("ExtraMonsterZone").map(s=>s.cardEntities[0]).filter(s=>s);if(r.filter(s=>s.controller===e.activator).length&&r.filter(s=>s.controller===e.activator).length===i.filter(s=>s.fieldCell.cellType==="ExtraMonsterZone").length||e.activator.getMonsterZones().flatMap(s=>s.linkArrowSources).some(s=>!i.includes(s))||e.activator.duel.field.canExtraLink(e.action.entity,n))return n};function*jn(e,t=()=>!0){let i=[...e.activator.getMonstersOnField().filter(n=>n.battlePosition!=="Set"),...e.activator.getHandCell().entities.filter(n=>n.origin.kind==="Monster")];if(i.every(n=>!n.status.allowHandLink)&&(i=i.filter(n=>n.fieldCell.isPlayFieldCell)),i.length<1)return;const a=[...e.activator.getMonsterZones(),...e.activator.duel.field.getAvailableExtraMonsterZones()];yield*i.getAllOnOffPattern().filter(n=>n.some(r=>r.status.allowHandLink)||n.every(r=>r.isOnFieldAsMonsterStrictly)).map(n=>$n(e,a,n,t)??[]).filter(n=>n.length)}const Un=async(e,t,i)=>{var c;const a=e.action.getEnableMaterialPatterns(e).toArray(),n=a.map(u=>({infos:u,materialSeqList:u.map(d=>d.material.seq).sort()}));let r=a[0].map(u=>u.material);if(a.length>1){const u=a.flatMap(p=>p.map(f=>f.material)).getDistinct(),d=await e.activator.waitSelectEntities(u,void 0,p=>{const f=p.map(h=>h.seq).sort();return n.some(h=>f.length===h.materialSeqList.length&&f.every((y,_)=>y===h.materialSeqList[_]))},"リンク素材とするモンスターを選択",i);if(console.log(d),!d)return;r=d}const s=r.map(u=>u.seq).sort(),o=(c=n.find(u=>s.length===u.materialSeqList.length&&s.every((d,p)=>d===u.materialSeqList[p])))==null?void 0:c.infos;if(!o)throw new S("想定されない状態",e,r);return await m.sendManyToGraveyardForTheSameReason(r,["LinkMaterial","Cost","Rule","SpecialSummonMaterial"],e.action.entity,e.activator),{summonMaterialInfos:o}},dt=(e=()=>!0)=>({title:"リンク召喚",isMandatory:!1,playType:"SpecialSummon",spellSpeed:"Normal",executableCells:["ExtraDeck"],executablePeriods:["main1","main2"],executableDuelistTypes:["Controller"],getEnableMaterialPatterns:t=>jn(t,e),canPayCosts:t=>t.action.getEnableMaterialPatterns(t).some(i=>i.length),canExecute:t=>!t.ignoreCost||t.activator.getAvailableExtraMonsterZones().length+t.activator.getAvailableMonsterZones().length>0,payCosts:Un,prepare:t=>Y(t,"LinkSummon",["Rule","SpecialSummon","LinkSummon"],["Attack"]),execute:I,settle:async()=>!0});function*zn(){yield*[{name:"ＬＡＮフォリンクス",validator:e=>e.length===2},{name:"トラフィックゴースト",validator:e=>e.length===3},{name:"天威の鬼神",validator:e=>e.length>1&&e.some(t=>{var i;return(i=t.status.monsterCategories)==null?void 0:i.includes("Link")})},{name:"天威の拳僧",validator:e=>e.every(t=>{var i,a;return((i=t.status.nameTags)==null?void 0:i.includes("天威"))&&!((a=t.status.monsterCategories)!=null&&a.includes("Link"))})},{name:"電影の騎士ガイアセイバー",validator:e=>e.length>1}].map(e=>({name:e.name,actions:[dt(e.validator)]}))}const ni=Object.freeze(Object.defineProperty({__proto__:null,default:zn},Symbol.toStringTag,{value:"Module"}));function*Vn(){yield*["サイバー・ドラゴン","六武衆のご隠居","アンノウン・シンクロン"].map(e=>({name:e,actions:[{title:"特殊召喚",isMandatory:!1,playType:"SpecialSummon",spellSpeed:"Normal",executableCells:["Hand"],executablePeriods:["main1","main2"],executableDuelistTypes:["Controller"],isOnlyNTimesPerDuel:e==="アンノウン・シンクロン"?1:void 0,canExecute:t=>{const i=t.action.entity.field.getMonstersOnFieldStrictly();return i.length>0&&i.every(a=>a.controller!==t.activator)&&j(t,T,[],["Rule"])},getDests:t=>K(t,T,[],["Rule"]),prepare:t=>Y(t,"SpecialSummon",["SpecialSummon","Rule"],T),execute:I,settle:async()=>!0}]})),yield{name:"ジャンク・フォアード",actions:[{title:"特殊召喚",isMandatory:!1,playType:"SpecialSummon",spellSpeed:"Normal",executableCells:["Hand"],executablePeriods:["main1","main2"],executableDuelistTypes:["Controller"],canExecute:e=>e.activator.getMonstersOnField().length===0&&j(e,T,[],["Rule"]),getDests:e=>K(e,T,[],["Rule"]),prepare:e=>Y(e,"SpecialSummon",["SpecialSummon","Rule"],T),execute:I,settle:async()=>!0}]},yield{name:"ゾンビキャリア",actions:[{title:"①自己再生",isMandatory:!1,playType:"IgnitionEffect",spellSpeed:"Normal",executableCells:["Graveyard"],executablePeriods:["main1","main2"],executableDuelistTypes:["Controller"],fixedTags:["SpecialSummonFromGraveyard"],canPayCosts:e=>e.activator.getHandCell().cardEntities.length>0,getDests:e=>K(e,T,[],["Effect"]),canExecute:e=>j(e,T,[],["Effect"]),payCosts:async(e,t,i)=>{const a=e.activator.getHandCell().cardEntities,n=await e.activator.waitSelectEntity(a,"デッキトップに戻すカードを一枚選択。",i);if(!n)throw new D(e);return await n.returnToDeck("Top",["Cost"],e.action.entity,e.activator),{returnToDeck:[n]}},prepare:async()=>({selectedEntities:[]}),execute:async e=>await ae(e)?(e.action.entity.statusOperatorBundle.push(new H({title:"除外予定",validateAlive:()=>!0,isContinuous:!1,isSpawnedBy:e.action.entity,actionAttr:e.action,isApplicableTo:(t,i)=>i.isOnFieldAsMonsterStrictly&&i.face==="FaceUp",statusCalculator:()=>({willBeBanished:!0})})),!0):!1,settle:async()=>!0}]},yield{name:"グローアップ・バルブ",actions:[{title:"①自己再生",isMandatory:!1,playType:"IgnitionEffect",spellSpeed:"Normal",executableCells:["Graveyard"],executablePeriods:["main1","main2"],executableDuelistTypes:["Controller"],isOnlyNTimesPerDuel:1,fixedTags:["SpecialSummonFromGraveyard"],canPayCosts:e=>e.activator.getDeckCell().cardEntities.length>0,getDests:e=>K(e,T,[],["Effect"]),canExecute:e=>j(e,T,[],["Effect"]),payCosts:async e=>{const t=e.activator.getDeckCell().cardEntities[0];return await e.activator.getDeckCell().cardEntities[0].sendToGraveyard(["Cost"],e.action.entity,e.activator),{sendToGraveyard:[t]}},prepare:async()=>({selectedEntities:[]}),execute:e=>ae(e),settle:async()=>!0}]},yield{name:"終末の騎士",actions:[{title:"①墓地送り",isMandatory:!1,playType:"TriggerEffect",spellSpeed:"Normal",executableCells:["MonsterZone"],executablePeriods:[...w,...N],executableDuelistTypes:["Controller"],meetsConditions:e=>e.action.entity.hasBeenSummonedNow(["NormalSummon","SpecialSummon","FlipSummon"]),canExecute:e=>e.activator.getDeckCell().cardEntities.some(t=>t.attr.includes("Dark")),prepare:async e=>{const t=["SendToGraveyardFromDeck"];return e.action.entity.moveLog.latestRecord.movedAs.includes("NormalSummon")?t.push("IfNormarlSummonSucceed"):e.action.entity.moveLog.latestRecord.movedAs.includes("SpecialSummon")&&t.push("IfSpecialSummonSucceed"),{selectedEntities:[],chainBlockTags:t}},execute:async e=>{const t=e.activator.getDeckCell().cardEntities.filter(a=>a.attr.includes("Dark"));if(t.length===0)return!1;const i=await e.activator.waitSelectEntity(t,"墓地に送るモンスターを選択",!1);if(!i)throw new D(e);return await i.sendToGraveyard(["Effect"],e.action.entity,e.activator),e.activator.getDeckCell().shuffle(),!0},settle:async()=>!0}]},yield{name:"マスマティシャン",actions:[{title:"①墓地送り",isMandatory:!1,playType:"TriggerEffect",spellSpeed:"Normal",executableCells:["MonsterZone"],executablePeriods:[...w,...N],executableDuelistTypes:["Controller"],fixedTags:["IfNormarlSummonSucceed","SendToGraveyardFromDeck"],meetsConditions:e=>e.action.entity.hasBeenSummonedNow(["NormalSummon"]),canExecute:e=>e.activator.getDeckCell().cardEntities.some(t=>t.lvl&&t.lvl<5),prepare:async()=>({selectedEntities:[]}),execute:async e=>{const t=e.activator.getDeckCell().cardEntities.filter(a=>a.lvl&&a.lvl<5);if(t.length===0)return!1;const i=await e.activator.waitSelectEntity(t,"墓地に送るモンスターを選択",!1);if(!i)throw new D(e);return await i.sendToGraveyard(["Effect"],e.action.entity,e.activator),e.activator.getDeckCell().shuffle(),!0},settle:async()=>!0},{title:"②ドロー",isMandatory:!1,playType:"TriggerEffect",spellSpeed:"Normal",executableCells:["Graveyard"],executablePeriods:[...w,...N],executableDuelistTypes:["Controller"],fixedTags:["Draw"],meetsConditions:e=>e.action.entity.moveLog.latestRecord.movedAs.includes("BattleDestroy")&&e.action.entity.wasMovedAtPreviousChain,canExecute:e=>e.activator.getDeckCell().cardEntities.length>0&&e.activator.canDraw,prepare:async()=>({selectedEntities:[]}),execute:async e=>(await e.activator.draw(1,e.action.entity,e.activator),!0),settle:async()=>!0}]},yield{name:"ライトロード・ビースト ウォルフ",actions:[{title:"①自己再生",isMandatory:!0,playType:"TriggerEffect",spellSpeed:"Normal",executableCells:["Graveyard"],executablePeriods:[...w,...N],executableDuelistTypes:["Controller"],fixedTags:["SpecialSummonFromGraveyard"],meetsConditions:e=>e.action.entity.wasMovedFrom.cellType==="Deck"&&e.action.entity.wasMovedAtPreviousChain,getDests:e=>K(e,T,[],["Effect"]),canExecute:e=>j(e,T,[],["Effect"]),prepare:async()=>({selectedEntities:[]}),execute:e=>ae(e),settle:async()=>!0}]},yield{name:"伝説の白石",actions:[{title:"①サーチ",isMandatory:!0,playType:"TriggerEffect",spellSpeed:"Normal",executableCells:["Graveyard"],executablePeriods:R,executableDuelistTypes:["Controller"],fixedTags:["SearchFromDeck"],meetsConditions:e=>e.action.entity.wasMovedAtPreviousChain&&e.action.entity.wasMovedFrom.cellType!=="Banished",canExecute:e=>e.activator.getDeckCell().cardEntities.some(t=>t.nm==="青眼の白龍")&&e.activator.canAddToHandFromDeck,prepare:async()=>({selectedEntities:[]}),execute:async e=>{const t=e.activator.getDeckCell().cardEntities.find(i=>i.nm==="青眼の白龍");return t?(await t.addToHand(["Effect"],e.action.entity,e.activator),e.activator.getDeckCell().shuffle(),!0):!1},settle:async()=>!0}]};for(const e of[{name:"灰流うらら",chainBlockTags:["Draw","SearchFromDeck","SendToGraveyardFromDeck","SpecialSummonFromDeck"]},{name:"屋敷わらし",chainBlockTags:["BanishFromGraveyard","SpecialSummonFromGraveyard","AddToHandFromGraveyard"]}])yield{name:e.name,actions:[{title:"①無効化",isMandatory:!1,playType:"QuickEffect",spellSpeed:"Quick",executableCells:["Hand"],executablePeriods:w,executableDuelistTypes:["Controller"],isOnlyNTimesPerTurn:1,negatePreviousBlock:!0,fixedTags:["NegateCardEffect"],canPayCosts:t=>t.activator.canDiscard([t.action.entity]),canExecute:t=>(t.targetChainBlock&&t.targetChainBlock.chainBlockTags.union(e.chainBlockTags).length>0)??!1,payCosts:async t=>(await t.action.entity.discard(["Cost"],t.action.entity,t.activator),{sendToGraveyard:[t.action.entity]}),prepare:C,execute:async(t,i)=>{const a=i[t.index-1];return a.isNegatedEffectBy=t.action,!0},settle:async()=>!0}]};for(const e of["翻弄するエルフの剣士","ロードランナー","氷結界の修験者"])yield{name:e,actions:[],continuousEffects:[Ht("①戦闘破壊耐性","Monster",t=>[t],t=>[ge.createContinuous("①戦闘破壊耐性",()=>!0,t,()=>!0,["BattleDestroy"],(i,a,n)=>!t.isEffective||(n.atk??0)<1900?!0:(t.duel.log.info(`${t.toString()}は攻撃力1900以上のモンスターとの先頭では破壊されない。`,t.controller),!1))])]}}const ri=Object.freeze(Object.defineProperty({__proto__:null,default:Vn},Symbol.toStringTag,{value:"Module"})),Wn=(e,t,i,a,n,r)=>{if(!e.action.entity.origin.level||a.some(u=>!u.lvl)||a.map(u=>u.lvl??0).reduce((u,d)=>u+d,0)!==e.action.entity.origin.level)return;const s=a.filter(u=>{var d;return(d=u.status.monsterCategories)==null?void 0:d.some(p=>p==="Tuner")}),o=a.filter(u=>{var d;return(d=u.status.monsterCategories)==null?void 0:d.every(p=>p!=="Tuner")});if(!n(s)||!r(o))return;const c=[...s.map(u=>({material:u,cell:u.fieldCell,isAsTuner:!0})),...o.map(u=>({material:u,cell:u.fieldCell,isAsTuner:!1}))];if(e.activator.getEnableSummonList(e.activator,"SynchroSummon",["Rule","SpecialSummon"],e.action,[{monster:e.action.entity,posList:t,cells:i}],c,!1).length)return c};function*Qn(e,t=a=>a.length===1,i=a=>a.length>0){let a=[...e.activator.getMonstersOnField().filter(s=>s.battlePosition!=="Set"),...e.activator.getHandCell().cardEntities.filter(s=>s.origin.kind==="Monster")];if(a.every(s=>!s.status.allowHandSynchro)&&(a=a.filter(s=>s.fieldCell.isPlayFieldCell)),a.length<2)return;const n=[...e.activator.getMonsterZones(),...e.activator.duel.field.getCells("ExtraMonsterZone")],r=["Attack","Defense"];yield*a.getAllOnOffPattern().filter(s=>s.some(o=>o.status.allowHandSynchro)||s.every(o=>o.isOnFieldAsMonsterStrictly)).map(s=>Wn(e,r,n,s,t,i)??[]).filter(s=>s.length)}const Xn=async(e,t,i)=>{var c;const a=e.action.getEnableMaterialPatterns(e).toArray(),n=a.map(u=>({infos:u,materialSeqList:u.map(d=>d.material.seq).sort()}));let r=a[0].map(u=>u.material);if(a.length>1){const u=a.flatMap(p=>p.map(f=>f.material)).getDistinct(),d=await e.activator.waitSelectEntities(u,void 0,p=>{const f=p.map(h=>h.seq).sort();return n.some(h=>f.length===h.materialSeqList.length&&f.every((y,_)=>y===h.materialSeqList[_]))},"シンクロ素材とするモンスターを選択",i);if(!d)return;r=d}const s=r.map(u=>u.seq).sort(),o=(c=n.find(u=>s.length===u.materialSeqList.length&&s.every((d,p)=>d===u.materialSeqList[p])))==null?void 0:c.infos;if(!o)throw new S("想定されない状態",e,r);return await m.sendManyToGraveyardForTheSameReason(r,["SynchroMaterial","Cost","Rule","SpecialSummonMaterial"],e.action.entity,e.activator),{summonMaterialInfos:o}},$=(e=i=>i.length===1,t=i=>i.length>0)=>({title:"シンクロ召喚",isMandatory:!1,playType:"SpecialSummon",spellSpeed:"Normal",executableCells:["ExtraDeck"],executablePeriods:["main1","main2"],executableDuelistTypes:["Controller"],getEnableMaterialPatterns:i=>Qn(i,e,t),canPayCosts:i=>i.action.getEnableMaterialPatterns(i).some(a=>a.length),canExecute:i=>!i.ignoreCost||i.activator.getAvailableExtraMonsterZones().length+i.activator.getAvailableMonsterZones().length>0,payCosts:Xn,prepare:i=>Y(i,"SynchroSummon",["Rule","SpecialSummon","SynchroSummon"],["Attack","Defense"]),execute:I,settle:async()=>!0}),_t=e=>({title:"射出",isMandatory:!1,playType:"IgnitionEffect",spellSpeed:"Normal",executableCells:L,executablePeriods:["main1","main2"],executableDuelistTypes:["Controller"],needsToPayCost:!0,fixedTags:["DamageToOpponent"],canPayCosts:t=>t.activator.getMonstersOnField().filter(e.filter).some(i=>i.canBeReleased(t.activator,t.action.entity,["ReleaseAsCost"],t.action)),payCosts:async(t,i,a)=>{const n=await t.activator.waitSelectEntities(t.activator.getMonstersOnField().filter(e.filter).filter(r=>r.canBeReleased(t.activator,t.action.entity,["ReleaseAsCost"],t.action)),e.qty,r=>r.length===e.qty,"リリースするモンスターを選択。",a);if(n)return t.data=e.calcDamage(t,n),await m.releaseManyForTheSameReason(n,["Cost","Release"],t.action.entity,t.activator),{release:n}},prepare:C,execute:async t=>{if(!_a(t.data))throw new S("値が正しくない。",t,t.data);return t.activator.getOpponentPlayer().effectDamage(t.data,t),!0},settle:async()=>!0,...e.otherActionProps});function*Kn(){const e=[{name:"キャノン・ソルジャー",qty:1,filter:()=>!0,calcDamage:()=>500,otherActionProps:{},otherActions:[]},{name:"アマゾネスの射手",qty:2,filter:()=>!0,calcDamage:()=>1200,otherActionProps:{},otherActions:[]},{name:"メガキャノン・ソルジャー",qty:2,filter:()=>!0,calcDamage:()=>1500,otherActionProps:{},otherActions:[]},{name:"プリーステス・オーム",qty:1,filter:t=>t.attr.includes("Dark"),calcDamage:()=>800,otherActionProps:{},otherActions:[]},{name:"対空放花",qty:1,filter:t=>t.types.includes("Insect"),calcDamage:()=>800,otherActionProps:{},otherActions:[]},{name:"人投げトロール",qty:1,filter:t=>{var i,a;return!!((i=t.status.monsterCategories)!=null&&i.includes("Normal")&&!((a=t.status.monsterCategories)!=null&&a.includes("Token")))},calcDamage:()=>800,otherActionProps:{},otherActions:[]},{name:"墓守の大筒持ち",qty:1,filter:t=>{var i;return!!((i=t.status.nameTags)!=null&&i.includes("墓守")&&t.nm!=="墓守の大筒持ち")},calcDamage:()=>700,otherActionProps:{},otherActions:[]},{name:"カタパルト・ウォリアー",qty:1,filter:t=>{var i;return!!((i=t.status.nameTags)!=null&&i.includes("ジャンク"))},calcDamage:(t,i)=>i.map(a=>a.origin.attack??0).reduce((a,n)=>a+n,0),otherActionProps:{isOnlyNTimesPerTurnIfFaceup:1},otherActions:[$()]},{name:"ダーク・ダイブ・ボンバー",qty:1,filter:t=>!!(t.lvl&&t.lvl>0),calcDamage:(t,i)=>i.map(a=>a.lvl??0).reduce((a,n)=>a+n,0)*200,otherActionProps:{isOnlyNTimesPerTurn:1,executablePeriods:["main1"]},otherActions:[$()]}];for(const t of e)yield{name:t.name,actions:[_t(t),...t.otherActions]};yield{name:"トゥーン・キャノン・ソルジャー",actions:[_t({qty:1,filter:()=>!0,calcDamage:()=>500,otherActionProps:{}})],immediatelyActions:[{title:"自壊",executableCells:["MonsterZone"],executablePeriods:R.filter(t=>t!=="b1DBeforeDmgCalc"&&t!=="b2DBeforeDmgCalc"&&t!=="b1DDmgCalc"&&t!=="b2DDmgCalc"),execute:async(t,i,a)=>{i&&a&&i.nm==="トゥーン・ワールド"&&(a.movedAs.every(n=>!n.endsWith("Destroy"))||(t.entity.controller.writeInfoLog(`${i.toString()}が破壊されたため、${t.entity.toString()}は破壊される。`),m.tryMarkForDestory([t.entity],{activator:t.entity.controller,action:t,selectedEntities:[]}),t.entity.info.isDying=!0,t.entity.info.causeOfDeath=["EffectDestroy"]))}}],continuousEffects:[ve("召喚酔い","Monster",t=>[t],t=>[new H({title:"召喚酔い",validateAlive:i=>{const a=i.isSpawnedBy.moveLog.latestArrivalRecord;return!a||!i.effectOwner.duel.clock.isSameTurn(a.movedAt)?!1:a.movedAs.union(["NormalSummon","FlipSummon","SpecialSummon"]).length>0},isContinuous:!0,isSpawnedBy:t,actionAttr:{},isApplicableTo:()=>!0,statusCalculator:()=>({canAttack:!1})})]),ve("直接攻撃","Monster",t=>[t],t=>[new H({title:"直接攻撃",validateAlive:()=>!0,isContinuous:!0,isSpawnedBy:t,actionAttr:{},isApplicableTo:()=>!0,statusCalculator:i=>i.controller.getEntiteisOnField().filter(a=>a.nm==="トゥーン・ワールド").some(a=>a.face==="FaceUp")?i.controller.getOpponentPlayer().getMonstersOnField().filter(a=>{var n;return(n=a.status.monsterCategories)==null?void 0:n.includes("Toon")}).some(a=>a.face==="FaceUp")?{}:{canDirectAttack:!0}:{}})])]}}const si=Object.freeze(Object.defineProperty({__proto__:null,default:Kn},Symbol.toStringTag,{value:"Module"}));function*Jn(){yield*["ラージマウス","レインボー・フラワー","レッグル","女王の影武者","人造人間７号"].map(e=>({name:e,actions:[],continuousEffects:[Gn]}))}const li=Object.freeze(Object.defineProperty({__proto__:null,default:Jn},Symbol.toStringTag,{value:"Module"}));function*Yn(){yield*[{name:"キラー・ポテト",filter:e=>e.attr.includes("Dark")&&(e.atk??9999)<=1500,qtyList:[1],posList:["Attack"],destoryTypes:["EffectDestroy"],executableCells:["Graveyard"]},{name:"キラー・トマト",filter:e=>e.attr.includes("Dark")&&(e.atk??9999)<=1500,qtyList:[1],posList:["Attack"],destoryTypes:["BattleDestroy"],executableCells:["Graveyard"]},{name:"巨大ネズミ",filter:e=>e.attr.includes("Earth")&&(e.atk??9999)<=1500,qtyList:[1],posList:["Attack"],destoryTypes:["BattleDestroy"],executableCells:["Graveyard"]},{name:"グリズリーマザー",filter:e=>e.attr.includes("Water")&&(e.atk??9999)<=1500,qtyList:[1],posList:["Attack"],destoryTypes:["BattleDestroy"],executableCells:["Graveyard"]},{name:"シャインエンジェル",filter:e=>e.attr.includes("Light")&&(e.atk??9999)<=1500,qtyList:[1],posList:["Attack"],destoryTypes:["BattleDestroy"],executableCells:["Graveyard"]},{name:"ドラゴンフライ",filter:e=>e.attr.includes("Wind")&&(e.atk??9999)<=1500,qtyList:[1],posList:["Attack"],destoryTypes:["BattleDestroy"],executableCells:["Graveyard"]},{name:"ＵＦＯタートル",filter:e=>e.attr.includes("Fire")&&(e.atk??9999)<=1500,qtyList:[1],posList:["Attack"],destoryTypes:["BattleDestroy"],executableCells:["Graveyard"]},{name:"荒野の女戦士",filter:e=>e.attr.includes("Earth")&&e.types.includes("Warrior")&&(e.atk??9999)<=1500,qtyList:[1],posList:["Attack"],destoryTypes:["BattleDestroy"],executableCells:["Graveyard"]},{name:"リトル・トルーパー",filter:e=>e.types.includes("Warrior")&&(e.lvl??9999)<3,qtyList:[1],posList:["Set"],destoryTypes:["BattleDestroy"],executableCells:["Graveyard","Banished"]},{name:"破面竜",filter:e=>e.types.includes("Warrior")&&(e.def??9999)<=1500,qtyList:[1],posList:["Attack","Defense"],destoryTypes:["BattleDestroy"],executableCells:["Graveyard"]},{name:"共鳴虫",filter:e=>e.types.includes("Insect")&&(e.atk??9999)<=1500,qtyList:[1],posList:["Attack","Defense"],destoryTypes:["BattleDestroy"],executableCells:["Graveyard"]},{name:"ピラミッド・タートル",filter:e=>e.types.includes("Zombie")&&(e.def??9999)<=2e3,qtyList:[1],posList:["Attack","Defense"],destoryTypes:["BattleDestroy"],executableCells:["Graveyard"]},{name:"ユーフォロイド",filter:e=>e.types.includes("Machine")&&(e.atk??9999)<=1500,qtyList:[1],posList:["Attack"],destoryTypes:["BattleDestroy"],executableCells:["Graveyard"]},{name:"ヘル・セキュリティ",filter:e=>e.types.includes("Fiend")&&(e.lvl??9999)===1,qtyList:[1],posList:["Attack","Defense"],destoryTypes:["BattleDestroy"],executableCells:["Graveyard"]},{name:"ガスタ・イグル",filter:e=>(e.status.nameTags??[]).includes("ガスタ")&&(e.status.monsterCategories??[]).includes("Tuner"),qtyList:[1],posList:["Attack","Defense"],destoryTypes:["BattleDestroy"],executableCells:["Graveyard"]},{name:"幻影の魔術士",filter:e=>(e.status.nameTags??[]).includes("ＨＥＲＯ")&&(e.atk??9999)<=1e3,qtyList:[1],posList:["Defense"],destoryTypes:["BattleDestroy"],executableCells:["Graveyard"]},{name:"ジェネクス・サーチャー",filter:e=>(e.status.nameTags??[]).includes("ジェネクス")&&(e.atk??9999)<=1500,qtyList:[1],posList:["Attack"],destoryTypes:["BattleDestroy"],executableCells:["Graveyard"]},{name:"紫炎の足軽",filter:e=>(e.status.nameTags??[]).includes("六武衆")&&(e.lvl??12)<=3,qtyList:[1],posList:["Attack","Defense"],destoryTypes:["BattleDestroy"],executableCells:["Graveyard"]},{name:"スレイブ・エイプ",filter:e=>(e.status.nameTags??[]).includes("剣闘獣")&&(e.lvl??12)<=4,qtyList:[1],posList:["Attack","Defense"],destoryTypes:["BattleDestroy"],executableCells:["Graveyard"]},{name:"ゼンマイハニー",filter:e=>(e.status.nameTags??[]).includes("ゼンマイ")&&(e.lvl??12)<=4,qtyList:[1],posList:["Attack","Defense"],destoryTypes:["BattleDestroy"],executableCells:["Graveyard"]},{name:"ＸＸ－セイバー エマーズブレイド",filter:e=>(e.status.nameTags??[]).includes("Ｘ－セイバー")&&(e.lvl??12)<=4,qtyList:[1],posList:["Attack","Defense"],destoryTypes:["BattleDestroy"],executableCells:["Graveyard"]},{name:"軍隊竜",filter:e=>e.nm==="軍隊竜",qtyList:[1],posList:["Attack","Defense"],destoryTypes:["BattleDestroy"],executableCells:["Graveyard"]},{name:"アサルト・ガンドッグ",filter:e=>e.nm==="アサルト・ガンドッグ",qtyList:[1,2,3,4,5],posList:["Attack","Defense"],destoryTypes:["BattleDestroy"],executableCells:["Graveyard"]},{name:"ハイエナ",filter:e=>e.nm==="ハイエナ",qtyList:[1,2,3,4,5],posList:["Attack","Defense"],destoryTypes:["BattleDestroy"],executableCells:["Graveyard"]}].map(e=>({name:e.name,actions:[{title:"①リクルート",isMandatory:!1,playType:"TriggerEffect",spellSpeed:"Normal",executableCells:e.executableCells,executablePeriods:e.destoryTypes.includes("EffectDestroy")?[...w,...N]:["b1DEnd","b2DEnd"],executableDuelistTypes:["Controller"],fixedTags:["SpecialSummonFromDeck"],meetsConditions:t=>t.action.entity.wasMovedAtPreviousChain&&t.action.entity.moveLog.latestRecord.movedAs.union(e.destoryTypes).length>0,canExecute:t=>{const i=t.activator.getMonsterZones();return t.activator.getEnableSummonList(t.activator,"SpecialSummon",["Effect"],t.action,t.activator.getDeckCell().cardEntities.filter(e.filter).filter(n=>n.kind==="Monster").filter(n=>n.canBeTargetOfEffect(t)).map(n=>({monster:n,posList:e.posList,cells:i})),[],!1).length>0},prepare:async()=>({selectedEntities:[]}),execute:async t=>{const i=t.activator.getDeckCell().cardEntities.filter(e.filter),a=t.activator.getMonsterZones();return t.activator.summonMany(t.activator,"SpecialSummon",["Effect"],t.action,i.map(r=>({monster:r,posList:e.posList,cells:a})),[],!1,e.qtyList.length>1?void 0:e.qtyList[0],r=>e.qtyList.includes(r.length),!1)?(t.activator.getDeckCell().shuffle(),!0):!1},settle:async()=>!0}]}))}const oi=Object.freeze(Object.defineProperty({__proto__:null,default:Yn},Symbol.toStringTag,{value:"Module"}));function*In(){yield{name:"おろかな埋葬",actions:[{title:"発動",isMandatory:!1,playType:"CardActivation",spellSpeed:"Normal",executableCells:["Hand","SpellAndTrapZone"],executablePeriods:["main1","main2"],executableDuelistTypes:["Controller"],priorityForNPC:40,fixedTags:["SendToGraveyardFromDeck"],canExecute:i=>i.activator.getDeckCell().cardEntities.some(a=>a.kind==="Monster"),prepare:C,execute:async i=>{const a=i.activator.getDeckCell().cardEntities.filter(r=>r.kind==="Monster");if(a.length===0)return!1;const n=await i.activator.waitSelectEntity(a,"墓地に送るモンスターを選択",!1);if(!n)throw new D(i);return await n.sendToGraveyard(["Effect"],i.action.entity,i.activator),i.activator.getDeckCell().shuffle(),!0},settle:async()=>!0},v]},yield{name:"おろかな副葬",actions:[{title:"発動",isMandatory:!1,playType:"CardActivation",spellSpeed:"Normal",executableCells:["Hand","SpellAndTrapZone"],executablePeriods:["main1","main2"],executableDuelistTypes:["Controller"],isOnlyNTimesPerTurn:1,priorityForNPC:40,fixedTags:["SendToGraveyardFromDeck"],canExecute:i=>i.activator.getDeckCell().cardEntities.some(a=>a.kind!=="Monster"),prepare:C,execute:async i=>{const a=i.activator.getDeckCell().cardEntities.filter(r=>r.kind!=="Monster");if(a.length===0)return!1;const n=await i.activator.waitSelectEntity(a,"墓地に送る魔法罠を選択",!1);if(!n)throw new D(i);return await n.sendToGraveyard(["Effect"],i.action.entity,i.activator),i.activator.getDeckCell().shuffle(),!0},settle:async()=>!0},v]},yield{name:"苦渋の選択",actions:[{title:"発動",isMandatory:!1,playType:"CardActivation",spellSpeed:"Normal",executableCells:["Hand","SpellAndTrapZone"],executablePeriods:["main1","main2"],executableDuelistTypes:["Controller"],priorityForNPC:40,fixedTags:["SendToGraveyardFromDeck","SearchFromDeck"],canExecute:i=>i.activator.getDeckCell().cardEntities.length>4,prepare:C,execute:async i=>{const a=i.activator.getDeckCell().cardEntities;if(a.length<5)return!1;const n=await i.activator.waitSelectEntities(a,5,s=>s.length===5,"相手に見せるカードを選択。",!1);if(!n)throw new D(i);const r=await i.activator.getOpponentPlayer().waitSelectEntity(n,"手札に加えさせるカードを選択。",!1);if(!r)throw new D(i,n);return i.activator.writeInfoLog(`${i.activator.getOpponentPlayer().name}は${r.toString()}を選択。`),await r.addToHand(["Effect"],i.action.entity,i.activator),await m.sendManyToGraveyardForTheSameReason(n.filter(s=>s!==r),["Effect"],i.action.entity,i.activator),i.activator.getDeckCell().shuffle(),!0},settle:async()=>!0},v]},yield{name:"死者蘇生",actions:[{title:"発動",isMandatory:!1,playType:"CardActivation",spellSpeed:"Normal",executableCells:["Hand","SpellAndTrapZone"],executablePeriods:["main1","main2"],executableDuelistTypes:["Controller"],fixedTags:["SpecialSummonFromGraveyard"],hasToTargetCards:!0,canExecute:i=>{const a=i.activator.getMonsterZones();return i.activator.getEnableSummonList(i.activator,"SpecialSummon",["Effect"],i.action,i.activator.duel.field.getCells("Graveyard").flatMap(r=>r.cardEntities).filter(r=>r.kind==="Monster").filter(r=>r.canBeTargetOfEffect(i)).map(r=>({monster:r,posList:T,cells:a})),[],!1).length>0},prepare:i=>se(i,i.activator.duel.field.getCells("Graveyard").flatMap(a=>a.cardEntities).filter(a=>a.kind==="Monster").filter(a=>a.canBeTargetOfEffect(i))),execute:async i=>le(i),settle:async()=>!0},v]};for(const i of[{name:"大嵐",cellTypes:De,isOnlyEnemies:!1},{name:"ハーピィの羽根帚",cellTypes:De,isOnlyEnemies:!0},{name:"ブラック・ホール",cellTypes:L,isOnlyEnemies:!1},{name:"サンダー・ボルト",cellTypes:L,isOnlyEnemies:!0}])yield{name:i.name,actions:[{title:"発動",isMandatory:!1,playType:"CardActivation",spellSpeed:"Normal",executableCells:["Hand","SpellAndTrapZone"],executablePeriods:["main1","main2"],executableDuelistTypes:["Controller"],fixedTags:["DestroyOnField"],canExecute:a=>{let n=a.action.entity.field.getCells(...i.cellTypes).flatMap(r=>r.cardEntities).filter(r=>r!==a.action.entity);return i.isOnlyEnemies&&(n=n.filter(r=>r.controller!==a.activator)),n.length>0},prepare:async a=>{let n=a.action.entity.field.getCells(...i.cellTypes).flatMap(r=>r.cardEntities).filter(r=>r!==a.action.entity);return i.isOnlyEnemies&&(n=n.filter(r=>r.controller!==a.activator)),{selectedEntities:[],chainBlockTags:a.action.calcChainBlockTagsForDestroy(a.activator,n)}},execute:async a=>{let n=a.action.entity.field.getCells(...i.cellTypes).flatMap(r=>r.cardEntities).filter(r=>r!==a.action.entity);return i.isOnlyEnemies&&(n=n.filter(r=>r.controller!==a.activator)),await m.tryDestroy(n,a),!0},settle:async()=>!0},v]};yield{name:"ハリケーン",actions:[{title:"発動",isMandatory:!1,playType:"CardActivation",spellSpeed:"Normal",executableCells:["Hand","SpellAndTrapZone"],executablePeriods:["main1","main2"],executableDuelistTypes:["Controller"],fixedTags:["BounceToHand"],canExecute:i=>i.action.entity.field.getCells("SpellAndTrapZone","FieldSpellZone").flatMap(a=>a.cardEntities).some(a=>a!==i.action.entity),prepare:async()=>({selectedEntities:[]}),execute:async(i,a)=>{const n=a.map(s=>s.action).filter(s=>s.playType==="CardActivation").map(s=>s.entity).filter(s=>s.face==="FaceUp"),r=i.action.entity.field.getCells("SpellAndTrapZone","FieldSpellZone").flatMap(s=>s.cardEntities).filter(s=>!n.includes(s));return await m.returnManyToHandForTheSameReason(r,["Effect"],i.action.entity,i.activator),!0},settle:async()=>!0},v]};const e=i=>i.activator.duel.field.getWaitingRoomCell().cardEntities.find(a=>a.parent===i.action.entity)??k.createTokenEntity(i.activator,i.action.entity,{name:"セキュリティトークン",actions:Ne,staticInfo:{name:"セキュリティトークン",kind:"Monster",monsterCategories:["Normal","Token"],level:4,attack:2e3,defense:2e3,attributes:["Light"],types:["Cyberse"],wikiEncodedName:"%A5%BB%A5%AD%A5%E5%A5%EA%A5%C6%A5%A3%A5%C8%A1%BC%A5%AF%A5%F3"}});yield{name:"ワンタイム・パスコード",actions:[{title:"発動",isMandatory:!1,playType:"CardActivation",spellSpeed:"Normal",executableCells:["Hand","SpellAndTrapZone"],executablePeriods:["main1","main2"],executableDuelistTypes:["Controller"],isOnlyNTimesPerTurn:1,fixedTags:["SpecialSummon","SpecialSummonToken"],canExecute:i=>{const a=e(i),n=i.activator.getMonsterZones();return i.activator.getEnableSummonList(i.activator,"SpecialSummon",["Effect"],i.action,[{monster:a,posList:["Defense"],cells:n}],[],!1).length>0},prepare:async()=>({selectedEntities:[]}),execute:async i=>{const a=e(i),n=i.activator.getMonsterZones();return!!await i.activator.summon("SpecialSummon",["Effect"],i.action,a,["Defense"],n,[],!1)},settle:async()=>!0},v]},yield{name:"光の援軍",actions:[{title:"発動",isMandatory:!1,playType:"CardActivation",spellSpeed:"Normal",executableCells:["Hand","SpellAndTrapZone"],executablePeriods:["main1","main2"],executableDuelistTypes:["Controller"],fixedTags:["SearchFromDeck"],priorityForNPC:40,canPayCosts:i=>i.activator.getDeckCell().cardEntities.length>3,canExecute:i=>i.activator.getDeckCell().cardEntities.filter(a=>a.kind==="Monster").filter(a=>(a.lvl??13)<5).some(a=>a.status.nameTags&&a.status.nameTags.includes("ライトロード")),payCosts:async i=>{const a=i.activator.getDeckCell().cardEntities.slice(0,3);return await m.sendManyToGraveyardForTheSameReason(a,["Cost"],i.action.entity,i.activator),{sendToGraveyard:a}},prepare:async()=>({selectedEntities:[]}),execute:async i=>{const a=i.activator.getDeckCell().cardEntities.filter(r=>r.kind==="Monster").filter(r=>(r.lvl??13)<5).filter(r=>r.status.nameTags&&r.status.nameTags.includes("ライトロード"));if(a.length===0)return!1;const n=await i.activator.waitSelectEntity(a,"手札に加えるモンスターを選択",!1);if(!n)throw new D(i);return await n.addToHand(["Effect"],i.action.entity,i.activator),i.activator.getDeckCell().shuffle(),!0},settle:async()=>!0},v]},yield{name:"ワン・フォー・ワン",actions:[{title:"発動",isMandatory:!1,playType:"CardActivation",spellSpeed:"Normal",executableCells:["Hand","SpellAndTrapZone"],executablePeriods:["main1","main2"],executableDuelistTypes:["Controller"],fixedTags:["SpecialSummonFromDeck"],priorityForNPC:40,canPayCosts:i=>{if(i.activator.getDeckCell().cardEntities.every(a=>(a.lvl??12)>1)){if(i.activator.getHandCell().cardEntities.every(a=>(a.lvl??12)>1)||i.activator.getHandCell().cardEntities.filter(a=>a.kind==="Monster").length<2)return!1}else if(i.activator.getHandCell().cardEntities.filter(a=>a.kind==="Monster").length===0)return!1;return!0},canExecute:i=>{let a=[...i.activator.getDeckCell().cardEntities.filter(o=>(o.lvl??12)===1),...i.activator.getHandCell().cardEntities.filter(o=>(o.lvl??12)===1)];const n=i.activator.getHandCell().cardEntities;(n.length<2||!i.ignoreCost)&&(a=a.filter(o=>!n.includes(o)));const r=i.activator.getMonsterZones();return i.activator.getEnableSummonList(i.activator,"SpecialSummon",["Effect"],i.action,a.map(o=>({monster:o,posList:T,cells:r})),[],!1).length>0},payCosts:async(i,a,n)=>{const r=[...i.activator.getDeckCell().cardEntities.filter(d=>(d.lvl??12)===1),...i.activator.getHandCell().cardEntities.filter(d=>(d.lvl??12)===1)],s=i.activator.getMonsterZones(),o=i.activator.getEnableSummonList(i.activator,"SpecialSummon",["Effect"],i.action,r.map(d=>({monster:d,posList:T,cells:s})),[],!1);let c=i.activator.getHandCell().cardEntities.filter(d=>d.kind==="Monster");o.length===1&&(c=c.filter(d=>!o.map(p=>p.monster).includes(d)));const u=await i.activator.waitSelectEntity(c,"墓地へ送るモンスターを選択",n);if(!u)throw new D(i);return await u.sendToGraveyard(["Cost"],i.action.entity,i.activator),{sendToGraveyard:[u]}},prepare:async()=>({selectedEntities:[]}),execute:async i=>{const a=[...i.activator.getDeckCell().cardEntities.filter(s=>s.lvl===1),...i.activator.getHandCell().cardEntities.filter(s=>s.lvl===1)],n=i.activator.getMonsterZones();return await i.activator.summonOne(i.activator,"SpecialSummon",["Effect"],i.action,a.map(s=>({monster:s,posList:T,cells:n})),[],!1,!1)?(i.activator.getDeckCell().shuffle(),!0):!1},settle:async()=>!0},v]},yield{name:"封印の黄金櫃",actions:[{title:"発動",isMandatory:!1,playType:"CardActivation",spellSpeed:"Normal",executableCells:["Hand","SpellAndTrapZone"],executablePeriods:["main1","main2"],executableDuelistTypes:["Controller"],fixedTags:["BanishFromDeck"],canExecute:i=>i.activator.getDeckCell().cardEntities.some(a=>i.activator.canTryBanish(a,"BanishAsEffect",i.action)),prepare:async()=>({selectedEntities:[]}),execute:async i=>{const a=i.activator.getDeckCell().cardEntities.filter(s=>i.activator.canTryBanish(s,"BanishAsEffect",i.action)),n=await i.activator.waitSelectEntity(a,"除外するカードを選択。",!1);if(!n)throw new D(i);return(await m.tryBanish("BanishAsEffect",[n],i)).forEach(s=>s.counterHolder.removeAll("GoldSarcophagus")),!0},settle:async()=>!0},En("回収カウント進行",["stanby"],i=>{i.activator.isTurnPlayer&&i.action.entity.field.getCells("Banished").flatMap(a=>a.cardEntities).filter(a=>a.moveLog.latestRecord.movedBy===i.action.entity).filter(a=>a.moveLog.latestRecord.actionOwner===i.activator).forEach(a=>{a.counterHolder.add("GoldSarcophagus",1,i.action.entity);const n=a.counterHolder.getQty("GoldSarcophagus",i.action.entity);n<3&&i.activator.duel.log.info(`${a.toString()}のターンカウント：${n-1}⇒${n}`)})}),{title:"回収",isMandatory:!0,playType:"LingeringEffect",spellSpeed:"Normal",executableCells:Q,executablePeriods:["stanby"],executableDuelistTypes:he,canExecute:i=>i.activator.isTurnPlayer&&i.action.entity.field.getCells("Banished").flatMap(a=>a.cardEntities).filter(a=>a.moveLog.latestRecord.movedBy===i.action.entity).filter(a=>a.moveLog.latestRecord.actionOwner===i.activator).some(a=>a.counterHolder.getQty("GoldSarcophagus")===2),prepare:C,execute:async i=>{const a=i.action.entity.field.getCells("Banished").flatMap(r=>r.cardEntities).filter(r=>r.moveLog.latestRecord.movedBy===i.action.entity).filter(r=>r.moveLog.latestRecord.actionOwner===i.activator).filter(r=>r.counterHolder.getQty("GoldSarcophagus")===2);if(!a.length)throw new S("想定されない状態",i);let n=a[0];if(a.length>1){const r=await i.activator.waitSelectEntity(a,"回収するカードを選択。",!1);if(!r)throw new D(i);n=r}return await n.addToHand(["Effect"],i.action.entity,i.activator),!0},settle:async()=>!0},v]},yield{name:"魔の試着部屋",actions:[{title:"発動",isMandatory:!1,playType:"CardActivation",spellSpeed:"Normal",executableCells:["Hand","SpellAndTrapZone"],executablePeriods:["main1","main2"],executableDuelistTypes:["Controller"],fixedTags:["SpecialSummonFromDeck"],canPayCosts:i=>i.activator.lp>=800,canExecute:i=>i.activator.getDeckCell().cardEntities.length>0&&i.activator.getEnableSummonList(i.activator,"SpecialSummon",["Effect"],i.action,i.activator.getDeckCell().cardEntities.filter(a=>a.kind==="Monster").filter(a=>{var n;return(n=a.status.monsterCategories)==null?void 0:n.includes("Normal")}).filter(a=>(a.lvl??12)<4).map(a=>({monster:a,posList:T,cells:i.activator.getMonsterZones()})),[],!1).length>0,payCosts:(i,a)=>ye(i,a,800),prepare:async()=>({selectedEntities:[]}),execute:async i=>{if(i.activator.getDeckCell().cardEntities.length<4)return!1;const a=await m.excavateManyFromDeck(i.activator,4,["Effect"],i.action.entity,i.activator),n=a.filter(r=>r.kind==="Monster").filter(r=>{var s;return(s=r.status.monsterCategories)==null?void 0:s.includes("Normal")}).filter(r=>(r.lvl??12)<4);if(n.length){const r=i.activator.getMonsterZones(),s=n.length>r.length?r.length:n.length;await i.activator.summonMany(i.activator,"SpecialSummon",["Effect"],i.action,n.map(o=>({monster:o,cells:r,posList:T})),[],!1,s,o=>o.length===s,!1)}return await m.sendManyToGraveyardForTheSameReason(n.filter(r=>!r.isOnFieldAsMonsterStrictly),["Effect"],i.action.entity,i.activator),console.log(a.filter(r=>r.fieldCell.cellType==="Deck")),await m.returnManyToDeckForTheSameReason("Random",a.filter(r=>r.fieldCell.cellType==="Deck"),["Effect"],i.action.entity,i.activator),!0},settle:async()=>!0},v]};const t=[{name:"魔法石の採掘",filter:()=>!0,discard:!0},{name:"魔法再生",filter:i=>i.kind==="Spell",discard:!1}];for(const i of t)yield{name:i.name,actions:[{title:"発動",isMandatory:!1,playType:"CardActivation",spellSpeed:"Normal",executableCells:["Hand","SpellAndTrapZone"],executablePeriods:["main1","main2"],executableDuelistTypes:["Controller"],fixedTags:["AddToHandFromGraveyard"],canPayCosts:a=>a.activator.getHandCell().cardEntities.filter(i.filter).length>1,payCosts:async(a,n,r)=>{const s=a.activator.getHandCell().cardEntities.filter(i.filter),o=await a.activator.waitSelectEntities(s,2,c=>c.length===2,"コストとするカードを選択",r);if(o)return i.discard?(await m.discardManyForTheSameReason(o,["Cost"],a.action.entity,a.activator),{discard:o}):(await m.sendManyToGraveyardForTheSameReason(o,["Cost"],a.action.entity,a.activator),{sendToGraveyard:o})},...V(a=>a.activator.getGraveyard().cardEntities.filter(n=>n.kind==="Spell"),{message:"手札に加える魔法カードを選択"}),execute:async a=>{if(!a.selectedEntities.length)throw new S("想定されない状態",a);const n=a.selectedEntities[0];return n.wasMovedAfter(a.isActivatedAt)?!1:(await n.addToHand(["Effect"],a.action.entity,a.activator),!0)},settle:async()=>!0},v]}}const ci=Object.freeze(Object.defineProperty({__proto__:null,default:In},Symbol.toStringTag,{value:"Module"}));function*er(){yield{name:"強欲な壺",actions:[{title:"発動",isMandatory:!1,playType:"CardActivation",spellSpeed:"Normal",executableCells:["Hand","SpellAndTrapZone"],executablePeriods:["main1","main2"],executableDuelistTypes:["Controller"],priorityForNPC:20,fixedTags:["Draw"],canExecute:e=>e.activator.getDeckCell().cardEntities.length>1&&e.activator.canDraw&&e.activator.canAddToHandFromDeck,prepare:async()=>({selectedEntities:[]}),execute:async e=>(await e.activator.draw(2,e.action.entity,e.activator),!0),settle:async()=>!0},v]},yield{name:"貪欲な壺",actions:[{title:"発動",isMandatory:!1,playType:"CardActivation",spellSpeed:"Normal",executableCells:["Hand","SpellAndTrapZone"],executablePeriods:["main1","main2"],executableDuelistTypes:["Controller"],fixedTags:["Draw","ReturnToDeckFromGraveyard"],priorityForNPC:30,canExecute:e=>e.activator.getGraveyard().cardEntities.filter(t=>t.kind==="Monster").filter(t=>t.canBeTargetOfEffect(e)).length>4&&e.activator.canDraw&&e.activator.canAddToHandFromDeck,prepare:async e=>{const t=await e.activator.waitSelectEntities(e.activator.getGraveyard().cardEntities.filter(i=>i.kind==="Monster").filter(i=>i.canBeTargetOfEffect(e)),5,i=>i.length===5,"デッキに戻すモンスターを選択。",!1);if(t)return{selectedEntities:t}},execute:async e=>e.selectedEntities.some(t=>t.wasMovedAtCurrentChain)?!1:(await m.returnManyToDeckForTheSameReason("Random",e.selectedEntities,["Effect"],e.action.entity,e.activator),await e.activator.draw(2,e.action.entity,e.activator),!0),settle:async()=>!0},v]},yield{name:"天使の施し",actions:[{title:"発動",isMandatory:!1,playType:"CardActivation",spellSpeed:"Normal",executableCells:["Hand","SpellAndTrapZone"],executablePeriods:["main1","main2"],executableDuelistTypes:["Controller"],fixedTags:["Draw","DiscordAsEffect"],priorityForNPC:30,canExecute:e=>e.activator.getDeckCell().cardEntities.length>2&&e.activator.canDraw&&e.activator.canAddToHandFromDeck&&e.activator.status.canDiscardAsEffect,prepare:async()=>({selectedEntities:[]}),execute:async e=>(await e.activator.draw(3,e.action.entity,e.activator),await e.activator.discard(2,"Effect",()=>!0,e.action.entity,e.activator),!0),settle:async()=>!0},v]},yield{name:"成金ゴブリン",actions:[{title:"発動",isMandatory:!1,playType:"CardActivation",spellSpeed:"Normal",executableCells:["Hand","SpellAndTrapZone"],executablePeriods:["main1","main2"],executableDuelistTypes:["Controller"],fixedTags:["Draw"],priorityForNPC:20,canExecute:e=>e.activator.getDeckCell().cardEntities.length>0&&e.activator.canDraw&&e.activator.canAddToHandFromDeck,prepare:async()=>({selectedEntities:[]}),execute:async e=>(await e.activator.draw(1,e.action.entity,e.activator),e.action.entity.field.duel.clock.incrementProcSeq(),e.activator.getOpponentPlayer().heal(1e3,e.action.entity),!0),settle:async()=>!0},v]},yield{name:"手札抹殺",actions:[{title:"発動",isMandatory:!1,playType:"CardActivation",spellSpeed:"Normal",executableCells:["Hand","SpellAndTrapZone"],executablePeriods:["main1","main2"],executableDuelistTypes:["Controller"],fixedTags:["Draw","DiscordAsEffect"],canExecute:e=>e.activator.getDeckCell().cardEntities.length>=e.activator.getHandCell().cardEntities.filter(t=>t.seq!==e.action.entity.seq).length&&e.activator.canDraw&&e.activator.canAddToHandFromDeck&&e.activator.getOpponentPlayer().canDraw&&e.activator.getOpponentPlayer().canAddToHandFromDeck&&e.action.entity.field.getAllCells().filter(t=>t.cellType==="Hand").flatMap(t=>t.cardEntities).some(t=>t.seq!==e.action.entity.seq),prepare:async()=>({selectedEntities:[]}),execute:async e=>{const t=e.activator.getHandCell().cardEntities.length,i=e.activator.getOpponentPlayer().getHandCell().cardEntities.length;return await m.sendManyToGraveyardForTheSameReason(e.action.entity.field.getCells("Hand").flatMap(a=>a.cardEntities),["Effect","Discard"],e.action.entity,e.activator),e.activator.duel.clock.incrementProcSeq(),await m.drawAtSameTime(e.activator,e.action.entity,t,i),!0},settle:async()=>!0},v]},yield{name:"一時休戦",actions:[{title:"発動",isMandatory:!1,playType:"CardActivation",spellSpeed:"Normal",executableCells:["Hand","SpellAndTrapZone"],executablePeriods:["main1","main2"],executableDuelistTypes:["Controller"],fixedTags:["Draw"],canExecute:e=>e.activator.getDeckCell().cardEntities.length>0&&e.activator.canDraw&&e.activator.getOpponentPlayer().getDeckCell().cardEntities.length>0&&e.activator.getOpponentPlayer().canDraw,prepare:C,execute:async e=>(await m.drawAtSameTime(e.activator,e.action.entity,1,1),[e.activator,e.activator.getOpponentPlayer()].forEach(t=>t.entity.damageFilterBundle.push(new Zt({title:"ダメージ無効",validateAlive:i=>i.effectOwner.duel.clock.turn-i.isSpawnedAt.turn<2,isContinuous:!1,isSpawnedBy:e.action.entity,actionAttr:e.action,isApplicableTo:()=>!0,calcType:"zero_typeA",filter:(i,a,n,r)=>(n.writeInfoLog(`${r.profile.name}は${i.isSpawnedBy}の効果でダメージを受けない。`),{zero_typeA:!0})}))),!0),settle:async()=>!0},v]},yield{name:"打ち出の小槌",actions:[{title:"発動",isMandatory:!1,playType:"CardActivation",spellSpeed:"Normal",executableCells:["Hand","SpellAndTrapZone"],executablePeriods:["main1","main2"],executableDuelistTypes:["Controller"],fixedTags:["Draw"],canExecute:e=>e.activator.canDraw,prepare:async()=>({selectedEntities:[]}),execute:async e=>{const t=e.activator.getHandCell().cardEntities;if(!t.length)return!1;let i=[...t];if(i.length>1&&!await e.activator.waitYesNo("全ての手札を入れ替える？")){const a=await e.activator.waitSelectEntities(t,void 0,n=>n.length>0,"デッキに戻すカードを選択。",!1);if(!a)throw new D(e);i=a}return await m.returnManyToDeckForTheSameReason("Random",i,["Effect"],e.action.entity,e.activator),e.activator.duel.clock.incrementTotalProcSeq(),await e.activator.draw(i.length,e.action.entity,e.activator),!0},settle:async()=>!0},v]}}const ui=Object.freeze(Object.defineProperty({__proto__:null,default:er},Symbol.toStringTag,{value:"Module"}));function*tr(){for(const e of[{name:"トゲトゲ神の殺虫剤",type:"Insect"},{name:"戦士抹殺",type:"Warrior"},{name:"酸の嵐",type:"Machine"},{name:"永遠の渇水",type:"Fish"},{name:"神の息吹",type:"Rock"},{name:"魔女狩り",type:"Spellcaster"},{name:"悪魔払い",type:"Fiend"}])yield{name:e.name,actions:[{title:"発動",isMandatory:!1,playType:"CardActivation",spellSpeed:"Normal",executableCells:["Hand","SpellAndTrapZone"],executablePeriods:["main1","main2"],executableDuelistTypes:["Controller"],canExecute:t=>t.action.entity.field.getMonstersOnFieldStrictly().some(i=>i.types.includes(e.type)),prepare:async t=>{const i=t.action.entity.field.getMonstersOnFieldStrictly().filter(a=>a.types.includes(e.type));return{selectedEntities:[],chainBlockTags:t.action.calcChainBlockTagsForDestroy(t.activator,i)}},execute:async t=>{const i=t.action.entity.field.getMonstersOnFieldStrictly().filter(a=>a.types.includes(e.type));return await m.tryDestroy(i,t),!0},settle:async()=>!0},v]};yield*[{name:"増援",filter:e=>e.origin.kind==="Monster"&&e.types.includes("Warrior")&&(e.origin.level??5)<5},{name:"化石調査",filter:e=>e.origin.kind==="Monster"&&e.types.includes("Dinosaur")&&(e.origin.level??6)<6},{name:"Ｅ－エマージェンシーコール",filter:e=>e.origin.kind==="Monster"&&(e.origin.nameTags??[]).includes("Ｅ・ＨＥＲＯ")},{name:"召集の聖刻印",filter:e=>e.origin.kind==="Monster"&&(e.origin.nameTags??[]).includes("聖刻")},{name:"召喚師のスキル",filter:e=>e.origin.kind==="Monster"&&(e.origin.monsterCategories??[]).includes("Normal")&&(e.origin.level??4)>4},{name:"トゥーンのもくじ",filter:e=>(e.origin.nameTags??[]).includes("トゥーン")},{name:"融合賢者",filter:e=>e.origin.name==="融合"},{name:"虹の架け橋",filter:e=>e.origin.kind!=="Monster"&&(e.origin.nameTags??[]).includes("宝玉")},{name:"紫炎の狼煙",filter:e=>e.origin.kind==="Monster"&&(e.origin.nameTags??[]).includes("六武衆")&&(e.origin.level??4)<4},{name:"テラ・フォーミング",filter:e=>e.origin.kind==="Spell"&&e.origin.spellCategory==="Field"},{name:"コール・リゾネーター",filter:e=>e.origin.kind==="Monster"&&(e.origin.nameTags??[]).includes("リゾネーター")}].map(e=>({name:e.name,actions:[{title:"発動",isMandatory:!1,playType:"CardActivation",spellSpeed:"Normal",executableCells:["Hand","SpellAndTrapZone"],executablePeriods:["main1","main2"],executableDuelistTypes:["Controller"],fixedTags:["SearchFromDeck"],priorityForNPC:40,canExecute:t=>t.activator.getDeckCell().cardEntities.some(e.filter)&&t.activator.canAddToHandFromDeck,prepare:C,execute:async t=>{const i=t.activator.getDeckCell().cardEntities.filter(e.filter);if(!i.length)return!1;const a=await t.activator.waitSelectEntity(i,"手札に加えるカードを選択",!1);return a?(await a.addToHand(["Effect"],t.action.entity,t.activator),t.activator.getDeckCell().shuffle(),!0):!1},settle:async()=>!0},v]})),yield*[{name:"戦士の生還",filter:e=>e.kind==="Monster"&&e.types.includes("Warrior"),qty:1},{name:"ダーク・バースト",filter:e=>e.kind==="Monster"&&e.attr.includes("Dark")&&(e.atk??9999)<=1500,qty:1},{name:"悪夢再び",filter:e=>e.kind==="Monster"&&e.attr.includes("Dark")&&(e.def??9999)===0,qty:2},{name:"サルベージ",filter:e=>e.kind==="Monster"&&e.attr.includes("Water")&&(e.atk??9999)<=1500,qty:2},{name:"バッテリーリサイクル",filter:e=>e.kind==="Monster"&&e.types.includes("Thunder")&&(e.atk??9999)<=1500,qty:2},{name:"闇の量産工場",filter:e=>e.kind==="Monster"&&(e.status.monsterCategories??[]).includes("Normal"),qty:2}].map(e=>({name:e.name,actions:[{title:"発動",isMandatory:!1,playType:"CardActivation",spellSpeed:"Normal",executableCells:["Hand","SpellAndTrapZone"],executablePeriods:["main1","main2"],executableDuelistTypes:["Controller"],hasToTargetCards:!0,fixedTags:["AddToHandFromGraveyard"],priorityForNPC:40,canExecute:t=>t.activator.getGraveyard().cardEntities.filter(e.filter).length>=e.qty,prepare:C,execute:async t=>{const i=t.activator.getGraveyard().cardEntities.filter(e.filter);if(i.length===0)return!1;const a=await t.activator.waitSelectEntities(i,e.qty,n=>n.length===e.qty,"手札に加えるカードを選択",!1);for(const n of a??[])await n.addToHand(["Effect"],t.action.entity,t.activator);return!0},settle:async()=>!0},v]})),yield*[{name:"トレード・イン",filter:e=>e.kind==="Monster"&&(e.lvl??0)===8},{name:"調和の宝札",filter:e=>e.kind==="Monster"&&(e.origin.monsterCategories??[]).includes("Tuner")&&e.types.includes("Dragon")&&(e.atk??9999)<=1e3},{name:"デステニー・ドロー",filter:e=>e.kind==="Monster"&&(e.origin.nameTags??[]).includes("Ｄ－ＨＥＲＯ")}].map(e=>({name:e.name,actions:[{title:"発動",isMandatory:!1,playType:"CardActivation",spellSpeed:"Normal",executableCells:["Hand","SpellAndTrapZone"],executablePeriods:["main1","main2"],executableDuelistTypes:["Controller"],fixedTags:["Draw"],priorityForNPC:40,canPayCosts:(...t)=>lt(...t,e.filter),canExecute:t=>t.activator.getDeckCell().cardEntities.length>1,payCosts:async(...t)=>ot(...t,e.filter),prepare:async()=>({selectedEntities:[]}),execute:async t=>(await t.activator.draw(2,t.action.entity,t.activator),!0),settle:async()=>!0},v]})),yield*[{name:"火の粉",calcHeal:()=>[0,-200]},{name:"雷鳴",calcHeal:()=>[0,-300]},{name:"ファイヤー・ボール",calcHeal:()=>[0,-500]},{name:"火あぶりの刑",calcHeal:()=>[0,-600]},{name:"昼夜の大火事",calcHeal:()=>[0,-800]},{name:"火炎地獄",calcHeal:()=>[-500,-1e3]},{name:"盗人ゴブリン",calcHeal:()=>[500,-500]},{name:"ブルー・ポーション",calcHeal:()=>[400,0]},{name:"レッド・ポーション",calcHeal:()=>[500,0]},{name:"ゴブリンの秘薬",calcHeal:()=>[600,0]},{name:"天使の生き血",calcHeal:()=>[800,0]},{name:"治療の神 ディアン・ケト",calcHeal:()=>[1e3,0]},{name:"恵みの雨",calcHeal:()=>[1e3,1e3]}].map(e=>({name:e.name,actions:[{title:"発動",isMandatory:!1,playType:"CardActivation",spellSpeed:"Normal",executableCells:["Hand","SpellAndTrapZone"],executablePeriods:["main1","main2"],executableDuelistTypes:["Controller"],prepare:async()=>{const[t,i]=e.calcHeal(),a=[];return t<0&&a.push("DamageToSelf"),i<0&&a.push("DamageToOpponent"),{selectedEntities:[],chainBlockTags:a}},execute:async t=>{const[i,a]=e.calcHeal();return a>0?t.activator.getOpponentPlayer().heal(a,t.action.entity):a<0&&t.activator.getOpponentPlayer().effectDamage(Math.abs(a),t),i>0?t.activator.heal(i,t.action.entity):i<0&&t.activator.effectDamage(Math.abs(i),t),!0},settle:async()=>!0},v]}))}const di=Object.freeze(Object.defineProperty({__proto__:null,default:tr},Symbol.toStringTag,{value:"Module"}));function*ir(){yield{name:"強欲な瓶",actions:[v,{title:"発動",isMandatory:!1,playType:"CardActivation",spellSpeed:"Quick",executableCells:["SpellAndTrapZone"],executablePeriods:w,executableDuelistTypes:["Controller"],fixedTags:["Draw"],canExecute:e=>e.activator.getDeckCell().cardEntities.length>1&&e.activator.canDraw&&e.activator.canAddToHandFromDeck,prepare:C,execute:async e=>(await e.activator.draw(1,e.action.entity,e.activator),!0),settle:async()=>!0}]},yield{name:"戦線復帰",actions:[{title:"発動",isMandatory:!1,playType:"CardActivation",spellSpeed:"Quick",executableCells:["SpellAndTrapZone"],executablePeriods:w,executableDuelistTypes:["Controller"],hasToTargetCards:!0,fixedTags:["SpecialSummonFromGraveyard"],canExecute:e=>{const t=e.activator.getMonsterZones();return e.activator.getEnableSummonList(e.activator,"SpecialSummon",["Effect"],e.action,e.activator.getGraveyard().cardEntities.filter(a=>a.kind==="Monster").filter(a=>a.canBeTargetOfEffect(e)).map(a=>({monster:a,posList:["Defense"],cells:t})),[],!1).length>0},prepare:e=>se(e,e.activator.getGraveyard().cardEntities.filter(t=>t.kind==="Monster").filter(t=>t.canBeTargetOfEffect(e)),["Defense"]),execute:async e=>le(e,["Defense"]),settle:async()=>!0},v]},yield{name:"サンダー・ブレイク",actions:[{title:"発動",isMandatory:!1,playType:"CardActivation",spellSpeed:"Quick",executableCells:["SpellAndTrapZone"],executablePeriods:w,executableDuelistTypes:["Controller"],canPayCosts:lt,payCosts:ot,...V(e=>e.action.entity.field.getCardsOnFieldStrictly().filter(t=>t!==e.action.entity).filter(t=>t.canBeTargetOfEffect(e)),{message:"対象とするカードを選択。",destoryTargets:!0}),execute:async e=>e.selectedEntities.every(t=>!t.isOnField)?!1:(await m.tryDestroy(e.selectedEntities,e),!0),settle:async()=>!0},v]}}const pi=Object.freeze(Object.defineProperty({__proto__:null,default:ir},Symbol.toStringTag,{value:"Module"}));function*ar(){for(const e of["炸裂装甲","次元幽閉"])yield{name:e,actions:[v,{title:"発動",playType:"CardActivation",spellSpeed:"Quick",isMandatory:!1,executableCells:["SpellAndTrapZone"],executablePeriods:["b1Battle","b2Battle"],executableDuelistTypes:["Controller"],hasToTargetCards:!0,isNoticedForcibly:!0,meetsConditions:(t,i)=>i.some(a=>a.action.playType==="DeclareAttack"),canExecute:(t,i)=>{if(console.log(i),t.activator.isTurnPlayer)return!1;const a=t.activator.duel.attackingMonster;return!(!a||!a.canBeTargetOfEffect(t)||!a.isOnFieldAsMonsterStrictly||e==="次元幽閉"&&!t.activator.canTryBanish(a,"BanishAsEffect",t.action))},prepare:async t=>{const i=t.activator.duel.attackingMonster;if(!i)throw new S("想定されない状態",t,i);const a=e==="炸裂装甲"?t.action.calcChainBlockTagsForDestroy(t.activator,[i]):["BanishFromField"];return{selectedEntities:[i],chainBlockTags:a}},execute:async t=>(e==="炸裂装甲"?await m.tryDestroy(t.selectedEntities,t):await m.tryBanish("BanishAsEffect",t.selectedEntities,t),!0),settle:async()=>!0}]}}const fi=Object.freeze(Object.defineProperty({__proto__:null,default:ar},Symbol.toStringTag,{value:"Module"}));function*nr(){yield{name:"ご隠居の猛毒薬",actions:[v,{title:"発動",isMandatory:!1,playType:"CardActivation",spellSpeed:"Quick",executableCells:["Hand","SpellAndTrapZone"],executablePeriods:w,executableDuelistTypes:["Controller"],prepare:async(e,t,i)=>{const a=[{seq:0,text:"●自分は１２００ＬＰ回復する。",tags:[]},{seq:1,text:"●相手に８００ダメージを与える。",tags:["DamageToOpponent"]}],n=await e.activator.waitSelectText(a,"使用する効果を選択",i);if(n!==void 0)return{selectedEntities:[],chainBlockTags:n.tags}},execute:async e=>{if(e.data===0)e.activator.heal(1200,e.action.entity);else if(e.data===1)e.activator.getOpponentPlayer().effectDamage(800,e);else throw new S("値が正しくない。",e,e.data);return!0},settle:async()=>!0}]},yield{name:"月の書",actions:[{title:"発動",isMandatory:!1,playType:"CardActivation",spellSpeed:"Quick",executableCells:["Hand","SpellAndTrapZone"],executablePeriods:w,executableDuelistTypes:["Controller"],...V(e=>e.action.entity.field.getMonstersOnFieldStrictly().filter(t=>t.canBeTargetOfEffect(e)).filter(t=>t.canBeSet).filter(t=>t.face==="FaceUp"),{message:"対象とするモンスターを選択。"}),execute:async e=>{const t=e.selectedEntities[0];return!t.isOnFieldAsMonsterStrictly||t.battlePosition==="Set"?!1:t.canBeEffected(e.activator,e.action.entity,e.action)?(await t.setBattlePosition("Set",["Effect"],e.action.entity,e.activator),!0):(e.activator.duel.log.info(`${t.toString()}は${e.action.entity.toString()}の効果を受けない。`),!1)},settle:async()=>!0},v]},yield{name:"突進",actions:[{title:"発動",isMandatory:!1,playType:"CardActivation",spellSpeed:"Quick",executableCells:["Hand","SpellAndTrapZone"],executablePeriods:[...w,...N],executableDuelistTypes:["Controller"],...V(e=>e.action.entity.field.getMonstersOnFieldStrictly().filter(t=>t.face==="FaceUp").filter(t=>t.canBeTargetOfEffect(e)),{message:"対象とするモンスターを選択。"}),execute:async e=>{const t=e.selectedEntities[0];return!t.isOnFieldAsMonsterStrictly||t.battlePosition==="Set"?!1:t.canBeEffected(e.activator,e.action.entity,e.action)?(t.numericOprsBundle.push(q.createLingeringAddition("攻撃力上昇",i=>i.effectOwner.duel.clock.isSameTurn(i.isSpawnedAt),e.action.entity,e.action,"attack",(i,a,n)=>n+700)),!0):(e.activator.duel.log.info(`${t.toString()}は${e.action.entity.toString()}の効果を受けない。`),!1)},settle:async()=>!0},v]},yield{name:"手札断殺",actions:[{title:"発動",isMandatory:!1,playType:"CardActivation",spellSpeed:"Quick",executableCells:["Hand","SpellAndTrapZone"],executablePeriods:[...w,...N],executableDuelistTypes:["Controller"],fixedTags:["Draw"],canExecute:e=>{for(const t of[e.activator,e.activator.getOpponentPlayer()])if(!t.canDraw||t.getHandCell().cardEntities.filter(i=>i.canBeSentToGraveyard(e.activator,e.action.entity,"SendToGraveyardAsEffect",e.action)).filter(i=>i!==e.action.entity).length<2||t.getDeckCell().cardEntities.length<2)return!1;return!0},prepare:C,execute:async e=>{if(e.activator.getHandCell().cardEntities.length<2||e.activator.getOpponentPlayer().getHandCell().cardEntities.length<2)return!1;let t=0;for(const i of[e.activator,e.activator.getOpponentPlayer()]){const a=await i.waitSelectEntities(i.getHandCell().cardEntities,2,r=>r.length===2,"墓地に送るカードを２枚選択。",!1);if(!a)throw new D(e,i);const n=await m.sendManyToGraveyardForTheSameReason(a,["Effect"],e.action.entity,e.activator);t+=n.length}return t?(e.activator.duel.clock.incrementTotalProcSeq(),await m.drawAtSameTime(e.activator,e.action.entity,2,2),!0):!1},settle:async()=>!0},v]},yield{name:"リロード",actions:[{title:"発動",isMandatory:!1,playType:"CardActivation",spellSpeed:"Quick",executableCells:["Hand","SpellAndTrapZone"],executablePeriods:[...w,...N],executableDuelistTypes:["Controller"],fixedTags:["Draw"],hasToTargetCards:!0,canExecute:e=>e.activator.canDraw,prepare:C,execute:async e=>{const t=e.activator.getHandCell().cardEntities;return t.length?(await m.returnManyToDeckForTheSameReason("Random",t,["Effect"],e.action.entity,e.activator),e.activator.duel.clock.incrementTotalProcSeq(),await e.activator.draw(t.length,e.action.entity,e.activator),!0):!1},settle:async()=>!0},v]}}const gi=Object.freeze(Object.defineProperty({__proto__:null,default:nr},Symbol.toStringTag,{value:"Module"})),rr=(e,t,i,a,n,r,s)=>{if(!e.lvl||n.some(d=>!d.lvl))return;const o=n.map(d=>d.lvl??0).reduce((d,p)=>d+p,0),c=xe(...n.map(d=>d.lvl??0));if(o<e.lvl||s==="Equal"&&o!==e.lvl||s==="OrMore"&&o-c>=e.lvl||!r(n))return;const u=[...n.map(d=>({material:d,cell:d.fieldCell}))];if(t.activator.getEnableSummonList(t.activator,"RitualSummon",["Effect","SpecialSummon"],t.action,[{monster:t.action.entity,posList:i,cells:a}],u,!1).length)return u};function*hi(e,...t){const[i,a,n,r,s]=t,o=e.activator.getCells(...i).flatMap(p=>p.cardEntities).filter(p=>{var f;return(f=p.status.monsterCategories)==null?void 0:f.includes("Ritual")}).filter(a);if(!o.length)return;const c=e.activator.getCells(...n).flatMap(p=>p.cardEntities).filter(p=>p.lvl).filter(p=>p.canBeReleased(e.activator,e.action.entity,["RitualMaterial","ReleaseAsEffect"],e.action));if(!c.length)return;const u=e.activator.getMonsterZones(),d=["Attack","Defense"];for(const p of o)for(const f of c.filter(h=>h!==p).getAllOnOffPattern()){const h=rr(p,e,d,u,f,r,s);h&&(yield{monster:p,materialInfos:h})}}const sr=async(e,...t)=>{var d,p;const i=hi(e,...t).toArray(),a=i.map(f=>f.monster).getDistinct(),n=await e.activator.waitSelectEntity(a,"儀式召喚するモンスターを選択。");if(!n)return!1;const r=i.filter(f=>f.monster===n).map(f=>f.materialInfos),s=r.map(f=>({infos:f,materialSeqList:f.map(h=>h.material.seq).sort()}));let o=r[0].map(f=>f.material);if(r.length>1){const f=r.flatMap(h=>h.map(y=>y.material)).getDistinct();o=await e.activator.waitSelectEntities(f,void 0,h=>{const y=h.map(_=>_.seq).sort();return s.some(_=>y.length===_.materialSeqList.length&&y.every((g,P)=>g===_.materialSeqList[P]))},"リリースするモンスターを選択",!1)??o}const c=o.map(f=>f.seq).sort(),u=(d=s.find(f=>c.length===f.materialSeqList.length&&c.every((h,y)=>h===f.materialSeqList[y])))==null?void 0:d.infos;if(!u)throw new S("想定されない状態",e,o);return await m.releaseManyForTheSameReason(o,["RitualMaterial","Effect","SpecialSummonMaterial"],e.action.entity,e.activator),await e.activator.summon("RitualSummon",["Effect","SpecialSummon"],e.action,n,T,e.activator.getMonsterZones(),u,!1),n.info.isRebornable=!((p=n.origin.monsterCategories)!=null&&p.includes("RegularSpecialSummonOnly")),u.map(f=>f.material).forEach(f=>f.onUsedAsMaterial(e,e.action.entity)),!0},lr=(e,t,i,a,n)=>({canExecute:r=>hi(r,e,t,i,a,n).some(s=>s.materialInfos.length),prepare:async()=>{const r=[];return e.includes("Hand")&&r.push("SpecialSummonFromHand"),e.includes("Graveyard")&&r.push("SpecialSummonFromGraveyard"),e.includes("ExtraDeck")&&r.push("SpecialSummonFromExtraDeck"),e.includes("Banished")&&r.push("SpecialSummonFromBanished"),e.includes("Deck")&&r.push("SpecialSummonFromDeck"),{selectedEntities:[],chainBlockTags:r}},execute:r=>sr(r,e,t,i,a,n),settle:async()=>!0});function*or(){for(const e of[{spellName:"カオスの儀式",monsterName:"カオス・ソルジャー"},{spellName:"仮面魔獣の儀式",monsterName:"仮面魔獣マスクド・ヘルレイザー"},{spellName:"亀の誓い",monsterName:"クラブ・タートル"},{spellName:"ジャベリンビートルの契約",monsterName:"ジャベリンビートル"},{spellName:"ゼラの儀式",monsterName:"ゼラ"},{spellName:"カオス－黒魔術の儀式",monsterName:"マジシャン・オブ・ブラックカオス"},{spellName:"ガルマソードの誓い",monsterName:"ガルマソード"},{spellName:"ライオンの儀式",monsterName:"スーパー・ウォー・ライオン"},{spellName:"チャクラの復活",monsterName:"チャクラ"},{spellName:"要塞クジラの誓い",monsterName:"要塞クジラ"},{spellName:"ローの祈り",monsterName:"ローガーディアン"},{spellName:"スカルライダーの復活",monsterName:"スカルライダー"},{spellName:"踊りによる誘発",monsterName:"ダンシング・ソルジャー"},{spellName:"悪魔鏡の儀式",monsterName:"デビルズ・ミラー"},{spellName:"ハンバーガーのレシピ",monsterName:"ハングリーバーガー"}])yield{name:e.spellName,actions:[{title:"発動",isMandatory:!1,playType:"CardActivation",spellSpeed:"Normal",executableCells:["Hand","SpellAndTrapZone"],executablePeriods:["main1","main2"],executableDuelistTypes:["Controller"],...lr(["Hand"],t=>t.nm===e.monsterName,["Hand","MonsterZone","ExtraMonsterZone"],()=>!0,"OrMore")},v]}}const yi=Object.freeze(Object.defineProperty({__proto__:null,default:or},Symbol.toStringTag,{value:"Module"}));function*cr(){for(const e of["大地の騎士ガイアナイト","スクラップ・デスデーモン"])yield{name:e,actions:[$()]};yield{name:"ナチュル・ガオドレイク",actions:[$(e=>e.length===1&&e.every(t=>t.attr.some(i=>i==="Earth")),e=>e.length>0&&e.every(t=>t.attr.some(i=>i==="Earth")))]},yield{name:"マジカル・アンドロイド",actions:[$(),{title:"回復",isMandatory:!0,playType:"IgnitionEffect",spellSpeed:"Normal",executableCells:["MonsterZone","ExtraMonsterZone"],executablePeriods:["end"],executableDuelistTypes:["Controller"],isOnlyNTimesPerTurnIfFaceup:1,meetsConditions:e=>e.activator.isTurnPlayer&&e.action.entity.face==="FaceUp",prepare:C,execute:async e=>(e.activator.heal(e.activator.getMonstersOnField().filter(t=>t.face==="FaceUp").filter(t=>t.types.includes("Psychic")).length*600,e.action.entity),!0),settle:async()=>!0}]}}const mi=Object.freeze(Object.defineProperty({__proto__:null,default:cr},Symbol.toStringTag,{value:"Module"}));function*ur(){yield{name:"にせアバター",actions:[],continuousEffects:[we("THE_DEVILS_AVATAR","Monster",e=>[e],e=>["attack","defense"].map(t=>q.createContinuous("THE_DEVILS_AVATAR",i=>i.isSpawnedBy.isOnFieldStrictly&&i.isSpawnedBy.face==="FaceUp",e,(i,a)=>a.isOnFieldStrictly&&a.face==="FaceUp",t,"calculated","THE_DEVILS_AVATAR",()=>Number.MIN_VALUE)))]},yield{name:"にせドレッド・ルート",actions:[],continuousEffects:[Ae("THE_DEVILS_DREAD-ROOT","Monster",e=>["attack","defense"].map(t=>q.createContinuous("THE_DEVILS_DREAD-ROOT",i=>i.isSpawnedBy.isOnFieldStrictly&&i.isSpawnedBy.face==="FaceUp",e,(i,a)=>a.isMonster&&a.isOnFieldStrictly&&a.face==="FaceUp"&&a!==i.isSpawnedBy,t,"calculated","THE_DEVILS_DREAD-ROOT",(i,a,n)=>Math.round(n/2))))]}}const Si=Object.freeze(Object.defineProperty({__proto__:null,default:ur},Symbol.toStringTag,{value:"Module"})),dr=(e,t,i,a,n=2,r=2,s)=>{if(!e.action.entity.origin.rank||a.length<n||a.length>r||a.some(c=>!c.lvl)||a.some(c=>c.lvl!==e.action.entity.rank)||!s(a))return;const o=a.map(c=>({material:c,cell:c.fieldCell,level:c.status.level}));if(e.activator.getEnableSummonList(e.activator,"XyzSummon",["Rule","XyzSummon","SpecialSummon"],e.action,[{monster:e.action.entity,posList:t,cells:i}],o,!1).length)return o};function*pr(e,t=2,i=2,a=n=>n.length>1){const n=e.activator.getMonstersOnField().filter(s=>s.battlePosition!=="Set");if(n.length<t)return;const r=[...e.activator.getMonsterZones(),...e.activator.getAvailableExtraMonsterZones()];yield*n.getAllOnOffPattern().filter(s=>s.length>=t).filter(s=>s.length<=i).map(s=>dr(e,T,r,s,t,i,a)??[]).filter(s=>s.length)}const fr=async(e,t,i)=>{var c;const a=e.action.getEnableMaterialPatterns(e).toArray(),n=a.map(u=>({infos:u,materialSeqList:u.map(d=>d.material.seq).sort()}));let r=a[0].map(u=>u.material);if(a.length>1){const u=a.flatMap(p=>p.map(f=>f.material)).getDistinct(),d=await e.activator.waitSelectEntities(u,void 0,p=>{const f=p.map(h=>h.seq).sort();return n.some(h=>f.length===h.materialSeqList.length&&f.every((y,_)=>y===h.materialSeqList[_]))},"エクシーズ素材とするモンスターを選択",i);if(!d)return;r=d}const s=r.map(u=>u.seq).sort(),o=(c=n.find(u=>s.length===u.materialSeqList.length&&s.every((d,p)=>d===u.materialSeqList[p])))==null?void 0:c.infos;if(!o)throw new S("想定されない状態",e,r);return await m.convertManyToXyzMaterials(o.map(u=>u.material),["XyzMaterial","Rule","Cost"],e.action.entity,e.activator),{summonMaterialInfos:o}},gr=(e=2,t=2,i=a=>a.length>1)=>({title:"エクシーズ召喚",isMandatory:!1,playType:"SpecialSummon",spellSpeed:"Normal",executableCells:["ExtraDeck"],executablePeriods:["main1","main2"],executableDuelistTypes:["Controller"],getEnableMaterialPatterns:a=>pr(a,e,t,i),canPayCosts:a=>a.action.getEnableMaterialPatterns(a).some(n=>n.length),canExecute:a=>!a.ignoreCost||a.activator.getAvailableExtraMonsterZones().length+a.activator.getAvailableMonsterZones().length>0,payCosts:fr,prepare:a=>Y(a,"XyzSummon",["Rule","SpecialSummon","XyzSummon"],["Attack","Defense"]),execute:I,settle:async()=>!0});function*hr(){yield*[{name:"ジェムナイト・パール",qty:2},{name:"覚醒の勇士 ガガギゴ",qty:3}].map(e=>({name:e.name,actions:[gr(e.qty,e.qty)]}))}const vi=Object.freeze(Object.defineProperty({__proto__:null,default:hr},Symbol.toStringTag,{value:"Module"}));function*yr(){yield{name:"シューティング・ライザー・ドラゴン",actions:[$(),{title:"①墓地送り",isMandatory:!1,playType:"TriggerEffect",spellSpeed:"Normal",executableCells:L,executablePeriods:[...w,...N],executableDuelistTypes:["Controller"],fixedTags:["SendToGraveyardFromDeck","IfSpecialSummonSucceed"],isOnlyNTimesPerTurn:1,canExecute:e=>e.action.entity.hasBeenSummonedNow(["SynchroSummon"])&&e.activator.getDeckCell().cardEntities.some(t=>(t.lvl??12)<(e.action.entity.lvl??0)),prepare:C,execute:async e=>{const t=e.activator.getDeckCell().cardEntities.filter(n=>(n.lvl??12)<(e.action.entity.lvl??0));if(t.length===0)return!1;const i=await e.activator.waitSelectEntity(t,"墓地に送るモンスターを選択",!1);if(!i)throw new S("想定されない状況",e);await i.sendToGraveyard(["Effect"],e.action.entity,e.activator);const a=i.lvl??0;return e.action.entity.numericOprsBundle.push(q.createLingeringAddition("レベル減少",()=>!0,e.action.entity,e.action,"level",(n,r,s)=>s-a)),!0},settle:async()=>!0},ai({title:"②シンクロ召喚",isOnlyNTimesPerChain:1})]}}const Ci=Object.freeze(Object.defineProperty({__proto__:null,default:yr},Symbol.toStringTag,{value:"Module"})),mr=(e,t,i,a,n,r)=>{const s=e.fusionMaterialInfos.filter(u=>u.type!=="Overmuch");if(!s.length||!n.length||s.length!==n.length||!r(t,e,n)||!e.validateFusionMaterials(n))return;const o=s.map(u=>{const d=[];return ne(u)?d.push(...n.filter(p=>u.cardName===p.nm||p.status.fusionSubstitute)):d.push(...n.filter(u.filter)),{require:u,materials:d}});if(o.some(u=>!u.materials.length)||o.flatMap(u=>u.materials).getDistinct().length<n.length)return;let c=[[]];for(const u of o)c=[...c.flatMap(d=>u.materials.map(p=>{if(d.some(h=>h.material===p))return[...d];const f={material:p,cell:p.fieldCell};return ne(u.require)&&(f.name=u.require.cardName),[...d,f]}))];return c=c.filter(u=>u.length===n.length).filter(u=>u.filter(d=>d.name&&d.material.nm!==d.name).length<2),c.find(u=>t.activator.getEnableSummonList(t.activator,"FusionSummon",["Effect","SpecialSummon"],t.action,[{monster:t.action.entity,posList:i,cells:a}],u,!1).length)};function*Ti(e,...t){const[i,a,n,r]=t,s=e.activator.getCells(...i).flatMap(d=>d.cardEntities).filter(d=>{var p;return(p=d.status.monsterCategories)==null?void 0:p.includes("Fusion")}).filter(d=>a(e,d));if(!s.length)return;const o=e.activator.getCells(...n).flatMap(d=>d.cardEntities).filter(d=>d.isMonster).filter(d=>d.canBeEffected(e.activator,e.action.entity,e.action));if(!o.length)return;const c=[...e.activator.getMonsterZones(),...e.activator.duel.field.getCells("ExtraMonsterZone")],u=["Attack","Defense"];for(const d of s){const p=d.fusionMaterialInfos.filter(f=>f.type!=="Overmuch");if(p.length&&!(o.every(f=>!f.status.fusionSubstitute)&&p.filter(ne).some(f=>o.every(h=>h.nm!==f.cardName)))&&!p.filter(es).some(f=>o.every(h=>!f.filter(h))))for(const f of o.filter(h=>h!==d).getAllOnOffPattern().filter(h=>h.length===p.length)){const h=mr(d,e,u,c,f,r);h&&(yield{monster:d,materialInfos:h},console.log(d,h))}}}const Sr=async(e,...t)=>{var p;const i=Ti(e,...t).toArray(),a=i.map(f=>f.monster).getDistinct(),n=await e.activator.waitSelectEntity(a,"融合召喚するモンスターを選択。");if(!n)return!1;const r=n.fusionMaterialInfos.filter(ts),s=i.filter(f=>f.monster===n).map(f=>f.materialInfos),o=s.map(f=>({infos:f,requiredSeqList:f.map(h=>h.material.seq)}));let c=s[0].map(f=>f.material);if(s.length>1||r.length){const f=s.flatMap(h=>h.map(y=>y.material)).getDistinct();c=await e.activator.waitSelectEntities(f,void 0,h=>o.some(y=>y.requiredSeqList.every(_=>h.map(g=>g.seq).includes(_))&&h.filter(_=>!y.requiredSeqList.includes(_.seq)).every(_=>r.some(g=>g.filter(_)))),"融合素材とするモンスターを選択",!1)??c}const u=o.find(f=>f.requiredSeqList.every(h=>c.map(y=>y.seq).includes(h))&&c.filter(h=>!f.requiredSeqList.includes(h.seq)).every(h=>r.some(y=>y.filter(h))));if(!u)throw new S("想定されない状態",e,c);const d=u.infos;return d.push(...c.filter(f=>!u.requiredSeqList.includes(f.seq)).map(f=>({material:f,cell:f.fieldCell}))),await m.sendManyToGraveyardForTheSameReason(c,["FusionMaterial","Effect","SpecialSummonMaterial"],e.action.entity,e.activator),await e.activator.summon("FusionSummon",["Effect","SpecialSummon"],e.action,n,T,[...e.activator.getMonsterZones(),...e.activator.duel.field.getCells("ExtraMonsterZone")],d,!1),n.info.isRebornable=!((p=n.origin.monsterCategories)!=null&&p.includes("RegularSpecialSummonOnly")),d.map(f=>f.material).forEach(f=>f.onUsedAsMaterial(e,e.action.entity)),!0},pt=(e,t,i,a,n)=>({fixedTags:["SpecialSummonFromExtraDeck"],canExecute:r=>Ti(r,e,t,i,a,n).some(s=>s.materialInfos.length),prepare:C,execute:r=>Sr(r,e,t,i,a,n),settle:async()=>!0});function*vr(){for(const e of["心眼の女神","沼地の魔獣王","イリュージョン・シープ","破壊神 ヴァサーゴ"])yield{name:e,actions:[],continuousEffects:[Ve]};yield{name:"沼地の魔神王",actions:[{title:"融合サーチ",isMandatory:!1,playType:"IgnitionEffect",spellSpeed:"Normal",executableCells:["Hand"],executablePeriods:["main1","main2"],executableDuelistTypes:["Controller"],fixedTags:["SearchFromDeck"],canPayCosts:Sn,canExecute:e=>e.activator.getDeckCell().cardEntities.some(t=>t.nm==="融合")&&e.activator.canAddToHandFromDeck,getDests:e=>[e.activator.getGraveyard()],payCosts:vn,prepare:C,execute:async e=>{const t=e.activator.getDeckCell().cardEntities.filter(a=>a.nm==="融合");if(!t.length)return!1;const i=await e.activator.waitSelectEntity(t,"手札に加えるカードを選択",!1);return i?(await i.addToHand(["Effect"],e.action.entity,e.activator),e.activator.getDeckCell().shuffle(),!0):!1},settle:async()=>!0}],continuousEffects:[Ve]},yield{name:"パラサイト・フュージョナー",actions:[{title:"融合",isMandatory:!1,playType:"TriggerEffect",spellSpeed:"Normal",executableCells:["MonsterZone"],executablePeriods:w,executableDuelistTypes:["Controller"],...pt(["ExtraDeck"],()=>!0,["MonsterZone","ExtraMonsterZone"],(e,t,i)=>i.includes(e.action.entity),"Graveyard"),settle:async()=>!0}],summonFilter:(e,t,i,a,n,r,s,o,c,u)=>{const d={posList:c,cells:u},p={posList:[],cells:[]};if(!n.includes("FusionSummon"))return d;const f=o.find(h=>h.material===e.isSpawnedBy);return f?f.name&&f.name!==e.isSpawnedBy.nm?d:p:d},continuousEffects:[Ve]}}const Ei=Object.freeze(Object.defineProperty({__proto__:null,default:vr},Symbol.toStringTag,{value:"Module"}));function*Cr(){yield{name:"魔導サイエンティスト",actions:[{title:"特殊召喚",isMandatory:!1,playType:"IgnitionEffect",spellSpeed:"Normal",executableCells:["MonsterZone"],executablePeriods:["main1","main2"],executableDuelistTypes:["Controller"],fixedTags:["SpecialSummonFromExtraDeck"],canPayCosts:e=>e.activator.lp>=1e3,canExecute:e=>{const t=e.activator.getMonsterZones();return e.activator.getEnableSummonList(e.activator,"SpecialSummon",["Effect"],e.action,e.activator.getExtraDeck().cardEntities.filter(a=>{var n;return(n=a.status.monsterCategories)==null?void 0:n.includes("Fusion")}).filter(a=>a.lvl&&a.lvl<7).map(a=>({monster:a,posList:T,cells:t})),[],!1).length>0},payCosts:(e,t)=>ye(e,t,1e3),prepare:C,execute:async e=>{const t=e.activator.getMonsterZones(),i=await e.activator.summonOne(e.activator,"SpecialSummon",["Effect"],e.action,e.activator.getExtraDeck().cardEntities.filter(a=>{var n;return(n=a.status.monsterCategories)==null?void 0:n.includes("Fusion")}).filter(a=>a.lvl&&a.lvl<7).map(a=>({monster:a,posList:T,cells:t})),[],!1,!1);return i?(i.procFilterBundle.push(ge.createLingering("直接攻撃不可",()=>!0,e.action.entity,e.action,(a,n)=>n.face==="FaceUp"&&n.isOnFieldAsMonsterStrictly,["BattleTarget"],(a,n,r,s,o)=>a!==r?!0:o.every(c=>c.entityType!=="Duelist"))),i.counterHolder.setCurfewFlg(e.action.entity),!0):!1},settle:async()=>!0},{title:"自発帰還",isMandatory:!0,playType:"LingeringEffect",spellSpeed:"Normal",executableCells:Q,executablePeriods:["end"],executableDuelistTypes:he,canExecute:e=>e.action.entity.field.getMonstersOnFieldStrictly().some(t=>t.counterHolder.getCurfewFlg(e.action.entity)),prepare:C,execute:async e=>{const t=e.action.entity.field.getMonstersOnFieldStrictly().filter(a=>a.counterHolder.getCurfewFlg(e.action.entity));if(!t.length)throw new S("想定されない状態",e);let i=t[0];if(t.length>1){const a=await e.activator.waitSelectEntity(t,"帰還させるカードを選択。",!1);if(!a)throw new D(e);i=a}return await i.returnToDeck("Bottom",["Effect"],e.action.entity,e.activator),!0},settle:async()=>!0}]}}const wi=Object.freeze(Object.defineProperty({__proto__:null,default:Cr},Symbol.toStringTag,{value:"Module"}));function*Tr(){for(const e of[{name:"マンジュ・ゴッド",kinds:["Monster","Spell"]},{name:"センジュ・ゴッド",kinds:["Monster"]},{name:"ソニックバード",kinds:["Spell"]}])yield{name:e.name,actions:[{title:"①儀式サーチ",isMandatory:!1,playType:"TriggerEffect",spellSpeed:"Normal",executableCells:["MonsterZone"],executablePeriods:w,executableDuelistTypes:["Controller"],fixedTags:["SearchFromDeck"],meetsConditions:t=>t.action.entity.hasBeenSummonedNow(["NormalSummon","FlipSummon"]),canExecute:t=>t.activator.canAddToHandFromDeck&&t.activator.getDeckCell().cardEntities.filter(i=>e.kinds.includes(i.kind)).some(i=>{var a;return i.status.spellCategory==="Ritual"||((a=i.status.monsterCategories)==null?void 0:a.includes("Ritual"))}),prepare:C,execute:async t=>{if(!t.activator.canAddToHandFromDeck)return!1;const i=t.activator.getDeckCell().cardEntities.filter(n=>e.kinds.includes(n.kind)).filter(n=>{var r;return n.status.spellCategory==="Ritual"||((r=n.status.monsterCategories)==null?void 0:r.includes("Ritual"))});if(!i.length)return!1;const a=await t.activator.waitSelectEntity(i,"手札に加えるカードを選択",!1);if(!a)throw new D(t,i);return await a.addToHand(["Effect"],t.action.entity,t.activator),t.activator.getDeckCell().shuffle(),!0},settle:async()=>!0}]}}const _i=Object.freeze(Object.defineProperty({__proto__:null,default:Tr},Symbol.toStringTag,{value:"Module"}));function*Er(){yield{name:"儀式の準備",actions:[{title:"発動",isMandatory:!1,playType:"CardActivation",spellSpeed:"Normal",executableCells:["Hand","SpellAndTrapZone"],executablePeriods:["main1","main2"],executableDuelistTypes:["Controller"],fixedTags:["SearchFromDeck","ReturnToHandFromGraveyard"],canExecute:e=>e.activator.getDeckCell().cardEntities.filter(t=>{var i;return(i=t.status.monsterCategories)==null?void 0:i.includes("Ritual")}).some(t=>t.lvl&&t.lvl<8)&&e.activator.canAddToHandFromDeck,prepare:C,execute:async e=>{if(!e.activator.canAddToHandFromDeck)return!1;const t=e.activator.getDeckCell().cardEntities.filter(r=>{var s;return(s=r.status.monsterCategories)==null?void 0:s.includes("Ritual")}).filter(r=>r.lvl&&r.lvl<8);if(!t.length)return!1;const i=await e.activator.waitSelectEntity(t,"手札に加えるカードを選択",!1);if(!i)return!1;if(await i.addToHand(["Effect"],e.action.entity,e.activator),e.activator.getDeckCell().shuffle(),!e.activator.canAddToHandFromGraveyard)return!0;const a=e.activator.getGraveyard().cardEntities.filter(r=>r.status.spellCategory==="Ritual");if(a.length===1&&!await e.activator.waitYesNo("儀式カードをサルベージする？"))return!0;const n=await e.activator.waitSelectEntity(a,"手札に加えるカードを選択",!0);return n&&(e.activator.duel.clock.incrementProcSeq(),await n.addToHand(["Effect"],e.action.entity,e.activator)),!0},settle:async()=>!0},v]},yield{name:"儀式の下準備",actions:[{title:"発動",isMandatory:!1,playType:"CardActivation",spellSpeed:"Normal",executableCells:["Hand","SpellAndTrapZone"],executablePeriods:["main1","main2"],executableDuelistTypes:["Controller"],isOnlyNTimesPerTurn:1,fixedTags:["SearchFromDeck","ReturnToHandFromGraveyard"],canExecute:e=>{if(!e.activator.canAddToHandFromDeck)return!1;const t=e.activator.getDeckCell().cardEntities.filter(a=>a.status.spellCategory==="Ritual").flatMap(a=>a.status.textTags??[]),i=["Deck"];return e.activator.canAddToHandFromGraveyard&&i.push("Graveyard"),e.activator.getCells(...i).flatMap(a=>a.cardEntities).filter(a=>{var n;return(n=a.status.monsterCategories)==null?void 0:n.includes("Ritual")}).some(a=>t.includes(a.nm))},prepare:C,execute:async e=>{if(!e.activator.canAddToHandFromDeck)return!1;let t=e.activator.getDeckCell().cardEntities.filter(o=>o.status.spellCategory==="Ritual").flatMap(o=>o.status.textTags??[]);if(!t.length)return!1;const i=["Deck"];if(e.activator.canAddToHandFromGraveyard&&i.push("Graveyard"),t=e.activator.getCells(...i).flatMap(o=>o.cardEntities).filter(o=>{var c;return(c=o.status.monsterCategories)==null?void 0:c.includes("Ritual")}).filter(o=>t.includes(o.nm)).map(o=>o.nm),!t.length)return!1;const a=e.activator.getDeckCell().cardEntities.filter(o=>o.status.spellCategory==="Ritual").filter(o=>o.status.textTags&&o.status.textTags.union(t).length);if(!a.length)return!1;const n=await e.activator.waitSelectEntity(a,"手札に加えるカードを選択",!1);if(!n)throw new D(e);const r=e.activator.getCells(...i).flatMap(o=>o.cardEntities).filter(o=>{var c;return(c=o.status.monsterCategories)==null?void 0:c.includes("Ritual")}).filter(o=>{var c;return(c=n.status.textTags)==null?void 0:c.includes(o.nm)});if(!r.length)throw console.error(n.status.textTags),new S("想定されない状態",e,n,n.status.textTags);const s=await e.activator.waitSelectEntity(r,"手札に加えるカードを選択",!1);if(!s)throw new D(e,a);return await m.addManyToHand([n,s],["Effect"],e.action.entity,e.activator),e.activator.getDeckCell().shuffle(),!0},settle:async()=>!0},v]}}const bi=Object.freeze(Object.defineProperty({__proto__:null,default:Er},Symbol.toStringTag,{value:"Module"}));function*wr(){yield{name:"折れ竹光",actions:[fe(),v]},yield{name:"妖刀竹光",actions:[fe(),v,{title:"②直接攻撃付与",isMandatory:!1,playType:"IgnitionEffect",spellSpeed:"Normal",executableCells:["SpellAndTrapZone"],executablePeriods:["main1","main2"],executableDuelistTypes:["Controller"],isOnlyNTimesPerTurn:1,...V(e=>e.activator.getSpellTrapsOnField().filter(t=>{var i;return(i=t.status.nameTags)==null?void 0:i.includes("竹光")}).filter(t=>t!==e.action.entity).filter(t=>t.status.spellCategory==="Equip"),{message:"手札に戻すカードを選択。",tags:["BounceToHand"]}),execute:async e=>{const t=e.action.entity.info.equipedBy;return t?(await m.returnManyToHandForTheSameReason(e.selectedEntities,["Effect"],e.action.entity,e.activator),t.statusOperatorBundle.push(new H({title:"直接攻撃",validateAlive:i=>(console.log(i.effectOwner.duel.clock.turn,i.isSpawnedAt.turn),i.effectOwner.duel.clock.isSameTurn(i.isSpawnedAt)),isContinuous:!1,isSpawnedBy:e.action.entity,actionAttr:e.action,isApplicableTo:(i,a)=>a.isOnFieldAsMonsterStrictly&&a.face==="FaceUp",statusCalculator:()=>({canDirectAttack:!0})})),!0):!1},settle:async()=>!0},{title:"③サーチ",isMandatory:!1,playType:"TriggerEffect",spellSpeed:"Normal",executableCells:["Graveyard"],executablePeriods:[...w,...N],executableDuelistTypes:["Controller"],fixedTags:["SearchFromDeck"],meetsConditions:e=>e.action.entity.wasMovedAtPreviousChain&&e.action.entity.wasMovedFrom.cellType!=="Banished",canExecute:e=>e.activator.canAddToHandFromDeck&&e.activator.getDeckCell().cardEntities.filter(t=>{var i;return(i=t.status.nameTags)==null?void 0:i.includes("竹光")}).some(t=>t.status.name!=="妖刀竹光"),prepare:C,execute:async e=>{const t=e.activator.getDeckCell().cardEntities.filter(a=>{var n;return(n=a.status.nameTags)==null?void 0:n.includes("竹光")}).filter(a=>a.status.name!=="妖刀竹光");if(!t.length)return!1;const i=await e.activator.waitSelectEntity(t,"手札に加えるカードを選択。",!1);if(!i)throw new D(e);return await i.addToHand(["Effect"],e.action.entity,e.activator),e.activator.getDeckCell().shuffle(),!0},settle:async()=>!0}]},yield{name:"真刀竹光",actions:[fe(),v,{title:"②相手モンスター破壊",isMandatory:!1,playType:"TriggerEffect",spellSpeed:"Normal",executableCells:["SpellAndTrapZone"],executablePeriods:["b1DAfterDmgCalc","b2DAfterDmgCalc"],executableDuelistTypes:["Controller"],canExecute:e=>{const t=e.action.entity.info.equipedBy;return!(!t||!t.info.battleLog.filter(i=>e.activator.duel.clock.isPreviousStage(i.timestamp)).some(i=>i.enemy.entityType==="Duelist")||!e.activator.getOpponentPlayer().getMonstersOnField().length||!e.activator.getOpponentPlayer().lifeLog.filter(i=>e.activator.duel.clock.isPreviousStage(i.clock)).some(i=>i.entity===t))},prepare:async e=>({selectedEntities:[],chainBlockTags:e.action.calcChainBlockTagsForDestroy(e.activator,e.activator.getOpponentPlayer().getMonstersOnField()),prepared:void 0}),execute:async e=>(await m.tryDestroy(e.activator.getOpponentPlayer().getMonstersOnField(),e)).length>0,settle:async()=>!0},{title:"③竹光入替",isMandatory:!1,playType:"IgnitionEffect",spellSpeed:"Normal",executableCells:["SpellAndTrapZone"],executablePeriods:["main1","main2"],executableDuelistTypes:["Controller"],canPayCosts:e=>e.action.entity.info.equipedBy?gn(e):!1,canExecute:e=>!!(e.action.entity.info.equipedBy&&e.activator.getDeckCell().cardEntities.filter(t=>{var i;return(i=t.status.nameTags)==null?void 0:i.includes("竹光")}).filter(t=>t.status.name!=="真刀竹光").some(t=>t.status.spellCategory==="Equip"))&&e.activator.duel.field.getMonstersOnFieldStrictly().some(t=>t.canBeTargetOfEffect(e)),payCosts:hn,prepare:C,execute:async e=>{const t=e.activator.getDeckCell().cardEntities.filter(o=>{var c;return(c=o.status.nameTags)==null?void 0:c.includes("竹光")}).filter(o=>o.status.name!=="真刀竹光").filter(o=>o.status.spellCategory==="Equip");if(!t.length)return!1;const i=e.activator.getAvailableSpellTrapZones();if(!i.length)return!1;const a=e.activator.duel.field.getMonstersOnFieldStrictly().filter(o=>o.canBeTargetOfEffect(e));if(!a.length)return!1;const n=await e.activator.waitSelectEntity(t,"装備するカードを選択。",!1);if(!n)throw new D("竹光選択",e);const r=await e.activator.duel.view.waitSelectDestination(e.activator,n,i,"装備カードを置く場所を選択。","装備",!1);if(!r)throw new D("配置場所選択",e);await n.putDirectly(r,"Spell",["Effect"],e.action.entity,e.activator),e.activator.getDeckCell().shuffle();const s=await e.activator.waitSelectEntity(a,"装備する対象を選択。",!1);if(!s)throw new D("装備対象選択",e);return n.info.equipedBy=s,n.info.effectTargets[e.action.seq]=[s],s.info.equipEntities.push(n),!0},settle:async()=>!0}]}}const ki=Object.freeze(Object.defineProperty({__proto__:null,default:wr},Symbol.toStringTag,{value:"Module"}));function*_r(){yield{name:"黄金色の竹光",actions:[{title:"発動",isMandatory:!1,playType:"CardActivation",spellSpeed:"Normal",executableCells:["Hand","SpellAndTrapZone"],executablePeriods:["main1","main2"],executableDuelistTypes:["Controller"],priorityForNPC:20,fixedTags:["Draw"],meetsConditions:e=>e.activator.getSpellTrapsOnField().filter(t=>{var i;return(i=t.status.nameTags)==null?void 0:i.includes("竹光")}).filter(t=>t.face==="FaceUp").some(t=>t.status.spellCategory==="Equip"),canExecute:e=>e.activator.getDeckCell().cardEntities.length>0&&e.activator.canDraw,prepare:C,execute:async e=>(await e.activator.draw(2,e.action.entity,e.activator),!0),settle:async()=>!0},v]}}const Di=Object.freeze(Object.defineProperty({__proto__:null,default:_r},Symbol.toStringTag,{value:"Module"}));function*br(){yield{name:"ＢＦ－疾風のゲイル",actions:[{title:"①特殊召喚",isMandatory:!1,playType:"SpecialSummon",spellSpeed:"Normal",executableCells:["Hand"],executablePeriods:["main1","main2"],executableDuelistTypes:["Controller"],canExecute:e=>e.activator.getMonstersOnField().filter(t=>(t.status.nameTags??[]).includes("ＢＦ")).some(t=>t.nm!==e.action.entity.origin.name)&&j(e,T,[],["Rule"]),getDests:e=>K(e,T,[],["Rule"]),prepare:e=>Y(e,"SpecialSummon",["SpecialSummon","Rule"],T),execute:I,settle:async()=>!0},{title:"②攻守半減",isMandatory:!1,playType:"IgnitionEffect",spellSpeed:"Normal",executableCells:["MonsterZone"],executablePeriods:["main1","main2"],executableDuelistTypes:["Controller"],isOnlyNTimesPerTurnIfFaceup:1,...V(e=>e.activator.getOpponentPlayer().getMonstersOnField().filter(t=>t.face==="FaceUp").filter(t=>t.canBeTargetOfEffect(e)),{message:"対象モンスターを選択。"}),execute:async e=>{const t=e.selectedEntities.filter(i=>i.isOnFieldAsMonsterStrictly).filter(i=>i.face==="FaceUp").find(i=>i.canBeEffected(e.activator,e.action.entity,e.action));return t?(["attack","defense"].map(i=>q.createLingeringFixation("②攻守半減",()=>!0,e.action.entity,e.action,i,(a,n,r)=>Math.round(r/2))).forEach(i=>t.numericOprsBundle.push(i)),!0):!1},settle:async()=>!0}]}}const Ai=Object.freeze(Object.defineProperty({__proto__:null,default:br},Symbol.toStringTag,{value:"Module"}));function*kr(){yield{name:"水晶機巧－ハリファイバー",actions:[dt(e=>e.length===2&&e.some(t=>{var i;return(i=t.status.monsterCategories)==null?void 0:i.includes("Tuner")})),{title:"①リクルート",isMandatory:!1,playType:"TriggerEffect",spellSpeed:"Normal",executableCells:L,executablePeriods:[...w,...N],executableDuelistTypes:["Controller"],fixedTags:["SpecialSummonFromDeck"],meetsConditions:e=>e.action.entity.hasBeenSummonedNow(["LinkSummon"]),canExecute:e=>{const t=[e.activator.getHandCell(),e.activator.getDeckCell()].flatMap(n=>n.cardEntities).filter(n=>(n.lvl??12)<4).filter(n=>{var r;return(r=n.status.monsterCategories)==null?void 0:r.includes("Tuner")}),i=e.activator.getMonsterZones();return e.activator.getEnableSummonList(e.activator,"SpecialSummon",["Effect"],e.action,t.map(n=>({monster:n,cells:i,posList:["Defense"]})),[],!1).length>0},prepare:C,execute:async e=>{const t=[e.activator.getHandCell(),e.activator.getDeckCell()].flatMap(n=>n.cardEntities).filter(n=>(n.lvl??12)<4).filter(n=>{var r;return(r=n.status.monsterCategories)==null?void 0:r.includes("Tuner")}),i=e.activator.getMonsterZones(),a=await e.activator.summonOne(e.activator,"SpecialSummon",["Effect"],e.action,t.map(n=>({monster:n,cells:i,posList:["Defense"]})),[],!1,!1);if(!a)throw new D(e);return a.statusOperatorBundle.push(new H({title:"効果発動不可",validateAlive:n=>n.effectOwner.duel.clock.isSameTurn(n.isSpawnedAt),isContinuous:!1,isSpawnedBy:e.action.entity,actionAttr:e.action,isApplicableTo:(n,r)=>n.effectOwner.duel.clock.isSameTurn(n.isSpawnedAt)&&r.isOnFieldAsMonsterStrictly&&r.face==="FaceUp",statusCalculator:()=>({canActivateEffect:!1})})),!0},settle:async()=>!0},{title:"②シンクロ召喚",isMandatory:!1,playType:"QuickEffect",spellSpeed:"Quick",executableCells:L,executablePeriods:["main1","main2"],executableDuelistTypes:["Controller"],isOnlyNTimesPerChain:1,canPayCosts:_e,meetsConditions:e=>!e.activator.isTurnPlayer,canExecute:e=>{const t=[...e.activator.getMonsterZones(),...e.activator.duel.field.getCells("ExtraMonsterZone")],i=e.activator.getExtraDeck().cardEntities.filter(n=>{var r;return(r=n.status.monsterCategories)==null?void 0:r.includes("Synchro")}).filter(n=>{var r;return(r=n.status.monsterCategories)==null?void 0:r.includes("Tuner")});return e.activator.getEnableSummonList(e.activator,"SynchroSummon",["SpecialSummon","Effect"],e.action,i.map(n=>({monster:n,cells:t,posList:T})),[{material:e.action.entity,cell:e.action.entity.fieldCell}],!1).length>0},payCosts:Ze,prepare:C,execute:async e=>{const t=[...e.activator.getMonsterZones(),...e.activator.duel.field.getCells("ExtraMonsterZone")],i=e.activator.getExtraDeck().cardEntities.filter(n=>{var r;return(r=n.status.monsterCategories)==null?void 0:r.includes("Synchro")}).filter(n=>{var r;return(r=n.status.monsterCategories)==null?void 0:r.includes("Tuner")});return!!await e.activator.summonOne(e.activator,"SynchroSummon",["SpecialSummon","Effect"],e.action,i.map(n=>({monster:n,cells:t,posList:T})),[],!1,!1)},settle:async()=>!0}]}}const Pi=Object.freeze(Object.defineProperty({__proto__:null,default:kr},Symbol.toStringTag,{value:"Module"}));function*Dr(){yield{name:"Ｄ－ＨＥＲＯ ディアボリックガイ",actions:[{title:"①リクルート",isMandatory:!1,playType:"IgnitionEffect",spellSpeed:"Normal",executableCells:["Graveyard"],executablePeriods:["main1","main2"],executableDuelistTypes:["Controller"],fixedTags:["SpecialSummonFromDeck"],priorityForNPC:10,canPayCosts:_e,canExecute:e=>{const t=e.activator.getDeckCell().cardEntities.find(n=>n.nm==="Ｄ－ＨＥＲＯ ディアボリックガイ");if(!t)return!1;const i=e.activator.getMonsterZones();return e.activator.getEnableSummonList(e.activator,"SpecialSummon",["Effect"],e.action,[{monster:t,posList:T,cells:i}],[],!1).length>0},payCosts:Ze,prepare:C,execute:async e=>{const t=e.activator.getDeckCell().cardEntities.find(i=>i.nm==="Ｄ－ＨＥＲＯ ディアボリックガイ");return t?Tn(e,[t]):!1},settle:async()=>!0}]},yield{name:"Ｄ－ＨＥＲＯ ダイヤモンドガイ",actions:[{title:"魔法効果予約",isMandatory:!1,playType:"IgnitionEffect",spellSpeed:"Normal",executableCells:["MonsterZone"],executablePeriods:["main1","main2"],executableDuelistTypes:["Controller"],isOnlyNTimesPerTurnIfFaceup:1,canExecute:e=>e.action.entity.face==="FaceUp"&&e.activator.getDeckCell().cardEntities.length>0,prepare:C,execute:async e=>{const t=await m.excavateFromDeck(e.activator,["Effect"],e.action.entity,e.activator);if(!t)return!1;if(t.kind!=="Spell"||t.status.spellCategory!=="Normal")return e.activator.duel.view.requireUpdate(),await Me(500),e.activator.writeInfoLog(`${t.toString()}は通常魔法ではないため、デッキボトムに戻った。`),await t.returnToDeck("Bottom",["Effect"],e.action.entity,e.activator),!1;await t.sendToGraveyard(["Effect"],e.action.entity,e.activator);const i=t.actions.filter(r=>r.playType==="CardActivation").find(r=>!r.needsToPayCost);if(!i)return e.activator.writeInfoLog(`${t.toString()}は${e.action.entity.toString()}の効果では発動できない。`),!0;const a=e.activator.duel.clock.getClone(),n={...i.definition};return n.title+=`(${e.action.entity.toString()})`,n.playType="IgnitionEffect",n.canExecute=(r,s)=>r.activator.duel.clock.turn>a.turn+2||r.action.entity.wasMovedAfter(a)?"RemoveMe":r.activator.duel.clock.turn<a.turn+2?!1:!i.definition.canExecute||i.definition.canExecute(r,s),n.executableCells=["Graveyard"],n.meetsConditions=void 0,n.canPayCosts=void 0,n.payCosts=void 0,n.settle=async()=>!0,n.isOnlyNTimesPerTurn=1,t.actions.push(ie.createNew(t,n)),!0},settle:async()=>!0}]}}const xi=Object.freeze(Object.defineProperty({__proto__:null,default:Dr},Symbol.toStringTag,{value:"Module"}));function*Ar(){yield{name:"Ｅ・ＨＥＲＯ プリズマー",actions:[{title:"リフレクト・チェンジ",isMandatory:!1,playType:"IgnitionEffect",spellSpeed:"Normal",executableCells:["MonsterZone"],executablePeriods:["main1","main2"],executableDuelistTypes:["Controller"],isOnlyNTimesPerTurnIfFaceup:1,needsToPayCost:!0,canPayCosts:e=>{const t=e.activator.getExtraDeck().cardEntities.flatMap(i=>i.fusionMaterialInfos).filter(ne).map(i=>i.cardName).getDistinct();return e.activator.getDeckCell().cardEntities.filter(i=>t.includes(i.nm)).some(i=>i.canBeSentToGraveyard(e.activator,e.action.entity,"SendToGraveyardAsCost",e.action))},canExecute:e=>e.action.entity.face==="FaceUp",payCosts:async(e,t,i)=>{const a=e.activator.getExtraDeck().cardEntities.flatMap(c=>c.fusionMaterialInfos).filter(ne).map(c=>c.cardName).getDistinct(),n=e.activator.getDeckCell().cardEntities.filter(c=>a.includes(c.nm)).filter(c=>c.canBeSentToGraveyard(e.activator,e.action.entity,"SendToGraveyardAsCost",e.action));if(n.length===0)throw new S("想定されない状態",e);const r=await e.activator.waitSelectEntity(n,"墓地に送るモンスターを選択",i);if(!r){if(!i)throw new D(e);return}const s=e.activator.getExtraDeck().cardEntities.filter(c=>c.fusionMaterialInfos.filter(ne).some(u=>u.cardName===r.nm)),o=await e.activator.waitSelectEntity(s,"公開するモンスターを選択",i);if(!o)throw new S("想定されない状態",e);return e.activator.writeInfoLog(`公開：${o.toString()}`),await r.sendToGraveyard(["Effect"],e.action.entity,e.activator),e.activator.getDeckCell().shuffle(),{sendToGraveyard:[r]}},prepare:C,execute:async e=>{const t=e.costInfo.sendToGraveyard;if(!t||!t.length)throw new S("コスト情報が取得できない",e);const i=t[0];return e.action.entity.statusOperatorBundle.push(new H({title:e.action.title,validateAlive:a=>a.effectOwner.duel.clock.isSameTurn(a.isSpawnedAt),isContinuous:!1,isSpawnedBy:e.action.entity,actionAttr:e.action,isApplicableTo:(a,n)=>n.isOnFieldAsMonsterStrictly&&n.face==="FaceUp",statusCalculator:()=>({name:i.origin.name})})),!0},settle:async()=>!0}]}}const Mi=Object.freeze(Object.defineProperty({__proto__:null,default:Ar},Symbol.toStringTag,{value:"Module"}));function*Pr(){yield{name:"封印されしエクゾディア",actions:[{title:"封印開放",isMandatory:!0,playType:"Exodia",spellSpeed:"Normal",executableCells:["Hand"],executablePeriods:R,executableDuelistTypes:["Controller"],canExecute:e=>e.activator.getHandCell().cardEntities.filter(i=>{var a;return(a=i.origin.nameTags)==null?void 0:a.includes("封印されし")}).map(i=>i.origin.name).getDistinct().length===5,prepare:async e=>(await m.sendManyToGraveyardForTheSameReason(e.activator.duel.field.getCardsOnFieldStrictly(),["Rule"],e.action.entity,e.activator),{selectedEntities:[],chainBlockTags:[],nextChainBlockFilter:()=>!1}),execute:async e=>{const t=e.activator.getOpponentPlayer().getHandCell().cardEntities.filter(a=>{var n;return(n=a.origin.nameTags)==null?void 0:n.includes("封印されし")}).map(a=>a.origin.name).getDistinct().length===5,i=[{name:"封印されし者の左足",column:4},{name:"封印されし者の右足",column:2},{name:"封印されし者の左腕",column:5},{name:"封印されし者の右腕",column:1},{name:"封印されしエクゾディア",column:3}];for(const a of i){const n=[e.activator.getHandCell().cardEntities.find(r=>r.origin.name===a.name),e.activator.getOpponentPlayer().getHandCell().cardEntities.find(r=>r.origin.name===a.name)].filter(r=>r!==void 0);if(!n.length)throw new S("想定されない状態",e.activator.getHandCell().cardEntities,a.name);await k.moveMany(n.map(r=>({entity:r,to:r.controller.getMonsterZones().find(s=>s.column===(r.controller.seat==="Above"?6-a.column:a.column))??r.controller.getFieldZone(),kind:"Monster",face:"FaceUp",orientation:"Vertical",pos:"Top",movedAs:["Rule"],movedBy:void 0,actionOwner:void 0,chooser:void 0})))}throw t?new B(void 0,`お互いが、${e.action.entity.toString()}の特殊勝利条件を同時に満たした。`):new B(e.activator,`${e.action.entity.toString()}の特殊勝利条件を満たした。`)},settle:async()=>!0}]}}const Fi=Object.freeze(Object.defineProperty({__proto__:null,default:Pr},Symbol.toStringTag,{value:"Module"}));function*xr(){yield{name:"ファイアウォール・ドラゴン・シンギュラリティ",actions:[dt(e=>e.length>2),{title:"①バウンス＆自己強化",isMandatory:!1,playType:"QuickEffect",spellSpeed:"Quick",executableCells:L,executablePeriods:[...w,...N],executableDuelistTypes:["Controller"],isOnlyNTimesPerTurn:1,hasToTargetCards:!0,fixedTags:["BounceToHand"],canExecute:e=>[...e.activator.getGraveyard().cardEntities,...e.activator.getMonstersOnField()].flatMap(n=>n.status.monsterCategories??[]).getDistinct().union(["Ritual","Fusion","Synchro","Xyz"]).length<1?!1:[...e.activator.getOpponentPlayer().getGraveyard().cardEntities,...e.activator.getOpponentPlayer().getEntiteisOnField()].filter(n=>n.canBeTargetOfEffect(e)).length>0,prepare:async(e,t,i)=>{const n=[...e.activator.getGraveyard().cardEntities,...e.activator.getMonstersOnField()].flatMap(c=>c.status.monsterCategories??[]).getDistinct().union(["Ritual","Fusion","Synchro","Xyz"]).length;if(n<1)return;const r=[...e.activator.getOpponentPlayer().getGraveyard().cardEntities,...e.activator.getOpponentPlayer().getEntiteisOnField()].filter(c=>c.canBeTargetOfEffect(e));if(r.length<1)return;const s=r.length===1?1:void 0,o=await e.activator.waitSelectEntities(r,s,c=>c.length>0&&c.length<=n,"手札に戻すカードを選択。",i);if(o)return{selectedEntities:o}},execute:async e=>{const t=e.selectedEntities.filter(a=>a.isOnFieldStrictly||a.fieldCell.cellType==="Graveyard").filter(a=>a.canBeEffected(e.activator,e.action.entity,e.action));await m.returnManyToHandForTheSameReason(t,["Effect"],e.action.entity,e.activator);const i=t.filter(a=>a.fieldCell.cellType==="Hand"||a.fieldCell.cellType==="ExtraDeck").length;return e.action.entity.numericOprsBundle.push(q.createLingeringAddition(e.action.title,a=>a.isSpawnedBy.isEffective,e.action.entity,e.action,"attack",(a,n,r)=>r+500*i)),!0},settle:async()=>!0},{title:"②蘇生",isMandatory:!1,playType:"TriggerEffect",spellSpeed:"Normal",executableCells:L,executablePeriods:R,executableDuelistTypes:["Controller"],isOnlyNTimesPerTurn:1,fixedTags:["SpecialSummonFromGraveyard"],meetsConditions:e=>{const t=e.action.entity.moveLog.latestRecord.movedAt,i=e.action.duel.field.moveLog.getPriviousChainLog().filter(a=>(console.log(a,a.entity.fieldCell.cellType==="Graveyard",a.movedAs.includes("BattleDestroy")),a.entity.fieldCell.cellType==="Graveyard"||a.movedAs.includes("BattleDestroy"))).filter(a=>a.movedAt.totalProcSeq>t.totalProcSeq).map(a=>a.entity.wasMovedFrom).toArray();return e.action.entity.linkArrowDests.union(i).length>0},canExecute:e=>{const t=e.activator.getMonsterZones();return e.activator.getEnableSummonList(e.activator,"SpecialSummon",["Effect"],e.action,e.activator.getGraveyard().cardEntities.filter(a=>a.kind==="Monster").filter(a=>a.types.includes("Cyberse")).filter(a=>a.canBeTargetOfEffect(e)).map(a=>({monster:a,posList:T,cells:t})),[],!1).length>0},prepare:e=>se(e,e.activator.getGraveyard().cardEntities.filter(t=>t.kind==="Monster").filter(t=>t.types.includes("Cyberse")).filter(t=>t.canBeTargetOfEffect(e)),T),execute:e=>le(e,T),settle:async()=>!0}]}}const Ni=Object.freeze(Object.defineProperty({__proto__:null,default:xr},Symbol.toStringTag,{value:"Module"}));function*Mr(){yield{name:"融合",actions:[{title:"発動",isMandatory:!1,playType:"CardActivation",spellSpeed:"Normal",executableCells:["Hand","SpellAndTrapZone"],executablePeriods:["main1","main2"],executableDuelistTypes:["Controller"],...pt(["ExtraDeck"],()=>!0,["Hand","MonsterZone","ExtraMonsterZone"],()=>!0,"Graveyard")},v]};for(const e of[{name:"簡易融合",lvlUpperBound:5,filter:()=>!0},{name:"簡素融合",lvlUpperBound:6,filter:t=>{var i;return!((i=t.status.monsterCategories)!=null&&i.includes("Effect"))}}])yield{name:e.name,actions:[{title:"発動",isMandatory:!1,playType:"CardActivation",spellSpeed:"Normal",executableCells:["Hand","SpellAndTrapZone"],executablePeriods:["main1","main2"],executableDuelistTypes:["Controller"],isOnlyNTimesPerTurn:1,fixedTags:["SpecialSummonFromExtraDeck"],canPayCosts:t=>t.activator.lp>=1e3,canExecute:t=>{const i=t.activator.getMonsterZones();return t.activator.getEnableSummonList(t.activator,"SpecialSummon",["Effect"],t.action,t.activator.getExtraDeck().cardEntities.filter(n=>{var r;return(r=n.status.monsterCategories)==null?void 0:r.includes("Fusion")}).filter(n=>n.lvl&&n.lvl<=e.lvlUpperBound).filter(e.filter).map(n=>({monster:n,posList:T,cells:i})),[],!1).length>0},payCosts:(t,i)=>ye(t,i,1e3),prepare:C,execute:async t=>{var n;const i=t.activator.getMonsterZones(),a=await t.activator.summonOne(t.activator,"FusionSummon",["Effect"],t.action,t.activator.getExtraDeck().cardEntities.filter(r=>{var s;return(s=r.status.monsterCategories)==null?void 0:s.includes("Fusion")}).filter(r=>r.lvl&&r.lvl<=e.lvlUpperBound).filter(e.filter).map(r=>({monster:r,posList:T,cells:i})),[],!1,!1);return a?(a.statusOperatorBundle.push(new H({title:"攻撃不可",validateAlive:()=>!0,isContinuous:!1,isSpawnedBy:t.action.entity,actionAttr:t.action,isApplicableTo:(r,s)=>s.face==="FaceUp"&&s.isOnFieldAsMonsterStrictly,statusCalculator:()=>({canAttack:!1})})),a.counterHolder.setSelfDestructionFlg(t.action.entity),a.info.isRebornable=!((n=a.origin.monsterCategories)!=null&&n.includes("RegularSpecialSummonOnly")),!0):!1},settle:async()=>!0},v,{title:"自壊",isMandatory:!0,playType:"LingeringEffect",spellSpeed:"Normal",executableCells:Q,executablePeriods:["end"],executableDuelistTypes:he,canExecute:t=>t.action.entity.field.getMonstersOnFieldStrictly().some(i=>i.counterHolder.getSelfDestructionFlg(t.action.entity)),prepare:C,execute:async t=>{const i=t.action.entity.field.getMonstersOnFieldStrictly().filter(n=>n.counterHolder.getSelfDestructionFlg(t.action.entity));if(!i.length)throw new S("想定されない状態",t);let a=i[0];if(i.length>1){const n=await t.activator.waitSelectEntity(i,"自壊させるカードを選択。",!1);if(!n)throw new D(t);a=n}return await m.tryDestroy([a],t),!0},settle:async()=>!0}]}}const Oi=Object.freeze(Object.defineProperty({__proto__:null,default:Mr},Symbol.toStringTag,{value:"Module"}));function*Fr(){yield*["イグナイト・イーグル","イグナイト・マグナム","イグナイト・ドラグノフ","イグナイト・マスケット","イグナイト・デリンジャー","イグナイト・ライオット","イグナイト・ウージー","イグナイト・キャリバー"].map(e=>({name:e,actions:[J,{title:"①サーチ",isMandatory:!1,playType:"IgnitionEffect",spellSpeed:"Normal",executableCells:["SpellAndTrapZone"],executablePeriods:["main1","main2"],executableDuelistTypes:["Controller"],fixedTags:["Destroy","DestroyMultiple","DestroyMultipleOnField","DestroySpellTrapOnField","DestroySpellTrapsOnField"],meetsConditions:t=>{var a;const i=t.activator.getPendulumScaleMonsters().find(n=>n!==t.action.entity);return!(!i||!((a=i.status.nameTags)!=null&&a.includes("イグナイト")))},canExecute:t=>t.activator.getDeckCell().cardEntities.some(i=>{var a;return(a=i.status.nameTags)==null?void 0:a.includes("イグナイト")}),prepare:async t=>({selectedEntities:[],chainBlockTags:["SearchFromDeck",...t.action.calcChainBlockTagsForDestroy(t.activator,t.activator.getPendulumScaleMonsters())],prepared:void 0}),execute:async t=>{if(!(await m.tryDestroy(t.activator.getPendulumScaleMonsters(),t)).length)return!1;const a=t.activator.getDeckCell().cardEntities.filter(r=>{var s;return(s=r.status.nameTags)==null?void 0:s.includes("イグナイト")});if(!a.length)return!1;const n=await t.activator.waitSelectEntity(a,"手札に加えるカードを選択。",!1);return n?(await n.addToHand(["Effect"],t.action.entity,t.activator),!0):!1},settle:async()=>!0}]}))}const Bi=Object.freeze(Object.defineProperty({__proto__:null,default:Fr},Symbol.toStringTag,{value:"Module"}));function*Nr(){yield{name:"ジャンク・コレクター",actions:[{title:"罠コピー",isMandatory:!1,playType:"QuickEffect",spellSpeed:"Quick",executableCells:L,executablePeriods:w,executableDuelistTypes:["Controller"],needsToPayCost:!0,canPayCosts:e=>e.activator.getGraveyard().cardEntities.filter(i=>i.kind==="Trap").filter(i=>i.status.trapCategory==="Normal").filter(i=>e.activator.canTryBanish(i,"BanishAsCost",e.action)).filter(i=>i.canBeBanished("BanishAsCost",e.activator,e.action.entity,e.action)).flatMap(i=>i.actions).filter(i=>i.playType==="CardActivation").filter(i=>!i.needsToPayCost).filter(i=>i.validate(e.activator,[],["IgnoreCosts","CopyEffectOnly"])).length?_e(e):!1,payCosts:async(e,t,i)=>{const a=e.activator.getGraveyard().cardEntities.filter(s=>s.kind==="Trap").filter(s=>s.status.trapCategory==="Normal").filter(s=>e.activator.canTryBanish(s,"BanishAsCost",e.action)).filter(s=>s.canBeBanished("BanishAsCost",e.activator,e.action.entity,e.action)).flatMap(s=>s.actions).filter(s=>s.playType==="CardActivation").filter(s=>!s.needsToPayCost).filter(s=>s.validate(e.activator,[],["IgnoreCosts","CopyEffectOnly"])).map(s=>s.entity),n=await e.activator.waitSelectEntity(a,"コピーする罠を選択。",i);if(!n)return;const r=[e.action.entity,n];return await m.banishManyForTheSameReason(r,["Cost"],e.action.entity,e.activator),{banish:r}},prepare:async(e,t)=>{var r;const i=(r=e.costInfo.banish)==null?void 0:r.find(s=>s!==e.action.entity);if(!i)throw new S("想定されない状況",e,e.costInfo);const a=i.actions.find(s=>s.playType==="CardActivation");if(!a)throw new S("想定されない状況",e,e.costInfo,i);const n={...await a.prepare(e.activator,void 0,void 0,t,!1,!0)};return n.appendix=[`コピー対象：${i.toString()}`,...n.appendix??[]],n},execute:async(e,t)=>{var n;const i=(n=e.costInfo.banish)==null?void 0:n.find(r=>r!==e.action.entity);if(!i)throw new S("想定されない状況",e,e.costInfo);const a=i.actions.find(r=>r.playType==="CardActivation");if(!a)throw new S("想定されない状況",e,e.costInfo,i);return await a.execute(e,t)},settle:async()=>!0}]}}const Li=Object.freeze(Object.defineProperty({__proto__:null,default:Nr},Symbol.toStringTag,{value:"Module"}));function*Or(){for(const e of["メタルフォーゼ・ゴルドライバー","メタルフォーゼ・シルバード","メタルフォーゼ・スティエレン","メタルフォーゼ・ヴォルフレイム"])yield{name:e,actions:[J,{title:"①サーチ",isMandatory:!1,playType:"IgnitionEffect",spellSpeed:"Normal",executableCells:["SpellAndTrapZone"],executablePeriods:["main1","main2"],executableDuelistTypes:["Controller"],isOnlyNTimesPerTurnIfFaceup:1,fixedTags:["Destroy"],...V(t=>{let i=t.activator.getEntiteisOnField().filter(a=>a.face==="FaceUp").filter(a=>a.canBeTargetOfEffect(t)).filter(a=>a!==t.action.entity);return t.activator.getAvailableSpellTrapZones.length||(i=i.filter(a=>a.fieldCell.cellType==="SpellAndTrapZone")),i},{message:"破壊するカードを選択。",destoryTargets:!0,canExecute:t=>t.activator.canSet&&t.activator.getDeckCell().cardEntities.filter(i=>i.kind==="Spell"||i.kind==="Trap").some(i=>{var a;return(a=i.status.nameTags)==null?void 0:a.includes("メタルフォーゼ")})}),execute:async t=>{if(!(await m.tryDestroy(t.selectedEntities,t)).length||!t.activator.canSet)return!1;const a=t.activator.getAvailableSpellTrapZones();if(!a.length)return!1;const n=t.activator.getDeckCell().cardEntities.filter(o=>o.kind==="Spell"||o.kind==="Trap").filter(o=>{var c;return(c=o.status.nameTags)==null?void 0:c.includes("メタルフォーゼ")});if(!n.length)return!1;const r=await t.activator.waitSelectEntity(n,"セットするカードを選択。",!1);if(!r)return!1;const s=await t.activator.duel.view.waitSelectDestination(t.activator,r,a,"セットする先を選択","セット",!1);if(!s)throw new D("セット先選択",t);return await r.setAsSpellTrap(s,r.kind,["Effect"],t.action.entity,t.activator),!0},settle:async()=>!0}]}}const qi=Object.freeze(Object.defineProperty({__proto__:null,default:Or},Symbol.toStringTag,{value:"Module"}));function*Br(){yield{name:"錬装融合",actions:[{title:"発動",isMandatory:!1,playType:"CardActivation",spellSpeed:"Normal",executableCells:["Hand","SpellAndTrapZone"],executablePeriods:["main1","main2"],executableDuelistTypes:["Controller"],...pt(["ExtraDeck"],(e,t)=>{var i;return!!((i=t.status.nameTags)!=null&&i.includes("メタルフォーゼ"))},["Hand","MonsterZone","ExtraMonsterZone"],()=>!0,"Graveyard")},{title:"②ドロー",isMandatory:!1,playType:"IgnitionEffect",spellSpeed:"Normal",executableCells:["Graveyard"],executablePeriods:["main1","main2"],executableDuelistTypes:["Controller"],isOnlyNTimesPerTurn:1,canExecute:e=>e.activator.getDeckCell().cardEntities.length>0&&e.activator.canDraw,prepare:async e=>(await e.action.entity.returnToDeck("Random",["Effect"],e.action.entity,e.activator),{selectedEntities:[],chainBlockTags:["Draw"]}),execute:async e=>(await e.activator.draw(1,e.action.entity,e.activator),!0),settle:async()=>!0},v]}}const Ri=Object.freeze(Object.defineProperty({__proto__:null,default:Br},Symbol.toStringTag,{value:"Module"}));function*Lr(){yield{name:"ダーク・リゾネーター",actions:[],substituteEffects:[Zn(1)]},yield{name:"レッド・リゾネーター",actions:[{title:"①特殊召喚",isMandatory:!1,playType:"TriggerEffect",spellSpeed:"Normal",executableCells:["MonsterZone"],executablePeriods:[...w,...N],executableDuelistTypes:["Controller"],fixedTags:["SpecialSummonFromHand","IfNormarlSummonSucceed","SpecialSummon"],meetsConditions:e=>e.action.entity.hasBeenSummonedNow(["NormalSummon"]),canExecute:e=>{const t=e.activator.getMonsterZones();return e.activator.getEnableSummonList(e.activator,"SpecialSummon",["Effect"],e.action,e.activator.getHandCell().cardEntities.filter(a=>a.kind==="Monster").filter(a=>(a.lvl??12)<5).map(a=>({monster:a,posList:T,cells:t})),[],!1).length>0},prepare:C,execute:async e=>{const t=e.activator.getMonsterZones(),i=e.activator.getHandCell().cardEntities.filter(n=>n.kind==="Monster").filter(n=>(n.lvl??12)<5).map(n=>({monster:n,posList:T,cells:t}));return!!await e.activator.summonOne(e.activator,"SpecialSummon",["Effect"],e.action,i,[],!1,!1)},settle:async()=>!0},{title:"②回復",isMandatory:!1,playType:"TriggerEffect",spellSpeed:"Normal",executableCells:["MonsterZone"],executablePeriods:[...w,...N],executableDuelistTypes:["Controller"],isOnlyNTimesPerTurn:1,meetsConditions:e=>e.action.entity.hasBeenSummonedNow(["SpecialSummon"]),...V(e=>e.activator.getMonstersOnField().filter(t=>t.canBeTargetOfEffect(e)).filter(t=>(t.atk??0)>0).filter(t=>t.info.summonKinds.includes("SpecialSummon")),{message:"対象モンスターを選択。"}),execute:async e=>{const t=e.activator.lp;return e.selectedEntities.filter(i=>i.isOnFieldAsMonsterStrictly).forEach(i=>e.activator.heal(i.atk??0,e.action.entity)),e.activator.lp!==t},settle:async()=>!0}]}}const Hi=Object.freeze(Object.defineProperty({__proto__:null,default:Lr},Symbol.toStringTag,{value:"Module"})),bt=(e,t)=>{const i=t?`魔力充填可能(${t})`:"魔力充填可能";return ve(i,e,a=>[a],a=>[new H({title:i,validateAlive:()=>!0,isContinuous:!0,isSpawnedBy:a,actionAttr:{},isApplicableTo:(n,r)=>n.isSpawnedBy===r,statusCalculator:(n,r,s)=>(s.maxCounterQty.SpellCounter=t??Number.MAX_VALUE,{maxCounterQty:s.maxCounterQty})})])},We={},qr=(e,t=1)=>(We[t]||(We[t]={title:`魔力回収(${t})`,isMandatory:!0,playType:"AfterChainBlock",spellSpeed:"Normal",executableCells:["MonsterZone"],executablePeriods:R,executableDuelistTypes:["Controller"],canExecute:i=>!!(i.targetChainBlock&&i.targetChainBlock.action.playType==="CardActivation"&&i.targetChainBlock.action.entity.kind==="Spell"&&i.action.entity.isEffective&&i.action.entity.face==="FaceUp"&&i.action.entity.counterHolder.getQty("SpellCounter")<(i.action.entity.status.maxCounterQty.SpellCounter??0)&&i.action.entity.hadArrivedToFieldAt().totalProcSeq<=i.targetChainBlock.isActivatedAt.totalProcSeq),prepare:C,execute:async i=>i.action.entity.face==="FaceDown"||!i.action.entity.isOnFieldAsMonsterStrictly||!i.action.entity.isEffective?!1:(i.action.entity.counterHolder.add("SpellCounter",t,i.action.entity),!0),settle:async()=>!0}),{...We[t],title:`${e}魔力回収(${t})`}),et=(e,t,i)=>e.action.entity.counterHolder.getQty("SpellCounter")>=i,tt=(e,t,i,a)=>{const n=a[0];return e.action.entity.counterHolder.remove("SpellCounter",n),{counter:n}};function*Rr(){yield{name:"魔導戦士 ブレイカー",actions:[{title:"①魔力充填",isMandatory:!0,playType:"TriggerEffect",spellSpeed:"Normal",executableCells:["MonsterZone"],executablePeriods:["main1","main2"],executableDuelistTypes:["Controller"],fixedTags:["IfNormarlSummonSucceed"],meetsConditions:e=>e.action.entity.hasBeenSummonedNow(["NormalSummon"]),prepare:C,execute:async e=>e.action.entity.face==="FaceDown"?!1:(e.action.entity.counterHolder.setQty("SpellCounter",1,e.action.entity),!0),settle:async()=>!0},{title:"③マナブレイク",isMandatory:!1,playType:"IgnitionEffect",spellSpeed:"Normal",executableCells:["MonsterZone"],executablePeriods:["main1","main2"],executableDuelistTypes:["Controller"],fixedTags:["Destroy","DestroyOnField","DestroySpellTrapOnField"],canPayCosts:(e,t)=>et(e,t,1),payCosts:async(e,t,i)=>tt(e,t,i,[1]),...V(e=>e.activator.duel.field.getSpellTrapsOnFieldStrictly().filter(t=>t.canBeTargetOfEffect(e)),{message:"破壊する対象を選択。",destoryTargets:!0}),execute:async e=>e.selectedEntities.every(t=>!t.isOnFieldAsSpellTrapStrictly)?!1:(await m.tryDestroy(e.selectedEntities,e),!0),settle:async()=>!0}],continuousEffects:[bt("Monster",1),we("②攻撃力上昇","Monster",e=>[e],e=>[q.createContinuous("②攻撃力上昇",()=>!0,e,()=>!0,"attack","wip","Addition",(t,i,a)=>t.isEffective?a+t.counterHolder.getQty("SpellCounter")*300:a)])]},yield{name:"王立魔法図書館",actions:[{...qr("①",1)},{title:"②ドロー",isMandatory:!1,playType:"IgnitionEffect",spellSpeed:"Normal",executableCells:["MonsterZone"],executablePeriods:["main1","main2"],executableDuelistTypes:["Controller"],canPayCosts:(e,t)=>et(e,t,3),canExecute:e=>e.activator.getDeckCell().cardEntities.length>0,payCosts:async(e,t,i)=>tt(e,t,i,[3]),prepare:C,execute:async e=>(await e.activator.draw(1,e.action.entity,e.activator),!0),settle:async()=>!0}],continuousEffects:[bt("Monster",3)]}}const Zi=Object.freeze(Object.defineProperty({__proto__:null,canPaySpellCounters:et,default:Rr,paySpellCounters:tt},Symbol.toStringTag,{value:"Module"}));function*Hr(){yield{name:"スターダスト・ドラゴン",actions:[$(),{title:"①ヴィクテム・サンクチュアリ",isMandatory:!1,playType:"QuickEffect",spellSpeed:"Quick",executableCells:["MonsterZone","ExtraMonsterZone"],executablePeriods:R,executableDuelistTypes:["Controller"],canPayCosts:ct,canExecute:e=>!!(e.targetChainBlock&&e.targetChainBlock.action.isWithChainBlock&&e.targetChainBlock.chainBlockTags.includes("DestroyOnField")),payCosts:ut,prepare:async e=>{if(!e.targetChainBlock)throw new S("想定されない状態",e);return{selectedEntities:[],chainBlockTags:e.action.calcChainBlockTagsForDestroy(e.activator,[e.targetChainBlock.action.entity]),prepared:void 0}},execute:async(e,t)=>{const i=t[e.index-1];return i.isNegatedActivationBy=e.action,await m.tryDestroy([i.action.entity],e),!0},settle:async()=>!0},{title:"②自己再生",playType:"IgnitionEffect",isMandatory:!1,spellSpeed:"Normal",executableCells:["Graveyard"],executablePeriods:["end"],executableDuelistTypes:["Controller"],fixedTags:["SpecialSummonFromGraveyard"],canExecute:e=>{const t=e.action.entity.moveLog.latestRecord;if(t.movedBy!==e.action.entity||!e.activator.duel.clock.isSameTurn(t.movedAt)||!t.movedAs.includes("Cost"))return!1;const i=e.activator.duel,a=e.action.entity.actionLogRecords.filter(n=>i.clock.isSameTurn(n.clock)).map(n=>n.chainBlockInfo).findLast(n=>n.action.title==="①ヴィクテム・サンクチュアリ");return!a||a.state!=="done"?!1:j(e,T,[],["Effect"])},prepare:C,execute:e=>ae(e),settle:async()=>!0}]},yield{name:"閃珖竜 スターダスト",actions:[$(),{title:"波動音壁",isMandatory:!1,playType:"QuickEffect",spellSpeed:"Quick",executableCells:L,executablePeriods:w,executableDuelistTypes:["Controller"],isOnlyNTimesPerTurnIfFaceup:1,...V(e=>e.activator.getEntiteisOnField().filter(t=>t.face==="FaceUp").filter(t=>t.canBeTargetOfEffect(e))),execute:async e=>(e.selectedEntities.filter(t=>t.isOnFieldStrictly).filter(t=>t.face==="FaceUp").filter(t=>t.canBeEffected(e.activator,e.action.entity,e.action)).forEach(t=>{t.counterHolder.add("SonicBarrier",1,e.action.entity)}),!0),settle:async()=>!0}],substituteEffects:[{title:"波動音壁（適用）",playType:"LingeringEffect",isMandatory:!0,executableCells:Q,executablePeriods:R,executableDuelistTypes:["Controller"],isApplicableTo:(e,t,i)=>i.filter(a=>a.counterHolder.getQty("SonicBarrier",e.entity)>0),substitute:async(e,t,i)=>{const a=i.filter(n=>n.counterHolder.getQty("SonicBarrier",e.entity)>0);return a.forEach(n=>{n.counterHolder.removeAll("SonicBarrier",e.entity),e.entity.controller.writeInfoLog(`波動音壁により${n.toString()}は１ターンに１度だけ戦闘効果では破壊されない。`)}),a}}]},yield{name:"真閃珖竜 スターダスト・クロニクル",actions:[$(e=>e.length===1&&e.every(t=>{var i;return(i=t.status.monsterCategories)==null?void 0:i.includes("Synchro")}),e=>e.length>0&&e.every(t=>{var i;return(i=t.status.monsterCategories)==null?void 0:i.includes("Synchro")})),{title:"波動護魂",isMandatory:!1,playType:"QuickEffect",spellSpeed:"Quick",executableCells:L,executablePeriods:w,executableDuelistTypes:["Controller"],isOnlyNTimesPerTurnIfFaceup:1,canPayCosts:e=>yn(e,e.activator.getGraveyard().cardEntities.filter(t=>{var i;return(i=t.status.monsterCategories)==null?void 0:i.includes("Synchro")})),payCosts:e=>mn(e,e.activator.getGraveyard().cardEntities.filter(t=>{var i;return(i=t.status.monsterCategories)==null?void 0:i.includes("Synchro")}),t=>t.length===1,1),prepare:C,execute:async e=>(e.action.entity.procFilterBundle.push(ge.createLingering(e.action.title,t=>t.effectOwner.duel.clock.isSameTurn(t.isSpawnedAt),e.action.entity,e.action,()=>!0,["Effect"],()=>!1)),!0),settle:async()=>!0},{title:"②蘇生",isMandatory:!1,playType:"TriggerEffect",spellSpeed:"Normal",executableCells:["Banished"],executablePeriods:[...w,...N],executableDuelistTypes:["Controller"],fixedTags:["SpecialSummonFromGraveyard"],meetsConditions:e=>e.action.entity.wasMovedAtPreviousChain&&e.action.entity.moveLog.latestRecord.actionOwner!==e.activator&&(e.action.entity.wasMovedFrom.owner===e.activator||e.action.entity.wasMovedFrom.cellType==="ExtraMonsterZone"),canExecute:e=>{const t=e.activator.getMonsterZones();return e.activator.getEnableSummonList(e.activator,"SpecialSummon",["Effect"],e.action,e.activator.getBanished().cardEntities.filter(a=>a.kind==="Monster").filter(a=>a.face==="FaceUp").filter(a=>a.types.includes("Dragon")).filter(a=>{var n;return(n=a.status.monsterCategories)==null?void 0:n.includes("Synchro")}).filter(a=>a.canBeTargetOfEffect(e)).map(a=>({monster:a,posList:T,cells:t})),[],!1).length>0},prepare:e=>se(e,e.activator.getBanished().cardEntities.filter(t=>t.kind==="Monster").filter(t=>t.face==="FaceUp").filter(t=>t.types.includes("Dragon")).filter(t=>{var i;return(i=t.status.monsterCategories)==null?void 0:i.includes("Synchro")}).filter(t=>t.canBeTargetOfEffect(e))),execute:async e=>le(e),settle:async()=>!0}]},yield{name:"聖珖神竜 スターダスト・シフル",actions:[$(e=>e.length===1&&e.every(t=>{var i;return(i=t.status.monsterCategories)==null?void 0:i.includes("Synchro")}),e=>e.length>1&&e.every(t=>{var i;return(i=t.status.monsterCategories)==null?void 0:i.includes("Synchro")})),{title:"②珖波動反撃",isMandatory:!1,playType:"QuickEffect",spellSpeed:"Quick",executableCells:["Hand"],executablePeriods:w,executableDuelistTypes:["Controller"],isOnlyNTimesPerTurnIfFaceup:1,negatePreviousBlock:!0,fixedTags:["NegateCardEffect","DestroyOnField"],canExecute:e=>!!(e.targetChainBlock&&e.targetChainBlock.action.entity.isMonster&&e.targetChainBlock.action.isWithChainBlock&&e.activator!==e.targetChainBlock.activator),prepare:C,execute:async e=>{if(!e.targetChainBlock)return!1;const t=e.targetChainBlock;t.isNegatedEffectBy=e.action;const i=await e.activator.waitSelectEntity(e.action.duel.field.getCardsOnFieldStrictly(),"破壊するカードを選択。",!1);return(await m.tryDestroy(i?[i]:[],e)).length>0},settle:async()=>!0},{title:"③蘇生",isMandatory:!1,playType:"IgnitionEffect",spellSpeed:"Normal",executableCells:["Graveyard"],executablePeriods:["main1","main2"],executableDuelistTypes:["Controller"],priorityForNPC:10,fixedTags:["SpecialSummonFromGraveyard"],canPayCosts:_e,canExecute:e=>{const t=e.activator.getMonsterZones();return e.activator.getEnableSummonList(e.activator,"SpecialSummon",["Effect"],e.action,e.activator.getGraveyard().cardEntities.filter(a=>{var n;return(n=a.status.nameTags)==null?void 0:n.includes("スターダスト")}).filter(a=>(a.lvl??12)<9).filter(a=>a.canBeTargetOfEffect(e)).map(a=>({monster:a,posList:T,cells:t})),[],!1).length>0},payCosts:Ze,prepare:e=>se(e,e.activator.getGraveyard().cardEntities.filter(t=>{var i;return(i=t.status.nameTags)==null?void 0:i.includes("スターダスト")}).filter(t=>(t.lvl??12)<9),T,t=>t.length===1),execute:e=>le(e,T),settle:async()=>!0}],substituteEffects:[{title:"波動聖句",playType:"ContinuousEffect",isMandatory:!0,executableCells:["MonsterZone"],executablePeriods:R,executableDuelistTypes:["Controller"],isApplicableTo:(e,t,i)=>i.filter(a=>a.controller===e.entity.controller).filter(a=>a.counterHolder.getQty("SonicVerse",e.entity)===0),substitute:async(e,t,i)=>{if(!e.entity.isEffective)return[];const a=i.filter(n=>n.controller===e.entity.controller).filter(n=>n.counterHolder.getQty("SonicVerse",e.entity)===0);return a.forEach(n=>{n.counterHolder.add("SonicVerse",1,e.entity),e.entity.controller.writeInfoLog(`${e.entity.toString()}の効果により${n.toString()}は１ターンに１度だけ破壊されない。`)}),a}}]}}const Gi=Object.freeze(Object.defineProperty({__proto__:null,default:Hr},Symbol.toStringTag,{value:"Module"}));function*Zr(){yield{name:"調律",actions:[{title:"発動",isMandatory:!1,playType:"CardActivation",spellSpeed:"Normal",executableCells:["Hand","SpellAndTrapZone"],executablePeriods:["main1","main2"],executableDuelistTypes:["Controller"],fixedTags:["SearchFromDeck","SendToGraveyardFromDeck"],priorityForNPC:40,canExecute:e=>{const t=e.activator.getDeckCell().cardEntities;return t.length<2?!1:t.filter(i=>{var a;return(a=i.status.nameTags)==null?void 0:a.includes("シンクロン")}).some(i=>{var a;return(a=i.status.monsterCategories)==null?void 0:a.includes("Tuner")})},prepare:C,execute:async e=>{const t=e.activator.getDeckCell().cardEntities;if(t.length<2)return!1;const i=t.filter(n=>{var r;return(r=n.status.nameTags)==null?void 0:r.includes("シンクロン")}).filter(n=>{var r;return(r=n.status.monsterCategories)==null?void 0:r.includes("Tuner")});if(i.length===0)return!1;const a=await e.activator.waitSelectEntity(i,"手札に加えるモンスターを選択",!1);if(!a)throw new D(e);return await a.addToHand(["Effect"],e.action.entity,e.activator),e.activator.getDeckCell().shuffle(),e.activator.duel.clock.incrementProcSeq(),await e.activator.getDeckCell().cardEntities[0].sendToGraveyard(["Effect"],e.action.entity,e.activator),!0},settle:async()=>!0},v]}}const $i=Object.freeze(Object.defineProperty({__proto__:null,default:Zr},Symbol.toStringTag,{value:"Module"}));function*Gr(){yield{name:"フォーミュラ・シンクロン",actions:[$(),{title:"①ドロー",isMandatory:!1,playType:"TriggerEffect",spellSpeed:"Normal",executableCells:L,executablePeriods:[...w,...N],executableDuelistTypes:["Controller"],fixedTags:["Draw","IfSpecialSummonSucceed"],meetsConditions:e=>e.action.entity.hasBeenSummonedJustNow(["SynchroSummon"]),canExecute:e=>e.activator.canDraw&&e.activator.getDeckCell().cardEntities.length>0,prepare:C,execute:async e=>(await e.activator.draw(1,e.action.entity,e.activator),!0),settle:async()=>!0},ai({title:"②シンクロ召喚",isOnlyNTimesPerChain:1})]}}const ji=Object.freeze(Object.defineProperty({__proto__:null,default:Gr},Symbol.toStringTag,{value:"Module"}));function*$r(){yield{name:"トゥーン・ワールド",actions:[{...J,canPayCosts:e=>e.activator.lp>=1e3,payCosts:(e,t)=>ye(e,t,1e3)},v]}}const Ui=Object.freeze(Object.defineProperty({__proto__:null,default:$r},Symbol.toStringTag,{value:"Module"}));function*jr(){yield{name:"無の煉獄",actions:[{title:"発動",isMandatory:!1,playType:"CardActivation",spellSpeed:"Normal",executableCells:["Hand","SpellAndTrapZone"],executablePeriods:["main1","main2"],executableDuelistTypes:["Controller"],fixedTags:["Draw","DiscordAsEffect"],meetsConditions:e=>e.activator.getHandCell().cardEntities.length>2,canExecute:e=>e.activator.canDraw&&e.activator.status.canDiscardAsEffect&&e.activator.getDeckCell().cardEntities.length>0,prepare:C,execute:async e=>(await e.activator.draw(1,e.action.entity,e.activator),e.activator.entity.counterHolder.add("IntoTheVoid",1,e.action.entity),!0),settle:async()=>!0},{title:"手札抹殺",isMandatory:!0,playType:"LingeringEffect",spellSpeed:"Normal",executableCells:Q,executablePeriods:["end"],executableDuelistTypes:he,meetsConditions:e=>e.activator.entity.counterHolder.getQty("IntoTheVoid",e.action.entity)>0,prepare:C,execute:async e=>(await m.discardManyForTheSameReason(e.activator.getHandCell().cardEntities,["Effect"],e.action.entity,e.activator),e.activator.entity.counterHolder.remove("IntoTheVoid",1,e.action.entity),!0),settle:async()=>!0},v]}}const zi=Object.freeze(Object.defineProperty({__proto__:null,default:jr},Symbol.toStringTag,{value:"Module"}));function*Ur(){yield{name:"星杯の妖精リース",actions:[{title:"①サーチ",isMandatory:!1,playType:"TriggerEffect",spellSpeed:"Normal",executableCells:["MonsterZone"],executablePeriods:[...w,...N],executableDuelistTypes:["Controller"],isOnlyNTimesPerTurn:1,fixedTags:["SearchFromDeck"],meetsConditions:e=>e.action.entity.hasBeenSummonedNow(["NormalSummon","SpecialSummon"]),canExecute:e=>e.activator.canAddToHandFromDeck&&e.activator.getDeckCell().cardEntities.filter(t=>t.kind==="Monster").some(t=>{var i;return(i=t.status.nameTags)==null?void 0:i.includes("星杯")}),prepare:async e=>{const t=e.action.entity.hasBeenSummonedNow(["NormalSummon"])?["IfNormarlSummonSucceed"]:["IfSpecialSummonSucceed"];return{selectedEntities:[],chainBlockTags:t}},execute:async e=>{const t=e.activator.getDeckCell().cardEntities.filter(a=>a.kind==="Monster").filter(a=>{var n;return(n=a.status.nameTags)==null?void 0:n.includes("星杯")});if(t.length===0)return!1;const i=await e.activator.waitSelectEntity(t,"手札に加えるモンスターを選択",!1);if(!i)throw new S("想定されない状態",e);return await i.addToHand(["Effect"],e.action.entity,e.activator),e.activator.getDeckCell().shuffle(),!0},settle:async()=>!0},{title:"②自己サルベージ",isMandatory:!1,playType:"IgnitionEffect",spellSpeed:"Normal",executableCells:["Graveyard"],executablePeriods:["main1","main2"],executableDuelistTypes:["Controller"],isOnlyNTimesPerTurn:1,canPayCosts:e=>[...e.activator.getMonstersOnField(),...e.activator.getHandCell().cardEntities.filter(t=>t.kind==="Monster")].some(t=>t.canBeSentToGraveyard(e.activator,e.action.entity,"SendToGraveyardAsCost",e.action)),payCosts:async e=>{const t=[...e.activator.getMonstersOnField(),...e.activator.getHandCell().cardEntities.filter(a=>a.kind==="Monster")].filter(a=>a.canBeSentToGraveyard(e.activator,e.action.entity,"SendToGraveyardAsCost",e.action)),i=await e.activator.waitSelectEntity(t,"墓地に送るモンスターを選択。",!0);if(i)return await i.sendToGraveyard(["Cost"],e.action.entity,e.activator),{sendToGraveyard:[i]}},fixedTags:["SearchFromDeck"],prepare:C,execute:async e=>e.action.entity.wasMovedAfter(e.isActivatedAt)?!1:(await e.action.entity.addToHand(["Effect"],e.action.entity,e.activator),!0),settle:async()=>!0}]},yield{name:"星遺物－『星杯』",actions:[{title:"①墓地送り",isMandatory:!1,playType:"TriggerEffect",spellSpeed:"Normal",executableCells:["MonsterZone"],executablePeriods:[...w,...N],executableDuelistTypes:["Controller"],canPayCosts:ct,canExecute:e=>e.activator.duel.field.moveLog.getPriviousChainLog().filter(t=>t.movedAs.includes("SpecialSummon")).map(t=>t.entity).some(t=>t.wasMovedFrom.cellType==="ExtraDeck"),payCosts:ut,prepare:C,execute:async e=>{const t=e.activator.duel.field.moveLog.getPriviousChainLog().filter(i=>i.movedAs.includes("SpecialSummon")).map(i=>i.entity).filter(i=>i.wasMovedFrom.cellType==="ExtraDeck").filter(i=>i.isOnFieldAsMonsterStrictly).filter(i=>i.canBeEffected(e.activator,e.action.entity,e.action)).toArray();return await m.sendManyToGraveyardForTheSameReason(t,["Effect"],e.action.entity,e.activator),!0},settle:async()=>!0},{title:"②リクルート",isMandatory:!1,playType:"TriggerEffect",spellSpeed:"Normal",executableCells:["Hand","Graveyard","Banished"],executablePeriods:[...w,...N],executableDuelistTypes:["Controller"],meetsConditions:e=>e.action.entity.wasMovedAtPreviousChain&&e.action.entity.info.summonKinds.includes("NormalSummon")&&e.action.entity.moveLog.previousPlaceRecord.face==="FaceUp",canExecute:e=>{const t=e.activator.getDeckCell().cardEntities.filter(n=>n.kind==="Monster").filter(n=>{var r;return(r=n.status.nameTags)==null?void 0:r.includes("星杯")}).filter(n=>n.nm!=="星遺物－『星杯』"),i=e.activator.getMonsterZones();return e.activator.getEnableSummonList(e.activator,"SpecialSummon",["Effect"],e.action,t.map(n=>({monster:n,cells:i,posList:T})),[],!1).length>1},prepare:C,execute:async e=>{const t=e.activator.getDeckCell().cardEntities.filter(n=>n.kind==="Monster").filter(n=>{var r;return(r=n.status.nameTags)==null?void 0:r.includes("星杯")}).filter(n=>n.nm!=="星遺物－『星杯』"),i=e.activator.getMonsterZones();return(await e.activator.summonMany(e.activator,"SpecialSummon",["Effect"],e.action,t.map(n=>({monster:n,cells:i,posList:T})),[],!1,2,n=>n.length==2,!1)??[]).length?(e.activator.getDeckCell().shuffle(),!0):!1},settle:async()=>!0},{title:"③サーチ",isMandatory:!1,playType:"IgnitionEffect",spellSpeed:"Normal",executableCells:["Graveyard"],executablePeriods:["main1","main2"],executableDuelistTypes:["Controller"],canPayCosts:_e,meetsConditions:e=>!e.action.entity.wasMovedAtCurrentTurn,canExecute:e=>e.activator.canAddToHandFromDeck&&e.activator.getDeckCell().cardEntities.filter(t=>{var i;return(i=t.status.nameTags)==null?void 0:i.includes("星遺物")}).length>0,payCosts:Ze,fixedTags:["SearchFromDeck"],prepare:C,execute:async e=>{const t=await e.activator.waitSelectEntity(e.activator.getDeckCell().cardEntities.filter(i=>{var a;return(a=i.status.nameTags)==null?void 0:a.includes("星遺物")}),"手札に加えるカードを選択",!1);return t?(await t.addToHand(["Effect"],e.action.entity,e.activator),!0):!1},settle:async()=>!0}]}}const Vi=Object.freeze(Object.defineProperty({__proto__:null,default:Ur},Symbol.toStringTag,{value:"Module"}));function*zr(){yield{name:"ドットスケーパー",actions:[{title:"①自己再生",isMandatory:!1,playType:"TriggerEffect",spellSpeed:"Normal",executableCells:["Graveyard"],executablePeriods:[...w,...N],executableDuelistTypes:["Controller"],isOnlyNTimesPerDuel:1,actionGroupName:"ドットスケーパー",fixedTags:["SpecialSummonFromGraveyard"],meetsConditions:e=>e.action.entity.wasMovedAtPreviousChain&&e.action.entity.wasMovedFrom.cellType!=="Banished",canExecute:e=>j(e,T,[],["Effect"]),prepare:C,execute:e=>ae(e),settle:async()=>!0},{title:"②自己帰還",isMandatory:!1,playType:"TriggerEffect",spellSpeed:"Normal",executableCells:["Banished"],executablePeriods:[...w,...N],executableDuelistTypes:["Controller"],isOnlyNTimesPerDuel:1,actionGroupName:"ドットスケーパー",fixedTags:["SpecialSummonFromBanished"],meetsConditions:e=>e.action.entity.wasMovedAtPreviousChain,canExecute:e=>j(e,T,[],["Effect"]),prepare:C,execute:e=>ae(e),settle:async()=>!0}]}}const Wi=Object.freeze(Object.defineProperty({__proto__:null,default:zr},Symbol.toStringTag,{value:"Module"}));function*Vr(){yield{name:"ゼラの天使",actions:[$(),{title:"②自己帰還",isMandatory:!0,playType:"IgnitionEffect",spellSpeed:"Normal",executableCells:["Banished"],executablePeriods:["stanby"],executableDuelistTypes:["Controller"],fixedTags:["SpecialSummonFromBanished"],meetsConditions:e=>e.action.entity.wasMovedAtPreviousTurn,canExecute:e=>j(e,T,[],["Effect"]),prepare:C,execute:e=>ae(e),settle:async()=>!0}],continuousEffects:[we("②攻撃力上昇","Monster",e=>[e],e=>[q.createContinuous("①攻撃力上昇",()=>!0,e,()=>!0,"attack","wip","Addition",(t,i,a)=>t.isEffective?a+t.controller.getOpponentPlayer().getBanished().cardEntities.length*100:a)])]}}const Qi=Object.freeze(Object.defineProperty({__proto__:null,default:Vr},Symbol.toStringTag,{value:"Module"}));function*Wr(){yield{name:"死霊騎士デスカリバー・ナイト",actions:[{title:"①モンスター効果無効",isMandatory:!0,playType:"TriggerEffect",spellSpeed:"Quick",executableCells:L,executablePeriods:[...w,...N],executableDuelistTypes:["Controller"],negatePreviousBlock:!0,canPayCosts:ct,canExecute:e=>!!(e.targetChainBlock&&e.targetChainBlock.action.entity.isMonster&&e.targetChainBlock.action.isWithChainBlock),payCosts:ut,prepare:async(e,t)=>{const i=e.targetChainBlock,a=t[e.index-1];return i!==a?{selectedEntities:[]}:{selectedEntities:[],chainBlockTags:["NegateCardEffect",...e.action.calcChainBlockTagsForDestroy(e.activator,[i.action.entity])],prepared:void 0}},execute:async(e,t)=>{const i=t.find(n=>n.action.entity.isMonster&&n.action.isWithChainBlock),a=t[e.index-1];return a!==i?!1:(a.isNegatedActivationBy=e.action,await m.tryDestroy([a.action.entity],e),!0)},settle:async()=>!0}]}}const Xi=Object.freeze(Object.defineProperty({__proto__:null,default:Wr},Symbol.toStringTag,{value:"Module"}));function*Qr(){yield{name:"召喚僧サモンプリースト",actions:[{title:"①表示形式変更",isMandatory:!0,playType:"TriggerEffect",spellSpeed:"Normal",executableCells:["MonsterZone"],executablePeriods:[...w,...N],executableDuelistTypes:["Controller"],meetsConditions:e=>e.action.entity.hasBeenSummonedNow(["NormalSummon","FlipSummon"]),fixedTags:["IfNormarlSummonSucceed"],prepare:C,execute:async e=>e.action.entity.battlePosition!=="Attack"||!e.action.entity.isOnFieldAsMonsterStrictly?!1:(await e.action.entity.setBattlePosition("Defense",["Effect"],e.action.entity,e.activator),!0),settle:async()=>!0},{title:"③リクルート",isMandatory:!1,playType:"IgnitionEffect",spellSpeed:"Normal",executableCells:["MonsterZone"],executablePeriods:["main1","main2"],executableDuelistTypes:["Controller"],isOnlyNTimesPerTurnIfFaceup:1,fixedTags:["SpecialSummonFromDeck"],canPayCosts:e=>e.activator.status.canDiscardAsCost?e.activator.getHandCell().cardEntities.some(t=>t.kind==="Spell"):!1,canExecute:e=>{const t=e.activator.getDeckCell().cardEntities.filter(n=>n.kind==="Monster").filter(n=>n.lvl===4),i=e.activator.getMonsterZones();return e.activator.getEnableSummonList(e.activator,"SpecialSummon",["Effect"],e.action,t.map(n=>({monster:n,posList:T,cells:i})),[],!1).length>0},payCosts:async(e,t,i)=>{const a=e.activator.getHandCell().cardEntities.filter(r=>r.kind==="Spell"),n=await e.activator.waitSelectEntity(a,"手札コストを選択",i);if(!n&&!i)throw new D(e);if(n)return await n.discard(["Cost"],e.action.entity,e.activator),{discard:[n]}},prepare:C,execute:async e=>{const t=e.activator.getDeckCell().cardEntities.filter(n=>n.lvl===4),i=e.activator.getMonsterZones(),a=await e.activator.summonOne(e.activator,"SpecialSummon",["Effect"],e.action,t.map(n=>({monster:n,posList:T,cells:i})),[],!1,!1);return!a||(a.statusOperatorBundle.push(new H({title:"攻撃不可",validateAlive:n=>n.effectOwner.duel.clock.isSameTurn(n.isSpawnedAt),isContinuous:!1,isSpawnedBy:e.action.entity,actionAttr:e.action,isApplicableTo:()=>!0,statusCalculator:()=>({canAttack:!1})})),!a)?!1:(e.activator.getDeckCell().shuffle(),!0)},settle:async()=>!0}],continuousEffects:[Ht("②リリース不可","Monster",e=>[e],e=>[ge.createContinuous("②リリース不可",()=>!0,e,()=>!0,["AdvanceSummonRelease","ReleaseAsEffect","ReleaseAsCost"],()=>!1)])]}}const Ki=Object.freeze(Object.defineProperty({__proto__:null,default:Qr},Symbol.toStringTag,{value:"Module"}));function*Xr(){yield{name:"アンカモフライト",actions:[J,{title:"特殊召喚",isMandatory:!1,playType:"SpecialSummon",spellSpeed:"Normal",executableCells:["ExtraDeck"],executablePeriods:["main1","main2"],executableDuelistTypes:["Controller"],isOnlyNTimesPerDuel:1,meetsConditions:e=>e.activator.getExtraDeck().cardEntities.every(t=>t.nm==="アンカモフライト"),canExecute:e=>e.action.entity.face==="FaceUp"&&j(e,T,[],["Rule"]),getDests:e=>K(e,T,[],["Rule"]),prepare:e=>Y(e,"SpecialSummon",["SpecialSummon","Rule"],T),execute:I,settle:async()=>!0},{title:"①ドロー",isMandatory:!1,playType:"IgnitionEffect",spellSpeed:"Normal",executableCells:["SpellAndTrapZone"],executablePeriods:["main1","main2"],executableDuelistTypes:["Controller"],priorityForNPC:20,isOnlyNTimesPerTurn:1,fixedTags:["DestroySpellTrapOnField","Draw"],meetsConditions:e=>e.activator.getExtraDeck().cardEntities.every(t=>t.nm==="アンカモフライト"),canExecute:e=>e.activator.getDeckCell().cardEntities.length>0&&e.activator.canDraw,prepare:async()=>({selectedEntities:[]}),execute:async e=>(await m.tryDestroy([e.action.entity],e)).length?(e.action.entity.field.duel.clock.incrementProcSeq(),await e.activator.draw(1,e.action.entity,e.activator),!0):!1,settle:async()=>!0}],summonFilter:(e,t,i,a,n,r,s,o,c,u)=>{const d={posList:c,cells:u},p={posList:[],cells:[]};return s!==t||r.entity===t?d:p},continuousEffects:[ve("除外予定","Monster",e=>[e],e=>[new H({title:"除外予定",validateAlive:()=>!0,isContinuous:!0,isSpawnedBy:e,actionAttr:{},isApplicableTo:(t,i)=>i.isOnFieldAsMonsterStrictly&&i.face==="FaceUp",statusCalculator:()=>({willBeBanished:!0})})])]}}const Ji=Object.freeze(Object.defineProperty({__proto__:null,default:Xr},Symbol.toStringTag,{value:"Module"}));function*Kr(){yield{name:"エキセントリック・ボーイ",actions:[],summonFilter:(e,t,i,a,n,r,s,o,c,u)=>{const d={posList:c,cells:u},p={posList:[],cells:[]};if(!n.includes("SynchroSummon"))return d;const f=o.find(h=>h.material===e.isSpawnedBy);return f?!f.cell.isMonsterZoneLikeCell||o.length!==2?p:o.filter(h=>h!==f).every(h=>h.cell.cellType==="Hand")?d:p:d},defaultStatus:{allowHandSynchro:!0},onUsedAsMaterial:(e,t)=>{t.info.summonKinds.includes("SynchroSummon")&&(e.action.entity.statusOperatorBundle.push(new H({title:"除外予定",validateAlive:()=>!0,isContinuous:!1,isSpawnedBy:e.action.entity,actionAttr:e.action,isApplicableTo:(i,a)=>a.isOnFieldAsMonsterStrictly&&a.face==="FaceUp",statusCalculator:()=>({willBeBanished:!0})})),t.info.isEffectiveIn=t.info.isEffectiveIn.filter(i=>i!=="ExtraMonsterZone").filter(i=>i!=="MonsterZone"))}}}const Yi=Object.freeze(Object.defineProperty({__proto__:null,default:Kr},Symbol.toStringTag,{value:"Module"})),Jr={title:"ペンデュラム召喚",isMandatory:!1,playType:"SpecialSummon",spellSpeed:"Normal",executableCells:["Hand"],executablePeriods:["main1","main2"],executableDuelistTypes:["Controller"],isOnlyNTimesPerTurn:1,canExecute:e=>{const t=e.activator.getPendulumScales();if(!t||t.upperBound-t.lowerBound<2)return!1;const i=[...e.activator.getHandCell().cardEntities.filter(r=>r.kind==="Monster"),...e.activator.getExtraDeck().cardEntities.filter(r=>r.face==="FaceUp")].filter(r=>r.kind==="Monster").filter(r=>r.lvl&&r.lvl>t.lowerBound).filter(r=>r.lvl&&r.lvl<t.upperBound);if(!i.length)return!1;const a=[...e.activator.getMonsterZones(),...e.activator.getAvailableMonsterZones()];return console.log(...e.activator.getExtraMonsterZones()),console.log(...a),e.activator.getEnableSummonList(e.activator,"PendulumSummon",["Rule"],e.action,i.map(r=>({monster:r,cells:a,posList:T})),[],!1).length>0},prepare:async e=>{const t=e.activator.getPendulumScales();if(!t||t.upperBound-t.lowerBound<2)return;const i=[...e.activator.getHandCell().cardEntities.filter(n=>n.kind==="Monster"),...e.activator.getExtraDeck().cardEntities.filter(n=>n.face==="FaceUp")].filter(n=>n.kind==="Monster").filter(n=>n.lvl&&n.lvl>t.lowerBound).filter(n=>n.lvl&&n.lvl<t.upperBound);if(!i.length)return;const a=[...e.activator.getMonsterZones(),...e.activator.getAvailableExtraMonsterZones()];return await e.activator.summonMany(e.activator,"PendulumSummon",["Rule"],e.action,i.map(n=>({monster:n,posList:T,cells:a})),[],!1,void 0,n=>n.length>0,!1),C()},execute:async e=>(e.activator.getPendingMonstersOnField().forEach(t=>t.determine()),!0),settle:async()=>!0},Yr={title:"強制勝利",isMandatory:!0,playType:"LingeringEffect",spellSpeed:"Normal",executableCells:["Hand"],executablePeriods:["main2"],executableDuelistTypes:["Controller"],isOnlyNTimesPerTurn:1,canExecute:e=>e.activator.duel.clock.turn>1,prepare:async e=>(await m.sendManyToGraveyardForTheSameReason(e.activator.duel.field.getCardsOnFieldStrictly(),["Rule"],e.action.entity,e.activator),{selectedEntities:[],nextChainBlockFilter:()=>!1}),execute:async e=>{const t=[{name:"封印されし者の左足",column:4},{name:"封印されし者の右足",column:2},{name:"封印されし者の左腕",column:5},{name:"封印されし者の右腕",column:1},{name:"封印されしエクゾディア",column:3}];for(const i of t){const a=[e.activator.duel.field.getAllCardEntities().filter(n=>n.owner===e.activator).find(n=>n.origin.name===i.name),e.activator.getOpponentPlayer().getHandCell().cardEntities.find(n=>n.origin.name===i.name)].filter(n=>n!==void 0);if(!a.length)throw new S("想定されない状態",e.activator.getHandCell().cardEntities,i.name);console.log(a),await k.moveMany(a.map(n=>({entity:n,to:n.controller.getMonsterZones().find(r=>r.column===(n.controller.seat==="Above"?6-i.column:i.column))??n.controller.getFieldZone(),kind:"Monster",face:"FaceUp",orientation:"Vertical",pos:"Top",movedAs:["Rule"],movedBy:void 0,actionOwner:void 0,chooser:void 0})))}throw new B(e.activator,`${e.activator.getOpponentPlayer().name}がワンターンキルに失敗した。`)},settle:async()=>!0},Ir=e=>{const t=[Jr];return e.profile.npcType==="FtkChallenge"&&t.push(Yr),{name:e.profile.name,actions:t,staticInfo:{name:e.profile.name,kind:"Monster",wikiEncodedName:"%A5%D7%A5%EC%A5%A4%A5%E4%A1%BC"}}},ne=e=>e.type==="Name",es=e=>e.type==="Filter",ts=e=>e.type==="Overmuch";function*is(){const e={...Object.assign({"/src/ygo_entity_proc/card_proc_definitions/CardProcDefinitions_ContinuousSpell.ts":Wt,"/src/ygo_entity_proc/card_proc_definitions/CardProcDefinitions_ContinuousTrap.ts":Qt,"/src/ygo_entity_proc/card_proc_definitions/CardProcDefinitions_CounterTrap.ts":Xt,"/src/ygo_entity_proc/card_proc_definitions/CardProcDefinitions_EquipSpell.ts":Kt,"/src/ygo_entity_proc/card_proc_definitions/CardProcDefinitions_EquipSpell_Preset.ts":Jt,"/src/ygo_entity_proc/card_proc_definitions/CardProcDefinitions_FieldSpell.ts":Yt,"/src/ygo_entity_proc/card_proc_definitions/CardProcDefinitions_FieldSpell_Preset.ts":It,"/src/ygo_entity_proc/card_proc_definitions/CardProcDefinitions_FusionMonster.ts":ei,"/src/ygo_entity_proc/card_proc_definitions/CardProcDefinitions_LinkMonster.ts":ni,"/src/ygo_entity_proc/card_proc_definitions/CardProcDefinitions_Monster.ts":ri,"/src/ygo_entity_proc/card_proc_definitions/CardProcDefinitions_Monster_Preset_Catapult.ts":si,"/src/ygo_entity_proc/card_proc_definitions/CardProcDefinitions_Monster_Preset_DirectAttacker.ts":li,"/src/ygo_entity_proc/card_proc_definitions/CardProcDefinitions_Monster_Preset_Recruiter.ts":oi,"/src/ygo_entity_proc/card_proc_definitions/CardProcDefinitions_NormalSpell.ts":ci,"/src/ygo_entity_proc/card_proc_definitions/CardProcDefinitions_NormalSpell_General_Draw.ts":ui,"/src/ygo_entity_proc/card_proc_definitions/CardProcDefinitions_NormalSpell_Preset.ts":di,"/src/ygo_entity_proc/card_proc_definitions/CardProcDefinitions_NormalTrap.ts":pi,"/src/ygo_entity_proc/card_proc_definitions/CardProcDefinitions_NormalTrap_UponAttackDeclaration.ts":fi,"/src/ygo_entity_proc/card_proc_definitions/CardProcDefinitions_QuickPlaySpell.ts":gi,"/src/ygo_entity_proc/card_proc_definitions/CardProcDefinitions_RitualSpell.ts":yi,"/src/ygo_entity_proc/card_proc_definitions/CardProcDefinitions_SynchroMonster.ts":mi,"/src/ygo_entity_proc/card_proc_definitions/CardProcDefinitions_TestMonster.ts":Si,"/src/ygo_entity_proc/card_proc_definitions/CardProcDefinitions_XyzMonster.ts":vi}),...Object.assign({"/src/ygo_entity_proc/card_proc_definitions/character_yusei/CardProcDefinitions_Yusei_SyncroTunerMonster.ts":Ci,"/src/ygo_entity_proc/card_proc_definitions/support_fusion/CardProcDefinitions_FustionSubstitude_Monster.ts":Ei,"/src/ygo_entity_proc/card_proc_definitions/support_fusion/CardProcDefinitions_FustionSupport_Monster.ts":wi,"/src/ygo_entity_proc/card_proc_definitions/support_retual/CardProcDefinitions_RetualSupport_Monster.ts":_i,"/src/ygo_entity_proc/card_proc_definitions/support_retual/CardProcDefinitions_RetualSupport_NormalSpell.ts":bi,"/src/ygo_entity_proc/card_proc_definitions/tag_b/CardProcDefinitions_BambooSword_EquipSpell.ts":ki,"/src/ygo_entity_proc/card_proc_definitions/tag_b/CardProcDefinitions_BambooSword_NormalSpell.ts":Di,"/src/ygo_entity_proc/card_proc_definitions/tag_b/CardProcDefinitions_Blackwing_Monster.ts":Ai,"/src/ygo_entity_proc/card_proc_definitions/tag_c/CardProcDefinitions_Crystron_LinkMonster.ts":Pi,"/src/ygo_entity_proc/card_proc_definitions/tag_d/CardProcDefinitions_DestinyHero_Monster.ts":xi,"/src/ygo_entity_proc/card_proc_definitions/tag_e/CardProcDefinitions_ElementalHero_Monster.ts":Mi,"/src/ygo_entity_proc/card_proc_definitions/tag_e/CardProcDefinitions_Exodia_Monster.ts":Fi,"/src/ygo_entity_proc/card_proc_definitions/tag_f/CardProcDefinitions_Firewall_LinkMonster.ts":Ni,"/src/ygo_entity_proc/card_proc_definitions/tag_f/CardProcDefinitions_Fusion_NormalSpell.ts":Oi,"/src/ygo_entity_proc/card_proc_definitions/tag_i/CardProcDefinitions_Igknight_Monster.ts":Bi,"/src/ygo_entity_proc/card_proc_definitions/tag_j/CardProcDefinitions_Junk_Monster.ts":Li,"/src/ygo_entity_proc/card_proc_definitions/tag_m/CardProcDefinitions_Metalfoes_Monster.ts":qi,"/src/ygo_entity_proc/card_proc_definitions/tag_m/CardProcDefinitions_Metalfoes_NormalSpell.ts":Ri,"/src/ygo_entity_proc/card_proc_definitions/tag_r/CardProcDefinitions_Resonator_Monster.ts":Hi,"/src/ygo_entity_proc/card_proc_definitions/tag_s/CardProcDefinitions_SpellCounter_Monster.ts":Zi,"/src/ygo_entity_proc/card_proc_definitions/tag_s/CardProcDefinitions_Stardust_Monster.ts":Gi,"/src/ygo_entity_proc/card_proc_definitions/tag_s/CardProcDefinitions_Synchron_NormalSpell.ts":$i,"/src/ygo_entity_proc/card_proc_definitions/tag_s/CardProcDefinitions_Synchron_SyncroMonster.ts":ji,"/src/ygo_entity_proc/card_proc_definitions/tag_t/CardProcDefinitions_Toon_ContinuousSpell.ts":Ui,"/src/ygo_entity_proc/card_proc_definitions/tag_v/CardProcDefinitions_Void_NormalSpell.ts":zi,"/src/ygo_entity_proc/card_proc_definitions/tag_w/CardProcDefinitions_WorldChalice_Monster.ts":Vi,"/src/ygo_entity_proc/card_proc_definitions/type_Cyberse/CardProcDefinitions_Earth_Cyberse_lvl1_Monster.ts":Wi,"/src/ygo_entity_proc/card_proc_definitions/type_Fairy/CardProcDefinitions_Light_Fairy_lvl8_SyncroMonster.ts":Qi,"/src/ygo_entity_proc/card_proc_definitions/type_Fiend/CardProcDefinitions_Dark_Fiend_lvl4_Monster.ts":Xi,"/src/ygo_entity_proc/card_proc_definitions/type_Spellcaster/CardProcDefinitions_Dark_Spellcaster_lvl4_Monster.ts":Ki,"/src/ygo_entity_proc/card_proc_definitions/type_Spellcaster/CardProcDefinitions_Light_Spellcaster_lvl5_PendulumMonster.ts":Ji,"/src/ygo_entity_proc/card_proc_definitions/type_Spellcaster/CardProcDefinitions_Wind_Spellcaster_lvl3_Monster.ts":Yi})};for(const t of Object.keys(e))e[t].default&&(yield*e[t].default())}function*as(...e){var a,n;const t={...Object.assign({"/src/ygo_entity_proc/card_proc_definitions/CardProcDefinitions_ContinuousSpell.ts":Wt,"/src/ygo_entity_proc/card_proc_definitions/CardProcDefinitions_ContinuousTrap.ts":Qt,"/src/ygo_entity_proc/card_proc_definitions/CardProcDefinitions_CounterTrap.ts":Xt,"/src/ygo_entity_proc/card_proc_definitions/CardProcDefinitions_EquipSpell.ts":Kt,"/src/ygo_entity_proc/card_proc_definitions/CardProcDefinitions_EquipSpell_Preset.ts":Jt,"/src/ygo_entity_proc/card_proc_definitions/CardProcDefinitions_FieldSpell.ts":Yt,"/src/ygo_entity_proc/card_proc_definitions/CardProcDefinitions_FieldSpell_Preset.ts":It,"/src/ygo_entity_proc/card_proc_definitions/CardProcDefinitions_FusionMonster.ts":ei,"/src/ygo_entity_proc/card_proc_definitions/CardProcDefinitions_LinkMonster.ts":ni,"/src/ygo_entity_proc/card_proc_definitions/CardProcDefinitions_Monster.ts":ri,"/src/ygo_entity_proc/card_proc_definitions/CardProcDefinitions_Monster_Preset_Catapult.ts":si,"/src/ygo_entity_proc/card_proc_definitions/CardProcDefinitions_Monster_Preset_DirectAttacker.ts":li,"/src/ygo_entity_proc/card_proc_definitions/CardProcDefinitions_Monster_Preset_Recruiter.ts":oi,"/src/ygo_entity_proc/card_proc_definitions/CardProcDefinitions_NormalSpell.ts":ci,"/src/ygo_entity_proc/card_proc_definitions/CardProcDefinitions_NormalSpell_General_Draw.ts":ui,"/src/ygo_entity_proc/card_proc_definitions/CardProcDefinitions_NormalSpell_Preset.ts":di,"/src/ygo_entity_proc/card_proc_definitions/CardProcDefinitions_NormalTrap.ts":pi,"/src/ygo_entity_proc/card_proc_definitions/CardProcDefinitions_NormalTrap_UponAttackDeclaration.ts":fi,"/src/ygo_entity_proc/card_proc_definitions/CardProcDefinitions_QuickPlaySpell.ts":gi,"/src/ygo_entity_proc/card_proc_definitions/CardProcDefinitions_RitualSpell.ts":yi,"/src/ygo_entity_proc/card_proc_definitions/CardProcDefinitions_SynchroMonster.ts":mi,"/src/ygo_entity_proc/card_proc_definitions/CardProcDefinitions_TestMonster.ts":Si,"/src/ygo_entity_proc/card_proc_definitions/CardProcDefinitions_XyzMonster.ts":vi}),...Object.assign({"/src/ygo_entity_proc/card_proc_definitions/character_yusei/CardProcDefinitions_Yusei_SyncroTunerMonster.ts":Ci,"/src/ygo_entity_proc/card_proc_definitions/support_fusion/CardProcDefinitions_FustionSubstitude_Monster.ts":Ei,"/src/ygo_entity_proc/card_proc_definitions/support_fusion/CardProcDefinitions_FustionSupport_Monster.ts":wi,"/src/ygo_entity_proc/card_proc_definitions/support_retual/CardProcDefinitions_RetualSupport_Monster.ts":_i,"/src/ygo_entity_proc/card_proc_definitions/support_retual/CardProcDefinitions_RetualSupport_NormalSpell.ts":bi,"/src/ygo_entity_proc/card_proc_definitions/tag_b/CardProcDefinitions_BambooSword_EquipSpell.ts":ki,"/src/ygo_entity_proc/card_proc_definitions/tag_b/CardProcDefinitions_BambooSword_NormalSpell.ts":Di,"/src/ygo_entity_proc/card_proc_definitions/tag_b/CardProcDefinitions_Blackwing_Monster.ts":Ai,"/src/ygo_entity_proc/card_proc_definitions/tag_c/CardProcDefinitions_Crystron_LinkMonster.ts":Pi,"/src/ygo_entity_proc/card_proc_definitions/tag_d/CardProcDefinitions_DestinyHero_Monster.ts":xi,"/src/ygo_entity_proc/card_proc_definitions/tag_e/CardProcDefinitions_ElementalHero_Monster.ts":Mi,"/src/ygo_entity_proc/card_proc_definitions/tag_e/CardProcDefinitions_Exodia_Monster.ts":Fi,"/src/ygo_entity_proc/card_proc_definitions/tag_f/CardProcDefinitions_Firewall_LinkMonster.ts":Ni,"/src/ygo_entity_proc/card_proc_definitions/tag_f/CardProcDefinitions_Fusion_NormalSpell.ts":Oi,"/src/ygo_entity_proc/card_proc_definitions/tag_i/CardProcDefinitions_Igknight_Monster.ts":Bi,"/src/ygo_entity_proc/card_proc_definitions/tag_j/CardProcDefinitions_Junk_Monster.ts":Li,"/src/ygo_entity_proc/card_proc_definitions/tag_m/CardProcDefinitions_Metalfoes_Monster.ts":qi,"/src/ygo_entity_proc/card_proc_definitions/tag_m/CardProcDefinitions_Metalfoes_NormalSpell.ts":Ri,"/src/ygo_entity_proc/card_proc_definitions/tag_r/CardProcDefinitions_Resonator_Monster.ts":Hi,"/src/ygo_entity_proc/card_proc_definitions/tag_s/CardProcDefinitions_SpellCounter_Monster.ts":Zi,"/src/ygo_entity_proc/card_proc_definitions/tag_s/CardProcDefinitions_Stardust_Monster.ts":Gi,"/src/ygo_entity_proc/card_proc_definitions/tag_s/CardProcDefinitions_Synchron_NormalSpell.ts":$i,"/src/ygo_entity_proc/card_proc_definitions/tag_s/CardProcDefinitions_Synchron_SyncroMonster.ts":ji,"/src/ygo_entity_proc/card_proc_definitions/tag_t/CardProcDefinitions_Toon_ContinuousSpell.ts":Ui,"/src/ygo_entity_proc/card_proc_definitions/tag_v/CardProcDefinitions_Void_NormalSpell.ts":zi,"/src/ygo_entity_proc/card_proc_definitions/tag_w/CardProcDefinitions_WorldChalice_Monster.ts":Vi,"/src/ygo_entity_proc/card_proc_definitions/type_Cyberse/CardProcDefinitions_Earth_Cyberse_lvl1_Monster.ts":Wi,"/src/ygo_entity_proc/card_proc_definitions/type_Fairy/CardProcDefinitions_Light_Fairy_lvl8_SyncroMonster.ts":Qi,"/src/ygo_entity_proc/card_proc_definitions/type_Fiend/CardProcDefinitions_Dark_Fiend_lvl4_Monster.ts":Xi,"/src/ygo_entity_proc/card_proc_definitions/type_Spellcaster/CardProcDefinitions_Dark_Spellcaster_lvl4_Monster.ts":Ki,"/src/ygo_entity_proc/card_proc_definitions/type_Spellcaster/CardProcDefinitions_Light_Spellcaster_lvl5_PendulumMonster.ts":Ji,"/src/ygo_entity_proc/card_proc_definitions/type_Spellcaster/CardProcDefinitions_Wind_Spellcaster_lvl3_Monster.ts":Yi})},i=[];for(const r of Object.values(t))if(r.default){for(const s of r.default())if(e.includes(s.name)){const o={...X[s.name]};let c=s.summonFilter;o.kind==="Monster"&&o.monsterCategories&&!s.summonFilter&&o.monsterCategories.union(xt).length&&(c=Hn),s.fusionMaterialInfos&&s.fusionMaterialInfos.some(d=>d.type==="Name")&&(o.textTags=[...o.textTags??[],...s.fusionMaterialInfos.filter(ne).map(d=>d.cardName)]);const u={...s,summonFilter:c,staticInfo:o};(a=o.monsterCategories)!=null&&a.includes("Link")?u.actions=[...ii,...u.actions]:(n=o.monsterCategories)!=null&&n.includes("SpecialSummon")?u.actions=[...Ne,...u.actions]:u.actions=[...wt,...s.actions],yield u,i.push(s.name)}}yield*e.filter(r=>!i.includes(r)).map(r=>X[r]).filter(r=>r).filter(r=>r.kind==="Monster").filter(r=>{var s;return!((s=r.monsterCategories)!=null&&s.includes("Effect"))}).filter(r=>{var s;return!((s=r.monsterCategories)!=null&&s.includes("Pendulum"))}).map(r=>{var s;return i.push(r.name),{name:r.name,actions:(s=r.monsterCategories)!=null&&s.includes("SpecialSummon")?Ne:wt,staticInfo:r}}),i.length!==e.length&&console.log(e.filter(r=>!i.includes(r)))}const ns=e=>({...Ir(e),staticInfo:{name:e.profile.name,kind:"Monster",wikiEncodedName:"%A5%D7%A5%EC%A5%A4%A5%E4%A1%BC"}}),rs=new Set,it=aa;let Ii=0,ea=0;for(const e of is()){if(rs.has(e.name))throw new Error(`カード定義重複${e.name}`);it[e.name]&&(it[e.name].isImplemented=!0,Ii++)}const X=Object.values(it).reduce((e,t)=>{var i;return t.kind==="Monster"&&t.monsterCategories&&!((i=t.monsterCategories)!=null&&i.includes("Effect"))&&!t.monsterCategories.includes("Pendulum")&&(t.isImplemented=!0,ea++),t.isForTest&&t.isImplemented,e[t.name]=t,e},{}),Ns=Ii,Os=ea,at=[{id:-1,name:"サンプルデッキ１",deckType:"NPC",description:"",cardNames:["アンノウン・シンクロン","六武衆のご隠居","ジャンク・フォアード","ジャンク・フォアード","ジャンク・フォアード","チューン・ウォリアー","チューン・ウォリアー","ガード・オブ・フレムベル","ガード・オブ・フレムベル","守護竜ユスティア","守護竜ユスティア","エンジェル・トランペッター","エンジェル・トランペッター","ジェムナイト・サフィア","ジェムナイト・サフィア","魂虎","魂虎","暗黒界の番兵 レンジ","暗黒界の番兵 レンジ","バトルフットボーラー","バトルフットボーラー","球騎士の三人娘","球騎士の三人娘","エンジェル・トランペッター","エンジェル・トランペッター","Ｇ戦隊 シャインブラック","Ｇ戦隊 シャインブラック","しゃりの軍貫","しゃりの軍貫","ジョングルグールの幻術師","ジョングルグールの幻術師","ゾンビーノ","ゾンビーノ","メガロスマッシャーＸ","メガロスマッシャーＸ","ライドロン","ライドロン","機界騎士アヴラム","機界騎士アヴラム","幻のグリフォン","幻のグリフォン","幻殻竜","幻殻竜","アレキサンドライドラゴン","アレキサンドライドラゴン","ジェネティック・ワーウルフ","ジェネティック・ワーウルフ","サイバー・ドラゴン","フロストザウルス","フロストザウルス","フロストザウルス","青眼の白龍","マジカル・アンドロイド","マジカル・アンドロイド","マジカル・アンドロイド","大地の騎士ガイアナイト","大地の騎士ガイアナイト","大地の騎士ガイアナイト","スクラップ・デスデーモン","スクラップ・デスデーモン","スクラップ・デスデーモン","スターダスト・ドラゴン","スターダスト・ドラゴン","スターダスト・ドラゴン","ナチュル・ガオドレイク","ナチュル・ガオドレイク","ナチュル・ガオドレイク"]},{id:-2,name:"サンプルデッキ２",deckType:"NPC",description:"",cardNames:["アンノウン・シンクロン","六武衆のご隠居","ジャンク・フォアード","グローアップ・バルブ","ガード・オブ・フレムベル","伝説の白石","伝説の白石","伝説の白石","守護竜ユスティア","ギャラクシーサーペント","ジェネクス・コントローラー","Ｅ・ＨＥＲＯ フェザーマン","Ｅ・ＨＥＲＯ バーストレディ","チューン・ウォリアー","Ｅ・ＨＥＲＯ クレイマン","Ｅ・ＨＥＲＯ スパークマン","しゃりの軍貫","ジョングルグールの幻術師","ゾンビーノ","ジェネティック・ワーウルフ","ライトロード・ビースト ウォルフ","サイバー・ドラゴン","サイバー・ドラゴン","サイバー・ドラゴン","ラブラドライドラゴン","Ｄ－ＨＥＲＯ ディアボリックガイ","Ｄ－ＨＥＲＯ ディアボリックガイ","Ｄ－ＨＥＲＯ ディアボリックガイ","フロストザウルス","Ｅ・ＨＥＲＯ ネオス","青眼の白龍","青眼の白龍","青眼の白龍","Ｅ－エマージェンシーコール","おろかな埋葬","トレード・イン","トレード・イン","トレード・イン","闇の量産工場","強欲な壺","強欲な壺","強欲な壺","死者蘇生","死者蘇生","死者蘇生","召喚師のスキル","召喚師のスキル","召喚師のスキル","成金ゴブリン","成金ゴブリン","成金ゴブリン","戦士の生還","増援","調和の宝札","調和の宝札","調和の宝札","天使の施し","天使の施し","天使の施し","貪欲な壺","貪欲な壺","貪欲な壺","マジカル・アンドロイド","マジカル・アンドロイド","マジカル・アンドロイド","大地の騎士ガイアナイト","大地の騎士ガイアナイト","大地の騎士ガイアナイト","スクラップ・デスデーモン","スクラップ・デスデーモン","スクラップ・デスデーモン","スターダスト・ドラゴン","スターダスト・ドラゴン","スターダスト・ドラゴン","ナチュル・ガオドレイク","ナチュル・ガオドレイク","ナチュル・ガオドレイク"]},{id:-3,name:"サンプルデッキ３",deckType:"NPC",description:"",cardNames:["アンノウン・シンクロン","六武衆のご隠居","ジャンク・フォアード","グローアップ・バルブ","ガード・オブ・フレムベル","伝説の白石","伝説の白石","伝説の白石","守護竜ユスティア","ギャラクシーサーペント","ジェネクス・コントローラー","Ｅ・ＨＥＲＯ フェザーマン","Ｅ・ＨＥＲＯ バーストレディ","チューン・ウォリアー","Ｅ・ＨＥＲＯ クレイマン","Ｅ・ＨＥＲＯ スパークマン","しゃりの軍貫","ジョングルグールの幻術師","ゾンビーノ","ジェネティック・ワーウルフ","ライトロード・ビースト ウォルフ","サイバー・ドラゴン","サイバー・ドラゴン","サイバー・ドラゴン","ラブラドライドラゴン","Ｄ－ＨＥＲＯ ディアボリックガイ","Ｄ－ＨＥＲＯ ディアボリックガイ","Ｄ－ＨＥＲＯ ディアボリックガイ","フロストザウルス","Ｅ・ＨＥＲＯ ネオス","青眼の白龍","青眼の白龍","青眼の白龍","Ｅ－エマージェンシーコール","おろかな埋葬","トレード・イン","トレード・イン","トレード・イン","闇の量産工場","強欲な壺","強欲な壺","強欲な壺","死者蘇生","死者蘇生","死者蘇生","召喚師のスキル","召喚師のスキル","召喚師のスキル","成金ゴブリン","成金ゴブリン","成金ゴブリン","戦士の生還","増援","調和の宝札","調和の宝札","調和の宝札","天使の施し","天使の施し","天使の施し","貪欲な壺","貪欲な壺","貪欲な壺","マジカル・アンドロイド","マジカル・アンドロイド","マジカル・アンドロイド","大地の騎士ガイアナイト","大地の騎士ガイアナイト","大地の騎士ガイアナイト","スクラップ・デスデーモン","スクラップ・デスデーモン","スクラップ・デスデーモン","スターダスト・ドラゴン","スターダスト・ドラゴン","スターダスト・ドラゴン","ナチュル・ガオドレイク","ナチュル・ガオドレイク","ナチュル・ガオドレイク"]},{id:-9007199254740991,name:"FtkChallenge",deckType:"NPC",description:"FtkChallenge",cardNames:["封印されし者の右足","封印されし者の右腕","封印されし者の左足","封印されし者の左腕","封印されしエクゾディア","スカゴブリン","スカゴブリン","スカゴブリン","スカゴブリン","スカゴブリン","スカゴブリン","スカゴブリン","スカゴブリン","スカゴブリン","スカゴブリン","スカゴブリン","スカゴブリン","スカゴブリン","スカゴブリン","スカゴブリン","スカゴブリン","スカゴブリン","スカゴブリン","スカゴブリン","スカゴブリン","スカゴブリン","スカゴブリン","スカゴブリン","スカゴブリン","スカゴブリン","スカゴブリン","スカゴブリン","スカゴブリン","スカゴブリン","スカゴブリン","スカゴブリン","スカゴブリン","スカゴブリン","スカゴブリン","スカゴブリン","スカゴブリン","スカゴブリン","スカゴブリン","スカゴブリン","スカゴブリン","スカゴブリン","スカゴブリン","スカゴブリン","スカゴブリン","スカゴブリン","スカゴブリン","スカゴブリン","スカゴブリン","スカゴブリン","スカゴブリン","スカゴブリン","スカゴブリン","スカゴブリン","スカゴブリン","スカゴブリン"]},{id:-1e3,name:"図書館エクゾプリセット",deckType:"Preset",description:"プリセット",cardNames:["封印されし者の右足","封印されし者の右腕","封印されし者の左足","封印されし者の左腕","封印されしエクゾディア","王立魔法図書館","王立魔法図書館","王立魔法図書館","召喚僧サモンプリースト","召喚僧サモンプリースト","召喚僧サモンプリースト","アンカモフライト","ダーク・バースト","チキンレース","チキンレース","チキンレース","テラ・フォーミング","トゥーン・ワールド","トゥーンのもくじ","トゥーンのもくじ","トゥーンのもくじ","一時休戦","黄金色の竹光","黄金色の竹光","黄金色の竹光","手札断殺","手札断殺","手札断殺","真刀竹光","成金ゴブリン","成金ゴブリン","成金ゴブリン","打ち出の小槌","打ち出の小槌","無の煉獄","無の煉獄","無の煉獄","妖刀竹光","妖刀竹光","妖刀竹光"]}],E=class E{constructor(t,i){l(this,"id");l(this,"name");l(this,"deckType");l(this,"description");l(this,"lastUsedAt");l(this,"cardNames");l(this,"getIllegalCardNames",()=>Array.from(new Set(this.cardNames.filter(t=>!Object.keys(X).includes(t)))));l(this,"getDisableCardNames",()=>Array.from(new Set(this.cardNames.filter(t=>!Object.keys(X).includes(t)))));l(this,"createCardInfos",()=>{const t=this.getIllegalCardNames();if(t.length>0)throw new Error(`存在しないカード名からデッキを生成しようとした。${t}`);return this.cardNames.map(i=>X==null?void 0:X[i]).filter(i=>i)});l(this,"copy",async()=>E.createNewDeck(this.name,this.description,this.cardNames));l(this,"updateTimestamp",async()=>{await E.tblHeader.update(this.id,t=>({...t,lastUsedAt:new Date}))});l(this,"saveDeckInfo",async t=>{const i=t??this;await E.tblHeader.update(this.id,r=>({...r,name:i.name,description:i.description,deckType:"User",lastUsedAt:new Date}));const a=(await E.tblDetail.getAll()).filter(r=>r.deckId===this.id);await E.tblDetail.delete(a.map(r=>r.id));const n=await E.tblDetail.insertMany(i.cardNames.map((r,s)=>({deckId:this.id,seq:s,name:r,description:""})));return new E(await E.tblHeader.get(this.id),n)});l(this,"delete",async()=>{await E.tblHeader.delete([this.id]);const t=(await E.tblDetail.getAll()).filter(i=>i.deckId===this.id);await E.tblDetail.delete(t.map(i=>i.id))});this.id=t.id,this.name=t.name,this.deckType=t.deckType,this.description=t.description,this.lastUsedAt=t.lastUsedAt,this.cardNames=i.filter(a=>a.deckId===this.id).map(a=>a.name)}};l(E,"toJson",t=>{const i=t.map(a=>{const{id:n,name:r,description:s,lastUsedAt:o,cardNames:c}=a;return{id:n,name:r,description:s,lastUsedAt:o,cardNames:c}});return i.forEach(a=>{a.cardNames=a.cardNames.map(n=>X[n]).sort(Nt).map(n=>n.name)}),JSON.stringify(i,null,2)}),l(E,"convertToObjectURL",t=>{const i=E.toJson(t),a=new Blob([i],{type:"text/plain"});return window.URL.createObjectURL(a)}),l(E,"idb"),l(E,"tblHeader"),l(E,"tblDetail"),l(E,"getAllDeckInfo",async t=>{if(t&&(E.idb=t),!E.idb)throw new Error("illegal argument: idb is undefined.");E.tblHeader||(E.tblHeader=new ss(E.idb)),E.tblDetail||(E.tblDetail=new ls(E.idb));const i=await E.tblHeader.getAll(),a=await E.tblDetail.getAll();return i.length?i.map(n=>new E(n,a)):[await E.prepareSampleDeck()]}),l(E,"createNewDeck",async(t,i,a)=>{const n=await E.tblHeader.insert({name:t,description:i,deckType:"User",lastUsedAt:new Date}),r=await E.tblDetail.insertMany(a.map((s,o)=>({deckId:n.id,seq:o,name:s,description:""})));return new E(n,r)}),l(E,"prepareSampleDeck",async()=>{const t=at.find(i=>i.deckType==="Preset")??at.slice(-1)[0];return await E.createNewDeck(t.name,t.description,t.cardNames)});let kt=E;class ss extends nt{constructor(i){super(i,"TblDeckHeader");l(this,"_prepareInitialRecords",()=>[])}}class ls extends nt{constructor(i){super(i,"TblDeckDetail");l(this,"_prepareInitialRecords",()=>[])}}const Bs=at.map(e=>({...e,lastUsedAt:new Date})).filter(e=>e.id<0);export{kt as A,Os as B,Ns as C,Ie as D,us as E,Ct as F,Tt as G,Bs as H,je as I,xs as J,Ps as K,S,_s as a,ys as b,hs as c,ya as d,Me as e,As as f,Ds as g,X as h,Ss as i,Fs as j,Ms as k,ke as l,bs as m,Nt as n,fs as o,ps as p,ds as q,ks as r,Ts as s,ws as t,na as u,Es as v,Cs as w,vs as x,ms as y,gs as z};
