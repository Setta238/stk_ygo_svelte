var ha=Object.defineProperty;var mt=(t,e)=>(e=Symbol[t])?e:Symbol.for("Symbol."+t),vt=t=>{throw TypeError(t)};var ya=(t,e,i)=>e in t?ha(t,e,{enumerable:!0,configurable:!0,writable:!0,value:i}):t[e]=i;var o=(t,e,i)=>ya(t,typeof e!="symbol"?e+"":e,i);var St=(t,e,i)=>{if(e!=null){typeof e!="object"&&typeof e!="function"&&vt("Object expected");var a,n;i&&(a=e[mt("asyncDispose")]),a===void 0&&(a=e[mt("dispose")],i&&(n=a)),typeof a!="function"&&vt("Object not disposable"),n&&(a=function(){try{n.call(this)}catch(r){return Promise.reject(r)}}),t.push([i,a,e])}else i&&t.push([i]);return e},Ct=(t,e,i)=>{var a=typeof SuppressedError=="function"?SuppressedError:function(s,l,c,u){return u=Error(c),u.name="SuppressedError",u.error=s,u.suppressed=l,u},n=s=>e=i?new a(s,e,"An error was suppressed during disposal"):(i=!0,s),r=s=>{for(;s=t.pop();)try{var l=s[1]&&s[1].call(s[2]);if(s[0])return Promise.resolve(l).then(r,c=>(n(c),r()))}catch(c){n(c)}if(i)throw e};return r()};import{j as ma}from"./json_20250526_083229.js";class As{constructor(e,i,a){o(this,"_dbname");o(this,"_dbversion");o(this,"dbPromise");o(this,"getTran",async(e,i)=>(await this.dbPromise).transaction(e,i));o(this,"reset",async()=>(await indexedDB.databases().then(e=>{console.log(e)}),await new Promise((e,i)=>{const a=indexedDB.deleteDatabase(this._dbname);a.onsuccess=()=>{console.log("onsuccess"),e()},a.onerror=n=>{console.log("onerror"),i(n)}})));o(this,"getAll",async e=>{const i=await this.dbPromise;return new Promise((a,n)=>{const l=i.transaction([e],"readonly").objectStore(e).getAll();l.onsuccess=()=>{a(l.result)},l.onerror=c=>{n(c)}})});o(this,"get",async(e,i)=>{const a=await this.dbPromise;return new Promise((n,r)=>{const c=a.transaction([e],"readonly").objectStore(e).get(i);c.onsuccess=()=>{n(c.result)},c.onerror=u=>{r(u)}})});o(this,"getMany",async(e,i)=>{const r=(await this.dbPromise).transaction([e],"readonly").objectStore(e),s=i.map(l=>new Promise((c,u)=>{const d=r.get(l);d.onsuccess=()=>{c(d.result)},d.onerror=p=>{u(p)}}));return await Promise.all(s)});o(this,"putRecords",async(e,i)=>{const n=(await this.dbPromise).transaction([e],"readwrite"),r=n.objectStore(e),s=i.map(l=>({record:l,request:r.put(l)}));return new Promise((l,c)=>{n.oncomplete=()=>l(s.map(u=>Object.assign({id:u.request.result},u.record))),n.onerror=u=>c(u)})});o(this,"deleteRecords",async(e,i)=>{const n=(await this.dbPromise).transaction([e],"readwrite"),r=n.objectStore(e),s=i.map(l=>({key:l,request:r.delete(l)}));return new Promise((l,c)=>{n.oncomplete=()=>{console.log(s.map(u=>u.request.result)),l()},n.onerror=u=>c(u)})});this._dbname=e,this._dbversion=i,this.dbPromise=new Promise((n,r)=>{const s=indexedDB.open(e,i);s.onsuccess=l=>{if(console.log(l),!l.target){console.log("event.target is undefined"),r("event.target is undefined");return}const c=l.target.result;if(!c){console.log("event.target.result is undefined"),r("event.target.result is undefined");return}c.onversionchange=u=>{console.log(u),c.close()},n(c)},s.onupgradeneeded=l=>{console.log("onupgradeneeded");const c=l.target.result;a.filter(u=>!c.objectStoreNames.contains(u)).map(u=>c.createObjectStore(u,{keyPath:"id",autoIncrement:!0}))},s.onerror=l=>{console.log(l),r(l)},s.onblocked=l=>{console.log(l),r(l)}}),console.log(this.dbPromise)}get dbversion(){return this._dbversion}}class M{constructor(){o(this,"handlers",[])}get length(){return this.handlers.length}append(e){this.handlers.push(e)}remove(e){this.handlers=this.handlers.filter(i=>i!==e)}trigger(e){this.handlers.slice(0).filter(i=>i(e)==="RemoveMe").forEach(i=>this.remove(i))}clear(){this.handlers.splice(0)}expose(){return this}}class Tt{constructor(){o(this,"handler")}set(e){this.handler=e}async call(e){if(!this.handler)throw Error("illegal state error");return await this.handler(e)}expose(){return this}}class lt{constructor(e,i,a,n){o(this,"_name");o(this,"_createVersion");o(this,"mountResolver",()=>{});o(this,"_indexedDb");o(this,"onInsertEvent",new M);o(this,"onBeforeInsertEvent",new Tt);o(this,"onUpdateEvent",new M);o(this,"onBeforeUpdateEvent",new Tt);o(this,"onDeleteEvent",new M);o(this,"prepareInitialRecords",()=>{const e=new Date;return this._prepareInitialRecords().map(i=>Object.assign(i,{createdAt:e,updatedAt:e,dbVersion:this._createVersion}))});o(this,"resolveMount",()=>this.mountResolver());o(this,"patchForInsert",(e,i)=>{e.newRecords.forEach(a=>{i[a.id]=a})});o(this,"patchForUpdate",(e,i)=>{e.recordPairs.forEach(a=>{i[a.newRecord.id]={...a.newRecord}})});o(this,"patchForDelete",(e,i)=>{e.oldRecords.forEach(a=>{delete i[a.id]})});this._indexedDb=e,this._name=i,this._createVersion=e.dbversion,this.getAll().then(r=>r.reduce((s,l)=>(s[l.id]=l,s),{})).then(r=>{console.log(this.name,r),this.onBeforeInsertEvent.set(a??(()=>Promise.resolve())),this.onBeforeUpdateEvent.set(n??(()=>Promise.resolve()))})}get name(){return this._name}get createVersion(){return this._createVersion}get oninsert(){return this.onInsertEvent.expose()}get onbeforeinsert(){return this.onBeforeInsertEvent.expose()}get onupdate(){return this.onUpdateEvent.expose()}get onbeforeupdate(){return this.onBeforeUpdateEvent.expose()}get ondelete(){return this.onDeleteEvent.expose()}getAll(){return this._indexedDb.getAll(this.name)}get(e){return this._indexedDb.get(this.name,e)}async insertMany(e){const i=new Date,a=e.map(r=>{const s={createdAt:i,updatedAt:i,dbVersion:this._createVersion};return Object.assign(r,s)});await this.onBeforeInsertEvent.call({sender:this,newRecords:a,timestamp:i});const n=await this._indexedDb.putRecords(this.name,a);return this.onInsertEvent.trigger({sender:this,newRecords:n,timestamp:i}),n}async insert(e){return(await this.insertMany([e]))[0]}async updateMany(e,i){const a=new Date,n=[];return(await this._indexedDb.getMany(this.name,e)).forEach(s=>{const l={...s},c={...l};n.push({newRecord:Object.assign(i(c),{updatedAt:a,dbVersion:this._createVersion}),oldRecord:l})}),await this.onBeforeUpdateEvent.call({sender:this,recordPairs:n,timestamp:a}),await this._indexedDb.putRecords(this.name,n.map(s=>s.newRecord)),this.onUpdateEvent.trigger({sender:this,recordPairs:n,timestamp:a}),n.map(s=>s.newRecord)}async update(e,i){return(await this.updateMany([e],i))[0]}async delete(e){const i=new Date,a=await this._indexedDb.getMany(this.name,e);await this._indexedDb.deleteRecords(this.name,e),this.onDeleteEvent.trigger({sender:this,oldRecords:a,timestamp:i})}}const Ps=["Deck","ExtraDeck"],Ms={Deck:"メインデッキ",ExtraDeck:"エクストラデッキ"},va=["Monster","Spell","Trap","XyzMaterial"],Fs={Monster:"モンスター",Spell:"魔法",Trap:"罠",XyzMaterial:"XYZ素材"},Pe=["Fusion","Synchro","Xyz","Link"],Rt=[...Pe,"SpecialSummon","Ritual"],Ht=[...Rt,"NormalSummonOnly","RegularSpecialSummonOnly","FreeReborn"],Sa=["Toon","Spirit","Union","Gemini","FlipEffect"],Ca=["Tuner","Effect","Normal","Pendulum","Token"],Ns=[...Sa,...Ca,...Ht],Os={Synchro:"シンクロ",Fusion:"融合",Xyz:"エクシーズ",Link:"リンク",Ritual:"儀式",SpecialSummon:"特殊召喚",Toon:"トゥーン",Spirit:"スピリット",Union:"ユニオン",Gemini:"デュアル",FlipEffect:"リバース",Tuner:"チューナー",Effect:"効果",Normal:"通常",Pendulum:"ペンデュラム",Token:"トークン",FreeReborn:"特殊召喚モンスター（蘇生制限なし）",NormalSummonOnly:"特殊召喚不可",RegularSpecialSummonOnly:"正規の方法以外での特殊召喚不可"},Bs={Synchro:"🎵",Fusion:"🌀",Xyz:"📰",Link:"⛓️",Ritual:"📜",SpecialSummon:"🔯",Toon:"📖",Spirit:"👻",Union:"🚗",Gemini:"👫",FlipEffect:"🔄",Tuner:"🎶",Effect:"✨",Normal:"🔘",Pendulum:"💠",Token:"🐏",FreeReborn:"🆓",NormalSummonOnly:"🔲",RegularSpecialSummonOnly:"❗"},Ls=["Light","Dark","Earth","Water","Fire","Wind","Divine"],qs={Light:"光",Dark:"闇",Earth:"地",Water:"水",Fire:"炎",Wind:"風",Divine:"神"},Rs=["Aqua","Beast","BeastWarrior","CreatorGod","Cyberse","Dinosaur","DivineBeast","Dragon","Fairy","Fiend","Fish","Insect","Illusion","Machine","Plant","Psychic","Pyro","Reptile","Rock","SeaSerpent","Spellcaster","Thunder","Warrior","WingedBeast","Wyrm","Zombie"],Hs=["Normal","Continuous","Field","QuickPlay","Equip","Ritual","PendulumScale"],Zs={Normal:"通常",Continuous:"永続",Field:"フィールド",QuickPlay:"速攻",Equip:"装備",Ritual:"儀式",PendulumScale:"ペンデュラム"},Gs=["Normal","Continuous","Counter"],$s={Normal:"通常",Continuous:"永続",Counter:"カウンター"},T=["Attack","Defense"],Ae={Attack:"攻撃表示",Defense:"守備表示",Set:"裏側守備表示"},Zt=["level","rank","attack","defense","pendulumScaleR","pendulumScaleL"],js={Aqua:"水",Beast:"獣",BeastWarrior:"獣戦士",CreatorGod:"創造神",Cyberse:"サイバース",Dinosaur:"恐竜",DivineBeast:"幻獣神",Dragon:"ドラゴン",Fairy:"天使",Fiend:"悪魔",Fish:"魚",Insect:"昆虫",Illusion:"幻想魔",Machine:"機械",Plant:"植物",Psychic:"サイキック",Pyro:"炎",Reptile:"爬虫類",Rock:"岩石",SeaSerpent:"海竜",Spellcaster:"魔法使い",Thunder:"雷",Warrior:"戦士",WingedBeast:"鳥獣",Wyrm:"幻竜",Zombie:"アンデット"},Us={Aqua:"🚰",Beast:"🐅",BeastWarrior:"🦁",CreatorGod:"🔆",Cyberse:"💻️",Dinosaur:"🦖",DivineBeast:"💫",Dragon:"🐲",Fairy:"👼",Fiend:"👿",Fish:"🐟️",Insect:"🦋",Illusion:"🤡",Machine:"🤖",Plant:"🌱",Psychic:"👁️",Pyro:"🔥",Reptile:"🦎",Rock:"⛰",SeaSerpent:"🐍",Spellcaster:"🧙",Thunder:"⚡️",Warrior:"⚔️",WingedBeast:"🦅",Wyrm:"🐉",Zombie:"🦴"},Ta=["TopLeft","TopCenter","TopRight","MiddleLeft","MiddleRight","BottomLeft","BottomCenter","BottomRight"],Gt={TopLeft:{name:"左上",linkArrow:{offsetRow:-1,offsetColumn:-1}},TopCenter:{name:"上",linkArrow:{offsetRow:-1,offsetColumn:0}},TopRight:{name:"右上",linkArrow:{offsetRow:-1,offsetColumn:1}},MiddleLeft:{name:"左",linkArrow:{offsetRow:0,offsetColumn:-1}},MiddleRight:{name:"右",linkArrow:{offsetRow:0,offsetColumn:1}},BottomLeft:{name:"左下",linkArrow:{offsetRow:1,offsetColumn:-1}},BottomCenter:{name:"下",linkArrow:{offsetRow:1,offsetColumn:0}},BottomRight:{name:"右下",linkArrow:{offsetRow:1,offsetColumn:1}}};Ta.reduce((t,e)=>(t[Gt[e].name]=e,t),{});const zs=t=>t.cardId??!1?`https://www.db.yugioh-card.com/yugiohdb/card_search.action?ope=2&cid=${t.cardId}`:`https://www.db.yugioh-card.com/yugiohdb/card_search.action?ope=1&sess=1&rp=10&mode=&sort=1&keyword=${t.name}&stype=1&ctype=&othercon=2&starfr=&starto=&pscalefr=&pscaleto=&linkmarkerfr=&linkmarkerto=&link_m=2&atkfr=&atkto=&deffr=&defto=&releaseDStart=1&releaseMStart=1&releaseYStart=1999&releaseDEnd=&releaseMEnd=&releaseYEnd=`,$t=(t,e)=>{const i=t.monsterCategories??[],a=e.monsterCategories??[];for(const n of Pe.toReversed()){if(i.includes(n)&&!a.includes(n))return 1;if(!i.includes(n)&&a.includes(n))return-1}if(t.kind===e.kind){if(t.kind==="Monster"){if((t.link??0)!==(e.link??0))return(t.link??0)-(e.link??0);if((t.rank??0)!==(e.rank??0))return(t.rank??0)-(e.rank??0);if((t.level??0)!==(e.level??0))return(t.level??0)-(e.level??0);if((t.attack??0)!==(e.attack??0))return(t.attack??0)-(e.attack??0);if((t.defense??0)!==(e.defense??0))return(t.defense??0)-(e.defense??0)}return t.name.localeCompare(e.name,"Ja")}for(const n of va){if(t.kind===n)return-1;if(e.kind===n)return 1}return t.name.localeCompare(e.name,"Ja")},jt=["Deck","ExtraDeck"],Ut=["Graveyard","Banished"],zt=[...jt,...Ut],_a=[...zt,"Hand"],B=["MonsterZone","ExtraMonsterZone"],Me=["SpellAndTrapZone","FieldSpellZone"],Q=[...B,...Me],Vt=["XyzMaterialZone","WaitingRoom"],X=[..._a,...Q,...Vt],Ye={0:{0:"Hand"},1:{0:"Deck",1:"SpellAndTrapZone",2:"SpellAndTrapZone",3:"SpellAndTrapZone",4:"SpellAndTrapZone",5:"SpellAndTrapZone",6:"ExtraDeck"},2:{0:"Graveyard",1:"MonsterZone",2:"MonsterZone",3:"MonsterZone",4:"MonsterZone",5:"MonsterZone",6:"FieldSpellZone"},3:{0:"Banished",1:"XyzMaterialZone",2:"ExtraMonsterZone",3:"WaitingRoom",4:"ExtraMonsterZone",5:"XyzMaterialZone",6:"Banished"},4:{0:"FieldSpellZone",1:"MonsterZone",2:"MonsterZone",3:"MonsterZone",4:"MonsterZone",5:"MonsterZone",6:"Graveyard"},5:{0:"ExtraDeck",1:"SpellAndTrapZone",2:"SpellAndTrapZone",3:"SpellAndTrapZone",4:"SpellAndTrapZone",5:"SpellAndTrapZone",6:"Deck"},6:{0:"Hand"}};class Ea{constructor(e,i,a,n){o(this,"onUpdateEvent",new M);o(this,"field");o(this,"row");o(this,"column");o(this,"cellType");o(this,"_owner");o(this,"_requiresRecalcLinkArrows");o(this,"_linkArrowSources");o(this,"_needsShuffle",!1);o(this,"recalcLinkArrows",()=>{this.isMonsterZoneLikeCell&&(this._requiresRecalcLinkArrows=!1,this._linkArrowSources=this.neighbors.filter(e=>e.isMonsterZoneLikeCell).filter(e=>e.cardEntities.length).filter(e=>e.cardEntities[0].linkArrows.some(i=>this.row===e.row+i.offsetRow&&this.column===e.column+i.offsetColumn)).map(e=>e.cardEntities[0]))});o(this,"_entities");o(this,"releaseEntities",e=>{var i;return this._entities=this._entities.filter(a=>a!==e),this.isMonsterZoneLikeCell&&((i=e.origin.monsterCategories)!=null&&i.includes("Link"))&&(this._requiresRecalcLinkArrows=!0),this.onUpdateEvent.trigger(),e});o(this,"acceptEntities",(e,i)=>{var a;if(i==="Fix"){if(!this._entities.includes(e))throw new m("引数とセルの状態が矛盾している。",this,e,i)}else i==="Top"?this._entities.unshift(e):this._entities.push(e),i==="Random"&&(this._needsShuffle=!0),this._entities.forEach(n=>{n.fieldCell=this}),this.isMonsterZoneLikeCell&&((a=e.origin.monsterCategories)!=null&&a.includes("Link"))&&(this._requiresRecalcLinkArrows=!0);this.onUpdateEvent.trigger()});o(this,"shuffle",()=>{this._entities=this.entities.shuffle(),this._needsShuffle=!1,this.field.duel.log.info("デッキをシャッフル。",this.owner)});o(this,"toString",()=>this.isMonsterZoneLikeCell||this.cellType==="SpellAndTrapZone"?`${this.cellType}(${this.row},${this.column})`:this.cellType);this.field=e,this.row=i,this.column=a,this.cellType=Ye[i][a],this._owner=n,this._entities=[],this._linkArrowSources=[],this._requiresRecalcLinkArrows=!1}get onUpdate(){return this.onUpdateEvent.expose()}get owner(){var e;return this._owner||((e=this.cardEntities[0])==null?void 0:e.owner)}get requiresRecalcLinkArrows(){return this._requiresRecalcLinkArrows}get linkArrowSources(){return this._linkArrowSources}get needsShuffle(){return this._needsShuffle}get entities(){return this._entities}get visibleEntities(){return this._entities.filter(e=>bt.find(i=>i===e.entityType))}get cardEntities(){return this._entities.filter(e=>bt.find(i=>i===e.entityType)).filter(e=>e.kind!=="XyzMaterial")}get xyzMaterials(){return this._entities.filter(e=>e.kind==="XyzMaterial")}get targetForAttack(){return this.cellType==="Hand"?this._entities.find(e=>e.entityType==="Duelist"):this.cardEntities[0]}get isAvailable(){return this.cardEntities.length===0&&this._entities.filter(e=>hn.find(i=>i===e.entityType)).length===0}get isAvailableForPendulum(){return this.isAvailable&&this.isSpellTrapZoneLikeCell&&(this.column===1||this.column===5)}get isStackCell(){return zt.some(e=>e===this.cellType)}get isPlayFieldCell(){return Q.some(e=>e===this.cellType)}get isMonsterZoneLikeCell(){return B.some(e=>e===this.cellType)}get isSpellTrapZoneLikeCell(){return Me.some(e=>e===this.cellType)}get isDisabledCell(){return Vt.some(e=>e===this.cellType)}get isTrashCell(){return Ut.some(e=>e===this.cellType)}get neighbors(){const e=[this.row-1,this.row,this.row+1].filter(a=>a>=0&&a<=6),i=[this.column-1,this.column,this.column+1].filter(a=>a>=0&&a<=6);return e.flatMap(a=>i.map(n=>this.field.cells[a][n])).filter(a=>a.isMonsterZoneLikeCell).filter(a=>a!==this)}}const wa=(t,e)=>Array.from({length:e-t},(i,a)=>t+a);Array.prototype.shuffle=function(){return this.map(e=>({item:e,seq:Math.random()})).toSorted((e,i)=>e.seq-i.seq).map(e=>e.item)};Array.prototype.randomPickMany=function(t){return this.shuffle().slice(0,t)};Array.prototype.randomPick=function(){return this.shuffle().slice(0,1)[0]};Array.prototype.reset=function(...t){this.splice(0),this.push(...t)};Array.prototype.union=function(t){return this.filter(e=>t.find(i=>e===i))};Array.prototype.getAllOnOffPattern=function*(){const t=[[]];yield[];for(const e of this){const i=t.map(a=>[...a,e]);yield*i,t.push(...i)}};Array.prototype.getDistinct=function(){return Array.from(new Set(this))};Array.prototype.distinct=function(){this.reset(...this.getDistinct())};const Wt=["NormalSummon","SpecialSummon","FlipSummon"],ct=["IgnitionEffect","TriggerEffect","QuickEffect","CardActivation"],ba=[...Wt,...ct,"DeclareAttack"],ka=t=>t==="CardActivation"?"CardActivation":ct.some(e=>e===t)?"EffectActivation":"NonActivate",Re=class Re{constructor(e,i,a){o(this,"seq");o(this,"entity");o(this,"_definition");o(this,"validateDuelist",e=>this.entity.controller===e?this.executableDuelistTypes.includes("Controller"):this.executableDuelistTypes.includes("Opponent"));o(this,"canExecute",e=>this.executableCells.includes(this.entity.fieldCell.cellType)&&this.executableFaces.includes(this.entity.face)&&this.executablePeriods.includes(this.entity.duel.clock.period.key)&&this.validateDuelist(e??this.entity.controller));this.seq=e==="AutoSeq"?Re.nextSeq++:e,this.entity=i,this._definition=a}get definition(){return this._definition}get title(){return this.definition.title}get playType(){return this.definition.playType}get isMandatory(){return this.definition.isMandatory}get executableCells(){return this.definition.executableCells}get executablePeriods(){return this.definition.executablePeriods}get executableFaces(){return this.definition.executableFaces??dn}get executableDuelistTypes(){return this.definition.executableDuelistTypes??["Controller"]}get isOnlyNTimesPerDuel(){return this.definition.isOnlyNTimesPerDuel??0}get isOnlyNTimesPerTurn(){return this.definition.isOnlyNTimesPerTurn??0}get isOnlyNTimesPerTurnIfFaceup(){return this.definition.isOnlyNTimesPerTurnIfFaceup??0}get isOnlyNTimesIfFaceup(){return this.definition.isOnlyNTimesIfFaceup??0}get isOnlyNTimesPerChain(){return this.definition.isOnlyNTimesPerChain??0}get actionGroupName(){return this.definition.actionGroupName}get duel(){return this.entity.duel}};o(Re,"nextSeq",0);let Te=Re;class we{constructor(){o(this,"pooledOperators",[]);o(this,"bundles",[]);o(this,"excludesExpired",()=>{this.bundles.forEach(e=>e.excludesExpired()),this.pooledOperators=this.pooledOperators.filter(e=>e.validateAlive())});o(this,"append",e=>{this.bundles.push(e)});o(this,"push",e=>{if(!e.isContinuous)throw new m("staticへの追加は永続以外不可",e);this.excludesExpired(),this.distribute(e),this.pooledOperators.push(e)});o(this,"distributeAll",e=>(this.excludesExpired(),this.pooledOperators.flatMap(this.distribute).getDistinct().forEach(i=>i.operators.sort((a,n)=>a.seq-n.seq)),this.afterDistributeAll(e)));o(this,"distribute",e=>this.bundles.filter(i=>i.entity.exist).filter(i=>i.operators.every(a=>a.seq!==e.seq)).filter(i=>e.isApplicableTo(i.entity)).filter(i=>i.entity.canBeEffected(e.effectOwner,e.isSpawnedBy,e.actionAttr)).map(i=>(i.push(e),i)));o(this,"removeItem",e=>{this.pooledOperators=this.pooledOperators.filter(i=>i.seq!==e)})}}class be{constructor(e,i){o(this,"pool");o(this,"entity");o(this,"_operators");o(this,"excludesExpired",()=>{this._operators=this._operators.filter(e=>{const i=e.validateAlive()&&e.isApplicableTo(this.entity);return i||(console.info(`before remove ${this.entity.toString} ${e.title}`),e.beforeRemove(this)),i})});o(this,"push",e=>this.entity.procFilterBundle.filter(["Effect"],e.effectOwner,e.isSpawnedBy,e.actionAttr,[])?(this.beforePush(e),this._operators.push(e),!0):!1);o(this,"removeItem",e=>{this._operators=this._operators.filter(i=>i.seq!==e?!0:(i.beforeRemove(this),!1))});this.pool=e,this.entity=i,this._operators=[],this.pool.append(this)}get operators(){return this._operators}get effectiveOperators(){return this.operators.filter(e=>e.isSpawnedBy.isEffective||!e.isContinuous)}}const He=class He{constructor(e){o(this,"seq");o(this,"title");o(this,"validateAlive");o(this,"isContinuous");o(this,"isSpawnedBy");o(this,"isSpawnedAt");o(this,"activateType");o(this,"actionAttr");o(this,"isApplicableTo");o(this,"effectOwner");this.seq=He.nextSeq++,this.title=e.title,this.validateAlive=()=>e.validateAlive(this),this.isContinuous=e.isContinuous,this.isSpawnedBy=e.isSpawnedBy,this.isSpawnedAt=e.isSpawnedBy.duel.clock.getClone(),this.isApplicableTo=i=>e.isApplicableTo(this,i),this.actionAttr=e.actionAttr,this.activateType=this.actionAttr.playType?ka(this.actionAttr.playType):"NonActivate",this.effectOwner=this.isSpawnedBy.controller}get isEffective(){return!this.isContinuous||this.activateType==="NonActivate"?!0:this.isSpawnedBy.isEffective}};o(He,"nextSeq",0);let oe=He;class Da extends we{constructor(){super(...arguments);o(this,"afterDistributeAll",()=>this.bundles.every(i=>i.applyEffectFilter()))}}class xa extends be{constructor(){super(...arguments);o(this,"applyEffectFilter",()=>{const i=this.entity.allStickyEffectOperators.length,a=[];for(;;){const n=this.effectiveOperators.filter(r=>r.procTypes.includes("Effect")).filter(r=>r.isContinuous).find(r=>!a.includes(r.seq));if(!n)break;a.push(n.seq),n.eraseOperators(this.entity)}return this.entity.allStickyEffectOperators.length===i});o(this,"filter",(i,a,n,r,s)=>this.effectiveOperators.filter(l=>l.procTypes.union(i).length).every(l=>l.filter(this.entity,a,n,r,s)));o(this,"beforePush",i=>i.eraseOperators(this.entity))}}const fe=class fe extends oe{constructor(i){super(i);o(this,"beforeRemove",()=>{});o(this,"procTypes");o(this,"filter");o(this,"eraseOperators",i=>{if(!this.procTypes.includes("Effect"))return 0;const a=i.allStickyEffectOperators.filter(n=>n.isContinuous).filter(n=>!this.filter(i,n.effectOwner,n.isSpawnedBy,n.actionAttr,[])).map(n=>n.seq);return a.forEach(i.procFilterBundle.removeItem),a.forEach(i.statusOperatorBundle.removeItem),a.forEach(i.numericOprsBundle.removeItem),a.length});this.procTypes=i.procTypes,this.filter=i.filter}};o(fe,"createContinuous",(i,a,n,r,s,l)=>new fe({title:i,validateAlive:a,isContinuous:!0,isSpawnedBy:n,actionAttr:{},isApplicableTo:r,procTypes:s,filter:l})),o(fe,"createLingering",(i,a,n,r,s,l,c)=>new fe({title:i,validateAlive:a,isContinuous:!1,isSpawnedBy:n,actionAttr:r,isApplicableTo:s,procTypes:l,filter:c}));let ye=fe;const _t={level:1,rank:1,attack:0,defense:0,pendulumScaleR:0,pendulumScaleL:0};class Aa extends we{constructor(){super(...arguments);o(this,"afterDistributeAll",i=>{if(this.bundles.forEach(n=>n.calcStateAll()),i.field.getMonstersOnFieldStrictly().flatMap(n=>n.numericOprsBundle).flatMap(n=>n.effectiveOperators).some(n=>n.targetStateGen==="calculated")){const r=i.field.getMonstersOnFieldStrictly().filter(s=>(s.atk??0)>=0).map(s=>s.atk??0).reduce((s,l)=>s>l?s:l,0);i.field.getMonstersOnFieldStrictly().forEach(s=>{s.numericOprsBundle.effectiveOperators.filter(l=>l.targetStateGen==="calculated").forEach(l=>{var c;if(!((c=s.status.monsterCategories)!=null&&c.includes("Link")&&l.targetState==="defense")){if(l.stateOperationType==="THE_DEVILS_AVATAR"){s.numericStatus.calculated[l.targetState]=r+100;return}s.numericStatus.calculated[l.targetState]=l.calcValue(s,s.numericStatus.calculated[l.targetState]??0)}})})}return!0})}}class Pa extends be{constructor(){super(...arguments);o(this,"beforePush",i=>{const a=this.effectiveOperators.filter(r=>r.targetState===i.targetState).filter(r=>r.isEffective);if(i.kind==="O-L-F"||i.kind==="O-C-F"?(a.filter(r=>r.kind==="O-L-F").forEach(r=>r.negate()),a.filter(r=>r.kind==="L-F").forEach(r=>r.negate())):i.kind==="L-F"||i.kind==="C-F"?a.filter(r=>r.kind==="L-F"||r.kind==="L-A").forEach(r=>r.negate()):i.kind==="X-C-X"&&a.filter(r=>!r.isContinuous).forEach(r=>r.negate()),a.filter(r=>r.isEffective).some(r=>r.kind==="X-C-X")&&!i.isContinuous)return;if(i.stateOperationType!=="Addition"&&i.targetStateGen==="wip"&&a.filter(r=>!r.isContinuous).forEach(r=>r.negate()),i.stateOperationType==="THE_DEVILS_AVATAR"||i.stateOperationType==="Gradius'_Option"){this.entity.numericStatus.calculated[i.targetState]=-Number.MAX_VALUE;return}const n=this.entity.numericStatus.calculated[i.targetState]??0;if(i.stateOperationType==="THE_DEVILS_DREAD-ROOT"){this.entity.numericStatus.calculated[i.targetState]=i.calcValue(this.entity,n);return}if(i.kind==="L-F"){this.entity.numericStatus.wip[i.targetState]=i.calcValue(this.entity,n);return}});o(this,"calcStateAll",()=>Zt.forEach(this.calcState));o(this,"calcState",i=>{if(!this.entity.isPendulumScale&&!this.entity.isMonster){this.entity.numericStatus.calculated[i]=void 0;return}if(!this.entity.status.monsterCategories){this.entity.numericStatus.calculated[i]=void 0;return}if(this.entity.status.monsterCategories.includes("Link")&&i!=="attack"){this.entity.numericStatus.calculated[i]=void 0;return}if(this.entity.status.monsterCategories.includes("Xyz")&&i==="level"){this.entity.numericStatus.calculated[i]=void 0;return}if(!this.entity.status.monsterCategories.includes("Xyz")&&i==="rank"){this.entity.numericStatus.calculated[i]=void 0;return}if(!this.entity.status.monsterCategories.includes("Pendulum")&&(i==="pendulumScaleL"||i==="pendulumScaleR")){this.entity.numericStatus.calculated[i]=void 0;return}if(i!=="level"&&!this.entity.isOnFieldStrictly){this.entity.numericStatus.origin[i]=this.entity.origin[i],this.entity.numericStatus.wip[i]=this.entity.origin[i],this.entity.numericStatus.calculated[i]=this.entity.origin[i];return}const a=this.entity.origin[i]??0,n=this.entity.numericStatus.wip[i]??0,r=this._operators.filter(d=>d.targetState===i).filter(d=>d.isEffective);if(r.some(d=>d.stateOperationType==="THE_DEVILS_AVATAR"||d.stateOperationType==="Gradius'_Option")&&this.entity.isEffective){this.entity.numericStatus.calculated[i]=-Number.MAX_VALUE;return}const s=r.filter(d=>d.targetState===i).findLast(d=>d.targetStateGen==="origin"),l=s?s.calcValue(this.entity,a??0):a;this.entity.numericStatus.origin[i]=l;let c=l;const u=r.filter(d=>d.targetState===i).filter(d=>d.targetStateGen==="wip").findLast(d=>d.stateOperationType==="Fixation");if(!u)c=r.filter(d=>d.stateOperationType==="Addition").reduce((d,p)=>p.calcValue(this.entity,d),c),this.entity.numericStatus.wip[i]=c;else if(u.isContinuous)c=u.calcValue(this.entity,c),c=r.filter(d=>d.stateOperationType==="Addition").reduce((d,p)=>p.calcValue(this.entity,d),c),this.entity.numericStatus.wip[i]=c;else{let d=!1;c=r.filter(p=>(d=d||p===u,d&&p!==u)).filter(p=>p.stateOperationType==="Addition").reduce((p,f)=>f.calcValue(this.entity,p),n)}c<_t[i]&&(c=_t[i]),this.entity.numericStatus.calculated[i]=c})}}const z=class z extends oe{constructor(i){super(i);o(this,"beforeRemove",()=>{});o(this,"targetState");o(this,"targetStateGen");o(this,"stateOperationType");o(this,"calcValue");o(this,"_isEffective");o(this,"negate",()=>{this._isEffective=!1});this._isEffective=!0,this.targetState=i.targetState,this.targetStateGen=i.targetStateGen,this.stateOperationType=i.stateOperationType,this.calcValue=(a,n)=>i.calcValue(this.isSpawnedBy,a,n)}get isEffective(){return this._isEffective&&super.isEffective}get kind(){if(this.targetStateGen==="origin"){if(this.stateOperationType==="Fixation")return this.isContinuous?"O-C-F":"O-L-F";throw new m("矛盾したプロパティ",this)}if(this.targetStateGen==="wip"){if(this.stateOperationType==="Addition")return this.isContinuous?"C-A":"L-A";if(this.stateOperationType==="Fixation")return this.isContinuous?"C-F":"L-F";throw new m("矛盾したプロパティ",this)}if(this.stateOperationType==="THE_DEVILS_DREAD-ROOT")return"X-C-F";if(this.stateOperationType==="THE_DEVILS_AVATAR"||this.stateOperationType==="Gradius'_Option")return"X-C-X";throw new m("矛盾したプロパティ",this)}};o(z,"createContinuous",(i,a,n,r,s,l,c,u)=>new z({title:i,validateAlive:a,isContinuous:!0,isSpawnedBy:n,actionAttr:{},isApplicableTo:r,targetState:s,targetStateGen:l,stateOperationType:c,calcValue:u})),o(z,"createLingering",(i,a,n,r,s,l,c)=>new z({title:i,validateAlive:a,isContinuous:!1,isSpawnedBy:n,actionAttr:r,isApplicableTo:(u,d)=>d.isOnFieldAsMonsterStrictly,targetState:s,targetStateGen:"wip",stateOperationType:l,calcValue:c})),o(z,"createLingeringFixation",(i,a,n,r,s,l)=>z.createLingering(i,a,n,r,s,"Fixation",l)),o(z,"createLingeringAddition",(i,a,n,r,s,l)=>z.createLingering(i,a,n,r,s,"Addition",l));let L=z;const Ma=t=>Object.keys(t),Fa={draw:"ドローフェイズ",standby:"スタンバイフェイズ",main1:"メインフェイズ１",battle1:"バトルフェイズ",battle2:"バトルフェイズ（追加）",main2:"メインフェイズ２",end:"エンドフェイズ"},Na={start:"スタートステップ",battle:"バトルステップ",damage:"ダメージステップ",end:"エンドステップ"},Oa={start:"ダメージステップ開始時",beforeDmgCalc:"ダメージ計算前",dmgCalc:"ダメージ計算時",afterDmgCalc:"ダメージ計算後",end:"ダメージステップ終了時"},w=["draw","stanby","main1","b1Start","b1Battle","b1End","b2Start","b2Battle","b2End","main2","end"],F=["b1DStart","b1DBeforeDmgCalc","b1DAfterDmgCalc","b1DEnd","b2DStart","b2DBeforeDmgCalc","b2DAfterDmgCalc","b2DEnd"],Ba=["b1DDmgCalc","b2DDmgCalc"],q=[...w,...F,...Ba],Et={draw:{phase:"draw",step:void 0,stage:void 0},stanby:{phase:"standby",step:void 0,stage:void 0},main1:{phase:"main1",step:void 0,stage:void 0},b1Start:{phase:"battle1",step:"start",stage:void 0},b1Battle:{phase:"battle1",step:"battle",stage:void 0},b1DStart:{phase:"battle1",step:"battle",stage:"start"},b1DBeforeDmgCalc:{phase:"battle1",step:"battle",stage:"beforeDmgCalc"},b1DDmgCalc:{phase:"battle1",step:"battle",stage:"dmgCalc"},b1DAfterDmgCalc:{phase:"battle1",step:"battle",stage:"afterDmgCalc"},b1DEnd:{phase:"battle1",step:"battle",stage:"end"},b1End:{phase:"battle1",step:"end",stage:void 0},b2Start:{phase:"battle2",step:"start",stage:void 0},b2Battle:{phase:"battle2",step:"battle",stage:void 0},b2DStart:{phase:"battle2",step:"battle",stage:"start"},b2DBeforeDmgCalc:{phase:"battle2",step:"battle",stage:"beforeDmgCalc"},b2DDmgCalc:{phase:"battle2",step:"battle",stage:"dmgCalc"},b2DAfterDmgCalc:{phase:"battle2",step:"battle",stage:"afterDmgCalc"},b2DEnd:{phase:"battle2",step:"battle",stage:"end"},b2End:{phase:"battle2",step:"end",stage:void 0},main2:{phase:"main2",step:void 0,stage:void 0},end:{phase:"end",step:void 0,stage:void 0}},La=t=>t.stage?Oa[t.stage]:t.step?Na[t.step]:Fa[t.phase],ie=Ma(Et).reduce((t,e)=>(t[e].key=e,t[e].name=La(t[e]),t),Et),Ze=class Ze{constructor(e,i){o(this,"entity");o(this,"isRegular");o(this,"_isStarted");o(this,"info");o(this,"continuousEffectBase");o(this,"updateState",async()=>{if(this.hasToStart!==this.isStarted){if(this.isStarted){if(!this.info)throw new m("illegal state");this._isStarted=!1,await this.continuousEffectBase.finish(this.entity,this.info),this.info=void 0;return}this.info=await this.continuousEffectBase.start(this.entity),this._isStarted=!0}});this._isStarted=!1,this.entity=e,this.continuousEffectBase=i,this.isRegular=this.appliableCellTypes.every(a=>Q.find(n=>n===a))&&this.faceList.length===1&&this.faceList[0]==="FaceUp"}get isStarted(){return this._isStarted}get appliableCellTypes(){return this.continuousEffectBase.appliableCellTypes}get appliableDuelPeriodKeys(){return this.continuousEffectBase.appliableDuelPeriodKeys}get faceList(){return this.continuousEffectBase.faceList}get hasToStart(){return!this.appliableCellTypes.includes(this.entity.fieldCell.cellType)||!this.appliableDuelPeriodKeys.includes(this.entity.duel.clock.period.key)||!this.faceList.includes(this.entity.face)?!1:this.continuousEffectBase.canStart(this.entity)}};o(Ze,"createNew",(e,i)=>new Ze(e,i));let Ie=Ze;const qa=(t,e,i,a)=>({title:t,appliableCellTypes:e==="Monster"?["MonsterZone","ExtraMonsterZone"]:["FieldSpellZone","SpellAndTrapZone"],appliableDuelPeriodKeys:q,faceList:["FaceUp"],canStart:n=>!n.info.isPending&&!n.info.isDying,start:async n=>{const r=i(n);return r.forEach(a(n).push),r.map(s=>s.seq)},finish:async(n,r)=>{r.forEach(s=>a(n).removeItem(s))}}),je=(t,e,i,a,n)=>({title:t,appliableCellTypes:e==="Monster"?["MonsterZone","ExtraMonsterZone"]:["FieldSpellZone","SpellAndTrapZone"],appliableDuelPeriodKeys:q,faceList:["FaceUp"],canStart:r=>!r.info.isPending&&!r.info.isDying,start:async r=>{const s=a(r),l=i(r);return console.info(`start : ${r.toString()} ⇒ ${l.map(c=>c.toString()).join(" ")} (${s.map(c=>c.title).join(" ")})`),l.map(n).forEach(c=>s.forEach(c.push)),{targets:l,seqList:s.map(c=>c.seq)}},finish:async(r,s)=>{s.targets.map(n).forEach(l=>s.seqList.forEach(c=>l.removeItem(c)))}}),Qt=(t,e,i,a)=>je(t,e,i,a,n=>n.procFilterBundle),Fe=(t,e,i)=>qa(t,e,i,a=>a.field.numericStateOperatorPool),ke=(t,e,i,a)=>je(t,e,i,a,n=>n.numericOprsBundle),_e=(t,e,i,a)=>je(t,e,i,a,n=>n.statusOperatorBundle),Ra=(t,e,i,a)=>je(t,e,i,a,n=>n.damageFilterBundle),Ha=t=>!isNaN(Number(t)),Ne=(...t)=>t.length?t.reduce((e,i)=>e>i?e:i):-Number.MAX_VALUE,Oe=(...t)=>t.length?t.reduce((e,i)=>e<i?e:i):Number.MAX_VALUE,de=(t,e)=>{if((t[0]??Number.MAX_VALUE)>e)return 0;if(t.slice(-1)[0]<e)return t.length;let i=0,a=t.length-1;for(;;){const n=Math.round((i+a)/2);if(n===a||n===i)return t[i]<e?a:i;if(t[n]<e){i=n;continue}a=n}},U=[3,5,5,6,6,6,7,8,9,10,11,11,11,12,12,13,13,14,15,15,15,15,15,15,16,16,16,17,18,18,18,21,21,21,22,23,25,25,26,28,28,28,30,30,31,32,32,33,33,34,35,35,36,36,36,37,37,38,38,38,39,41,42,42,43,45,45,45,45,48,48,48,50,51,52,54,54,54,54,56,57,58,59,59,59,59,60,61,63,65,65,65,65,66,67,67,67,69,69,71,71,72,73,73,73,73,73,74,75,75,76,76,77,78,79,80,80,80,80,84,84,84,84,84,84,85,85,85,87,90,91,94,96,96,97,98,101,101,101,101,101];U.forEach((t,e)=>{((U[de(U,e)-1]||-Number.MAX_VALUE)>=e||(U[de(U,e)]||Number.MAX_VALUE)<e)&&console.log(e,de(U,e),(U[de(U,e)-1]||-Number.MAX_VALUE)<e,(U[de(U,e)]||Number.MAX_VALUE)>=e)});class Za{constructor(e){o(this,"_field");o(this,"_records",[]);o(this,"getIndexOfStartPoint",e=>de(this._records.map(i=>i.movedAt.totalProcSeq),e));o(this,"push",e=>{this._records.push(e)});o(this,"getCurrentTurnLog",()=>this.getTermLog("Current","turn"));o(this,"getPriviousChainLog",()=>this.getTermLog("Previous","chainSeq"));this._field=e}*getTermLog(e,i){const a=e==="Current"?this._field.duel.clock.currentStartPoints[i]:this._field.duel.clock.previousStartPoints[i];for(let n=this.getIndexOfStartPoint(a);n<this._records.length;n++)yield this._records[n]}}class Ga{constructor(e){o(this,"entity");o(this,"_records");o(this,"_push",e=>{this.entity.field.moveLog.push(e),this._records.push(e)});o(this,"pushForRuleAction",e=>{this._push({entity:this.entity,kind:this.entity.origin.kind,cell:this.entity.fieldCell,face:this.entity.face,orientation:this.entity.orientation,isPending:this.entity.info.isPending,movedAt:this.entity.duel.clock.getClone(),movedAs:[...e,"Rule"]})});o(this,"push",(e,i,a,n,r)=>{let s=this.entity.fieldCell;this.entity.kind==="XyzMaterial"&&(s=this.entity.controller.getXyzMaterialZone()),this._push({entity:this.entity,kind:e,cell:s,face:this.entity.face,orientation:this.entity.orientation,isPending:this.entity.info.isPending,movedAt:this.entity.duel.clock.getClone(),movedAs:i.getDistinct(),movedBy:a,actionOwner:n,chooser:r??n})});o(this,"finalize",()=>{if(!this.latestRecord.isPending)throw new m("想定されない状況");if(this.entity.info.isPending)throw new m("想定されない状況");this._push({...this.latestRecord,isPending:!1,movedAt:this.entity.duel.clock.getClone()})});o(this,"negateSummon",(e,i)=>{const a=this.records.slice(-1)[0];a.cell=this.entity.field.getWaitingRoomCell(),a.movedBy=e,a.movedAs=["SummonNegated"],a.actionOwner=i});this.entity=e,this._records=[]}get records(){return this._records}get latestRecord(){return this.records.slice(-1)[0]}get previousPlaceRecord(){return this.records.findLast(e=>e.cell.cellType!==this.entity.fieldCell.cellType)??this._records[0]}get currentProcRecords(){return this.records.filter(e=>e.movedAt.totalProcSeq===this.entity.duel.clock.totalProcSeq)}get latestArrivalRecord(){if(this.entity.isOnFieldAsMonsterStrictly)return this.records.findLast(e=>e.movedAs.union(["NormalSummon","SpecialSummon","FlipSummon","Flip","ComeBackAlive"]))}}const $a={name:"SpellCounter",type:"Actual",text:"魔力カウンター",emoji:"🔮",sticky:!1,temporary:!1,isOnlyOnField:!0},ja={name:"KaijuCounter",type:"Actual",text:"壊獣カウンター",emoji:"☢",sticky:!1,temporary:!1,isOnlyOnField:!0},Ua={name:"NamelessCounter",type:"Actual",text:"カウンター",emoji:"💠",sticky:!1,temporary:!1,isOnlyOnField:!0},za={name:"IceCounter",type:"Actual",text:"アイスカウンター",emoji:"❄",sticky:!1,temporary:!1,isOnlyOnField:!0},Va={name:"Curfew",type:"System",text:"自発帰還",emoji:"",sticky:!1,temporary:!1,isOnlyOnField:!0},Wa={name:"SelfDestruction",type:"System",text:"自壊",emoji:"",sticky:!1,temporary:!1,isOnlyOnField:!0},Qa={name:"CycleFlip",type:"System",text:"サイクルリバース",emoji:"",sticky:!0,temporary:!0,isOnlyOnField:!0},Xa={name:"SonicBarrier",type:"System",text:"波動音壁",emoji:"",sticky:!0,temporary:!0,isOnlyOnField:!0},Ka={name:"SonicVerse",type:"System",text:"波動聖句（適用済）",emoji:"",sticky:!0,temporary:!0,isOnlyOnField:!0},Ja={name:"IntoTheVoid",type:"System",text:"無の煉獄",emoji:"",sticky:!0,temporary:!0,isOnlyOnField:!1},Ya={name:"GoldSarcophagus",type:"System",text:"封印の黄金櫃",emoji:"",sticky:!0,temporary:!1,isOnlyOnField:!1},Ia={SpellCounter:$a,KaijuCounter:ja,NamelessCounter:Ua,IceCounter:za,Curfew:Va,SelfDestruction:Wa,CycleFlip:Qa,SonicBarrier:Xa,SonicVerse:Ka,IntoTheVoid:Ja,GoldSarcophagus:Ya},pe=Ia,wt=Object.values(pe).filter(t=>t.type==="Actual").filter(t=>t.sticky||t.temporary||!t.isOnlyOnField);if(wt.length)throw new Error(`カウンターの設定誤り。${wt.map(t=>t.name).join(", ")}`);const Vs=t=>pe[t].emoji;class en{constructor(e){o(this,"dic");o(this,"temporaryCounterNames");o(this,"entity");o(this,"add",(e,i=1,a)=>{this.dic[e]=[...this.dic[e]??[],...Array(i).fill(a)];const n=this.entity.status.maxCounterQty[e]??0;return n&&(this.dic[e]=this.dic[e].slice(0,n)),this.dic[e]});o(this,"setQty",(e,i=1,a)=>(this.dic[e]=[...Array(i).fill(a)],this.dic[e]));o(this,"remove",(e,i=1,a)=>{const n=this.dic[e].length;if(n===void 0)return[];if(i>=n)return delete this.dic[e],[];if(a){const r=this.dic[e].filter(l=>l===a),s=this.dic[e].filter(l=>l!==a);this.dic[e]=[...r.slice(i),...s]}else this.dic[e]=this.dic[e].slice(i);return this.dic[e]});o(this,"removeAll",(e,i)=>{if(i){const n=this.dic[e].filter(r=>r===i).length;return this.dic[e]=this.dic[e].filter(r=>r!==i),n}const a=this.dic[e];return delete this.dic[e],a});o(this,"getQty",(e,i)=>this.dic[e]?i?this.dic[e].filter(a=>a===i).length:this.dic[e].length??0:0);o(this,"setSelfDestructionFlg",e=>{this.add("SelfDestruction",1,e)});o(this,"getSelfDestructionFlg",e=>this.getQty("SelfDestruction",e)>0);o(this,"setCurfewFlg",e=>{this.add("Curfew",1,e)});o(this,"getCurfewFlg",e=>this.getQty("Curfew",e)>0);o(this,"incrementActionCountPerTurn",e=>{this.temporaryCounterNames.push(e.title),this.incrementActionCount(e)});o(this,"incrementActionCount",e=>{this.dic[e.title]=[e.entity,...this.dic[e.title]??[]]});o(this,"getActionCount",e=>this.dic[e.title]?this.dic[e.title].filter(i=>i===e.entity).length:0);o(this,"corpseDisposal",()=>{this.temporaryCounterNames.forEach(e=>delete this.dic[e]),this.temporaryCounterNames.reset(),Object.values(pe).filter(e=>e.temporary).forEach(e=>delete this.dic[e.name])});o(this,"removeAllActualCounters",()=>{Object.values(pe).filter(e=>e.type==="Actual").forEach(e=>delete this.dic[e.name])});o(this,"removeAllWhenfaceDown",()=>{this.temporaryCounterNames.forEach(e=>delete this.dic[e]),this.temporaryCounterNames.reset(),Object.values(pe).filter(e=>!e.sticky).forEach(e=>delete this.dic[e.name])});o(this,"clear",()=>{this.temporaryCounterNames.forEach(e=>delete this.dic[e]),this.temporaryCounterNames.reset(),Object.values(pe).filter(e=>e.isOnlyOnField).forEach(e=>delete this.dic[e.name])});this.dic={},this.temporaryCounterNames=[],this.entity=e}}class tn extends we{constructor(){super(...arguments);o(this,"afterDistributeAll",i=>i.field.getAllEntities().map(a=>a.statusOperatorBundle).every(a=>a.calcStatus()))}}class an extends be{constructor(){super(...arguments);o(this,"calcStatus",()=>{const i=this.entity.isEffective;return this.entity.resetStatus(),this.entity.status=this._operators.filter(a=>a.isSpawnedBy.isEffective||!a.isContinuous).reduce((a,n)=>({...a,...n.statusCalculator(this.entity,n,a)}),this.entity.status),this.entity.isEffective===i});o(this,"beforePush",()=>{})}}class R extends oe{constructor(i){super(i);o(this,"beforeRemove",()=>{});o(this,"statusCalculator");this.statusCalculator=i.statusCalculator}}const Ce=class Ce extends Te{constructor(){super(...arguments);o(this,"isApplicableTo",(i,a,n)=>{const r=this.entity.counterHolder.getActionCount(this);return this.isOnlyNTimesPerTurnIfFaceup>0&&r>=this.isOnlyNTimesPerTurnIfFaceup?this.entity.counterHolder.incrementActionCountPerTurn(this):this.isOnlyNTimesIfFaceup>0&&r>=this.isOnlyNTimesIfFaceup&&this.entity.counterHolder.incrementActionCount(this),this.definition.isApplicableTo(this,i,a,n)});o(this,"substitute",async(i,a,n)=>{const r=await this.definition.substitute(this,i,a,n);return this.isOnlyNTimesPerTurnIfFaceup>0?this.entity.counterHolder.incrementActionCountPerTurn(this):this.isOnlyNTimesIfFaceup>0&&this.entity.counterHolder.incrementActionCount(this),r});o(this,"getClone",()=>new Ce(this.seq,this.entity,this.definition))}get definition(){return super.definition}};o(Ce,"createNew",(i,a)=>new Ce("AutoSeq",i,a));let et=Ce;class nn extends we{constructor(){super(...arguments);o(this,"afterDistributeAll",()=>!0)}}class rn extends be{constructor(){super(...arguments);o(this,"beforePush",()=>{});o(this,"filter",(i,a,n,r,s,l,c)=>this.effectiveOperators.filter(u=>u.summonKinds.includes(a)).reduce((u,d)=>({...u,...d.filter(this.entity,i,s.summoner,[a,...n],r,s.monster,l,u.posList,u.cells,c)}),s))}}class sn extends oe{constructor(i){super(i);o(this,"beforeRemove",()=>{});o(this,"summonKinds");o(this,"filter");this.summonKinds=i.summonKinds,this.filter=(...a)=>i.filter(this,...a)}}const b=class b{constructor(){}};o(b,"_tryMarkForDestory",(e,i)=>{if(e.info.isDying||e.kind==="XyzMaterial"||!e.isOnFieldStrictly&&e.fieldCell.cellType!=="Deck"&&e.fieldCell.cellType!=="Hand")return!1;const a=i.action.playType==="Battle"?"BattleDestroy":"EffectDestroy",n=a==="BattleDestroy"&&i.action.entity===e?i.selectedEntities[0]:i.action.entity;return e.info.isDying=e.validateDestory(a,i.activator,n,i.action),e.info.isDying&&(e.info.causeOfDeath=[a],e.info.isKilledBy=n,e.info.isKilledByWhom=i.activator,a==="BattleDestroy"&&(e.info.isKilledByWhom=n.controller)),e.info.isDying}),o(b,"excavateFromDeck",async(e,i,a,n)=>{const r=await b.excavateManyFromDeck(e,1,i,a,n);return r.length?r[0]:void 0}),o(b,"excavateManyFromDeck",async(e,i,a,n,r)=>{const s=e.getDeckCell().cardEntities.slice(0,i);return await k.moveMany(s.map(l=>({entity:l,to:l.fieldCell,kind:l.kind,face:"FaceUp",orientation:l.orientation,pos:"Fix",movedAs:["Excavate",...a],movedBy:n,actionOwner:r,chooser:void 0}))),s}),o(b,"releaseManyForTheSameReason",(e,i,a,n)=>e.length?(i.includes("Cost")&&n.writeInfoLog(`${e.map(r=>r.toString()).join(" ")}をリリースし――、`),b.bringManyToSameCellForTheSameReason("Graveyard","Top",e,"FaceUp","Vertical",["Release",...i],a,n)):Promise.resolve([])),o(b,"sendManyToGraveyardForTheSameReason",(e,i,a,n)=>e.length?(n&&i.includes("Cost")&&(i.includes("FusionMaterial")?n.writeInfoLog(`${e.map(r=>r.toString()).join(" ")}を融合素材とし――、`):i.includes("SynchroMaterial")?n.writeInfoLog(`${e.map(r=>r.toString()).join(" ")}をシンクロと素材し――、`):i.includes("LinkMaterial")?n.writeInfoLog(`${e.map(r=>r.toString()).join(" ")}をリンクマーカーにセッティング――、`):n.writeInfoLog(`${e.map(r=>r.toString()).join(" ")}を墓地に送り――、`)),b.bringManyToSameCellForTheSameReason("Graveyard","Top",e,"FaceUp","Vertical",i,a,n)):Promise.resolve([])),o(b,"addManyToHand",(e,i,a,n)=>e.length?b.bringManyToSameCellForTheSameReason("Hand","Bottom",e,"FaceDown","Vertical",i,a,n):Promise.resolve([])),o(b,"discardManyForTheSameReason",(e,i,a,n)=>e.length?(n&&i.includes("Cost")&&n.writeInfoLog(`${e.map(r=>r.toString()).join(" ")}を手札から捨て――、`),b.bringManyToSameCellForTheSameReason("Graveyard","Top",e,"FaceUp","Vertical",["Discard",...i],a,n)):Promise.resolve([])),o(b,"banishManyForTheSameReason",(e,i,a,n)=>e.length?(n&&i.includes("Cost")&&n.writeInfoLog(`${e.map(r=>r.toString()).join(" ")}をゲームから除外し――、`),b.bringManyToSameCellForTheSameReason("Banished","Top",e,"FaceUp","Vertical",i,a,n)):Promise.resolve([])),o(b,"returnManyToDeckForTheSameReason",(e,i,a,n,r)=>i.length?(r&&a.includes("Cost")&&r.writeInfoLog(`${i.map(s=>s.toString()).join(" ")}をデッキに戻し――、`),b.bringManyToSameCellForTheSameReason("Deck",e,i,"FaceDown","Vertical",a,n,r)):Promise.resolve([])),o(b,"returnManyToHandForTheSameReason",(e,i,a,n)=>e.length?(n&&i.includes("Cost")&&n.writeInfoLog(`${e.map(r=>r.toString()).join(" ")}を手札に戻し――、`),b.bringManyToSameCellForTheSameReason("Hand","Bottom",e,"FaceDown","Vertical",i,a,n)):Promise.resolve([])),o(b,"convertManyToXyzMaterials",(e,i,a,n)=>e.length?(n&&i.includes("Cost")&&n.writeInfoLog(`${e.map(r=>r.toString()).join(" ")}によって、オーバーレイネットワークを構築――、`),k.moveMany(e.map(r=>({entity:r,to:r.fieldCell,kind:"XyzMaterial",face:"FaceUp",orientation:"Vertical",pos:"Top",movedAs:i,movedBy:a,actionOwner:n,chooser:n})))):Promise.resolve()),o(b,"moveToXyzOwner",async(e,i,a,n,r,s)=>{a.length&&(await k.moveMany(a.map(l=>({entity:l,to:e,kind:"XyzMaterial",face:"FaceUp",orientation:"Vertical",pos:"Top",movedAs:n,movedBy:r,actionOwner:s,chooser:s}))),a.forEach(l=>l.info.xyzOwner=i))}),o(b,"banishMany",(e,i)=>k.bringManyToSameCell("Banished","Top",e.map(a=>({...a,face:"FaceUp",orientation:"Vertical"})),i)),o(b,"bringManyToSameCellForTheSameReason",(e,i,a,n,r,s,l,c)=>k.bringManyToSameCell(e,i,a.map(u=>({entity:u,face:n,orientation:r,movedAs:s,movedBy:l,activator:c})))),o(b,"tryDestroy",async(e,i)=>{const a=await b.tryMarkForDestory(e,i);return await b.waitCorpseDisposal(i.activator.duel),a}),o(b,"waitCorpseDisposal",e=>k.sendManyToGraveyard([...e.field.getDyingCardsOnField(),...e.field.getPendingCardsOnField()].filter(i=>i.info.isDying).map(i=>({entity:i,movedAs:i.info.causeOfDeath??[],movedBy:i.info.isKilledBy,activator:i.info.isKilledByWhom})))),o(b,"tryMarkForDestory",async(e,i)=>{let a=e.filter(l=>b._tryMarkForDestory(l,i));if(!a.length)return[];const n=i.action.playType==="Battle"?"BattleDestroy":"EffectDestroy";(await Promise.all(e[0].field.getAllEntities().flatMap(l=>l.substituteEffects.filter(c=>c.isMandatory).filter(c=>c.executableCells.includes(l.fieldCell.cellType)).filter(c=>c.isApplicableTo(n,e,i).length).flatMap(c=>c.substitute(n,e,i))))).flatMap(l=>l).forEach(l=>{l.resetCauseOfDeath()}),a=a.filter(l=>l.info.isDying);let r=e[0].field.getAllEntities().flatMap(l=>l.substituteEffects.filter(c=>!c.isMandatory).filter(c=>c.executableCells.includes(l.fieldCell.cellType)).filter(c=>c.isApplicableTo(n,e,i).length).map(c=>({chooser:l.owner,effect:c,sacrifice:l})));for(const l of r.map(c=>c.sacrifice.controller).getDistinct()){const c=r.filter(d=>d.sacrifice.controller===l),u=await l.duel.view.waitSelectAction(l,c.map(d=>({entity:d.sacrifice,title:d.effect.title,origin:d.effect})),"身代わり効果を適用する？",!0);if(u){if((await u.substitute(n,a,i)).forEach(d=>{d.resetCauseOfDeath()}),a=a.filter(d=>d.info.isDying),!a.length)return[];r=r.filter(d=>d.effect.isApplicableTo(n,e,i).length)}}const s=a.filter(l=>l.info.isDying);return s.forEach(l=>l.duel.log.info(`${l.toString()}を${gn[n]}。`,l.info.isKilledByWhom)),s}),o(b,"tryBanish",async(e,i,a)=>{const n=i.filter(r=>r.canBeBanished(e,a.activator,a.action.entity,a.action));return await b.banishManyForTheSameReason(n,["Effect"],a.action.entity,a.activator),n.filter(r=>r.fieldCell.cellType==="Banished").filter(r=>r.moveLog.latestRecord.movedBy===a.action.entity)}),o(b,"negateSummonMany",(e,i)=>{const a=i.duel.field.getPendingMonstersOnField();return a.forEach(n=>{n.info.summonKinds=[],n.info.materials=[],n.moveLog.negateSummon(e,i)}),i.writeInfoLog(`${a.map(n=>n.toString()).join(" ")}.の召喚は無効にされた。`),a}),o(b,"drawAtSameTime",async(e,i,a,n)=>{const r=[],s=[],l=[e.draw(a,i,e),e.getOpponentPlayer().draw(n,i,e)].map(c=>c.catch(u=>{u instanceof O?u.winner&&r.push(u.winner):s.push(u)}));if(await Promise.all(l),s.length)throw new m("ドロー処理で想定されない例外が発生した。",e,a,n,i,...s);if(r.length!==0)throw r.length===1?new O(r[0],`${r[0].getOpponentPlayer().name}がデッキからドローできなかった。`):new O(void 0,"お互いにデッキからカードをドローできなかった。")});let v=b;class on extends we{constructor(){super(...arguments);o(this,"afterDistributeAll",()=>!0)}}class ln extends be{constructor(){super(...arguments);o(this,"beforePush",()=>{})}}class Xt extends oe{constructor(i){super(i);o(this,"beforeRemove",()=>{});o(this,"calcType");o(this,"filter");this.calcType=i.calcType,this.filter=(...a)=>i.filter(this,...a)}}const ze=(t,e,...i)=>t.filter(a=>e.includes(a.calcType)).reduce((a,n)=>({...a,...n.filter(...i)}),{}),Kt=(...t)=>{const[e,i,a,n,r,s,l]=t,c=[a.entity,n,r].filter(p=>!!p).flatMap(p=>p.damageFilterBundle.effectiveOperators);let u=ze(c,["double_typeA","eachOther_typeA","eachOther_typeB","asEffectDamage"],...t);const d={point:e,damageToOpponent1:0,damageToOpponent2:0,damageType:s};return u.double_typeA&&(d.point*=2),u.asEffectDamage&&(d.damageType="EffectDamage"),u={...ze(c,["heal","zero_typeA","half","double_typeB","fix"],d.point,i,a,n,r,d.damageType,l),...u},u.fix!==void 0?d.point=u.fix:u.zero_typeA?d.point=0:(u.half&&(d.point=Math.round(d.point/2)),u.double_typeA&&(d.point*=2)),u={...ze(c,["zero_typeB"],d.point,i,a,n,r,d.damageType,l),...u},u.zero_typeB&&(d.point=0),u.heal?d.damageType="Heal":(u.eachOther_typeA&&(d.damageToOpponent1=d.point),u.eachOther_typeB&&(d.damageToOpponent2=d.point,u.eachOther_typeB==="Substitude"&&(d.point=0))),d},cn=(t,e,i)=>Kt(t,e.activator,i,e.action.entity,void 0,"EffectDamage",e.action),un=(t,e,i,a,n,r)=>Kt(t,e,i,a,n.entityType==="Duelist"?void 0:n,"BattleDamage",r),Be=t=>new Promise(e=>setTimeout(e,t)),Jt=()=>{let t=()=>{},e=()=>{};return{promise:new Promise((a,n)=>{t=a,e=n}),resolve:t,reject:e}},Ge=class Ge extends Te{constructor(i,a,n){super(i,a,{...n,playType:"ContinuousEffect",isMandatory:!1,executableDuelistTypes:["Controller"]});o(this,"toString",()=>this.title);o(this,"toFullString",()=>`${this.entity.toString()}の${this.toString()}`);o(this,"execute",async(i,a)=>{if(!this.canExecute())return;const n=await this.definition.execute(this,i,a);return n==="RemoveMe"&&this.entity.immediatelyActions.reset(...this.entity.immediatelyActions.filter(r=>r!==this)),n})}get definition(){return super.definition}get playType(){return this.definition.playType}};o(Ge,"createNew",(i,a)=>new Ge("AutoSeq",i,a));let tt=Ge;const dn=["FaceUp","FaceDown"],Yt=["FusionSummon","SynchroSummon","XyzSummon","PendulumSummon","LinkSummon","RitualSummon","FlipSummon"],pn={FusionSummon:"融合召喚",SynchroSummon:"シンクロ召喚",XyzSummon:"エクシーズ召喚",PendulumSummon:"ペンデュラム召喚",LinkSummon:"リンク召喚",RitualSummon:"儀式召喚",FlipSummon:"反転召喚"},fn=[...Yt,"AdvanceSummon","NormalSummon","SpecialSummon"],gn={BattleDestroy:"戦闘破壊",EffectDestroy:"効果破壊",RuleDestroy:"ルール破壊"},It=t=>t+"Summon",bt=["Card","Token"],hn=["Duelist","Squatter"],Ws=(t,e)=>$t(t.origin,e.origin),P=class P{constructor(e,i,a,n,r,s,l){o(this,"seq");o(this,"origin");o(this,"entityType");o(this,"summonFilterBundle");o(this,"procFilterBundle");o(this,"numericOprsBundle");o(this,"statusOperatorBundle");o(this,"damageFilterBundle");o(this,"moveLog");o(this,"counterHolder");o(this,"parent");o(this,"face");o(this,"orientation");o(this,"owner");o(this,"fieldCell");o(this,"_status");o(this,"_numericStatus");o(this,"_info");o(this,"actions",[]);o(this,"immediatelyActions",[]);o(this,"continuousEffects",[]);o(this,"substituteEffects",[]);o(this,"canBeReleased",(e,i,a,n)=>!this.isInTrashCell&&this.procFilterBundle.filter(a,e,i,n,[this]));o(this,"canBeSentToGraveyard",(e,i,a,n)=>!this.status.willBeBanished&&!this.status.willReturnToDeck&&this.procFilterBundle.filter([a],e,i,n,[this]));o(this,"_exists",!0);o(this,"validateFusionMaterials",e=>this.definition.fusionMaterialInfos?this.definition.validateFusionMaterials?this.definition.validateFusionMaterials(e):!0:!1);o(this,"definition");o(this,"toString",()=>{let e=this.nm;return this.nm!==this.origin.name&&(e=`${e}(${this.origin.name})`),this.entityType==="Card"?`《${e}》`:e});o(this,"onUsedAsMaterial",(e,i)=>{this.definition.onUsedAsMaterial&&this.definition.onUsedAsMaterial(e,i)});o(this,"setBattlePosition",async(e,i,a,n)=>{let r=`表示形式の変更：${this.toString()}（${this.battlePositionName}⇒${Ae[e]}）`;const s=[...i];this.battlePosition==="Set"&&(s.push("Flip"),i.includes("Rule")&&(this.info.isPending=!0,r=`${this.toString()}を反転召喚`,this.info.summonKinds.push("FlipSummon"),s.push("FlipSummon"),s.push("AttackSummon"))),this.duel.log.info(r,n),await this.moveAlone(this.fieldCell,"Monster",e==="Set"?"FaceDown":"FaceUp",e==="Attack"?"Vertical":"Horizontal","Top",s,a,n,n)});o(this,"activateAsPendulumScale",(e,i,a,n)=>this.moveAlone(e,"Spell","FaceUp","Vertical","Top",["CardActivation",...i],a,n,n));o(this,"setNonFieldMonsterPosition",async(e,i,a,n,r)=>{this.moveAlone(this.fieldCell,e,i==="FaceUp"?"FaceUp":"FaceDown","Vertical","Top",a,n,r,r)});o(this,"setAsSpellTrap",async(e,i,a,n,r)=>{await this.moveAlone(e,i,"FaceDown","Vertical","Top",[...a,"SpellTrapSet"],n,r,r)});o(this,"activateSpellTrapFromHand",async(e,i,a,n,r)=>{await this.moveAlone(e,i,"FaceUp","Vertical","Top",[...a,"CardActivation"],n,r,r)});o(this,"putDirectly",async(e,i,a,n,r)=>{await this.moveAlone(e,i,"FaceUp","Vertical","Top",[...a,"PutDirectly"],n,r,r)});o(this,"activateSpellTrapOnField",async(e,i,a,n)=>{await this.moveAlone(this.fieldCell,e,"FaceUp","Vertical","Top",[...i,"CardActivation"],a,n,n)});o(this,"draw",async(e,i,a)=>await this.addToHand([...e,"Draw"],i,a));o(this,"addToHand",async(e,i,a)=>await this.moveAlone(this.owner.getHandCell(),this.origin.kind,"FaceDown","Vertical","Bottom",[...e],i,a,a));o(this,"summon",(e,i,a,n,r,s,l)=>P.summonMany([{monster:this,dest:e,summoner:l??s,pos:i}],a,n,r,s));o(this,"moveForcibly",async(e,i,a,n,r,s,l)=>{await this.moveAlone(e,this.origin.kind,i,a,n,["Rule",...r],s,l,l)});o(this,"excavate",async(e,i,a)=>this.moveAlone(this.fieldCell,this.kind,"FaceUp",this.orientation,"Fix",["Excavate",...e],i,a,void 0));o(this,"moveAlone",async(e,i,a,n,r,s,l,c,u)=>(await P.moveMany([{entity:this,to:e,kind:i,face:a,orientation:n,pos:r,movedAs:s,movedBy:l,actionOwner:c,chooser:u}],void 0),this.fieldCell));o(this,"determine",()=>{this.info.isPending&&(this.info.isPending=!1,this.moveLog.finalize(),this.continuousEffects.forEach(e=>e.updateState()))});o(this,"_move",async e=>{if(!e.to)throw new Error("illegal argument: to");for(const n of[this,...this.field.getCardsOnFieldStrictly()].getDistinct().flatMap(r=>r.immediatelyActions))await n.execute(this,e);this.face=e.face,this.orientation=e.orientation;let i=!1,a=e.actionOwner;if(!a&&e.movedAs.includes("LostDestinyBond")){const n=this.info.equipedBy??this.info.xyzOwner;n&&(a=n.moveLog.latestRecord.actionOwner)}return e.to!==this.fieldCell&&(this.duel.log.pushMoveLog(a,this,this.fieldCell,e.to),this.fieldCell.cellType==="WaitingRoom"?i=!0:e.to.cellType==="WaitingRoom"?(this._exists=!1,await this.duel.view.waitTokenAnimation()):this.field.duel.clock.turn&&await this.field.duel.view.waitAnimation({entity:this,to:e.to,index:e.pos,count:0})),(e.to!==this.fieldCell||e.pos==="Random")&&(this.fieldCell.releaseEntities(this),this.fieldCell.isPlayFieldCell&&!e.to.isPlayFieldCell&&(this.counterHolder.clear(),this.resetCauseOfDeath()),this.fieldCell.isMonsterZoneLikeCell&&!e.to.isMonsterZoneLikeCell||e.kind!=="Monster"?(this.resetNumericStatus(),this.info.isEffectiveIn.push(...Q),this.info.equipEntities.filter(n=>n.isOnFieldAsSpellTrapStrictly).forEach(n=>{n.info.isDying=!0,n.info.causeOfDeath=["RuleDestroy","LostEquipOwner","LostDestinyBond"],this.controller.writeInfoLog(`装備対象${this.toString()}不在により${n.toString()}は破壊された。`)}),this.info.equipEntities=[],this.kind!=="XyzMaterial"&&this.fieldCell.xyzMaterials.forEach(n=>{n.info.isDying=!0,n.info.causeOfDeath=["LostXyzOwner","LostDestinyBond"],this.controller.writeInfoLog(`${this.toString()}不在により、XYZ素材${n.toString()}は墓地に送られた。`)}),this.info.xyzOwner=void 0):this.fieldCell.cellType==="SpellAndTrapZone"&&e.to.cellType!=="SpellAndTrapZone"&&(this.info.equipedBy=void 0,this.info.equipedAs=void 0,this.info.isEffectiveIn.push(...Q)),e.to.acceptEntities(this,e.pos),i&&(await Be(1),this._exists=!0,await this.duel.view.waitTokenAnimation()),(e.to===this.isBelongTo||e.to.cellType==="Hand"||e.to.cellType==="Banished"&&this.face==="FaceDown")&&(this.counterHolder.clear(),this.resetInfoAll(),this.resetStatusAll())),(this.isOnFieldStrictly&&this.face==="FaceDown"||e.kind==="XyzMaterial")&&(this.info.equipEntities.forEach(n=>{n.info.isDying=!0,n.info.causeOfDeath=["RuleDestroy"],this.controller.writeInfoLog(`装備対象${this.toString()}不在により${n.toString()}は破壊された。`)}),this.counterHolder.removeAllWhenfaceDown(),this.info.materials=[],this._status.isEffective=!0,this.info.isEffectiveIn=[...X],this.resetNumericStatus(),this.info.isSettingSickness=this.kind==="Trap"||this.status.spellCategory==="QuickPlay"),this._info.kind=e.kind,this.moveLog.push(e.kind,e.movedAs,e.movedBy,e.actionOwner,e.chooser),e.to});o(this,"initForTurn",()=>{this.info.isSettingSickness=!1,this.info.attackDeclareCount=0,this.info.battlePotisionChangeCount=0,this.counterHolder.corpseDisposal()});o(this,"resetInfoIfLeavesTheField",()=>{this._info={...this._info,isDying:!1,isPending:!1,causeOfDeath:[],isKilledBy:void 0,isKilledByWhom:void 0,effectTargets:{},attackDeclareCount:0,battlePotisionChangeCount:0,materials:[],equipedBy:void 0,equipedAs:void 0,equipEntities:[]},this._info.isEffectiveIn.push(...Q),this._info.isEffectiveIn.distinct()});o(this,"resetInfoAll",()=>{var e;this._info={kind:this.origin.kind,isDying:!1,isPending:!1,isEffectiveIn:[...X],causeOfDeath:[],isKilledBy:void 0,isKilledByWhom:void 0,isVanished:!1,isRebornable:((e=this.origin.monsterCategories)==null?void 0:e.union(Rt).length)===0,isSettingSickness:!1,summonKinds:[],materials:[],effectTargets:{},attackDeclareCount:0,battlePotisionChangeCount:0,equipedBy:void 0,equipedAs:void 0,validateEquipOwner:()=>!0,equipEntities:[],xyzOwner:void 0,battleLog:[]},this.counterHolder.clear()});o(this,"resetNumericStatus",()=>{const e=Zt.reduce((i,a)=>(i[a]=this.origin[a],i),{});this._numericStatus={origin:{...e},wip:{...e},calculated:{...e}}});o(this,"resetStatus",()=>{this._status={...this.origin,canAttack:!0,isEffective:!0,canDirectAttack:!1,canActivateEffect:!0,isSelectableForAttack:!0,allowHandSynchro:!1,allowHandLink:!1,willBeBanished:!1,willReturnToDeck:void 0,fusionSubstitute:!1,maxCounterQty:{},piercingTo:[]}});o(this,"resetStatusAll",()=>{this.resetNumericStatus(),this.resetStatus()});o(this,"resetCauseOfDeath",()=>{this.info.isDying=!1,this.info.causeOfDeath=[],this.info.isKilledBy=void 0,this.info.isKilledByWhom=void 0});this.seq=P.nextEntitySeq++,this.counterHolder=new en(this),this.definition=n,this.owner=e,this.fieldCell=i,this.entityType=a,this.parent=l,this.origin=n.staticInfo,this._status=JSON.parse(JSON.stringify(n.staticInfo)),this._numericStatus=JSON.parse(JSON.stringify(n.staticInfo)),this.resetStatusAll(),this._info={kind:this.origin.kind,isEffectiveIn:[...X],attackDeclareCount:0,battlePotisionChangeCount:0,isDying:!1,isPending:!1,causeOfDeath:[],isKilledBy:void 0,isKilledByWhom:void 0,isVanished:!1,isRebornable:!0,isSettingSickness:!1,summonKinds:[],materials:[],effectTargets:{},equipedBy:void 0,equipedAs:void 0,validateEquipOwner:()=>!0,equipEntities:[],xyzOwner:void 0,battleLog:[]},this.resetInfoAll(),this.face=r,this.orientation=s,this.summonFilterBundle=new rn(i.field.summonFilterPool,this),this.procFilterBundle=new xa(i.field.procFilterPool,this),this.numericOprsBundle=new Pa(i.field.numericStateOperatorPool,this),this.statusOperatorBundle=new an(i.field.statusOperatorPool,this),this.damageFilterBundle=new ln(i.field.damageFilterPool,this),this._exists=this.entityType==="Card",i.acceptEntities(this,"Top"),this.moveLog=new Ga(this),this.moveLog.pushForRuleAction(["Spawn"]);let c=[];c=n.continuousEffects??[],this.substituteEffects.push(...(n.substituteEffects??[]).map(u=>et.createNew(this,u))),this.origin.kind==="Monster"&&this.entityType==="Card"&&n.summonFilter&&this.summonFilterBundle.push(new sn({title:"default",validateAlive:()=>!0,isContinuous:!0,isSpawnedBy:this,actionAttr:{},isApplicableTo:()=>!0,summonKinds:fn,filter:n.summonFilter})),n.defaultStatus&&this.statusOperatorBundle.push(new R({title:"default",validateAlive:()=>!0,isContinuous:!0,isSpawnedBy:this,actionAttr:{},isApplicableTo:()=>!0,statusCalculator:()=>n.defaultStatus??{}})),this.actions.push(...n.actions.map(u=>ne.createNew(this,u))),this.immediatelyActions.push(...(n.immediatelyActions??[]).map(u=>tt.createNew(this,u))),this.continuousEffects.push(...c.map(u=>Ie.createNew(this,u)))}get isUnderControl(){return this.face==="FaceUp"||jt.every(e=>e!==this.fieldCell.cellType)}get controller(){return this.fieldCell.owner??this.owner}get field(){return this.owner.duel.field}get duel(){return this.owner.duel.field.duel}get actionLogRecords(){return this.duel.chainBlockLog.records.filter(e=>e.chainBlockInfo.action.entity===this)}get status(){return this._status}set status(e){this._status={...e}}get numericStatus(){return this._numericStatus}get info(){return this._info}get kind(){return this.info.kind}get nm(){return this.status.name}get atk(){return this._numericStatus.calculated.attack}get def(){return this._numericStatus.calculated.defense}get lvl(){return this._numericStatus.calculated.level}get rank(){return this._numericStatus.calculated.rank}get attr(){return this.status.attributes??[]}get types(){return this.status.types??[]}get psL(){return this._numericStatus.calculated.pendulumScaleL}get psR(){return this._numericStatus.calculated.pendulumScaleR}get linkArrows(){let e=(this.origin.linkArrowKeys??[]).map(i=>Gt[i].linkArrow);return this.controller.seat==="Above"&&(e=e.map(i=>({offsetColumn:i.offsetColumn*-1,offsetRow:i.offsetRow*-1}))),e}get linkArrowDests(){var e;return(e=this.origin.monsterCategories)!=null&&e.includes("Link")?this.isOnFieldAsMonsterStrictly?this.linkArrows.map(i=>[this.fieldCell.row+i.offsetRow,this.fieldCell.column+i.offsetColumn]).map(([i,a])=>this.field.cells[i][a]).filter(i=>i.isMonsterZoneLikeCell):[]:[]}get linkedEntities(){return this.isOnFieldAsMonsterStrictly?[...this.linkArrowDests.map(e=>e.cardEntities[0]).map(e=>e),...this.fieldCell.linkArrowSources].getDistinct():[]}get coLinkedEntities(){var e;return this.isOnFieldAsMonsterStrictly?(e=this.origin.monsterCategories)!=null&&e.includes("Link")?this.linkArrowDests.map(i=>i.cardEntities[0]).filter(i=>i).union(this.fieldCell.linkArrowSources):[]:[]}get isEffective(){return this.status.isEffective&&this.info.isEffectiveIn.includes(this.fieldCell.cellType)}get canBeSet(){var e;return this.entityType==="Card"&&!((e=this.status.monsterCategories)!=null&&e.includes("Link"))}get isEffectiveWeakly(){return this.status.isEffective}get battlePosition(){if(this.isOnFieldStrictly&&this.kind==="Monster")return this.orientation==="Vertical"?"Attack":this.face==="FaceUp"?"Defense":"Set"}get battlePositionName(){const e=this.battlePosition;if(e)return Ae[e]}get wasMovedAtCurrentProc(){return this.field.duel.clock.totalProcSeq===this.moveLog.latestRecord.movedAt.totalProcSeq}get wasMovedAtPreviousProc(){return this.field.duel.clock.totalProcSeq===this.moveLog.latestRecord.movedAt.totalProcSeq+1}get wasMovedAtCurrentTurn(){return this.field.duel.clock.isSameTurn(this.moveLog.latestRecord.movedAt)}get wasMovedAtCurrentChain(){return this.field.duel.clock.isSameChain(this.moveLog.latestRecord.movedAt)}get wasMovedAtPreviousChain(){return this.field.duel.clock.isPreviousChain(this.moveLog.latestRecord.movedAt)}get wasMovedAtPreviousTurn(){return this.field.duel.clock.isPreviousTurn(this.moveLog.latestRecord.movedAt)}get wasMovedFrom(){return this.moveLog.previousPlaceRecord.cell}get isPendulumScale(){var e;return!(!((e=this.origin.monsterCategories)!=null&&e.includes("Pendulum"))||!this.isOnField||!this.fieldCell.isSpellTrapZoneLikeCell||this.status.spellCategory)}get isOnField(){return this.fieldCell.isPlayFieldCell}get isOnFieldStrictly(){return this.isOnField&&!this.info.isPending&&!this.info.isDying&&this.kind!=="XyzMaterial"}get isOnFieldAsMonsterStrictly(){return this.fieldCell.isMonsterZoneLikeCell&&this.isOnFieldStrictly}get isMonster(){return this.isOnFieldAsMonsterStrictly||this.kind==="Monster"}get isOnFieldAsSpellTrapStrictly(){return this.isOnFieldStrictly&&(this.kind==="Spell"||this.kind==="Trap")}get isInTrashCell(){return this.fieldCell.isTrashCell}get isLikeContinuousSpell(){return this.status.spellCategory==="Continuous"||this.status.spellCategory==="Field"||this.status.spellCategory==="Equip"||this.status.trapCategory==="Continuous"||(this.status.monsterCategories??[]).includes("Pendulum")}get isBelongTo(){return this.origin.monsterCategories&&this.origin.monsterCategories.union(Pe).length?this.owner.getExtraDeck():this.owner.getDeckCell()}get exist(){return this._exists}get allStickyEffectOperators(){return[...this.procFilterBundle.effectiveOperators,...this.numericOprsBundle.effectiveOperators]}get fusionMaterialInfos(){return this.definition.fusionMaterialInfos??[]}};o(P,"nextEntitySeq",0),o(P,"splitBattlePos",e=>({face:e==="Set"?"FaceDown":"FaceUp",orientation:e==="Attack"?"Vertical":"Horizontal"})),o(P,"recreateArray",(e,i)=>{if(!i.length)return[];const a=e.getAllCells().flatMap(n=>n.entities);return i.map(n=>n.seq).map(n=>a.find(r=>r.seq===n)).filter(n=>n!==void 0)}),o(P,"createPlayerEntity",e=>{const i=e.getHandCell();return new P(e,i,"Duelist",Es(e),"FaceUp","Vertical")}),o(P,"createCardEntity",(e,i)=>{const a=i.staticInfo.monsterCategories&&i.staticInfo.monsterCategories.union(Pe).length?e.getExtraDeck():e.getDeckCell();return new P(e,a,"Card",i,"FaceDown","Vertical")}),o(P,"createTokenEntity",(e,i,a)=>new P(e,e.duel.field.getWaitingRoomCell(),"Token",a,"FaceUp","Vertical",i)),o(P,"moveMany",async(e,i)=>{if(!e.length)return;const a=e[0].entity.duel,r=[...e.filter(l=>l.entity.fieldCell!==l.to).map(l=>l.entity).filter(l=>!(i??[]).includes(l)),...a.field.getCardsOnFieldStrictly().filter(l=>l.info.isDying)],s=new Map;for(e.forEach(({entity:l,to:c,kind:u,face:d,orientation:p,pos:f,...h})=>{var ue;let y=c,E=u,g=d,A=f,H=p;l.status.willBeBanished?(y=l.owner.getBanished(),g="FaceUp",H="Vertical"):l.status.willReturnToDeck?(y=l.isBelongTo,g="FaceDown",A=l.status.willReturnToDeck,H="Vertical"):(ue=l.status.monsterCategories)!=null&&ue.includes("Pendulum")&&l.isOnField&&!l.info.isPending&&l.kind!=="XyzMaterial"&&l.face==="FaceUp"&&c.isTrashCell&&(y=l.owner.getExtraDeck(),g="FaceUp",A="Top",H="Vertical"),y.cellType==="ExtraDeck"&&(A=g==="FaceUp"?"Top":"Bottom"),l.isBelongTo.cellType==="ExtraDeck"&&(y.cellType==="Hand"||y.cellType==="Deck")&&(y=l.isBelongTo,g="FaceDown",H="Vertical"),y.isPlayFieldCell||(E=l.origin.kind,l.entityType==="Token"&&(y=l.field.getWaitingRoomCell())),y.isMonsterZoneLikeCell||(H="Vertical"),s.set(y,[{entity:l,to:y,kind:E,face:g,orientation:H,pos:A,...h},...s.get(y)??[]])});;){const l=Array.from(s.values()).map(u=>u.pop()).filter(u=>u!==void 0).map(u=>u.entity._move(u));if(!l.length)break;await Promise.all(l);const c=a.field.getDyingCardsOnField().filter(u=>!r.includes(u)).map(u=>({entity:u,movedAs:u.info.causeOfDeath??[],movedBy:u.info.isKilledBy,activator:u.info.isKilledByWhom}));c.length&&await P.sendManyToGraveyard(c,r)}P.settleEntityMove(a)}),o(P,"summonMany",async(e,i,a,n,r)=>{if(!e.length)return;const s={Attack:"AttackSummon",Defense:"DefenseSummon",Set:"SetSummon"},l=e.map(({monster:c,dest:u,pos:d,summoner:p})=>{if(c.info.summonKinds=[i],i==="NormalSummon"||i==="AdvanceSummon"){c.info.summonKinds.push("NormalSummon");const y=i==="AdvanceSummon"?"アドバンス":"";d==="Attack"?c.field.duel.log.info(`${c.toString()}を${y}召喚`,p):c.duel.log.info(`${c.toString()}を${y}セット`,p),a.includes("Rule")?p.info.ruleNormalSummonCountQty++:p.info.effectNormalSummonCountQty++}else i==="SpecialSummon"?c.duel.log.info(`${c.toString()}を${Ae[d]}で特殊召喚`,p):(c.info.summonKinds.push("SpecialSummon"),c.duel.log.info(`${c.toString()}を${Ae[d]}で${pn[i]}！`,p)),p.info.specialSummonCountQty++;c.info.summonKinds=c.info.summonKinds.getDistinct(),c.info.battlePotisionChangeCount=1;const{face:f,orientation:h}=P.splitBattlePos(d);return a.includes("Rule")&&(c.info.isPending=!0),{entity:c,args:{to:u,kind:"Monster",face:f,orientation:h,pos:"Top",movedAs:[i,s[d],...a],movedBy:n,actionOwner:r,chooser:p}}}).map(c=>c.entity._move(c.args));await Promise.all(l),e.map(c=>c.summoner).forEach(c=>{i==="NormalSummon"||i==="AdvanceSummon"?a.includes("Rule")?c.info.ruleNormalSummonCount++:c.info.effectNormalSummonCount++:c.info.specialSummonCount++}),P.settleEntityMove(e[0].monster.duel)}),o(P,"sendManyToGraveyard",(e,i)=>P.bringManyToSameCell("Graveyard","Top",e.map(a=>({...a,face:"FaceUp",orientation:"Vertical"})),i)),o(P,"bringManyToSameCell",async(e,i,a,n)=>(await P.moveMany(a.map(r=>({...r,to:r.entity.field.getCells(e).filter(s=>s.owner===r.entity.owner)[0],kind:r.entity.origin.kind,pos:i,chooser:r.activator,actionOwner:r.activator})),n),a.map(r=>r.entity).filter(r=>r.fieldCell.cellType===e))),o(P,"settleEntityMove",e=>{e.field.recalcLinkArrows(),e.distributeOperators(e.clock);const i=e.field.getAllEntities().filter(a=>a.wasMovedAtCurrentProc);i.filter(a=>!a.isOnFieldStrictly&&!a.info.isPending).forEach(a=>a.resetInfoIfLeavesTheField()),i.filter(a=>a.face==="FaceDown").filter(a=>a.fieldCell===a.isBelongTo).forEach(a=>{a.resetInfoAll(),a.resetStatusAll()}),i.flatMap(a=>a.continuousEffects).forEach(a=>a.updateState()),e.field.getAllCells().filter(a=>a.needsShuffle).map(a=>a.shuffle())});let k=P;k.prototype.hasBeenSummonedNow=function(t,e=["Attack","Defense"]){const i=this,a=e.map(It),n=i.moveLog.latestRecord.movedAs;return!(!i.wasMovedAtPreviousChain||!n.union(t).length||!n.union(a).length)};k.prototype.hasBeenSummonedJustNow=function(t,e=["Attack","Defense"]){const i=this,a=e.map(It),n=i.moveLog.latestRecord.movedAs;return!(!i.wasMovedAtPreviousProc||!n.union(t).length||!n.union(a).length)};k.prototype.getAttackTargets=function(){const t=this.controller.getOpponentPlayer().getMonstersOnField().filter(e=>e.status.isSelectableForAttack);return(this.status.canDirectAttack||!t.length)&&t.push(this.controller.getOpponentPlayer().entity),t.filter(e=>e.canBeTargetOfBattle(this.controller,this)).filter(e=>this.procFilterBundle.filter(["BattleTarget"],this.controller,this,{},[e]))};k.prototype.canBeEffected=function(t,e,i){return this.procFilterBundle.filter(["Effect"],t,e,i,[this])};const yn=(t,e,i,a,n)=>t.canBeEffected(i,a,n)&&t.procFilterBundle.filter([e],i,a,n,[t]);k.prototype.canBeTargetOfEffect=function(t){return this.procFilterBundle.filter(["EffectTarget"],t.activator,t.action.entity,t.action,[this])};k.prototype.canBeBanished=function(t,e,i,a){return this.fieldCell.cellType==="Banished"?!1:yn(this,t,e,i,a)};k.prototype.canBeTargetOfBattle=function(t,e){return this.procFilterBundle.filter(["BattleTarget"],t,e,{},[this])};k.prototype.validateDestory=function(t,e,i,a){let n=this.procFilterBundle.filter([t],e,i,a??{},[this]);return n&&t==="EffectDestroy"&&(n=this.canBeEffected(e,i,a)),n};k.prototype.getIndexInCell=function(){const t=this;if(t.info.isVanished)return-1;const e=t.fieldCell.cardEntities.indexOf(t);if(e<0)throw new m("エンティティとセルの状態が矛盾している。",[t,t.fieldCell]);return e};k.prototype.getXyzMaterials=function(){const t=this;return(t.status.monsterCategories??[]).includes("Xyz")?t.fieldCell.xyzMaterials:[]};k.prototype.wasMovedAfter=function(t){return this.moveLog.latestRecord.movedAt.totalProcSeq>t.totalProcSeq};k.prototype.hadArrivedToFieldAt=function(){let t=this.moveLog.latestRecord.movedAt;return this.moveLog.records.findLast(e=>!e.cell.isPlayFieldCell||e.isPending||e.kind!==this.kind||e.face==="FaceDown"?!0:(t=e.movedAt,!1)),t};k.prototype.release=async function(t,e,i){return await this.sendToGraveyard([...t,"Release"],e,i),this.info.isVanished?void 0:this.fieldCell};k.prototype.ruleDestory=async function(){return await this.sendToGraveyard(["RuleDestroy"],void 0,void 0),this.info.isVanished?void 0:this.fieldCell};k.prototype.sendToGraveyard=async function(t,e,i){await v.sendManyToGraveyardForTheSameReason([this],t,e,i)};k.prototype.discard=async function(t,e,i){await v.discardManyForTheSameReason([this],t,e,i)};k.prototype.returnToDeck=async function(t,e,i,a){await v.returnManyToDeckForTheSameReason(t,[this],e,i,a)};k.prototype.banish=async function(t,e,i){await v.banishManyForTheSameReason([this],t,e,i)};class mn{constructor(e){o(this,"cells");o(this,"duel");o(this,"summonFilterPool");o(this,"procFilterPool");o(this,"numericStateOperatorPool");o(this,"statusOperatorPool");o(this,"damageFilterPool");o(this,"moveLog");o(this,"getAllCells",()=>this.cells.flat());o(this,"getCells",(...e)=>this.getAllCells().filter(i=>e.includes(i.cellType)));o(this,"getAvailableExtraMonsterZones",()=>this.getCells("ExtraMonsterZone").filter(e=>e.isAvailable));o(this,"getWaitingRoomCell",()=>this.getCells("WaitingRoom")[0]);o(this,"getAllEntities",()=>this.getAllCells().map(e=>e.entities).flat());o(this,"getAllCardEntities",()=>this.getAllCells().map(e=>e.cardEntities).flat());o(this,"getCardsOnFieldStrictly",()=>this.getCells(...Q).map(e=>e.cardEntities).filter(e=>e.length>0).map(e=>e[0]).filter(e=>e.isOnFieldStrictly));o(this,"getMonstersOnFieldStrictly",()=>this.getCardsOnFieldStrictly().filter(e=>e.isOnFieldAsMonsterStrictly));o(this,"getSpellTrapsOnFieldStrictly",()=>this.getCardsOnFieldStrictly().filter(e=>e.isOnFieldAsSpellTrapStrictly));o(this,"getPendulumScalesOnFieldStrictly",()=>this.getCardsOnFieldStrictly().filter(e=>{var i;return(i=e.origin.monsterCategories)==null?void 0:i.includes("Pendulum")}).filter(e=>e.isOnFieldAsSpellTrapStrictly).filter(e=>!e.status.spellCategory));o(this,"getPendingCardsOnField",()=>this.getCells(...Q).map(e=>e.cardEntities).filter(e=>e.length>0).map(e=>e[0]).filter(e=>e.info.isPending));o(this,"getDyingCardsOnField",()=>this.getCells(...Q).flatMap(e=>[...e.cardEntities,...e.xyzMaterials]).filter(e=>e.info.isDying));o(this,"getPendingMonstersOnField",()=>this.getPendingCardsOnField().filter(e=>e.kind==="Monster"));o(this,"getEntities",e=>this.getAllEntities().filter(i=>i.controller===e));o(this,"recalcLinkArrows",()=>{const e=this.getAllCells().filter(i=>i.isMonsterZoneLikeCell);e.some(i=>i.recalcLinkArrows)&&e.forEach(i=>i.recalcLinkArrows())});o(this,"canExtraLink",(e,i)=>{if(!e.linkArrows.length)return!1;const a=i.map(u=>u.material),n=this.getCells("ExtraMonsterZone").filter(u=>u.isAvailable||a.includes(u.cardEntities[0]));if(n.length!==1)return!1;const r=n[0],s=e.linkArrows.map(u=>this.cells[r.row+u.offsetRow][r.column+u.offsetColumn]);let l=r.linkArrowSources.filter(u=>!a.includes(u)).filter(u=>s.includes(u.fieldCell));if(!l.length)return!1;let c=-1;for(;c!==l.length;){const u=l.flatMap(d=>d.coLinkedEntities).filter(d=>!a.includes(d));if(u.some(d=>d.fieldCell.cellType==="ExtraMonsterZone"))return!0;l=[...l,...u].getDistinct(),c=l.length}return!1});o(this,"drawAtSameTime",async(e,i,a,n,r,s)=>{const l=[],c=[],u=[e.draw(i,r,s),a.draw(n,r,s)].map(d=>d.catch(p=>{p instanceof O?p.winner&&l.push(p.winner):c.push(p)}));if(await Promise.all(u),c.length)throw new m("ドロー処理で想定されない例外が発生した。",e,i,a,n,r,...c);if(l.length!==0)throw l.length===1?new O(l[0],`${l[0].getOpponentPlayer().name}がデッキからドローできなかった。`):new O(void 0,"お互いにデッキからカードをドローできなかった。")});o(this,"sendToGraveyard",async(e,i,a,n,r,s,l,c)=>{if(n>0&&a.length<n)return;const u=await this.duel.view.waitSelectEntities(i,{selectables:a,qty:n,validator:r,cancelable:c??!1},e);if(u)return await k.sendManyToGraveyard(u.map(d=>({entity:d,movedAs:s,movedBy:l,activator:i}))),this.duel.log.info(`${u.map(d=>d.status.name).join(", ")}を墓地に送った（${s.getDistinct().join(", ")}）。`,i),u});this.duel=e,this.cells=[...Array(7)].map(()=>[]);for(const i of Object.keys(Ye).map(Number))for(const a of Object.keys(Ye[i]).map(Number))this.cells[i][a]=new Ea(this,i,a,i<3?e.duelists.Above:i>3?e.duelists.Below:a<2?e.duelists.Above:a>4?e.duelists.Below:void 0);this.summonFilterPool=new nn,this.procFilterPool=new Da,this.numericStateOperatorPool=new Aa,this.statusOperatorPool=new tn,this.damageFilterPool=new on,this.moveLog=new Za(this)}}const kt=t=>{let e=[];do{const i=t.qty&&t.qty>0?t.qty:Math.floor(Math.random()*t.selectables.length+1);e=t.selectables.randomPickMany(i)}while(!t.validator(e));return e};class vn{constructor(e){o(this,"onStateChangeEvent",new M);o(this,"_stateLog",[]);o(this,"_state");this._stateLog.push({state:e,timestamp:new Date}),this._state=e}get stateLog(){return this._stateLog}get wasSpawnedAt(){return this.stateLog[0].timestamp}get onStateChange(){return this.onStateChangeEvent.expose()}get state(){return this._state}set state(e){this._stateLog.push({state:e,timestamp:new Date}),this._state=e,this.onStateChangeEvent.trigger(e)}}class Dt{constructor(e,i){o(this,"_dispose");o(this,"_commit");o(this,"commit",()=>this._commit());this._dispose=e,this._commit=i}[Symbol.dispose](){this._dispose()}[Symbol.for("Symbol.dispose")](){this._dispose()}}class Sn{constructor(e){o(this,"onUpdateEvent",new M);o(this,"nextSeq");o(this,"records",[]);o(this,"_state","Opened");o(this,"pooledRecords",[]);o(this,"duel");o(this,"openTransaction",()=>this._state!=="Opened"?(console.info("ログの二重トランザクションを開始しようとしたため、ダミーを返す。"),new Dt(()=>{},()=>{})):(this._state="Pending",new Dt(this.closeTransaction,this.commit)));o(this,"commit",()=>{if(this._state!=="Pending")throw new m("DuelLog is not in Pending state.");this.records.push(...this.pooledRecords),this.pooledRecords=[],this.onUpdateEvent.trigger(this.nextSeq-1)});o(this,"closeTransaction",()=>{this._state="Opened",this.pooledRecords=[],this.onUpdateEvent.trigger(this.nextSeq-1)});o(this,"dispose",()=>{this.onUpdateEvent.clear()});o(this,"error",e=>{const i=["エラー発生"];e instanceof Error?(e instanceof m&&(i.push("-- エラーメッセージ --"),i.push(e.message),i.push("-- 関連オブジェクト --"),e.items.forEach(a=>i.push(JSON.stringify(a)))),i.push("-- エラー名称 --"),i.push(e.name||"エラー名称取得失敗"),i.push("-- スタックトレース --"),i.push(e.stack||"スタックトレース取得失敗")):(i.push("-- エラー型特定失敗 --"),i.push(JSON.stringify(e))),console.error(e),console.error(i),this.write("error","System",i,void 0)});o(this,"warn",e=>{this.write("warn","System",["【注意】",e],void 0)});o(this,"info",(e,i)=>{this.write("info","Others",[e],i)});o(this,"pushChainBlockHeaderLog",(e,i,a)=>{this.write("info","ChainBlockHeader",[a],e,{chainNumber:i})});o(this,"pushMoveLog",(e,i,a,n)=>{const r=a.cellType==="WaitingRoom"?void 0:a,s=n.cellType==="WaitingRoom"?void 0:n;if(!r&&!s)throw new m("移動元、移動先ともにWaitingRoomが指定されている。",e,i,a,n);const l=r&&s?"EntityMove":s?"EntityAppear":"EntityDisappear";this.write("info",l,[],e,{mainEntity:i,from:r,to:s})});o(this,"write",(e,i,a,n,r={})=>{const s=a.join(`
`),l={seq:this.nextSeq++,lvl:e,type:i,clock:this.duel.clock.getClone(),text:s,duelist:n,subEntities:[],...r};this._state==="Opened"||e!=="info"?(this.records.push(l),this.onUpdateEvent.trigger(this.nextSeq-1)):this.pooledRecords.push(l)});this.nextSeq=0,this.duel=e}get onUpdate(){return this.onUpdateEvent.expose()}get lastRecord(){return this.records.slice(-1)[0]}}class Ve{constructor(e){o(this,"onUpdateEvent",new M);o(this,"_state","Disable");o(this,"defaultArgs");o(this,"_args");o(this,"resolve",()=>{});o(this,"show",e=>{this._args=e,this._state="Shown",this.onUpdateEvent.trigger();const{promise:i,resolve:a}=Jt();return this.resolve=n=>{this._state="Disable",a(n),this.resolve=()=>{},this.onUpdateEvent.trigger()},i});o(this,"cancel",()=>{console.log(this),this.args.cancelable&&(this._state!=="Disable"&&this.resolve(void 0),this.terminate())});o(this,"terminate",()=>{this._state="Disable",this._args=this.defaultArgs,this.resolve=()=>{}});this.defaultArgs=e,this._args=e}get onUpdate(){return this.onUpdateEvent.expose()}get state(){return this._state}get args(){return this._args}}class Cn{constructor(e){o(this,"onUpdateEvent",new M);o(this,"actionSelector",new Ve({title:"カード操作を選択。",activator:void 0,dummyActionInfos:[],cancelable:!1}));o(this,"entitySelector",new Ve({title:"対象を選択",entitiesChoices:{selectables:[],validator:()=>!0,cancelable:!1},cancelable:!1,chainBlockInfos:[]}));o(this,"textSelector",new Ve({title:"カード操作を選択。",choises:[],cancelable:!1}));o(this,"modals",[this.actionSelector,this.entitySelector,this.textSelector]);o(this,"view");o(this,"terminateAll",()=>{this.modals.forEach(e=>e.terminate()),this.onUpdateEvent.trigger()});this.view=e,this.modals.forEach(i=>i.onUpdate.append(()=>this.onUpdateEvent.trigger()))}get onUpdate(){return this.onUpdateEvent.expose()}}const Tn=[{seq:10,name:"Internet Explorer",key:"msie"},{seq:20,name:"Internet Explorer",key:"trident"},{seq:30,name:"Edge",key:"edge"},{seq:40,name:"Google Chrome",key:"chrome"},{seq:50,name:"Safari",key:"safari"},{seq:60,name:"Mozilla Firefox",key:"firefox"},{seq:70,name:"Opera",key:"opera"}],_n=[{seq:10,name:"Microsoft Windows",key:"windows nt"},{seq:20,name:"Android",key:"android"},{seq:30,name:"iOS",key:"iphone"},{seq:40,name:"iOS",key:"ipad"},{seq:50,name:"macOS",key:"mac os x"}],Ee=window.navigator.userAgent.toLowerCase();var Lt;const En=((Lt=Tn.find(t=>Ee.indexOf(t.key)!==-1))==null?void 0:Lt.name)??"Unknown Browser";var qt;const ut=((qt=_n.find(t=>Ee.indexOf(t.key)!==-1))==null?void 0:qt.name)??"Unknown OS",ei=Ee.indexOf("iphone")!==-1||ut==="Android"&&Ee.indexOf("mobile")!==-1,wn=Ee.indexOf("ipad")!==-1||ut==="Android"&&!ei,xt=ei?"Smart Phone":wn?"Tablet Device":"PC",We={canDragElement:xt==="PC",text:`${xt} ${ut} ${En}`};class bn{constructor(e){o(this,"onDuelUpdateEvent",new M);o(this,"requireUpdate",()=>{this.onDuelUpdateEvent.trigger()});o(this,"onWaitStartEvent",new M);o(this,"onWaitEndEvent",new M);o(this,"onDragStartEvent",new M);o(this,"onDragEndEvent",new M);o(this,"onAnimationStartEvent",new M);o(this,"onShowCardEntityEvent",new M);o(this,"duel");o(this,"modalController");o(this,"_message");o(this,"waitMode");o(this,"infoBoardState");o(this,"infoBoardCell");o(this,"getCell",(e,i)=>this.duel.field.cells[e][i]);o(this,"showCardInfo",(e,i)=>{this.onShowCardEntityEvent.trigger({card:e,mode:i})});o(this,"dispose",()=>{this.onDragStartEvent.clear(),this.onDragEndEvent.clear(),this.onDuelUpdateEvent.clear(),this.onWaitStartEvent.clear(),this.onWaitEndEvent.clear()});o(this,"waitFieldAction",async e=>{if(this.duel.getTurnPlayer().duelistType==="NPC"){const r=this.duel.getTurnPlayer().selectActionForNPC(e,[]);return r?{actionInfo:r}:{phaseChange:this.duel.nextPhaseList[0]}}const i=await this._waitDuelistAction(this.duel.getTurnPlayer(),e,"Free","",void 0,void 0,!1);if(!i.actionInfo)return{...i,actionInfo:void 0};const a={...i.actionInfo},n=e.find(r=>{var s;return((s=i.actionInfo)==null?void 0:s.originSeq)===r.originSeq});if(!n)throw new m("想定されない状態",e,i);return{...i,actionInfo:{dest:a.dest,battlePosition:a.battlePosition,action:n.action,originSeq:n.originSeq}}});o(this,"waitQuickEffect",async(e,i,a,n,r)=>{if(i.length===0)return;if(e.duelistType==="NPC")return e.selectActionForNPC(i,a);const s=[this.modalController.actionSelector.show({title:n,activator:e,dummyActionInfos:i,cancelable:r}),this._waitDuelistAction(e,i,"Modal",this.message,void 0,void 0,!1).then(u=>u.actionInfo)],l=await Promise.any(s);if(!l)return;this.infoBoardState="Default";const c=i.find(u=>l.originSeq===u.originSeq);if(!c)throw new m("想定されない状態",l);return{...c,dest:l.dest}});o(this,"waitSubAction",async(e,i,a,n=!1)=>{if(e.duelistType==="NPC")throw Error("Not implemented");const r=await this._waitDuelistAction(e,i,"Modal",a,void 0,void 0,n);if(r&&r.actionInfo)return r.actionInfo});o(this,"waitSelectEntities",async(e,i,a)=>{if(!i.selectables.length)return;if(i.qty&&i.selectables.length===i.qty)return[...i.selectables];if(e.duelistType==="NPC")return kt(i);let n;i.selectables.some(s=>s.entityType==="Duelist")&&(n={...i,selectables:i.selectables.filter(s=>s.entityType==="Duelist").map(s=>s.fieldCell),qty:1,validator:s=>s.length===1});const r=await this._waitDuelistAction(e,[],"Modal",a,i,n,i.cancelable);return(r.selectedEntities||r.selectedCells)&&[...r.selectedEntities??[],...(r.selectedCells??[]).flatMap(s=>s.entities).filter(s=>s.entityType==="Duelist")]});o(this,"waitSelectNumber",async(e,i,a,n)=>{const r=await this.waitSelectText(e,a.getDistinct().toSorted().map(s=>({seq:s,text:s.toString()})),i,n);if(r)return r.seq});o(this,"waitYesOrNo",async(e,i)=>{const a=await this.waitSelectText(e,[{seq:0,text:"Yes"},{seq:1,text:"No"}],i,!1);return(a==null?void 0:a.seq)===0});o(this,"waitSelectText",async(e,i,a,n=!1)=>{if(e.duelistType==="NPC")return i.randomPick();const r=await this.modalController.textSelector.show({title:a,choises:i,cancelable:n});if(r===void 0){if(!n)throw new D(e,i,a,n);return}return i.find(s=>s.seq===r)});o(this,"waitAnimation",async e=>{var i;return this._message="",this.waitMode="Animation",window.getSelection&&((i=window.getSelection())==null||i.removeAllRanges()),this.onDuelUpdateEvent.trigger(),new Promise(a=>this.onAnimationStartEvent.trigger({...e,resolve:a}))});o(this,"waitTokenAnimation",async()=>{this.requireUpdate(),await Be(450)});o(this,"setDraggingActions",e=>{this.onDragStartEvent.trigger(e),this.requireUpdate()});o(this,"removeDraggingActions",()=>{this.onDragEndEvent.trigger()});o(this,"waitSelectAction",async(e,i,a,n)=>{var c;const r=i.map(u=>ne.createDummyAction(u.entity,u.title,[],void 0,u.origin)),s=await this._waitDammyAction(e,r,a,n);if(!s)return;const l=(c=i.find(u=>u.origin.seq===s.originSeq))==null?void 0:c.origin;if(!l)throw new m("想定されない状態",i,s);return l});o(this,"waitSelectSummonDestination",async(e,i,a,n,r)=>{const s=a.length>1&&We.canDragElement?"カードを召喚先へドラッグ。":"表示形式を選択。";if(!a.length&&!n.length){if(r)return;throw new m("想定されない状態",e,i,a,n,r)}let l=[...n];for(;;){const c={dest:a.randomPick(),battlePosition:l[0]};if(l.length===1&&!We.canDragElement){const p=await this.waitSelectCell(e,a,r,"召喚先を選択。");return p?{...c,dest:p}:void 0}const u=l.map(p=>ne.createDummyAction(i,p,a,p)),d=await this._waitDammyAction(e,u,s,r);if(!d)return;if(d.battlePosition&&(l=[d.battlePosition]),!(a.length>1&&!d.dest))return c.dest=d.dest??c.dest,c.battlePosition=d.battlePosition??c.battlePosition,c}});o(this,"waitSelectDestination",async(e,i,a,n,r,s=!1)=>{if(!a.length)return;if(a.length===1)return a[0];if(!We.canDragElement)return await this.waitSelectCell(e,a,s,n);let l=a.randomPick();const c=[ne.createDummyAction(i,r,a,void 0)],u=await this._waitDammyAction(e,c,n,s);if(u)return l=u.dest??l,l});o(this,"_waitDammyAction",async(e,i,a,n=!1)=>{if(!i.length)return;const r=i.randomPick();let s={...r,dest:r.dest??r.dests.randomPick()};if(e.duelistType!=="NPC"){const l=[this.modalController.actionSelector.show({title:a,activator:e,dummyActionInfos:i,cancelable:n}),this.duel.view.waitSubAction(e,i,a,n)],c=await Promise.any(l);if(!c&&!n)throw new D(c,l);if(!c)return;s=c??s}return s});o(this,"waitSelectCell",async(e,i,a,n)=>i.length?e.duelistType==="NPC"?i.randomPick():(await this.waitSelectCells(e,{selectables:i,qty:1,validator:s=>s.length===1,cancelable:a},n)??[])[0]:void 0);o(this,"waitSelectCells",async(e,i,a)=>{if(!i.selectables.length)return;if(e.duelistType==="NPC")return kt(i);const n=await this._waitDuelistAction(e,[],"Modal",a,void 0,i,i.cancelable);if((!n||!n.selectedCells)&&!i.cancelable)throw new D(e,i,a);return n.selectedCells});o(this,"_waitDuelistAction",async(e,i,a,n,r,s,l=!1)=>{for(this.waitMode=a,this._message=n;this.onDuelUpdateEvent.length<38;)console.log("this.onDuelUpdateEvent.length",this.onDuelUpdateEvent.length),await Be(1);this.onDuelUpdateEvent.trigger();const c=Jt(),u={resolve:c.resolve,activator:e,dummyActionInfos:i,chainBlockInfos:e.duel.chainBlockInfos,entitiesChoices:r,cellsChoices:s};console.info("wait start",u),this.onWaitStartEvent.trigger(u);const d=await c.promise;if(console.info("response",d),this.modalController.terminateAll(),this.waitMode="None",this.onWaitEndEvent.trigger(),d.surrender)throw new O(e.getOpponentPlayer(),`${e.profile.name}がサレンダーした。`);if(!l&&d.cancel)throw new m("キャンセル不可のアクションがキャンセルされた。",d,i,a,r,s);return this.infoBoardState="Default",d});this.duel=e,this._message="",this.waitMode="None",this.infoBoardState="Default",this.infoBoardCell=e.duelists.Below.getExtraDeck(),this.modalController=new Cn(this)}get onDuelUpdate(){return this.onDuelUpdateEvent.expose()}get onWaitStart(){return this.onWaitStartEvent.expose()}get onWaitEnd(){return this.onWaitEndEvent.expose()}get onDragStart(){return this.onDragStartEvent.expose()}get onDragEnd(){return this.onDragEndEvent.expose()}get onAnimation(){return this.onAnimationStartEvent.expose()}get onShowCardEntity(){return this.onShowCardEntityEvent.expose()}get message(){var e;return(this._message||((e=this.duel.log.records.filter(i=>i.type==="Others"||i.type==="System").slice(-1)[0])==null?void 0:e.text))??""}}const it=["turn","phaseSeq","stepSeq","stageSeq","chainSeq","chainBlockSeq","procSeq"];[...it];const $e=class $e{constructor(){o(this,"onClockChangeEvents",{turn:new M,phaseSeq:new M,stepSeq:new M,stageSeq:new M,chainSeq:new M,chainBlockSeq:new M,procSeq:new M});o(this,"_turn",0);o(this,"_phaseSeq",0);o(this,"_stepSeq",0);o(this,"_stageSeq",0);o(this,"_chainSeq",0);o(this,"_chainBlockSeq",0);o(this,"_procSeq",0);o(this,"_totalProcSeq",0);o(this,"_periodKey");o(this,"_previousStartPoints",{turn:0,phaseSeq:0,stepSeq:0,stageSeq:0,chainSeq:0,chainBlockSeq:0,procSeq:0});o(this,"_currentStartPoints",{turn:0,phaseSeq:0,stepSeq:0,stageSeq:0,chainSeq:0,chainBlockSeq:0,procSeq:0});o(this,"setPhase",(e,i)=>{const a=Object.values(ie).filter(n=>n.phase===i).find(n=>(n.step??"start")==="start");if(!a)throw new m("想定されない状態",this.period,i,ie);i==="draw"?(this.turn>0&&e.log.info("ターン終了。",e.getTurnPlayer()),this._turn++,this._phaseSeq=0):(e.log.info(`フェイズ移行（${this.period.name}→${a.name}）`,e.getTurnPlayer()),this._phaseSeq++),this._stepSeq=0,this._stageSeq=0,this.periodKey=a.key});o(this,"setStep",(e,i)=>{const a=this.period.phase,n=Object.values(ie).filter(r=>r.phase===a).find(r=>(r.step??"")===i);if(!n)throw new m("想定されない状態",this.period,i,ie);this.period.name!==n.name&&(e.log.info(`ステップ移行（${this.period.name}→${n.name}）`,e.getTurnPlayer()),this._stepSeq++,this._stageSeq=0,this.periodKey=n.key)});o(this,"setStage",(e,i)=>{const a=this.period,n=Object.values(ie).filter(r=>r.phase===a.phase).filter(r=>r.step===a.step).find(r=>(r.stage??"")===i);if(!n)throw new m("想定されない状態",this.period,i,ie);e.log.info(`タイミング移行（${this.period.name}→${n.name}）`,e.getTurnPlayer()),this._stageSeq++,this.periodKey=n.key});o(this,"incrementChainSeq",()=>{this._chainSeq++,this._chainBlockSeq=0,this._procSeq=0,this.incrementTotalProcSeq()});o(this,"incrementChainBlockSeq",()=>{this._chainBlockSeq++,this._procSeq=0,this.incrementTotalProcSeq()});o(this,"incrementProcSeq",()=>{this._procSeq++,this.incrementTotalProcSeq()});o(this,"incrementTotalProcSeq",()=>{this._totalProcSeq++;let e=!0;it.toReversed().forEach(i=>{e&&(this._previousStartPoints[i]=this.currentStartPoints[i],this._currentStartPoints[i]=this.totalProcSeq),e=e&&this[i]===0}),it.toReversed().filter(i=>this._currentStartPoints[i]===this.totalProcSeq).filter(i=>i!=="procSeq").forEach(i=>this.onClockChangeEvents[i].trigger(this)),this.onClockChangeEvents.procSeq.trigger(this)});o(this,"toFullString",()=>`${this.totalProcSeq}(t${this.turn}-phs${this.phaseSeq}-stp${this.stepSeq}-stg${this.stepSeq}-c${this.chainSeq}-cb${this.chainBlockSeq}-prc${this.procSeq})`);o(this,"getClone",()=>({turn:this.turn,phaseSeq:this.phaseSeq,stepSeq:this.stepSeq,stageSeq:this.stageSeq,chainSeq:this.chainSeq,chainBlockSeq:this.chainBlockSeq,procSeq:this.procSeq,totalProcSeq:this.totalProcSeq,period:this.period}));o(this,"isSameTurn",e=>this.turn===e.turn);o(this,"isSameChain",e=>$e.isSameChain(this,e));o(this,"isPreviousChain",e=>this.turn===e.turn&&this.phaseSeq===e.phaseSeq&&this.stepSeq===e.stepSeq&&this.stageSeq===e.stageSeq&&this.chainSeq===e.chainSeq+1);o(this,"isPreviousStage",e=>this.turn===e.turn&&this.phaseSeq===e.phaseSeq&&this.stepSeq===e.stepSeq&&this.stageSeq===e.stageSeq+1);o(this,"isPreviousTurn",e=>this.turn===e.turn+1);o(this,"isPreviousProc",e=>this.totalProcSeq===e.totalProcSeq+1);this._periodKey="end"}get onTurnChange(){return this.onClockChangeEvents.turn.expose()}get onStageChange(){return this.onClockChangeEvents.stageSeq.expose()}get onProcSeqChange(){return this.onClockChangeEvents.procSeq.expose()}get previousStartPoints(){return this._previousStartPoints}get currentStartPoints(){return this._currentStartPoints}set periodKey(e){this._periodKey!==e&&(this._periodKey=e,this._chainSeq=0,this._chainBlockSeq=0,this._procSeq=0,this.incrementTotalProcSeq())}get periodKey(){return this._periodKey}get period(){return ie[this.periodKey]}get turn(){return this._turn}get phaseSeq(){return this._phaseSeq}get stepSeq(){return this._stepSeq}get stageSeq(){return this._stageSeq}get chainSeq(){return this._chainSeq}get chainBlockSeq(){return this._chainBlockSeq}get procSeq(){return this._procSeq}get totalProcSeq(){return this._totalProcSeq}get isFirstChain(){return this.chainSeq===0}};o($e,"isSameChain",(e,i)=>e.turn===i.turn&&e.phaseSeq===i.phaseSeq&&e.stepSeq===i.stepSeq&&e.stageSeq===i.stageSeq&&e.chainSeq===i.chainSeq);let at=$e;class kn{constructor(e){o(this,"onInsertEvent",new M);o(this,"nextSeq");o(this,"records",[]);o(this,"duel");o(this,"push",e=>{const i={seq:this.nextSeq++,clock:this.duel.clock.getClone(),chainBlockInfo:e};this.records.push(i),this.onInsertEvent.trigger(i)});this.nextSeq=0,this.duel=e}get onInsert(){return this.onInsertEvent.expose()}}const Dn=["PlayFirst","DrawFirst","Random"],Qs={PlayFirst:"先攻",DrawFirst:"後攻",Random:"ランダム"};class O extends Error{constructor(i,a){super(i?`デュエルが終了した。勝者：${i.profile.name}`:"デュエルが終了した。ドロー。");o(this,"winner");o(this,"message");this.winner=i,this.message=a}}class m extends Error{constructor(i,...a){super(i);o(this,"message");o(this,"items");this.message=i,this.items=a}}class D extends m{constructor(...e){super("キャンセル不可のアクションがキャンセルされた。",...e)}}class Xs{constructor(e,i,a,n=[],r,s,l,c=[],u="Random"){o(this,"onDuelEndEvent",new M);o(this,"view");o(this,"log");o(this,"chainBlockLog");o(this,"clock");o(this,"nextPhaseList");o(this,"field");o(this,"attackingMonster");o(this,"targetForAttack");o(this,"_chainBlockInfos");o(this,"duelists");o(this,"priorityHolder");o(this,"isEnded");o(this,"winner");o(this,"reasonOfEnd","");o(this,"coin",!1);o(this,"startMode");o(this,"distributeOperators",e=>{console.info(`[totalProcSeq]:${e.totalProcSeq}`);let i=0;for(;;){if(i++,i>10)throw new m("無限ループ発生");if(this.field.procFilterPool.distributeAll(this)&&this.field.statusOperatorPool.distributeAll(this)&&this.field.numericStateOperatorPool.distributeAll(this)&&this.field.summonFilterPool.distributeAll(this)&&this.field.damageFilterPool.distributeAll(this))return}});o(this,"getTurnPlayer",()=>this.clock.turn%2===0?this.secondPlayer:this.firstPlayer);o(this,"getNonTurnPlayer",()=>this.clock.turn%2===0?this.firstPlayer:this.secondPlayer);o(this,"main",async()=>{console.info("main start!"),this.coin=this.startMode==="PlayFirst"?!0:this.startMode==="DrawFirst"?!1:Math.random()>.5,this.priorityHolder=this.firstPlayer;const e=_s(...Object.values(this.duelists).flatMap(i=>i.deckInfo.cardNames).getDistinct()).reduce((i,a)=>(i[a.name]=a,{...i}),{});for(const i of Object.values(this.duelists))i.pushDeck(e),i.getDeckCell().shuffle(),i.initHand.length&&i.initHand.forEach(a=>{const n=i.getDeckCell().cardEntities.find(r=>r.origin.name===a);if(!n){this.log.info(`初手操作により${a}を手札に加えようとしたが、デッキに存在しない。`);return}n.addToHand(["System"],void 0,void 0),this.log.info(`初手操作により${n.toString()}を手札に加えた`,i)}),await i.draw(5-i.getHandCell().cardEntities.length,void 0,void 0);this.log.info(`【デュエル開始】${this.firstPlayer.profile.name} V.S. ${this.secondPlayer.profile.name}`),this.log.info(`先攻：${this.firstPlayer.profile.name} 後攻：${this.secondPlayer.profile.name}`),this.moveNextPhase("draw");try{for(const i of Object.values(this.duelists))for(const a of this.getEnableActions(i,["Exodia"],["Normal"],[]))await a.action.directExecute(i,void 0,!1);for(;!this.isEnded&&(this.clock.period.phase==="draw"?await this.procDrawPhase():this.phase==="standby"?await this.procStanbyPhase():this.phase==="main1"?await this.procMainPhase():this.phase==="battle1"?await this.procBattlePhase():this.phase==="battle2"?await this.procBattlePhase():this.phase==="main2"?await this.procMainPhase():this.phase==="end"&&await this.procEndPhase(),!(this.clock.turn>1e3)););}catch(i){i instanceof O?(this.chainBlockLog.records.forEach(a=>{a.chainBlockInfo.state==="ready"?a.chainBlockInfo.state="failed":a.chainBlockInfo.state==="processing"&&(a.chainBlockInfo.state="done")}),this.clock.incrementChainSeq(),console.info(i),this.isEnded=!0,this.winner=i.winner,this.reasonOfEnd=i.message,this.log.info(i.winner?`デュエル終了。勝者${i.winner.profile.name}。${i.message}`:`デュエル終了。引き分け。${i.message}`),this.view.requireUpdate(),this.onDuelEndEvent.trigger()):i instanceof Error&&this.log.error(i)}finally{this.log.dispose()}});o(this,"moveNextPhase",e=>{this.clock.setPhase(this,e),this.phase==="main2"||this.clock.turn===1?this.nextPhaseList=["end"]:this.phase==="battle1"||this.phase==="battle2"?this.nextPhaseList=["main2"]:this.phase==="main1"?this.nextPhaseList=["battle1","end"]:this.nextPhaseList=[]});o(this,"declareAttack",(e,i,a=!1)=>{var s;this.attackingMonster=e,this.targetForAttack=i;let n=" ("+((s=i.battlePosition==="Attack"?i.atk:i.def)==null?void 0:s.toString())+")";i.face==="FaceDown"&&(n=" (????)"),i.entityType==="Duelist"&&(n="");const r=a?"攻撃対象再選択":"攻撃宣言";a||e.info.attackDeclareCount++,this.log.info(`${r}:${e.toString()} (${e.atk})⇒ ${i.toString()}${n}`,e.controller)});o(this,"procDrawPhase",async()=>{if(Object.values(this.duelists).forEach(e=>e.initForDrawPhase()),this.log.info("ドローフェイズ開始。",this.getTurnPlayer()),this.clock.turn===1)this.log.info("先攻プレイヤーはドローできない。",this.getTurnPlayer());else{await this.getTurnPlayer().draw(1,void 0,void 0);for(const e of this.getEnableActions(this.getTurnPlayer(),["Exodia"],["Normal"],[]))await e.action.directExecute(this.getTurnPlayer(),void 0,!1)}this.field.getCardsOnFieldStrictly().forEach(e=>e.initForTurn()),await this.procSpellSpeed1(),this.moveNextPhase("standby")});o(this,"procStanbyPhase",async()=>{await this.procSpellSpeed1(),this.moveNextPhase("main1")});o(this,"procMainPhase",async()=>{for(;;){this.priorityHolder=this.getTurnPlayer();const e=await this.view.waitFieldAction(this.getEnableActions(this.priorityHolder,["NormalSummon","SpellTrapSet","SpecialSummon","FlipSummon","ChangeBattlePosition","IgnitionEffect","QuickEffect","CardActivation","LingeringEffect"],["Normal","Quick","Counter"],[]));if(e.actionInfo){if(await this.procChain({activator:this.priorityHolder,actionInfo:e.actionInfo},void 0)==="cancel")continue;await this.procFreeChain();continue}const i=e.phaseChange;if(i){this.priorityHolder=this.getNonTurnPlayer();let a="done";for(;;){const n=await this.view.waitQuickEffect(this.priorityHolder,this.getEnableActions(this.priorityHolder,["QuickEffect","CardActivation"],["Quick","Counter"],[]),[],"相手がフェイズを終了しようとしている。",!0);if(!n){this.moveNextPhase(i);return}if(a=await this.procChain({activator:this.priorityHolder,actionInfo:n},void 0),a==="done")break}if(a==="done"){await this.procFreeChain();continue}}}});o(this,"procBattlePhase",async()=>{await this.procBattlePhaseStartStep()&&await this.procBattlePhaseBattleStep(),await this.procBattlePhaseEndStep()});o(this,"procBattlePhaseStartStep",async()=>(this.clock.setStep(this,"start"),this.priorityHolder=this.getTurnPlayer(),this.attackingMonster=void 0,this.targetForAttack=void 0,await this.procSpellSpeed1()));o(this,"procBattlePhaseBattleStep",async()=>{for(;;){this.clock.setStep(this,"battle"),this.priorityHolder=this.getTurnPlayer();const e=await this.view.waitFieldAction(this.getEnableActions(this.priorityHolder,["DeclareAttack"],["Normal"],[]));if(e.phaseChange)break;if(e.actionInfo){if(await this.procChain({activator:this.priorityHolder,actionInfo:e.actionInfo},void 0)==="cancel")continue;for(;this.attackingMonster&&this.targetForAttack;){const a=this.clock.totalProcSeq,n=this.getNonTurnPlayer().getMonstersOnField(),r=await this.procChain(void 0,void 0);if(!this.attackingMonster)throw new m("想定されない状態");if(!this.canContinueBattle())break;const s=this.attackingMonster.getAttackTargets();if(n.some(l=>!l.isOnFieldAsMonsterStrictly)||this.getNonTurnPlayer().getMonstersOnField().flatMap(l=>l.moveLog.records).filter(l=>l.movedAt.totalProcSeq>a).some(l=>!l.cell.isMonsterZoneLikeCell)?(this.log.info("モンスターの数が増減したためバトルステップの巻き戻しが発生。"),this.targetForAttack=void 0):this.targetForAttack.entityType==="Duelist"&&s.every(l=>l!==this.targetForAttack)&&!this.attackingMonster.status.canDirectAttack&&(this.log.info(`${this.attackingMonster.toString()}が直接攻撃能力を喪失したため、バトルステップの巻き戻しが発生。`),this.targetForAttack=void 0),!this.targetForAttack){if(!s.length){this.log.info("攻撃可能な対象が存在しないため、攻撃対象選択を選択肢しなおせない。");break}if(this.getTurnPlayer().duelistType==="Player"&&!await this.view.waitYesOrNo(this.getTurnPlayer(),"攻撃対象選択を選択し直す？")){this.getTurnPlayer().writeInfoLog(`${this.attackingMonster.toString()}の攻撃宣言をキャンセル。`);break}if(this.targetForAttack=await this.getTurnPlayer().waitSelectEntity(s,"攻撃対象を選択。",!0),!this.targetForAttack){this.getTurnPlayer().writeInfoLog(`${this.attackingMonster.toString()}の攻撃宣言をキャンセル。`);break}this.declareAttack(this.attackingMonster,this.targetForAttack,!0);continue}if(r==="pass")break}this.attackingMonster&&this.targetForAttack&&await this.procBattlePhaseDamageStep()}}});o(this,"procBattlePhaseDamageStep",async()=>{if(!this.attackingMonster||!this.targetForAttack)throw new m("想定されない状態",this.attackingMonster,this.targetForAttack);if(this.targetForAttack.entityType!=="Duelist"&&!this.targetForAttack.isOnFieldAsMonsterStrictly)throw new m("想定されない状態",this.attackingMonster,this.targetForAttack);for(const e of[this.procBattlePhaseDamageStep1,this.procBattlePhaseDamageStep2,this.procBattlePhaseDamageStep3,this.procBattlePhaseDamageStep4,this.procBattlePhaseDamageStep5])if(!await e())return});o(this,"procBattlePhaseDamageStep1",async()=>(this.clock.setStage(this,"start"),await this.procFreeChain(this.canContinueBattle)));o(this,"procBattlePhaseDamageStep2",async()=>{if(!this.attackingMonster)throw new m("想定されない状態",this.attackingMonster);if(!this.targetForAttack)throw new m("想定されない状態",this.targetForAttack);const e=this.attackingMonster,i=this.targetForAttack;return this.clock.setStage(this,"beforeDmgCalc"),i.battlePosition==="Set"&&i.setBattlePosition("Defense",["Flip","FlipByBattle"],e,e.controller),await this.procFreeChain(this.canContinueBattle)});o(this,"procBattlePhaseDamageStep3",async()=>{if(!this.attackingMonster)throw new m("想定されない状態",this.attackingMonster);if(!this.targetForAttack)throw new m("想定されない状態",this.targetForAttack);const e=this.attackingMonster,i=this.targetForAttack;if(e.atk===void 0)throw new m("想定されない状態",this.attackingMonster,this.targetForAttack);if(this.clock.setStage(this,"dmgCalc"),!await this.procFreeChain(this.canContinueBattle))return!1;const a=e.atk,n=(i.battlePosition==="Attack"?i.atk:i.def)??0,r=this.getTurnPlayer(),s=e.actions.find(u=>u.playType==="Battle");if(!s)throw new m(`${e.toString()}に戦闘アクションが定義されていない。`);const l=await s.prepare(r,i.fieldCell,void 0,[],!1,!1);if(!l)throw new D("戦闘アクションがキャンセルされた。");this.chainBlockLog.push(l),i.entityType==="Duelist"?(r.writeInfoLog(`ダメージ計算：${e.toString()} (${a}) ⇒ ${i.toString()}`),e.controller.getOpponentPlayer().battleDamage(a-n,e,i,l)):(r.writeInfoLog(`ダメージ計算：${e.toString()} (${a}) ⇒ ${i.toString()} (${n})`),a>0&&a>n?i.battlePosition==="Attack"?e.controller.getOpponentPlayer().battleDamage(a-n,e,i,l):e.status.piercingTo.getDistinct().forEach(u=>u.battleDamage(a-n,e,i,l)):a<n&&e.controller.battleDamage(n-a,i,e,l),a>0&&(a>n||a===n&&i.battlePosition==="Attack")&&await v.tryMarkForDestory([i],l),i.battlePosition==="Attack"&&a<=n&&await v.tryMarkForDestory([e],l)),l.state=a>n?"done":"failed",e.info.battleLog.push({enemy:i,timestamp:this.clock.getClone()}),i.info.battleLog.push({enemy:e,timestamp:this.clock.getClone()});const c=Object.values(this.duelists).filter(u=>u.lp<=0);if(c.length)throw c.length===1?new O(c[0].getOpponentPlayer(),`戦闘ダメージによって、${c[0].name}のライフポイントがゼロになった。`):new O(void 0,"戦闘ダメージによって、お互いのライフポイントがゼロになった。");return!0});o(this,"procBattlePhaseDamageStep4",async()=>(this.clock.setStage(this,"afterDmgCalc"),!!await this.procFreeChain()));o(this,"procBattlePhaseDamageStep5",async()=>(this.clock.setStage(this,"end"),await v.waitCorpseDisposal(this),this.clock.incrementChainSeq(),!!await this.procFreeChain()));o(this,"procBattlePhaseEndStep",async()=>{this.clock.setStep(this,"end"),this.priorityHolder=this.getTurnPlayer(),await this.procSpellSpeed1(),this.moveNextPhase("main2")});o(this,"procEndPhase",async()=>{for(await this.procSpellSpeed1();;){const i=this.getTurnPlayer().getHandCell().cardEntities.length;if(i<7)break;await this.getTurnPlayer().discard(i-6,"Rule")}this.moveNextPhase("draw")});o(this,"canContinueBattle",()=>this.attackingMonster?(this.attackingMonster.isOnFieldStrictly?this.attackingMonster.face==="FaceDown"?(this.log.info(`${this.attackingMonster.toString()}が裏側守備表示になったため、戦闘が中断された。`),this.attackingMonster=void 0):this.attackingMonster.orientation==="Horizontal"&&(this.log.info(`${this.attackingMonster.toString()}が守備表示になったため、戦闘が中断された。`),this.attackingMonster=void 0):(this.log.info(`${this.attackingMonster.toString()}がフィールドに存在しなくなっため、戦闘が中断された。`),this.attackingMonster=void 0),!!this.attackingMonster):!1);o(this,"procSpellSpeed1",async()=>{this.priorityHolder=this.getTurnPlayer();let e=0;const i={Above:Number.MAX_VALUE,Below:Number.MAX_VALUE};for(;;){const a=this.getEnableActions(this.priorityHolder,["IgnitionEffect","QuickEffect","CardActivation","LingeringEffect"],["Normal","Quick","Counter"],[]);if(i[this.priorityHolder.seat]=a.filter(l=>l.action.isMandatory).length,Object.values(i).every(l=>l===0)&&e>1)break;const n=a.find(l=>l.action.isMandatory);let r=n?{action:n.action,originSeq:n.action.seq}:void 0,s=!r;if(this.priorityHolder.isTurnPlayer?e===0&&(s=!0):i[this.getTurnPlayer().seat]&&(s=!0),a.length&&(a.length>1||!r)&&(this.priorityHolder.chainConfig.noticeFreeChain||a.some(l=>l.action.isNoticedForcibly))&&(r=await this.view.waitQuickEffect(this.priorityHolder,a,[],this.clock.period.name,s)),r){if(await this.procChain({activator:this.priorityHolder,actionInfo:r},void 0)==="cancel")continue;if(!await this.procFreeChain())return!1;this.priorityHolder=this.getTurnPlayer(),e=0;continue}this.priorityHolder=this.priorityHolder.getOpponentPlayer(),e++}return!0});o(this,"procFreeChain",async(e=()=>!0)=>{const i=this.clock.period.key;for(;await this.procChain(void 0,void 0)!=="pass";)if(this.clock.period.key!==i||!e())return!1;return!0});o(this,"procChain",async(e,i)=>{const a=this.chainBlockInfos.length===0;let n=e?[]:i??Object.values(this.duelists).flatMap(s=>this.getEnableActions(s,["TriggerEffect"],[this.chainBlockInfos.length?"Quick":"Normal"],this.chainBlockInfos).map(l=>({activator:s,actionInfo:l,targetChainBlock:this.chainBlockInfos.slice(-1)[0]}))),r;if(e)r={activator:e.activator,action:e.actionInfo.action,dest:e.actionInfo.dest,targetChainBlock:void 0},this.priorityHolder=r.activator;else if(n.length>0){const s=await this.selectTriggerEffect(n);s?(n=n.filter(l=>l!==s),r={...s,action:s.actionInfo.action},this.priorityHolder=r.activator):n=[]}if(!r){let s=0;for(;s<2;){this.priorityHolder=this.priorityHolder.getOpponentPlayer();const l=["Counter"];this.chainBlockInfos.every(d=>d.action.spellSpeed!=="Counter")&&l.push("Quick");let u=this.getEnableActions(this.priorityHolder,["QuickEffect","CardActivation"],l,this.chainBlockInfos).some(d=>d.action.isNoticedForcibly)||!!this.attackingMonster;if(u||(this.chainBlockInfos.length?u=this.priorityHolder.chainConfig.noticeSelfChain||this.chainBlockInfos.slice(-1)[0].activator!==this.priorityHolder:u=this.priorityHolder.chainConfig.noticeFreeChain),u){const d=this.chainBlockInfos.some(f=>f.action.isWithChainBlock)?"チェーンして効果を発動しますか？":"クイックエフェクト発動タイミング。効果を発動しますか？",p=await this.view.waitQuickEffect(this.priorityHolder,this.getEnableActions(this.priorityHolder,["QuickEffect","CardActivation"],l,this.chainBlockInfos),this.chainBlockInfos,d,!0);if(p){r={...p,activator:this.priorityHolder,targetChainBlock:this.chainBlockInfos.slice(-1)[0]};break}}s++}}if(console.info("selected action: ",r),r){const s=r.activator,l=await r.action.prepare(s,r.dest,r.targetChainBlock,this.chainBlockInfos,a,!1);if(!l)return"cancel";if(this.chainBlockLog.push(l),this._chainBlockInfos.push(l),this.clock.incrementProcSeq(),this.clock.incrementChainBlockSeq(),n=n.filter(c=>c.actionInfo.action.seq!==(r==null?void 0:r.action.seq)).filter(c=>c.actionInfo.action.validateCount(c.activator,this.chainBlockInfos)),l.action.isChainable&&await this.procChain(void 0,n.length?n:void 0),await l.action.execute(l,this.chainBlockInfos),l.state==="done"||l.state==="failed")for(const c of[this.getTurnPlayer(),this.getNonTurnPlayer()]){for(const u of this.getEnableActions(c,["Exodia"],["Normal"],[l]))await u.action.directExecute(c,l,!1);for(const u of this.getEnableActions(c,["AfterChainBlock"],["Normal"],[l])){await u.action.directExecute(c,l,!1);for(const d of this.getEnableActions(c,["Exodia"],["Normal"],[l]))await d.action.directExecute(c,l,!1)}}a?(await v.sendManyToGraveyardForTheSameReason(this._chainBlockInfos.filter(c=>c.action.playType==="CardActivation").filter(c=>!c.action.isLikeContinuousSpell).map(c=>c.action.entity).filter(c=>c.isOnFieldStrictly).filter(c=>c.face==="FaceUp"),["Rule"],void 0,void 0),this._chainBlockInfos.reset(),l.nextActionInfo&&await this.procChain({activator:l.activator,actionInfo:l.nextActionInfo},void 0),this.clock.incrementChainSeq()):(l.nextActionInfo&&await l.nextActionInfo.action.directExecute(l.activator,void 0,!1),this.clock.incrementChainBlockSeq())}return r?"done":"pass"});o(this,"selectTriggerEffect",async e=>{if(e.length>0)for(const i of[!0,!1])for(const a of[this.getTurnPlayer(),this.getNonTurnPlayer()]){const n=e.filter(s=>s.actionInfo.action.isMandatory===i&&s.activator===a);if(n.length===0)continue;if(n.length===1&&i)return n[0];const r=await this.view.waitQuickEffect(a,n.map(s=>s.actionInfo),this.chainBlockInfos,"トリガーエフェクトを選択。",!i);if(r)return n.find(s=>s.actionInfo.action===r.action)}});o(this,"executeSystemPeriodActions",()=>{Object.values(this.duelists).forEach(e=>this.getEnableActions(e,["SystemPeriodAction"],["Normal"],[]))});o(this,"getEnableActions",(e,i,a,n)=>{var s;const r=((s=n.slice(-1)[0])==null?void 0:s.nextChainBlockFilter)??(()=>!0);return[...this.field.getAllCardEntities(),e.entity].flatMap(l=>l.actions).filter(l=>l.canExecute(e)).filter(l=>a.includes(l.spellSpeed)).filter(l=>i.includes(l.playType)).filter(l=>r(e,l)).map(l=>l.validate(e,n)).filter(l=>l!==void 0)});this.clock=new at,this.nextPhaseList=[],this.isEnded=!1,this.startMode=u,this.duelists={Below:new Le(this,"Below",e,i,a,n),Above:new Le(this,"Above",r,s,l,c)},this.priorityHolder=this.firstPlayer,this._chainBlockInfos=[],this.field=new mn(this),this.clock.onProcSeqChange.append(this.distributeOperators),this.clock.onStageChange.append(this.executeSystemPeriodActions),this.view=new bn(this),this.log=new Sn(this),this.chainBlockLog=new kn(this)}get onDuelEnd(){return this.onDuelEndEvent.expose()}get phase(){return this.clock.period.phase}get step(){return this.clock.period.step}get stage(){return this.clock.period.stage}get chainBlockInfos(){return this._chainBlockInfos}get firstPlayer(){return this.coin?this.duelists.Below:this.duelists.Above}get secondPlayer(){return this.coin?this.duelists.Above:this.duelists.Below}}const Z=class Z{constructor(e){o(this,"id");o(this,"name");o(this,"description");o(this,"chainConfig");o(this,"previousGameMode");o(this,"previousNpcId");o(this,"previousNpcDeckId");o(this,"previousStartMode");o(this,"npcLvl",Number.MAX_VALUE);o(this,"npcType","None");o(this,"save",async e=>{const i={id:this.id,name:this.name,description:this.description,chainConfig:this.chainConfig??{noticeSelfChain:!1,noticeFreeChainPhase:!1,noticeFreeChainStep:!1,noticeAfterChainInMainPhase:!1},previousGameMode:this.previousGameMode??"Preset",previousNpcId:this.previousNpcId??Number.MIN_SAFE_INTEGER,previousStartMode:this.previousStartMode,previousNpcDeckId:this.previousNpcDeckId>-1?this.previousNpcDeckId:Number.MIN_SAFE_INTEGER,...e},a=await Z.tblHeader.update(this.id,n=>({...n,...i}));return console.log(this.previousNpcDeckId,Number.MIN_SAFE_INTEGER,i,a),new Z(a)});var i;this.id=e.id,this.name=e.name,this.description=e.description,this.chainConfig=e.chainConfig,this.previousGameMode=e.previousGameMode,this.previousNpcId=((i=Pt.find(a=>a.id===e.previousNpcId))==null?void 0:i.id)??Oe(...Pt.map(a=>a.id)),this.previousStartMode=Dn.includes(e.previousStartMode)?e.previousStartMode:"Random",this.previousNpcDeckId=e.previousNpcDeckId}};o(Z,"tblHeader"),o(Z,"getOrCreateNew",async e=>{Z.tblHeader||(Z.tblHeader=new xn(e));const i=await Z.tblHeader.getAll();if(i.length){let n=i[0];return n.chainConfig||(n={...n,chainConfig:{noticeSelfChain:!1,noticeFreeChain:!1}}),new Z(n)}const a=await Z.tblHeader.insert({name:"あなた",description:"ここの文字列を何に使うかは未定。",chainConfig:{noticeSelfChain:!1,noticeFreeChain:!1},previousGameMode:"Preset",previousNpcId:0,previousNpcDeckId:Number.MIN_SAFE_INTEGER,previousStartMode:"Random"});return new Z(a)});let At=Z;class xn extends lt{constructor(i){super(i,"TblDuelistProfile");o(this,"_prepareInitialRecords",()=>[])}}let Qe=-1;const Pt=[{id:Qe--,name:"サンドバッグくん棒立ち",description:"攻撃宣言なし、強制効果以外の効果の発動なし。",npcLvl:0,npcType:"Normal"},{id:Qe--,name:"サンドバッグくん非暴力",description:"攻撃宣言なし。",npcLvl:100,npcType:"Normal"},{id:Qe--,name:"サンドバッグくん白帯",description:"とくに制限なし。",npcLvl:200,npcType:"Normal"},{id:Number.MIN_SAFE_INTEGER,name:"FTK or Die",description:"FTKに失敗すると敗北。",npcLvl:Number.MIN_SAFE_INTEGER,npcType:"FtkChallenge"}],Ks=["noticeSelfChain","noticeFreeChain"],Js={noticeSelfChain:"セルフチェーン",noticeFreeChain:"フリーチェーン"},ge=class ge{constructor(e,i,a,n,r,s=[]){o(this,"duel");o(this,"seat");o(this,"profile");o(this,"deckInfo");o(this,"info");o(this,"infoOrigin");o(this,"status");o(this,"statusOrigin");o(this,"duelistType");o(this,"lifeLog");o(this,"actionBlackListForNPC");o(this,"_lp");o(this,"initHand");o(this,"chainConfig");o(this,"writeInfoLog",e=>this.duel.log.info(e,this));o(this,"writeChainBlockHeaderLog",(e,i)=>this.duel.log.pushChainBlockHeaderLog(this,e,i));o(this,"initForDrawPhase",()=>{this.info={...this.infoOrigin}});o(this,"canDiscard",e=>(this.status.canDiscardAsCost&&console.log(e),!0));o(this,"canSendToGraveyard",e=>(console.log(e),!0));o(this,"canRelease",e=>(console.log(e),!0));o(this,"canTryBanish",(e,i,a)=>this.entity.procFilterBundle.filter([i],this,this.entity,a,[e]));o(this,"battleDamage",(e,i,a,n)=>{const r=un(e,n.activator,this,i,a,n.action);return this.damage(i,r)});o(this,"effectDamage",(e,i)=>ge.effectDamage([{to:this,point:e}],i));o(this,"_effectDamage",(e,i)=>this.damage(i.action.entity,cn(e,i,this)));o(this,"damage",(e,i)=>{const a=[];if(i.point){const n=i.damageType==="Heal"?i.point:i.point*-1;a.push(this.setLp(this._lp+n,e,i.damageType))}return i.damageToOpponent1&&a.push(this.getOpponentPlayer().setLp(this._lp-i.damageToOpponent1,e,i.damageType)),i.damageToOpponent2&&a.push(this.getOpponentPlayer().setLp(this._lp-i.damageToOpponent2,e,i.damageType)),a});o(this,"lostLp",(e,i)=>this.setLp(this._lp-e,i,"Lost"));o(this,"payLp",(e,i)=>{const a=this.setLp(this._lp-e,i,"Pay");if(this.lp<=0)throw new O(this.getOpponentPlayer(),`${i.toString()}へのライフポイント支払いにより、${this.name}のライフポイントが0になった。`);return a});o(this,"heal",(e,i)=>this.setLp(this._lp+e,i,"Heal"));o(this,"setLp",(e,i,a)=>{const n={duelist:this,clock:this.duel.clock.getClone(),reason:a||"Set",beforeLp:this._lp,afterLp:e,entity:i};return this.lifeLog.push(n),this._lp=e,this.writeInfoLog(`ライフポイント変動：${n.afterLp-n.beforeLp}（${n.beforeLp} ⇒ ${n.afterLp}）`),n});o(this,"getOpponentPlayer",()=>this.duel.firstPlayer===this?this.duel.secondPlayer:this.duel.firstPlayer);o(this,"getCells",(...e)=>this.duel.field.getCells(...e).filter(i=>{var a;return i.owner===this||((a=i.cardEntities[0])==null?void 0:a.owner)===this}));o(this,"getHandCell",()=>this.getCells("Hand")[0]);o(this,"getDeckCell",()=>this.getCells("Deck")[0]);o(this,"getExtraDeck",()=>this.getCells("ExtraDeck")[0]);o(this,"getGraveyard",()=>this.getCells("Graveyard")[0]);o(this,"getFieldZone",()=>this.getCells("FieldSpellZone")[0]);o(this,"getBanished",()=>this.getCells("Banished")[0]);o(this,"getMonsterZones",()=>this.getCells("MonsterZone"));o(this,"getExtraMonsterZones",()=>this.getCells("ExtraMonsterZone"));o(this,"getSpellTrapZones",()=>this.getCells("SpellAndTrapZone"));o(this,"getXyzMaterialZone",()=>this.getCells("XyzMaterialZone")[0]);o(this,"getEmptyMonsterZones",()=>this.getMonsterZones().filter(e=>e.cardEntities.length===0));o(this,"getAvailableMonsterZones",()=>this.getMonsterZones().filter(e=>e.isAvailable));o(this,"getAvailableExtraMonsterZones",()=>this.getExtraMonsterZones().length===0?this.duel.field.getCells("ExtraMonsterZone").filter(e=>e.isAvailable):[]);o(this,"getAvailableSpellTrapZones",()=>this.getSpellTrapZones().filter(e=>e.isAvailable));o(this,"getMonstersOnField",()=>this.duel.field.getMonstersOnFieldStrictly().filter(e=>e.controller===this));o(this,"getSpellTrapsOnField",()=>this.duel.field.getSpellTrapsOnFieldStrictly().filter(e=>e.controller===this));o(this,"getPendingMonstersOnField",()=>this.duel.field.getPendingMonstersOnField().filter(e=>e.controller===this));o(this,"getPendulumScaleMonsters",()=>this.duel.field.getCardsOnFieldStrictly().filter(e=>e.isPendulumScale).filter(e=>e.controller===this));o(this,"getPendulumScales",()=>{const e=this.getPendulumScaleMonsters();if(e.length<2)return;const i=e.find(s=>s.fieldCell.column===(this.seat==="Below"?1:5)),a=e.find(s=>s.fieldCell.column===(this.seat==="Below"?5:1));if(!i||!a)throw new m("想定されない状態",e);const n=i.psR,r=a.psL;if(n===void 0||r===void 0)throw new m("想定されない状態",e);return n>r?{upperBound:n,lowerBound:r}:{upperBound:r,lowerBound:n}});o(this,"getEntiteisOnField",()=>this.duel.field.getCardsOnFieldStrictly().filter(e=>e.controller===this));o(this,"pushDeck",e=>{this.deckInfo.cardNames.map(i=>e[i]).filter(i=>i).forEach(i=>k.createCardEntity(this,i)),this.duel.log.info(`デッキをセット。メイン${this.getDeckCell().cardEntities.length}枚。エクストラ${this.getExtraDeck().cardEntities.length}枚。`,this)});o(this,"draw",async(e,i,a)=>{var s;if(e<1)return;const n=this.getDeckCell(),r=[];this.writeInfoLog(`デッキからカードを${e}枚ドロー。`);for(const l of Array(e)){if(!n.cardEntities.length)throw this.writeInfoLog(r.length>0?`デッキからカードを${e}枚ドローしようとしたが、${r.length}枚しかドローできなかった。${r}`:"デッキからカードをドローできなかった。"),new O(this.getOpponentPlayer(),`${this.name}がデッキからカードをドローできなかった。`);const c=n.cardEntities[0];await c.draw(i?["Effect"]:["Rule"],i,a),r.push(((s=c.origin)==null?void 0:s.name)||"!名称取得失敗!")}});o(this,"summon",async(e,i,a,n,r,s,l,c)=>(await this.summonMany(this,e,i,a,[{monster:n,posList:r,cells:s}],l,!1,1,d=>d.length===1,c)??[])[0]);o(this,"waitSelectNumberFromRange",(e,i,a,n)=>this.waitSelectNumber(e,wa(i,a),n));o(this,"waitSelectNumber",(e,i,a)=>this.duel.view.waitSelectNumber(this,e,i,a));o(this,"waitSelectEntities",(e,i,a,n,r=!1)=>this.duel.view.waitSelectEntities(this,{selectables:e,qty:i,validator:a,cancelable:r},n));o(this,"waitSelectEntity",async(e,i,a=!1)=>{const n=await this.waitSelectEntities(e,1,r=>r.length===1,i,a);return n?n[0]:void 0});o(this,"waitYesNo",e=>this.duel.view.waitYesOrNo(this,e));o(this,"waitSelectText",(e,i,a=!1)=>this.duel.view.waitSelectText(this,e,i,a));o(this,"discard",async(e,i,a=()=>!0,n,r,s,l=!1)=>{const c=this.getHandCell().cardEntities.filter(a);if(c.length<e)return[];let u=[];if(c.length===e)u=c;else if((s||this).duelistType==="NPC")u=c.randomPickMany(e);else{const d=await this.duel.view.waitSelectEntities(s||this,{selectables:c,qty:e,validator:p=>p.length===e,cancelable:l},`${e}枚カードを捨てる。`);if(!d)return;u=d}return this.writeInfoLog(`手札からカードを${u.length}枚捨てた。${u.map(d=>d.toString())}。`),await v.discardManyForTheSameReason(u,["Discard",i],n,r),u});o(this,"getEnableSummonList",(e,i,a,n,r,s,l)=>{const c=this.duel.field.getCells("ExtraMonsterZone"),u=c.filter(p=>!s.map(f=>f.material).includes(p.cardEntities[0])).filter(p=>p.owner===this),d=[];return u.length&&d.push(...c.filter(p=>!u.includes(p)).filter(p=>p.isAvailable)),r.map(p=>({...p,summoner:this})).map(p=>{var f;return(i!=="LinkSummon"||!this.duel.field.canExtraLink(p.monster,s))&&(p.cells=p.cells.filter(h=>!d.includes(h))),(f=p.monster.status.monsterCategories)!=null&&f.includes("Link")&&(p.posList=p.posList.filter(h=>h==="Attack")),p}).map(p=>({...p,cells:p.cells.filter(f=>f.cardEntities.length===0||s.some(h=>h.material===f.cardEntities[0]))})).map(p=>{var f,h;if(p.monster.fieldCell.cellType==="ExtraDeck"){if((f=p.monster.status.monsterCategories)!=null&&f.includes("Link")||(h=p.monster.status.monsterCategories)!=null&&h.includes("Pendulum"))return{...p,cells:p.cells.filter(y=>y.cellType==="ExtraMonsterZone"||y.linkArrowSources.filter(E=>!s.map(g=>g.material).includes(E)).length)}}else return{...p,cells:p.cells.filter(y=>y.cellType!=="ExtraMonsterZone")};return p}).filter(p=>p.cells.length&&p.posList.length).map(p=>this.entity.summonFilterBundle.filter(e,i,a,n,p,s,l)).filter(p=>p.cells.length&&p.posList.length).map(p=>p.monster.summonFilterBundle.filter(e,i,a,n,p,s,l)).filter(p=>p.cells.length&&p.posList.length).map(p=>s.map(f=>f.material.summonFilterBundle).reduce((f,h)=>h.filter(e,i,a,n,f,s,l),p)).filter(p=>p.cells.length&&p.posList.length)});o(this,"prepareToSummonMany",async(e,i,a,n,r,s,l,c,u,d,p="特殊召喚するモンスターを選択。")=>{const f=this.getEnableSummonList(e,i,a,n,r,s,l);if(!f.length)return[];let h=f.map(E=>({...E,cells:[...E.cells],posList:[...E.posList]}));const y=[];for(;h.length&&y.length<(c??Number.MAX_SAFE_INTEGER);){const E=d&&!y.length||u(y.map(N=>N.monster));let g=h.randomPick();if(h.length>1){const N=await this.waitSelectEntity(h.map(j=>j.monster),p,E);if(!N)return y;g=h.find(j=>j.monster===N)??g}let A=[...g.posList].randomPick(),H=[...g.cells].randomPick();if((g.cells.length||g.posList.length)&&this.duelistType!=="NPC"){const N=await this.duel.view.waitSelectSummonDestination(g.summoner,g.monster,g.cells,g.posList,E);if(!N)return y;H=N.dest,A=N.battlePosition}y.push({summoner:this,monster:g.monster,pos:A,dest:H});const ue=H.cellType==="ExtraMonsterZone";h.forEach(N=>{N.cells=N.cells.filter(j=>!y.map(xe=>xe.dest).includes(j)),ue&&(N.cells=N.cells.filter(j=>j.cellType!=="ExtraMonsterZone"))}),h=h.filter(N=>N!==g).filter(N=>N.cells.length)}return y});o(this,"summonAll",(e,i,a,n,r,s,l,c,u)=>this.summonMany(e,i,a,n,r,s,l,r.length,d=>d.length===r.length,c,u));o(this,"summonOne",async(e,i,a,n,r,s,l,c,u)=>{const d=await this.summonMany(e,i,a,n,r,s,l,1,p=>p.length===1,c,u);if(d)return d[0]});o(this,"summonMany",(e,i,a,n,r,s,l,c,u,d,p)=>ge.summonMany(e,i,a,n,r.map(f=>({...f,summoner:this})),s,l,c,u,d,p));o(this,"selectAttackTargetForNPC",(e,i)=>{const a=e.atk??0,n=e.getAttackTargets();if(!n.length)return;const r=n.find(s=>s.entityType==="Duelist");return r&&(a>=Oe(1600,this.getOpponentPlayer().lp)||e.info.battlePotisionChangeCount>0)?r:n.find(s=>s.battlePosition==="Attack"?a>=(s.atk??0):a<(s.battlePosition==="Set"?1e3:s.def??0)?!1:s.validateDestory("BattleDestroy",this,e,i))});o(this,"selectActionForNPC",(e,i)=>{if(!e.length)return;const a=e.filter(g=>g.action.isMandatory);if(a.length)return a.randomPick();let n=e.filter(g=>!this.actionBlackListForNPC.includes(g.action.playType));console.log(n);const r=n.filter(g=>!Number.isNaN(g.action.priorityForNPC)).shuffle().sort((g,A)=>g.action.priorityForNPC-A.action.priorityForNPC);if(r.length)return r[0];const s=n.filter(g=>g.action.playType==="TriggerEffect");if(s.length)return s.randomPick();if(this.duel.phase!=="main1"&&this.duel.phase!=="main2"){const g=n.filter(A=>A.action.playType==="IgnitionEffect");if(g.length)return g.randomPick()}const l=n.filter(g=>g.action.playType==="DeclareAttack").sort((g,A)=>(g.action.entity.atk??0)-(A.action.entity.atk??0));if(l.length)return l.find(g=>this.selectAttackTargetForNPC(g.action.entity,g.action));n=n.filter(g=>g.action.playType!=="DeclareAttack");const c=n.length?i.slice(-1)[0]:void 0,u=n.filter(g=>g.action.negatePreviousBlock);if(c&&c.activator!==this&&u)return u.randomPick();if(n=n.filter(g=>!g.action.negatePreviousBlock),!n.length)return;const d=Ne(...this.getOpponentPlayer().getMonstersOnField().filter(g=>g.battlePosition==="Attack").map(g=>g.atk??0),1600),p=Oe(...this.getOpponentPlayer().getMonstersOnField().map(g=>g.battlePosition==="Set"?1500:(g.battlePosition==="Attack"?g.atk:g.def)??0),1500),f=this.getMonstersOnField(),h=Ne(...f.filter(g=>g.battlePosition==="Attack").map(g=>g.atk??0),0);let y=n.filter(g=>g.action.playType!=="ChangeBattlePosition").filter(g=>g.action.entity.battlePosition!=="Attack").filter(g=>(g.action.entity.atk??0)>=d||(g.action.entity.atk??0)>p&&(g.action.entity.atk??0)>2300);if(y.length)return y.randomPick();n=n.filter(g=>g.action.playType!=="ChangeBattlePosition").filter(g=>g.action.playType!=="SpellTrapSet").filter(g=>g.action.entity.actions.filter(A=>A.playType!=="NormalSummon"&&A.playType!=="SpecialSummon").flatMap(A=>A.executableCells).every(A=>A!=="Hand")||g.action.playType!=="NormalSummon"&&g.action.playType!=="SpecialSummon");const E=[...n.filter(g=>g.action.playType==="NormalSummon").filter(g=>(g.action.entity.lvl??12)<5),...n.filter(g=>g.action.playType==="SpecialSummon"),...n.filter(g=>g.action.playType==="NormalSummon").filter(g=>(g.action.entity.atk??0)>2600||(g.action.entity.atk??0)>2300&&(g.action.entity.lvl??12)<7).filter(g=>(g.action.entity.atk??0)>=h),...n.filter(g=>g.action.entity.face==="FaceUp").filter(g=>g.action.entity.isOnFieldStrictly)];if(E.length)return E.randomPick();if(n=n.filter(g=>g.action.playType!=="NormalSummon").filter(g=>g.action.playType!=="SpecialSummon"),this.duel.phase==="main2"){if(y=e.filter(g=>g.action.playType==="ChangeBattlePosition").filter(g=>g.action.entity.battlePosition==="Attack").filter(g=>(g.action.entity.atk??0)<d||(g.action.entity.atk??0)>p&&(g.action.entity.atk??0)>2300),y.length)return y.randomPick();if(this.getAvailableSpellTrapZones.length>1)return e.filter(g=>g.action.playType==="SpellTrapSet").filter(g=>g.action.entity.kind!=="Spell"||g.action.entity.status.spellCategory==="QuickPlay").randomPick()}if(console.log(n),Math.random()<n.length/4)return n.randomPick()});this.duel=e,this.seat=i,this.profile=a,this.chainConfig=a.chainConfig??{noticeSelfChain:!0,noticeFreeChain:!0},this.duelistType=n,this.deckInfo=r,this.initHand=s,this.lifeLog=[],this.infoOrigin={maxRuleNormalSummonCount:1,ruleNormalSummonCount:0,ruleNormalSummonCountQty:0,effectNormalSummonCount:0,effectNormalSummonCountQty:0,specialSummonCount:0,specialSummonCountQty:0},this.info={...this.infoOrigin},this.statusOrigin={maxSpecialSummonCount:Number.MAX_VALUE,canDrawByEffect:!0,canSearchFromDeck:!0,canDiscardAsCost:!0,canDiscardAsEffect:!0},this.status={...this.statusOrigin},this._lp=8e3;const l=[];this.duelistType==="NPC"&&(this.profile.npcLvl<0&&l.push("NormalSummon","SpecialSummon","SpellTrapSet"),this.profile.npcLvl<1&&l.push("CardActivation","IgnitionEffect","TriggerEffect","QuickEffect"),this.profile.npcLvl<101&&l.push("DeclareAttack")),this.actionBlackListForNPC=l}get entity(){const e=this.getHandCell().entities.find(i=>i.entityType==="Duelist");return e||k.createPlayerEntity(this)}get name(){return this.profile.name}get lp(){return this._lp}get isTurnPlayer(){return this.duel.getTurnPlayer()===this}get canDraw(){return!0}get canAddToHandFromDeck(){return!0}get canAddToHandFromGraveyard(){return!0}get canSet(){return!0}};o(ge,"summonMany",async(e,i,a,n,r,s,l,c,u,d,p="特殊召喚するモンスターを選択。")=>{const f=r.map(y=>y.summoner).getDistinct(),h=[];for(const y of f){const E=await y.prepareToSummonMany(e,i,a,n,r.filter(g=>g.summoner===y),s,l,c,u,d,p);h.push(...E)}if(h.length)return h.forEach(y=>y.monster.info.materials.reset(...s)),await v.moveToXyzOwner(h[0].dest,h[0].monster,s.map(y=>y.material).filter(y=>y.kind==="XyzMaterial"),["XyzMaterial","Rule"],h[0].monster,e),await k.summonMany(h,i,a,n.entity,e),h.map(y=>y.monster)}),o(ge,"effectDamage",(e,i)=>{if(!e.length)return[];const a=e.flatMap(r=>r.to._effectDamage(r.point,i)),n=Object.values(e[0].to.duel.duelists).filter(r=>r.lp>0);if(n.length===1)throw new O(n[0],`${i.action.toFullString()}により、${n[0].getOpponentPlayer().name}のライフポイントが0になった。`);if(!n.length)throw new O(void 0,`${i.action.toFullString()}により、お互いのライフポイントが0になった。`);return a});let Le=ge;const me=["Controller","Opponent"],Mt=["NormalSummon","AdvanceSummon","SpecialSummon","SpecialSummonFromDeck","SendToGraveyardFromDeck","Draw","SearchFromDeck","BanishFromDeck","BanishFromGraveyard","AddToHandFromGraveyard","ReturnToDeckFromGraveyard","SpecialSummonFromGraveyard","SpecialSummonFromBanished","ReturnToHandFromGraveyard","ReturnToHandFromField","BanishFromField","BanishFromHand","Destroy","DestroyMultiple","DestroyOnField","DestroyMultipleOnField","DestroyOnOpponentField","DestroyMultipleOnOpponentField","DestroyMonsterOnField","DestroyMonstersOnField","DestroySpellTrapOnField","DestroySpellTrapsOnField","SpecialSummonFromHand","SpecialSummonFromExtraDeck","SpecialSummonToken","IfNormarlSummonSucceed","IfSpecialSummonSucceed","DamageToOpponent","DamageToSelf","PayLifePoint","DiscordAsCost","DiscordAsEffect","RollDice","BounceToHand","NegateCardEffect","NegateCardActivation","NegateNormalSummon","NegateSpecialSummon"],An=["discard","banish","release","returnToDeck","returnToHand","sendToGraveyard"],ae=class ae extends Te{constructor(i,a,n,r){super(i,a,n);o(this,"getTargetableEntities",(i,a)=>{if(this.definition.hasToTargetCards&&!this.definition.getTargetableEntities)throw new m(`処理定義が矛盾している。${this.toFullString()}`,this);return this.definition.getTargetableEntities?this.definition.getTargetableEntities(i,a):[]});o(this,"toString",()=>this.playType==="CardActivation"?"カードの発動":this.isWithChainBlock?`«${this.title}»`:this.title);o(this,"toFullString",()=>`${this.entity.toString()}の${this.toString()}`);o(this,"addhocMaterialLimitation");o(this,"getClone",i=>new ae(this.seq,this.entity,this.definition,i));o(this,"validateCount",(i,a)=>{const n=a.filter(s=>this.isSameGroup(s.action)).length;if(this.isOnlyNTimesPerDuel>0&&this.entity.field.duel.chainBlockLog.records.filter(s=>!s.chainBlockInfo.isNegatedActivationBy).filter(s=>this.isSameGroup(s.chainBlockInfo.action)).filter(s=>s.chainBlockInfo.activator===i).length+n>=this.isOnlyNTimesPerDuel||this.isOnlyNTimesPerTurn>0&&this.entity.field.duel.chainBlockLog.records.filter(s=>!s.chainBlockInfo.isNegatedActivationBy).filter(s=>this.isSameGroup(s.chainBlockInfo.action)).filter(s=>s.clock.turn===this.entity.field.duel.clock.turn).filter(s=>s.chainBlockInfo.activator===i).length+n>=this.isOnlyNTimesPerTurn||this.isOnlyNTimesPerChain>0&&n>=this.isOnlyNTimesPerChain)return!1;const r=n+this.entity.counterHolder.getActionCount(this);return!(this.isOnlyNTimesPerTurnIfFaceup>0&&r>=this.isOnlyNTimesPerTurnIfFaceup||this.isOnlyNTimesIfFaceup>0&&r>=this.isOnlyNTimesIfFaceup)});o(this,"validate",(i,a,n=[],r)=>{const s=n.includes("IgnoreRegularCosts"),l=n.includes("IgnoreConditions"),c=n.includes("CopyEffectOnly");if(this.isWithChainBlock&&!this.entity.status.canActivateEffect||s&&this.needsToPayRegularCosts||!this.validateCount(i,a))return;const u=Ne(0,...a.map(f=>f.chainNumber??-1)),d={index:a.length,chainNumber:this.isWithChainBlock?u+1:void 0,action:this,activator:i,targetChainBlock:a.slice(-1)[0],state:"unloaded",dest:void 0,ignoreCosts:!1};if(this.definition.canPayCosts&&!s&&!this.definition.canPayCosts(d,this.playType==="AfterChainBlock"?[]:a)||this.definition.meetsConditions&&!l&&!this.definition.meetsConditions(d,this.playType==="AfterChainBlock"?[]:a))return;if(this.definition.canExecute){const f=this.definition.canExecute(d,this.playType==="AfterChainBlock"?[]:a,r);if(f==="RemoveMe"){this.entity.actions.reset(...this.entity.actions.filter(h=>h.seq!==this.seq));return}if(!f)return}const p=[];if(this.definition.getDests&&p.push(...this.definition.getDests(d,this.playType==="AfterChainBlock"?[]:a)),this.playType==="CardActivation"&&!c){const f=this.getDestForCardActivation(i);if(!f)return;p.push(...f)}else this.playType==="SpellTrapSet"&&(this.entity.status.spellCategory==="Field"?p.push(i.getFieldZone()):p.push(...i.getAvailableSpellTrapZones()));return{action:this,dests:p,originSeq:this.seq}});o(this,"getDestForCardActivation",i=>{var n;if(this.entity.info.isPending||this.entity.info.isDying||this.entity.info.isSettingSickness)return;if(this.entity.isOnFieldAsSpellTrapStrictly)return this.entity.face==="FaceDown"?[]:void 0;if(this.entity.fieldCell.cellType!=="Hand"||this.definition.canActivateCardDirectly||!i.isTurnPlayer)return;if(this.entity.status.spellCategory==="Field")return[i.getFieldZone()];let a=i.getAvailableSpellTrapZones();return(n=this.entity.status.monsterCategories)!=null&&n.includes("Pendulum")&&(a=a.filter(r=>r.isAvailableForPendulum)),a});o(this,"prepare",async(i,a,n,r,s,l)=>{var N,j;var xe=[];try{let c=a;let u=s;const d=this.isWithChainBlock?Ne(0,...r.map(x=>x.chainNumber??-1))+1:void 0;let p="";const f=[];if(this.playType==="CardActivation"||this.playType==="SpellTrapSet")if(this.entity.fieldCell.cellType==="Hand"){let x=this.entity.status.spellCategory==="Field"?[i.getFieldZone()]:i.getAvailableSpellTrapZones();if((N=this.entity.status.monsterCategories)!=null&&N.includes("Pendulum")&&(x=x.filter(W=>W.isAvailableForPendulum)),c&&x.includes(c)&&(x=[c],c=void 0),this.entity.status.spellCategory==="Field"){const W=i.getFieldZone().cardEntities;if(W.length){const Se=W[0];f.push(async()=>{await Se.sendToGraveyard(["Rule"],this.entity,i),i.writeInfoLog(`フィールド魔法の上書きにより、${Se.toString()}は墓地に送られた。`)}),u=!1}}let te=x[0];if(x.length>1){te=x.randomPick();const W=this.playType==="SpellTrapSet"?"セット":"カードの発動",Se=await this.duel.view.waitSelectDestination(i,this.entity,x,"カードを移動先へドラッグ",W,u);if(!Se)return;te=Se}p+="手札から",this.playType==="SpellTrapSet"?p+="魔法・罠カードをセット。":p+=`${this.entity.toString()}を発動。`,u=!1,this.playType==="CardActivation"&&(this.entity.info.isPending=!0),(j=this.entity.status.monsterCategories)!=null&&j.includes("Pendulum")?f.push(()=>this.entity.activateAsPendulumScale(te,["CardActivation"],this.entity,i)):this.playType==="CardActivation"?f.push(()=>this.entity.activateSpellTrapFromHand(te,this.entity.kind,["CardActivation"],this.entity,i)):f.push(()=>this.entity.setAsSpellTrap(te,this.entity.kind,["SpellTrapSet"],this.entity,i))}else this.entity.isOnField&&this.entity.face==="FaceDown"?(p+=`セットされていた${this.entity.toString()}を発動。`,u=!1,this.playType==="CardActivation"&&(this.entity.info.isPending=!0),f.push(()=>this.entity.setNonFieldMonsterPosition(this.entity.origin.kind,"FaceUp",["Rule"]))):p="";else d!==void 0&&(p+=`${this.toFullString()}を発動。`);const h=St(xe,this.duel.log.openTransaction());p&&d&&i.writeChainBlockHeaderLog(d,p);for(const x of f)await x();const y={index:r.length,chainNumber:d,action:this,activator:i,targetChainBlock:n,isActivatedIn:this.entity.fieldCell,isActivatedAt:this.duel.clock.getClone(),enableCellTypes:[...this.entity.info.isEffectiveIn],costInfo:{},state:"ready",dest:c,ignoreCosts:!1};if(this.definition.payCosts&&!l){const x=await this.definition.payCosts(y,r,u);if(!x)return;y.costInfo=x,u=!1}const E=await this.definition.prepare(y,r,u);if(E===void 0)return;const g={...E};g.selectedEntities=g.selectedEntities??[];g.chainBlockTags=[...g.chainBlockTags??[],...this.definition.fixedTags??[]];g.chainBlockTags.some(x=>x.startsWith("SpecialSummon"))&&g.chainBlockTags.push("SpecialSummon");g.chainBlockTags=g.chainBlockTags.getDistinct();if(Wt.some(x=>x===this.playType)){const x=E.nextChainBlockFilter??(()=>!0);g.nextChainBlockFilter=(te,W)=>W.negateSummon&&x(te,W)}const A=new vn(y.state);const H={...g,...y};Object.keys(H).filter(x=>x!=="state").forEach(x=>{A[x]=H[x]});const ue=A;h.commit();return ue}catch(pa){var fa=pa,ga=!0}finally{Ct(xe,fa,ga)}});o(this,"execute",async(i,a,n)=>{const r=(n==null?void 0:n.indirectly)??!1;if(i.action.isLikeContinuousSpell&&(i.action.entity.face==="FaceDown"||!i.action.entity.isOnField))return this.entity.info.isPending=!1,i.state="failed",!1;i.state="processing";let s=!1;if(!r&&i.chainNumber&&i.activator.writeChainBlockHeaderLog(i.chainNumber,`${i.action.toFullString()}の効果処理。`),i.isNegatedActivationBy)i.state="nagated",i.chainNumber&&i.activator.writeInfoLog(`チェーン${i.chainNumber}: ${i.action.toFullString()}を${i.isNegatedActivationBy.toFullString()}によって発動が無効にされた。`);else{let l=i.action.entity.isEffective,c="";if(l){if(i.isNegatedEffectBy)c=`チェーン${i.chainNumber}: ${i.action.toFullString()}を${i.isNegatedEffectBy.toFullString()}によって効果を無効にした。`,l=!1;else if(this.isWithChainBlock&&!i.enableCellTypes.includes(i.isActivatedIn.cellType)){const u=i.action.entity.moveLog.records.findLast(d=>d.face==="FaceDown"&&d.orientation==="Horizontal");l=(u&&i.activator.duel.clock.isSameChain(u.movedAt))??!1}}l?(s=await this.definition.execute(i,a),i.state=s?"done":"failed"):(i.state="nagated",i.chainNumber&&(c=c||`チェーン${i.chainNumber}: カードの効果が無効となっているため${i.action.toFullString()}の効果処理を行えない。`),i.activator.writeInfoLog(c)),this.entity.determine(),this.isOnlyNTimesPerTurnIfFaceup>0?this.entity.counterHolder.incrementActionCountPerTurn(this):this.isOnlyNTimesIfFaceup>0&&this.entity.counterHolder.incrementActionCount(this),this.definition.settle(i,a)}return s});o(this,"directExecute",async(i,a,n)=>{const r=await this.prepare(i,void 0,a,[],!1,n);if(!r)throw new m("想定されない状態",this,i,n);return i.duel.chainBlockLog.push(r),await this.execute(r,[])});o(this,"isSame",i=>this.entity.origin.name===i.entity.origin.name&&this.title===i.title);o(this,"isSameGroup",i=>this.actionGroupName?this.entity.origin.name===i.entity.origin.name&&this.actionGroupName===i.actionGroupName:this.isSame(i));o(this,"calcChainBlockTagsForDestroy",(i,a)=>{if(!Mt.length)return[];const n=["Destroy"];Mt.length>1&&n.push("DestroyMultiple");const r=a.filter(u=>u.isOnFieldStrictly);r.length&&(n.push("DestroyOnField"),r.length>1&&n.push("DestroyMultipleOnField"));const s=r.filter(u=>u.kind==="Monster");s.length&&(n.push("DestroyMonsterOnField"),s.length>1&&n.push("DestroyMonstersOnField")),r.filter(u=>u.kind!=="Monster").length&&(n.push("DestroySpellTrapOnField"),s.length>1&&n.push("DestroySpellTrapsOnField"));const c=r.filter(u=>u.controller!==i);return c.length&&(n.push("DestroyOnOpponentField"),c.length>1&&n.push("DestroyMultipleOnOpponentField")),n});this.addhocMaterialLimitation=r??(()=>!0)}get definition(){return super.definition}get playType(){return this.definition.playType}get spellSpeed(){return this.definition.spellSpeed}get needsToPayRegularCosts(){return this.definition.needsToPayRegularCost??!1}get hasToTargetCards(){return this.definition.hasToTargetCards??!1}get isWithChainBlock(){return ct.some(i=>i===this.playType)}get isChainable(){return ba.some(i=>i===this.playType)}get isLikeContinuousSpell(){return this.definition.isLikeContinuousSpell||this.entity.isLikeContinuousSpell&&this.playType==="CardActivation"}get isNoticedForcibly(){return this.isMandatory||this.definition.playType==="TriggerEffect"||this.definition.playType==="LingeringEffect"||this.negatePreviousBlock||this.negateSummon}get negatePreviousBlock(){return this.definition.negatePreviousBlock??!1}get negateSummon(){return this.definition.negateSummon??!1}get priorityForNPC(){return this.definition.priorityForNPC??Number.NaN}*getEnableMaterialPatterns(i){this.definition.getEnableMaterialPatterns&&(yield*this.definition.getEnableMaterialPatterns(i).filter(this.addhocMaterialLimitation))}};o(ae,"createNew",(i,a)=>new ae("AutoSeq",i,a)),o(ae,"createDummyAction",(i,a,n,r,s)=>({action:ae.createNew(i,{title:a,isMandatory:!1,executableCells:[],executablePeriods:[],executableDuelistTypes:[],playType:"Dammy",spellSpeed:"Dammy",getDests:()=>n,prepare:async()=>{},execute:async()=>!1,settle:async()=>!1}),dests:n,battlePosition:r,originSeq:(s==null?void 0:s.seq)??-1}));let ne=ae;const C=async()=>({selectedEntities:[]}),ve=async(t,e,i)=>(t.activator.payLp(i,t.action.entity),{lifePoint:i}),Pn=t=>t.activator.canSendToGraveyard([t.action.entity])&&t.action.entity.canBeSentToGraveyard(t.activator,t.action.entity,"SendToGraveyardAsCost",t.action),Mn=async t=>(await t.action.entity.sendToGraveyard(["Cost"],t.action.entity,t.activator),{sendToGraveyard:[t.action.entity]}),De=t=>t.activator.canTryBanish(t.action.entity,"BanishAsCost",t.action)&&t.action.entity.canBeBanished("BanishAsCost",t.activator,t.action.entity,t.action),Ue=async t=>(await t.action.entity.banish(["Cost"],t.action.entity,t.activator),{banish:[t.action.entity]}),Fn=(t,e,i=1)=>e.filter(a=>t.activator.canTryBanish(a,"BanishAsCost",t.action)).filter(a=>a.canBeBanished("BanishAsCost",t.activator,t.action.entity,t.action)).length>=i,Nn=async(t,e,i,a)=>{const n=e.filter(s=>t.activator.canTryBanish(s,"BanishAsCost",t.action)).filter(s=>s.canBeBanished("BanishAsCost",t.activator,t.action.entity,t.action)),r=await t.activator.waitSelectEntities(n,a,i,"コストとして除外するカードを選択",!1)??[];return await v.banishManyForTheSameReason(r,["Cost"],t.action.entity,t.activator),{banish:r}},dt=(t,e,i=()=>!0,a=1)=>t.activator.getHandCell().cardEntities.filter(i).filter(n=>t.activator.canDiscard([n])).length>=a,pt=async(t,e,i=!1,a=()=>!0,n=1)=>({discard:await t.activator.discard(n,"Cost",a,t.action.entity,t.activator,t.activator,i)}),On=(t,e)=>dt(t,e,i=>t.action.entity===i,1),Bn=(t,e,i=!1)=>pt(t,e,i,a=>t.action.entity===a),Ln=(t,e)=>t.action.getTargetableEntities(t,e).filter(i=>i.isOnField).map(i=>i.fieldCell),qn=(t=()=>!0,e=["MonsterZone","ExtraMonsterZone"],i=1)=>({canPayCosts:(a,n)=>a.activator.getCells(...e).flatMap(s=>s.cardEntities).filter(s=>s.kind==="Monster").filter(s=>s.canBeReleased(a.activator,a.action.entity,["ReleaseAsCost"],a.action)).filter(s=>t(a,n,s)).length>=i,payCosts:async(a,n,r)=>{const s=a.activator.getCells(...e).flatMap(c=>c.cardEntities).filter(c=>c.kind==="Monster").filter(c=>c.canBeReleased(a.activator,a.action.entity,["ReleaseAsCost"],a.action)).filter(c=>t(a,n,c)),l=await a.activator.waitSelectEntities(s,i,c=>c.length===i,"コストとするモンスターを選択",r);if(l)return await v.releaseManyForTheSameReason(l,["Cost"],a.action.entity,a.activator),{release:l}}}),V=(t,e={})=>({hasToTargetCards:!0,getTargetableEntities:t,canExecute:(i,a,n)=>t(i,a,n).filter(r=>r.canBeTargetOfEffect(i)).length>0&&(!e.canExecute||e.canExecute(i,a,n)),getDests:Ln,prepare:async(i,a,n)=>{let r=[];if(i.dest)r=[i.dest.cardEntities[0]];else{const l=i.action.getTargetableEntities(i,a).filter(u=>u.canBeTargetOfEffect(i)),c=await i.activator.waitSelectEntity(l,e.message??"対象とするカードを選択。",n);if(!c)return;r=[c]}const s=e.tags??[];return e.destoryTargets&&s.push(...i.action.calcChainBlockTagsForDestroy(i.activator,r)),{selectedEntities:r,chainBlockTags:s,appendix:[`対象：${r.map(l=>l.toString()).join(", ")}`]}}}),le=async(t,e,i=T,a=r=>r.length===1,n=1)=>{const r=t.activator.getMonsterZones(),s=t.activator.getEnableSummonList(t.activator,"SpecialSummon",["Effect"],t.action,e.filter(u=>u.kind==="Monster").filter(u=>u.canBeTargetOfEffect(t)).map(u=>({monster:u,posList:i,cells:r})),[],!1),l=await t.activator.waitSelectEntities(s.map(u=>u.monster),n,a,"特殊召喚するモンスターを選択",!1)??[];if(!l.length)throw new D(t);const c=l.map(u=>u.fieldCell.cellType).getDistinct().filter(u=>u==="Graveyard"||u==="Banished").map(u=>u==="Graveyard"?"SpecialSummonFromGraveyard":"SpecialSummonFromBanished");return{selectedEntities:l,chainBlockTags:c}},ce=async(t,e=["Attack","Defense"],i=!0)=>{const a=t.activator.getMonsterZones(),n=t.selectedEntities.filter(r=>!r.wasMovedAfter(t.isActivatedAt)).map(r=>({monster:r,posList:e,cells:a}));return i&&(n.length!==t.selectedEntities.length||a.length<n.length)?!1:(await t.activator.summonAll(t.activator,"SpecialSummon",["Effect"],t.action,n,[],!1,!1),!0)},Rn=async(t,e,i=["Attack","Defense"])=>{const a=t.activator.getMonsterZones(),n=e.map(r=>({monster:r,posList:i,cells:a}));return await t.activator.summonAll(t.activator,"SpecialSummon",["Effect"],t.action,n,[],!1,!1),!0},Hn=(t,e,i)=>({title:t,playType:"SystemPeriodAction",spellSpeed:"Normal",executableCells:X,executablePeriods:e,executableDuelistTypes:me,isMandatory:!0,canExecute:a=>(i(a),!1),prepare:C,execute:async()=>!0,settle:async()=>!0}),S={title:"セット",playType:"SpellTrapSet",spellSpeed:"Normal",executableCells:["Hand"],executablePeriods:["main1","main2"],executableDuelistTypes:["Controller"],isMandatory:!1,prepare:C,execute:async()=>!0,settle:async()=>!0},Y={title:"発動",isMandatory:!1,playType:"CardActivation",spellSpeed:"Normal",executableCells:["Hand","SpellAndTrapZone","FieldSpellZone"],executablePeriods:["main1","main2"],executableDuelistTypes:["Controller"],prepare:C,execute:async()=>!0,settle:async()=>!0},Zn=async(t,e,i,a,n)=>{const r=t.action.getTargetableEntities(t,e);if(!r)throw new m("CardAction定義が正しくない",t);const s=await t.activator.waitSelectEntity(r,"装備対象モンスターを選択",i);if(s)return t.action.entity.info.equipedBy=s,t.action.entity.info.effectTargets[t.action.seq]=[s],{chainBlockTags:a??[],selectedEntities:[s],prepared:n}},ti=async(t,e,i=()=>!0)=>{const a=t.selectedEntities[0];return t.action.entity.info.equipedBy=a,t.action.entity.info.effectTargets[t.action.seq]=[a],i(a,t.action.entity)?(t.action.entity.info.equipedBy=a,t.action.entity.info.validateEquipOwner=i,a.info.equipEntities.push(t.action.entity),!0):(await t.action.entity.ruleDestory(),t.activator.writeInfoLog(`${a.toString()}が装備条件を満たさなくなったため、${t.action.entity.toString()}は破壊された。`),!1)},he=(t=()=>!0)=>({title:"発動",isMandatory:!1,playType:"CardActivation",spellSpeed:"Normal",executableCells:["Hand","SpellAndTrapZone"],executablePeriods:["main1","main2"],executableDuelistTypes:["Controller"],getTargetableEntities:e=>e.action.entity.field.getMonstersOnFieldStrictly().filter(i=>i.face==="FaceUp").filter(i=>i.canBeTargetOfEffect(e)).filter(i=>t(i,e.action.entity)),getDests:(e,i)=>e.action.getTargetableEntities(e,i).filter(a=>a.isOnFieldAsMonsterStrictly).map(a=>a.fieldCell),prepare:(e,i,a)=>Zn(e,i,a,[],void 0),execute:ti,settle:async()=>!0});function*Gn(){yield{name:"連合軍",actions:[Y,S],continuousEffects:[Fe("発動","Spell",t=>[L.createContinuous("発動",e=>e.isSpawnedBy.isOnFieldStrictly&&e.isSpawnedBy.face==="FaceUp",t,(e,i)=>i.controller===e.isSpawnedBy.controller&&i.types.includes("Warrior")&&i.isOnFieldStrictly&&i.face==="FaceUp","attack","wip","Addition",(e,i,a)=>{if(!e.isEffective||i.face==="FaceDown")return a;const n=e.controller.getMonstersOnField().filter(r=>r.face==="FaceUp").filter(r=>r.types.includes("Warrior")||r.types.includes("Spellcaster")).length;return a+n*200})])]}}const ii=Object.freeze(Object.defineProperty({__proto__:null,default:Gn},Symbol.toStringTag,{value:"Module"}));function*$n(){const t=[{name:"リビングデッドの呼び声",pos:"Attack",filter:()=>!0},{name:"エンジェル・リフト",pos:"Attack",filter:e=>(e.lvl??12)<3},{name:"正統なる血統",pos:"Attack",filter:e=>{var i;return!!((i=e.status.monsterCategories)!=null&&i.includes("Normal"))}},{name:"蘇りし魂",pos:"Defense",filter:e=>{var i;return!!((i=e.status.monsterCategories)!=null&&i.includes("Normal"))}},{name:"リミット・リバース",pos:"Attack",filter:e=>(e.atk??9999)<=1e3,targetImmdAction:async(e,i)=>{if(!i.isOnFieldAsMonsterStrictly||i.face==="FaceDown")return"RemoveMe";if(e.entity.isEffective&&i.battlePosition==="Defense")return e.entity.controller.writeInfoLog(`${i.toString()}が守備表示になったため、${e.entity.toString()}とともに破壊される。`),await v.tryMarkForDestory([i,e.entity],{action:e,activator:e.entity.controller,selectedEntities:[i]}),"RemoveMe"}}];for(const e of t)yield{name:e.name,actions:[{title:"発動",isMandatory:!1,playType:"CardActivation",spellSpeed:"Quick",executableCells:["SpellAndTrapZone"],executablePeriods:w,executableDuelistTypes:["Controller"],fixedTags:["SpecialSummonFromGraveyard","SpecialSummon"],canExecute:i=>{const a=i.activator.getMonsterZones();return i.activator.getEnableSummonList(i.activator,"SpecialSummon",["Effect"],i.action,i.activator.getGraveyard().cardEntities.filter(r=>r.kind==="Monster").filter(e.filter).filter(r=>r.canBeTargetOfEffect(i)).map(r=>({monster:r,posList:["Attack"],cells:a})),[],!1).length>0},prepare:i=>le(i,i.activator.getGraveyard().cardEntities.filter(a=>a.kind==="Monster").filter(e.filter).filter(a=>a.canBeTargetOfEffect(i)),["Attack"]),execute:async i=>!await ce(i,["Attack"])||!i.selectedEntities.length?!1:(i.action.entity.info.effectTargets[i.action.seq]=i.selectedEntities,!0),settle:async()=>!0},S],immediatelyActions:[{title:"自壊",executableCells:["SpellAndTrapZone"],executablePeriods:q,executableFaces:["FaceUp"],execute:async(i,a,n)=>{if(!n)return;const r=Object.values(i.entity.info.effectTargets).flatMap(l=>l);if(!r.length)return;const s=r[0];if(a===i.entity)return s.isOnFieldStrictly&&s.face==="FaceUp"&&i.entity.isEffective&&!n.to.isSpellTrapZoneLikeCell&&(i.entity.controller.writeInfoLog(`${i.entity.toString()}がフィールドを離れたため、対象モンスター${s.toString()}を破壊。`),await v.tryMarkForDestory([s],{action:i,activator:i.entity.controller,selectedEntities:r})),"RemoveMe";a===s&&e.targetImmdAction&&e.targetImmdAction(i,a,n)}}]}}const ai=Object.freeze(Object.defineProperty({__proto__:null,default:$n},Symbol.toStringTag,{value:"Module"}));function*jn(){yield{name:"昇天の黒角笛",actions:[{title:"発動",isMandatory:!1,playType:"CardActivation",spellSpeed:"Counter",executableCells:["SpellAndTrapZone"],executablePeriods:q,executableDuelistTypes:["Controller"],negateSummon:!0,fixedTags:["NegateSpecialSummon"],canExecute:t=>(t.targetChainBlock&&t.targetChainBlock.action.playType==="SpecialSummon"&&t.targetChainBlock.activator!==t.activator&&t.activator.duel.field.getPendingMonstersOnField().length===1)??!1,prepare:async()=>({selectedEntities:[]}),execute:async t=>{const e=v.negateSummonMany(t.action.entity,t.activator);return await v.tryDestroy(e,t),!0},settle:async()=>!0},S]}}const ni=Object.freeze(Object.defineProperty({__proto__:null,default:jn},Symbol.toStringTag,{value:"Module"}));function*Un(){yield*[{name:"団結の力",filter:t=>t.isMonster&&t.face==="FaceUp",rate:800},{name:"魔導師の力",filter:t=>t.kind==="Spell"||t.kind==="Trap",rate:500}].map(t=>({name:t.name,actions:[he(),S],continuousEffects:[ke(t.name,"Spell",e=>e.info.equipedBy?[e.info.equipedBy]:[],e=>["attack","defense"].map(i=>L.createContinuous("発動",a=>a.isSpawnedBy.isOnFieldStrictly&&a.isSpawnedBy.face==="FaceUp",e,(a,n)=>n.isOnFieldStrictly&&n.face==="FaceUp",i,"wip","Addition",(a,n,r)=>{if(!a.isEffective)return r;const s=a.controller.getEntiteisOnField().filter(t.filter).length;return r+s*t.rate})))]})),yield{name:"早すぎた埋葬",actions:[{title:"発動",isMandatory:!1,playType:"CardActivation",spellSpeed:"Normal",executableCells:["Hand","SpellAndTrapZone"],executablePeriods:["main1","main2"],executableDuelistTypes:["Controller"],hasToTargetCards:!0,fixedTags:["SpecialSummonFromGraveyard"],canPayCosts:t=>t.activator.lp>=800,canExecute:t=>{const e=t.activator.getMonsterZones();return t.activator.getEnableSummonList(t.activator,"SpecialSummon",["Effect"],t.action,t.activator.getGraveyard().cardEntities.filter(a=>a.kind==="Monster").filter(a=>a.canBeTargetOfEffect(t)).map(a=>({monster:a,posList:["Attack"],cells:e})),[],!1).length>0},payCosts:(t,e)=>ve(t,e,800),prepare:async t=>{const e=await le(t,t.activator.getGraveyard().cardEntities,["Attack"]);return e.chainBlockTags.push("PayLifePoint"),e},execute:async(t,e)=>t.action.entity.info.equipedBy?(await t.action.entity.ruleDestory(),!1):await ce(t,["Attack"])?ti(t,e,(a,n)=>{var r;return(r=n.info.effectTargets[t.action.seq])==null?void 0:r.includes(a)}):(await t.action.entity.ruleDestory(),!1),settle:async()=>!0},S],immediatelyActions:[{title:"自壊",executableCells:["SpellAndTrapZone"],executablePeriods:q,executableFaces:["FaceUp"],execute:async(t,e,i)=>{if(!i)return;const a=t.entity.info.equipedBy;if(a&&e===t.entity){a.isOnFieldStrictly&&a.face==="FaceUp"&&t.entity.isEffective&&!i.to.isSpellTrapZoneLikeCell&&i.movedAs.some(n=>n.endsWith("Destroy"))&&(t.entity.controller.writeInfoLog(`${t.entity.toString()}が破壊されたため、対象モンスター${a.toString()}を破壊。`),await v.tryMarkForDestory([a],{action:t,activator:t.entity.controller,selectedEntities:[a]}));return}}}]},yield{name:"幻惑の巻物",actions:[he(),S],continuousEffects:[]}}const ri=Object.freeze(Object.defineProperty({__proto__:null,default:Un},Symbol.toStringTag,{value:"Module"}));function*zn(){yield*[{name:"伝説の剣",attr:void 0,monType:"Warrior",atk:200,def:200},{name:"秘術の書",attr:void 0,monType:"Spellcaster",atk:200,def:200},{name:"ポセイドンの力",attr:void 0,monType:"Aqua",atk:200,def:200},{name:"紫水晶",attr:void 0,monType:"Zombie",atk:200,def:200},{name:"猛獣の歯",attr:void 0,monType:"Beast",atk:200,def:200},{name:"機械改造工場",attr:void 0,monType:"Machine",atk:200,def:200},{name:"体温の上昇",attr:void 0,monType:"Reptile",atk:200,def:200},{name:"魔菌",attr:void 0,monType:"Plant",atk:200,def:200},{name:"闇・エネルギー",attr:void 0,monType:"Fiend",atk:200,def:200},{name:"レーザー砲機甲鎧",attr:void 0,monType:"Insect",atk:200,def:200},{name:"銀の弓矢",attr:void 0,monType:"Fairy",atk:200,def:200},{name:"電撃鞭",attr:void 0,monType:"Thunder",atk:200,def:200},{name:"ドラゴンの秘宝",attr:void 0,monType:"Dragon",atk:200,def:200},{name:"フォロー・ウィンド",attr:void 0,monType:"WingedBeast",atk:200,def:200},{name:"魔性の月",attr:void 0,monType:"BeastWarrior",atk:200,def:200},{name:"エルフの光",attr:"Light",monType:void 0,atk:400,def:-200},{name:"覚醒",attr:"Earth",monType:void 0,atk:400,def:-200},{name:"灼熱の槍",attr:"Fire",monType:void 0,atk:400,def:-200},{name:"突風の扇",attr:"Wind",monType:void 0,atk:400,def:-200},{name:"はがねの甲羅",attr:"Water",monType:void 0,atk:400,def:-200},{name:"闇の破神剣",attr:"Dark",monType:void 0,atk:400,def:-200},{name:"火器付機甲鎧",attr:void 0,monType:"Insect",atk:700,def:0},{name:"サラマンドラ",attr:"Fire",monType:void 0,atk:700,def:0},{name:"シャイン・キャッスル",attr:"Light",monType:void 0,atk:700,def:0}].map(t=>({name:t.name,actions:[he(e=>(!t.attr||e.attr.includes(t.attr))&&(!t.monType||e.types.includes(t.monType))),S],continuousEffects:[ke(t.name,"Spell",e=>e.info.equipedBy?[e.info.equipedBy]:[],e=>{const i=[];return t.atk!==0&&i.push(["attack",t.atk]),t.def!==0&&i.push(["defense",t.def]),i.map(([a,n])=>L.createContinuous("発動",r=>r.isSpawnedBy.isOnFieldStrictly&&r.isSpawnedBy.face==="FaceUp",e,(r,s)=>s.isOnFieldStrictly&&s.face==="FaceUp"&&(!t.monType||s.types.includes(t.monType))&&(!t.attr||s.attr.includes(t.attr)),a,"wip","Addition",(r,s,l)=>r.isEffective?l+n:l))})]}))}const si=Object.freeze(Object.defineProperty({__proto__:null,default:zn},Symbol.toStringTag,{value:"Module"}));function*Vn(){yield{name:"チキンレース",actions:[Y,S,{title:"②効果発動",isMandatory:!1,playType:"IgnitionEffect",spellSpeed:"Normal",executableCells:["FieldSpellZone"],executablePeriods:["main1","main2"],executableDuelistTypes:me,isOnlyNTimesPerTurnIfFaceup:1,canPayCosts:t=>t.activator.lp>=1e3,canExecute:t=>t.action.entity.face==="FaceUp",payCosts:(t,e)=>ve(t,e,1e3),prepare:async(t,e,i)=>{let a=[{seq:0,text:"●デッキから１枚ドローする。",tags:["Draw"]},{seq:1,text:"●このカードを破壊する。",tags:t.action.calcChainBlockTagsForDestroy(t.activator,[t.action.entity])},{seq:2,text:"●相手は1000LP回復する。",tags:[]}];t.activator.getDeckCell().cardEntities.length||(a=a.filter(r=>r.seq));const n=await t.activator.waitSelectText(a,"使用する効果を選択",i);if(n!==void 0)return t.data=n.seq,{selectedEntities:[],chainBlockTags:n.tags,nextChainBlockFilter:()=>!1}},execute:async t=>{if(t.data===0)await t.activator.draw(1,t.action.entity,t.activator);else if(t.data===1)await v.tryDestroy([t.action.entity],t);else if(t.data===2)t.activator.getOpponentPlayer().heal(1e3,t.action.entity);else throw new m("値が正しくない。",t,t.data);return!0},settle:async()=>!0}],continuousEffects:[Ra("①ダメージ無効","Spell",t=>[t.controller,t.controller.getOpponentPlayer()].map(e=>e.entity),t=>[new Xt({title:"①ダメージ無効",validateAlive:()=>!0,isContinuous:!0,isSpawnedBy:t,actionAttr:{},isApplicableTo:()=>!0,calcType:"zero_typeA",filter:(e,i,a,n)=>e.isSpawnedBy.fieldCell.cellType!=="FieldSpellZone"?{}:n.lp>=n.getOpponentPlayer().lp?{}:(a.writeInfoLog(`${n.profile.name}はチキンレースの効果でダメージを受けない。`),{zero_typeA:!0})})])]}}const oi=Object.freeze(Object.defineProperty({__proto__:null,default:Vn},Symbol.toStringTag,{value:"Module"}));function*Wn(){yield*[{name:"草原",up:["Warrior","BeastWarrior"],down:[]},{name:"森",up:["Insect","Plant","Beast","BeastWarrior"],down:[]},{name:"山",up:["Dragon","WingedBeast","Thunder"],down:[]},{name:"荒野",up:["Dinosaur","Zombie","Rock"],down:[]},{name:"海",up:["Aqua","SeaSerpent","Fish"],down:["Machine","Pyro"]},{name:"闇",up:["Fiend","Spellcaster"],down:["Fairy"]}].map(t=>({name:t.name,actions:[Y,S],continuousEffects:[Fe("発動","Spell",e=>["attack","defense"].flatMap(i=>["up","down"].map(a=>L.createContinuous("発動",n=>n.isSpawnedBy.isOnFieldStrictly&&n.isSpawnedBy.face==="FaceUp",e,(n,r)=>r.isOnFieldStrictly&&r.face==="FaceUp"&&(r.status.monsterCategories??!1)&&t[a].union(r.types).length>0,i,"wip","Addition",(n,r,s)=>!n.isEffective||r.face==="FaceDown"?s:s+(a==="up"?200:-200)))))]})),yield*[{name:"バーニングブラッド",attr:"Fire"},{name:"ウォーターワールド",attr:"Water"},{name:"ガイアパワー",attr:"Earth"},{name:"シャインスパーク",attr:"Light"},{name:"ダークゾーン",attr:"Dark"},{name:"デザートストーム",attr:"Wind"}].map(t=>({name:t.name,actions:[Y,S],continuousEffects:[Fe("発動","Spell",e=>["attack","defense"].flatMap(i=>L.createContinuous("発動",a=>a.isSpawnedBy.isOnFieldStrictly&&a.isSpawnedBy.face==="FaceUp",e,(a,n)=>n.isOnFieldStrictly&&n.face==="FaceUp"&&n.attr.includes(t.attr),i,"wip","Addition",(a,n,r)=>!a.isEffective||n.face==="FaceDown"?r:r+(i==="attack"?500:-400))))]}))}const li=Object.freeze(Object.defineProperty({__proto__:null,default:Wn},Symbol.toStringTag,{value:"Module"}));function*Qn(){const t=[{name:"カルボナーラ戦士",materialInfos:[{type:"Name",cardName:"マグネッツ１号"},{type:"Name",cardName:"マグネッツ２号"}]},{name:"クリッチー",materialInfos:[{type:"Name",cardName:"クリッター"},{type:"Name",cardName:"黒き森のウィッチ"}]},{name:"スケルゴン",materialInfos:[{type:"Name",cardName:"メデューサの亡霊"},{type:"Name",cardName:"暗黒の竜王"}]},{name:"スチームジャイロイド",materialInfos:[{type:"Name",cardName:"ジャイロイド"},{type:"Name",cardName:"スチームロイド"}]},{name:"バラに棲む悪霊",materialInfos:[{type:"Name",cardName:"グレムリン"},{type:"Name",cardName:"スネーク・パーム"}]},{name:"バロックス",materialInfos:[{type:"Name",cardName:"キラーパンダ"},{type:"Name",cardName:"ガーゴイル"}]},{name:"フュージョニスト",materialInfos:[{type:"Name",cardName:"プチテンシ"},{type:"Name",cardName:"スリーピィ"}]},{name:"ブラキオレイドス",materialInfos:[{type:"Name",cardName:"二頭を持つキング・レックス"},{type:"Name",cardName:"屍を貪る竜"}]},{name:"プラグティカル",materialInfos:[{type:"Name",cardName:"トラコドン"},{type:"Name",cardName:"フレイム・ヴァイパー"}]},{name:"マブラス",materialInfos:[{type:"Name",cardName:"タイホーン"},{type:"Name",cardName:"邪炎の翼"}]},{name:"ミノケンタウロス",materialInfos:[{type:"Name",cardName:"ミノタウルス"},{type:"Name",cardName:"ケンタウロス"}]},{name:"暗黒火炎龍",materialInfos:[{type:"Name",cardName:"火炎草"},{type:"Name",cardName:"プチリュウ"}]},{name:"炎の騎士 キラー",materialInfos:[{type:"Name",cardName:"モンスター・エッグ"},{type:"Name",cardName:"スティング"}]},{name:"炎の剣士",materialInfos:[{type:"Name",cardName:"炎を操る者"},{type:"Name",cardName:"伝説の剣豪 ＭＡＳＡＫＩ"}]},{name:"音楽家の帝王",materialInfos:[{type:"Name",cardName:"黒き森のウィッチ"},{type:"Name",cardName:"ハイ・プリーステス"}]},{name:"金色の魔象",materialInfos:[{type:"Name",cardName:"メデューサの亡霊"},{type:"Name",cardName:"ドラゴン・ゾンビ"}]},{name:"紅陽鳥",materialInfos:[{type:"Name",cardName:"セイント・バード"},{type:"Name",cardName:"スカイ・ハンター"}]},{name:"轟きの大海蛇",materialInfos:[{type:"Name",cardName:"魔法のランプ"},{type:"Name",cardName:"ひょうすべ"}]},{name:"黒き人食い鮫",materialInfos:[{type:"Name",cardName:"シーカーメン"},{type:"Name",cardName:"キラー・ブロッブ"},{type:"Name",cardName:"海原の女戦士"}]},{name:"砂の魔女",materialInfos:[{type:"Name",cardName:"岩石の巨兵"},{type:"Name",cardName:"エンシェント・エルフ"}]},{name:"裁きの鷹",materialInfos:[{type:"Name",cardName:"冠を戴く蒼き翼"},{type:"Name",cardName:"コケ"}]},{name:"裁きを下す女帝",materialInfos:[{type:"Name",cardName:"女王の影武者"},{type:"Name",cardName:"響女"}]},{name:"朱雀",materialInfos:[{type:"Name",cardName:"赤き剣のライムンドス"},{type:"Name",cardName:"炎の魔神"}]},{name:"深海に潜むサメ",materialInfos:[{type:"Name",cardName:"神魚"},{type:"Name",cardName:"舌魚"}]},{name:"水陸両用バグロス",materialInfos:[{type:"Name",cardName:"陸戦型 バグロス"},{type:"Name",cardName:"海を守る戦士"}]},{name:"戦場の死装束",materialInfos:[{type:"Name",cardName:"音女"},{type:"Name",cardName:"斬首の美女"}]},{name:"魔装騎士ドラゴネス",materialInfos:[{type:"Name",cardName:"アーメイル"},{type:"Name",cardName:"一眼の盾竜"}]},{name:"魔導騎士ギルティア",materialInfos:[{type:"Name",cardName:"冥界の番人"},{type:"Name",cardName:"王座の守護者"}]},{name:"雷神の怒り",materialInfos:[{type:"Name",cardName:"エンゼル・イヤーズ"},{type:"Name",cardName:"メガ・サンダーボール"}]},{name:"カイザー・ドラゴン",materialInfos:[{type:"Name",cardName:"砦を守る翼竜"},{type:"Name",cardName:"フェアリー・ドラゴン"}]},{name:"スカルビショップ",materialInfos:[{type:"Name",cardName:"悪魔の知恵"},{type:"Name",cardName:"魔天老"}]},{name:"デビル・ボックス",materialInfos:[{type:"Name",cardName:"マーダーサーカス"},{type:"Name",cardName:"ドリーム・ピエロ"}]},{name:"ヒューマノイド・ドレイク",materialInfos:[{type:"Name",cardName:"ワームドレイク"},{type:"Name",cardName:"ヒューマノイド・スライム"}]},{name:"ブラック・デーモンズ・ドラゴン",materialInfos:[{type:"Name",cardName:"デーモンの召喚"},{type:"Name",cardName:"真紅眼の黒竜"}]},{name:"マスター・オブ・ＯＺ",materialInfos:[{type:"Name",cardName:"ビッグ・コアラ"},{type:"Name",cardName:"デス・カンガルー"}]},{name:"メテオ・ブラック・ドラゴン",materialInfos:[{type:"Name",cardName:"真紅眼の黒竜"},{type:"Name",cardName:"メテオ・ドラゴン"}]},{name:"召喚獣メガラニカ",materialInfos:[{type:"Name",cardName:"召喚師アレイスター"},{type:"Name",cardName:"地属性モンスター"}]},{name:"聖女ジャンヌ",materialInfos:[{type:"Name",cardName:"慈悲深き修道女"},{type:"Name",cardName:"堕天使マリー"}]},{name:"青眼の究極竜",materialInfos:[{type:"Name",cardName:"青眼の白龍"},{type:"Name",cardName:"青眼の白龍"},{type:"Name",cardName:"青眼の白龍"}]},{name:"千年竜",materialInfos:[{type:"Name",cardName:"時の魔術師"},{type:"Name",cardName:"ベビードラゴン"}]},{name:"双頭の雷龍",materialInfos:[{type:"Name",cardName:"サンダー・ドラゴン"},{type:"Name",cardName:"サンダー・ドラゴン"}]},{name:"迷宮の魔戦車",materialInfos:[{type:"Name",cardName:"ギガテック・ウルフ"},{type:"Name",cardName:"キャノン・ソルジャー"}]},{name:"竜騎士ガイア",materialInfos:[{type:"Name",cardName:"暗黒騎士ガイア"},{type:"Name",cardName:"カース・オブ・ドラゴン"}]},{name:"アクア・ドラゴン",materialInfos:[{type:"Name",cardName:"フェアリー・ドラゴン"},{type:"Name",cardName:"海原の女戦士"}]},{name:"アンデット・ウォーリアー",materialInfos:[{type:"Name",cardName:"ワイト"},{type:"Name",cardName:"格闘戦士アルティメーター"}]},{name:"カオス・ウィザード",materialInfos:[{type:"Name",cardName:"ホーリー・エルフ"},{type:"Name",cardName:"黒魔族のカーテン"}]},{name:"クワガー・ヘラクレス",materialInfos:[{type:"Name",cardName:"クワガタ・アルファ"},{type:"Name",cardName:"ヘラクレス・ビートル"}]},{name:"ソウル・ハンター",materialInfos:[{type:"Name",cardName:"ランプの魔人"},{type:"Name",cardName:"異次元からの侵略者"}]},{name:"デス・バード",materialInfos:[{type:"Name",cardName:"タクヒ"},{type:"Name",cardName:"髑髏の寺院"}]},{name:"フラワー・ウルフ",materialInfos:[{type:"Name",cardName:"シルバー・フォング"},{type:"Name",cardName:"魔界のイバラ"}]},{name:"フレイム・ゴースト",materialInfos:[{type:"Name",cardName:"ワイト"},{type:"Name",cardName:"マグマン"}]},{name:"マリン・ビースト",materialInfos:[{type:"Name",cardName:"水の魔導師"},{type:"Name",cardName:"ベヒゴン"}]},{name:"メカ・ザウルス",materialInfos:[{type:"Name",cardName:"ミスター・ボンバー"},{type:"Name",cardName:"二頭を持つキング・レックス"}]},{name:"メタル・ドラゴン",materialInfos:[{type:"Name",cardName:"鋼鉄の巨神像"},{type:"Name",cardName:"レッサー・ドラゴン"}]},{name:"レア・フィッシュ",materialInfos:[{type:"Name",cardName:"フュージョニスト"},{type:"Name",cardName:"恍惚の人魚"}]},{name:"無の畢竟 オールヴェイン",materialInfos:[{type:"Filter",filter:e=>{var i;return((i=e.status.monsterCategories)==null?void 0:i.includes("Normal"))??!1}},{type:"Filter",filter:e=>{var i;return((i=e.status.monsterCategories)==null?void 0:i.includes("Normal"))??!1}}]},{name:"テセウスの魔棲物",materialInfos:[{type:"Filter",filter:e=>{var i;return((i=e.status.monsterCategories)==null?void 0:i.includes("Tuner"))??!1}},{type:"Filter",filter:e=>{var i;return((i=e.status.monsterCategories)==null?void 0:i.includes("Tuner"))??!1}}]},{name:"ジェムナイト・ジルコニア",materialInfos:[{type:"Filter",filter:e=>{var i;return((i=e.status.nameTags)==null?void 0:i.includes("ジェムナイト"))??!1}},{type:"Filter",filter:e=>e.types.includes("Rock")??!1}]},{name:"メタルフォーゼ・アダマンテ",materialInfos:[{type:"Filter",filter:e=>{var i;return((i=e.status.nameTags)==null?void 0:i.includes("メタルフォーゼ"))??!1}},{type:"Filter",filter:e=>(e.atk??9999)<=2500}]},{name:"メタルフォーゼ・カーディナル",materialInfos:[{type:"Filter",filter:e=>{var i;return((i=e.status.nameTags)==null?void 0:i.includes("メタルフォーゼ"))??!1}},{type:"Filter",filter:e=>(e.atk??9999)<=3e3},{type:"Filter",filter:e=>(e.atk??9999)<=3e3}]}];for(const e of t)yield{name:e.name,actions:[],fusionMaterialInfos:e.materialInfos}}const ci=Object.freeze(Object.defineProperty({__proto__:null,default:Qn},Symbol.toStringTag,{value:"Module"})),Xn=async(t,e,i=!1)=>{if(!t.action.entity.lvl)return;if(t.action.entity.lvl<5)return{};const a=t.activator.getAvailableMonsterZones();let n=t.activator.getMonstersOnField().filter(u=>u.canBeReleased(t.activator,t.action.entity,["AdvanceSummonRelease"],t.action));const r=t.activator.getExtraMonsterZones(),s=t.action.entity.lvl<7?1:2;r.length>=s&&(n=n.filter(u=>u.fieldCell.cellType!=="ExtraMonsterZone"));const l=await t.activator.waitSelectEntities(n,s,u=>(i||u.length>0)&&(s<0||u.length===s)&&(a.length>0||u.some(d=>d.fieldCell.cellType==="ExtraMonsterZone")),"リリースするモンスターを選択",i)??[];return l.length?(await v.releaseManyForTheSameReason(l,["Cost","AdvanceSummonRelease","Rule"],t.action.entity,t.activator),{summonMaterialInfos:l.map(u=>({material:u,cell:u.fieldCell}))}):void 0},Kn=async t=>{var n;const e=["Rule","NormalSummon"];let i="NormalSummon";(n=t.costInfo.summonMaterialInfos)!=null&&n.length&&(i="AdvanceSummon",e.push("AdvanceSummon"));const a=t.dest?[t.dest]:t.activator.getAvailableMonsterZones();return I(t,i,e,["Attack","Set"],a)},I=async(t,e,i,a,n)=>{let r=t.dest?[t.dest]:n;return r||(r=t.activator.getMonsterZones(),t.action.entity.fieldCell.cellType==="ExtraDeck"&&r.push(...t.activator.duel.field.getCells("ExtraMonsterZone"))),await t.activator.summon(e,i,t.action,t.action.entity,a,r,t.costInfo.summonMaterialInfos??[],!1),{selectedEntities:[]}},ee=async t=>{var e,i;return t.action.entity.info.isRebornable=!((e=t.action.entity.origin.monsterCategories)!=null&&e.includes("RegularSpecialSummonOnly")),t.action.entity.determine(),(i=t.costInfo.summonMaterialInfos)==null||i.map(a=>a.material).forEach(a=>a.onUsedAsMaterial(t,t.action.entity)),!0},Jn={title:"通常召喚",isMandatory:!1,playType:"NormalSummon",spellSpeed:"Normal",executableCells:["Hand"],executablePeriods:["main1","main2"],executableDuelistTypes:["Controller"],canPayCosts:t=>{if(!t.action.entity.lvl)return!1;if(t.action.entity.lvl<5)return t.activator.getEnableSummonList(t.activator,"NormalSummon",["Rule"],t.action,[{monster:t.action.entity,posList:["Attack","Set"],cells:t.activator.getMonsterZones()}],[],!1).length>0;const e=t.activator.getMonstersOnField().filter(n=>n.canBeReleased(t.activator,t.action.entity,["AdvanceSummonRelease"],t.action)),i=t.action.entity.lvl<7?1:2;return e.length<i?!1:e.getAllOnOffPattern().filter(n=>n.length===i).some(n=>t.activator.getEnableSummonList(t.activator,"AdvanceSummon",["Rule","NormalSummon"],t.action,[{monster:t.action.entity,posList:["Attack","Set"],cells:t.activator.getMonsterZones()}],n.map(r=>({material:r,cell:r.fieldCell})),!1).length)},meetsConditions:t=>t.activator.info.ruleNormalSummonCount<t.activator.info.maxRuleNormalSummonCount&&!!t.action.entity.lvl,getDests:t=>t.action.entity.lvl?t.action.entity.lvl>4?[]:t.activator.getEnableSummonList(t.activator,"NormalSummon",["Rule"],t.action,[{monster:t.action.entity,posList:["Attack","Set"],cells:t.activator.getMonsterZones()}],[],!1).flatMap(i=>i.cells).getDistinct():[],payCosts:Xn,prepare:Kn,execute:ee,settle:async()=>!0},J=(t,e,i,a)=>{const n=t.activator.getMonsterZones();return t.action.entity.fieldCell.cellType==="ExtraDeck"&&n.push(...t.activator.getAvailableExtraMonsterZones()),t.activator.getEnableSummonList(t.activator,"SpecialSummon",a,t.action,[{monster:t.action.entity,posList:e,cells:n}],i,!1).flatMap(s=>s.cells)},$=(...t)=>J(...t).length>0,Yn={title:"攻撃宣言",isMandatory:!1,playType:"DeclareAttack",spellSpeed:"Normal",executableCells:["MonsterZone","ExtraMonsterZone"],executablePeriods:["b1Battle","b2Battle"],executableDuelistTypes:["Controller"],hasToTargetCards:!0,getTargetableEntities:t=>t.action.entity.getAttackTargets(),canExecute:(t,e)=>!t.activator.isTurnPlayer||!t.action.entity.isMonster||!t.action.entity.status.canAttack||t.action.entity.info.attackDeclareCount>0||t.action.entity.battlePosition!=="Attack"?!1:t.action.getTargetableEntities(t,e).length>0,getDests:(t,e)=>t.action.getTargetableEntities(t,e).map(i=>i.fieldCell),prepare:async(t,e)=>{var n,r;if(t.action.entity.info.attackDeclareCount>0||t.action.entity.battlePosition!=="Attack")return;const i=t.action.getTargetableEntities(t,e);if(i.length===0)throw new m("攻撃対象の選択肢がない状態で実行された。",t);let a=i[0];for(;i.length!==1;){if((n=t.dest)!=null&&n.targetForAttack){a=t.dest.entities.find(c=>c.entityType==="Duelist")??((r=t.dest)==null?void 0:r.targetForAttack);break}if(t.activator.duelistType==="NPC"){let l=t.activator.selectAttackTargetForNPC(t.action.entity,t.action);l||(t.activator.duel.log.warn("NPCの攻撃対象選択に失敗したため、ランダムに攻撃対象を選択。"),l=i.randomPick());break}const s=await t.activator.waitSelectEntity(i,"攻撃対象を選択。",!0);if(!s)return;a=s;break}return t.action.entity.field.duel.declareAttack(t.action.entity,a),{selectedEntities:[a]}},execute:async()=>!0,settle:async()=>!0},In={title:"戦闘",isMandatory:!1,playType:"Battle",spellSpeed:"Normal",executableCells:["MonsterZone","ExtraMonsterZone"],executablePeriods:["b1DDmgCalc","b2DDmgCalc"],executableDuelistTypes:["Controller"],hasToTargetCards:!0,canExecute:t=>!!t.activator.duel.targetForAttack&&t.activator.duel.attackingMonster===t.action.entity&&t.action.entity.isMonster,prepare:async t=>{if(t.activator.duel.attackingMonster!==t.action.entity)throw new m("canExecuteの判定が正しく行われなかった",t,t.activator.duel.attackingMonster,t.activator.duel.targetForAttack);if(!t.activator.duel.targetForAttack)throw new m("canExecuteの判定が正しく行われなかった",t,t.activator.duel.attackingMonster,t.activator.duel.targetForAttack);return{selectedEntities:[t.activator.duel.targetForAttack]}},execute:async()=>!0,settle:async()=>!0},ui=async t=>{if(!(t.action.entity.info.battlePotisionChangeCount>0||!t.activator.isTurnPlayer))return await t.action.entity.setBattlePosition(t.action.entity.battlePosition==="Attack"?"Defense":"Attack",["Rule"],t.action.entity,t.activator),t.action.entity.info.battlePotisionChangeCount++,{selectedEntities:[]}},er={title:"反転召喚",isMandatory:!1,playType:"FlipSummon",spellSpeed:"Normal",executableCells:["MonsterZone","ExtraMonsterZone"],executablePeriods:["main1","main2"],executableDuelistTypes:["Controller"],canExecute:t=>t.action.entity.info.battlePotisionChangeCount===0&&t.action.entity.info.attackDeclareCount===0&&t.activator.isTurnPlayer&&t.action.entity.face==="FaceDown"&&t.action.entity.isMonster,prepare:ui,execute:async t=>(t.action.entity.determine(),!0),settle:async()=>!0},tr={title:"表示形式変更",isMandatory:!1,playType:"ChangeBattlePosition",spellSpeed:"Normal",executableCells:["MonsterZone","ExtraMonsterZone"],executablePeriods:["main1","main2"],executableDuelistTypes:["Controller"],canExecute:t=>t.action.entity.info.battlePotisionChangeCount===0&&t.action.entity.info.attackDeclareCount===0&&t.activator.isTurnPlayer&&t.action.entity.face==="FaceUp"&&t.action.entity.isMonster,prepare:ui,execute:async t=>(t.action.entity.determine(),!0),settle:async()=>!0},re=async(t,e=["Attack","Defense"])=>{const i=t.activator.getMonsterZones();return t.action.entity.wasMovedAfter(t.isActivatedAt)?!1:(await t.activator.summon("SpecialSummon",["Effect"],t.action,t.action.entity,e,i,[],!1),!0)},di=[Yn,In],qe=[...di,tr,er],Ft=[Jn,...qe],ir=(t,e,i,a,n,r,s,l,c,u,d)=>{const p={posList:c,cells:u},f={posList:[],cells:[]};return e!==s||!s.isMonster||!s.origin.monsterCategories?p:s.origin.monsterCategories.includes("NormalSummonOnly")?n.includes("NormalSummon")||n.includes("AdvanceSummon")?p:f:!s.origin.monsterCategories.includes("SpecialSummon")||s.origin.monsterCategories.includes("FreeReborn")?p:s.isInTrashCell&&!s.origin.monsterCategories.includes("RegularSpecialSummonOnly")?s.info.isRebornable?p:f:n.includes("PendulumSummon")&&s.origin.monsterCategories.includes("FreeReborn")?f:n.union(Yt).length?p:s.origin.monsterCategories.includes("RegularSpecialSummonOnly")?d?p:f:p},Xe={},ar=t=>(Xe[t]||(Xe[t]={title:`戦闘破壊耐性(${t})`,playType:"ContinuousEffect",isMandatory:!0,executableCells:["MonsterZone"],executablePeriods:["b1DDmgCalc","b2DDmgCalc"],executableDuelistTypes:["Controller"],isOnlyNTimesPerTurnIfFaceup:t,isApplicableTo:(e,i,a)=>a.includes(e.entity)?i!=="BattleDestroy"?[]:[e.entity]:[],substitute:async(e,i,a)=>a.includes(e.entity)?i!=="BattleDestroy"?[]:e.entity.isEffective?(e.entity.controller.writeInfoLog(`${e.entity.toString()}は１ターンに１度だけ戦闘では破壊されない。`),[e.entity]):[]:[]}),Xe[t]),ft=t=>t.activator.canRelease([t.action.entity])&&t.action.entity.canBeReleased(t.activator,t.action.entity,["ReleaseAsCost"],t.action),gt=async t=>(await t.action.entity.release(["Cost"],t.action.entity,t.activator),{release:[t.action.entity]}),pi=t=>({title:"シンクロ召喚",isMandatory:!1,playType:"QuickEffect",spellSpeed:"Quick",executableCells:B,executablePeriods:["main1","main2"],executableDuelistTypes:["Controller"],isOnlyNTimesPerChain:1,meetsConditions:e=>!e.activator.isTurnPlayer,canExecute:e=>e.activator.getExtraDeck().cardEntities.filter(i=>{var a;return(a=i.status.monsterCategories)==null?void 0:a.includes("Synchro")}).flatMap(i=>i.actions).filter(i=>i.playType==="SpecialSummon").map(i=>({index:-1,chainNumber:void 0,action:i,activator:e.activator,targetChainBlock:void 0,isActivatedIn:i.entity.fieldCell,costInfo:{},state:"unloaded",dest:void 0,ignoreCosts:!1})).some(i=>i.action.getEnableMaterialPatterns(i).some(a=>{const n=a.map(r=>r.material);return n.every(r=>r.controller===e.activator)&&n.every(r=>r.isOnFieldAsMonsterStrictly)&&n.includes(e.action.entity)})),prepare:C,execute:async e=>{if(e.activator!==e.action.entity.controller||e.activator.getMonstersOnField().filter(s=>s.lvl!==void 0).length<2)return!1;const i=e.activator.getExtraDeck().cardEntities.filter(s=>{var l;return(l=s.status.monsterCategories)==null?void 0:l.includes("Synchro")}).flatMap(s=>s.actions).filter(s=>s.playType==="SpecialSummon").map(s=>({index:-1,chainNumber:void 0,action:s,activator:e.activator,targetChainBlock:void 0,isActivatedIn:s.entity.fieldCell,isActivatedAt:e.isActivatedAt,costInfo:{},state:"unloaded",dest:void 0,ignoreCosts:!1})).filter(s=>s.action.getEnableMaterialPatterns(s).some(l=>{const c=l.map(u=>u.material);return c.every(u=>u.controller===e.activator)&&c.every(u=>u.isOnFieldAsMonsterStrictly)&&c.includes(e.action.entity)})).map(s=>s.action.entity).getDistinct();if(!i.length)return!1;const a=await e.activator.waitSelectEntities(i,1,s=>s.length===1,"シンクロ召喚するモンスターを選択。",!1)??[];if(!a.length)throw new m("想定されない状態",e);const n=a[0].actions.find(s=>s.playType==="SpecialSummon");if(!n)throw new m("想定されない状態",e);const r=n.getClone(s=>{const l=s.map(c=>c.material);return l.every(c=>c.controller===e.activator)&&l.every(c=>c.isOnFieldAsMonsterStrictly)&&l.includes(e.action.entity)});return e.nextActionInfo={action:r,originSeq:r.seq},!0},settle:async()=>!0,...t}),nr=_e("直接攻撃","Monster",t=>[t],t=>[new R({title:"直接攻撃",validateAlive:()=>!0,isContinuous:!0,isSpawnedBy:t,actionAttr:{},isApplicableTo:(e,i)=>e.isSpawnedBy===i,statusCalculator:()=>({canDirectAttack:!0})})]),Ke={title:"融合素材代用",appliableCellTypes:["MonsterZone","ExtraMonsterZone","Hand","Graveyard "],appliableDuelPeriodKeys:q,faceList:["FaceUp","FaceDown"],canStart:()=>!0,start:async t=>{const e=new R({title:"融合素材代用",validateAlive:()=>!0,isContinuous:!0,isSpawnedBy:t,actionAttr:{},isApplicableTo:()=>!0,statusCalculator:(i,a,n)=>(a.isSpawnedBy.isEffective&&(n.fusionSubstitute=!0),n)});return t.statusOperatorBundle.push(e),{targets:[t],seq:e.seq}},finish:async(t,e)=>{e.targets.forEach(i=>i.statusOperatorBundle.removeItem(e.seq))}},rr=(t,e,i,a)=>{if(!t.action.entity.origin.link||t.action.entity.origin.link<i.length)return;let n=i.map(s=>({material:s,cell:s.fieldCell,link:1}));if(t.action.entity.origin.link>i.length){if(i.every(c=>(c.origin.link??1)<2))return;const s=[n];i.filter(c=>(c.origin.link??1)>1).forEach(c=>{[...s].forEach(u=>{s.push([...u.filter(d=>d.material!==c),{material:c,cell:c.fieldCell,link:c.origin.link??1}])})});const l=s.find(c=>c.reduce((u,d)=>u+d.link,0)===t.action.entity.origin.link);if(!l)return;n=l}if(!a(i)||!t.activator.getEnableSummonList(t.activator,"LinkSummon",["Rule","SpecialSummon"],t.action,[{monster:t.action.entity,posList:["Attack"],cells:e}],n,!1).length)return;if(t.activator.getAvailableExtraMonsterZones().length)return n;const r=t.activator.duel.field.getCells("ExtraMonsterZone").map(s=>s.cardEntities[0]).filter(s=>s);if(r.filter(s=>s.controller===t.activator).length&&r.filter(s=>s.controller===t.activator).length===i.filter(s=>s.fieldCell.cellType==="ExtraMonsterZone").length||t.activator.getMonsterZones().flatMap(s=>s.linkArrowSources).some(s=>!i.includes(s))||t.activator.duel.field.canExtraLink(t.action.entity,n))return n};function*sr(t,e=()=>!0){let i=[...t.activator.getMonstersOnField().filter(n=>n.battlePosition!=="Set"),...t.activator.getHandCell().entities.filter(n=>n.origin.kind==="Monster")];if(i.every(n=>!n.status.allowHandLink)&&(i=i.filter(n=>n.fieldCell.isPlayFieldCell)),i.length<1)return;const a=[...t.activator.getMonsterZones(),...t.activator.duel.field.getAvailableExtraMonsterZones()];yield*i.getAllOnOffPattern().filter(n=>n.some(r=>r.status.allowHandLink)||n.every(r=>r.isOnFieldAsMonsterStrictly)).map(n=>rr(t,a,n,e)??[]).filter(n=>n.length)}const or=async(t,e,i)=>{var c;const a=t.action.getEnableMaterialPatterns(t).toArray(),n=a.map(u=>({infos:u,materialSeqList:u.map(d=>d.material.seq).sort()}));let r=a[0].map(u=>u.material);if(a.length>1){const u=a.flatMap(p=>p.map(f=>f.material)).getDistinct(),d=await t.activator.waitSelectEntities(u,void 0,p=>{const f=p.map(h=>h.seq).sort();return n.some(h=>f.length===h.materialSeqList.length&&f.every((y,E)=>y===h.materialSeqList[E]))},"リンク素材とするモンスターを選択",i);if(console.log(d),!d)return;r=d}const s=r.map(u=>u.seq).sort(),l=(c=n.find(u=>s.length===u.materialSeqList.length&&s.every((d,p)=>d===u.materialSeqList[p])))==null?void 0:c.infos;if(!l)throw new m("想定されない状態",t,r);return await v.sendManyToGraveyardForTheSameReason(r,["LinkMaterial","Cost","Rule","SpecialSummonMaterial"],t.action.entity,t.activator),{summonMaterialInfos:l}},ht=(t=()=>!0)=>({title:"リンク召喚",isMandatory:!1,playType:"SpecialSummon",spellSpeed:"Normal",executableCells:["ExtraDeck"],executablePeriods:["main1","main2"],executableDuelistTypes:["Controller"],getEnableMaterialPatterns:e=>sr(e,t),canPayCosts:e=>e.action.getEnableMaterialPatterns(e).some(i=>i.length),canExecute:e=>!e.ignoreCosts||e.activator.getAvailableExtraMonsterZones().length+e.activator.getAvailableMonsterZones().length>0,payCosts:or,prepare:e=>I(e,"LinkSummon",["Rule","SpecialSummon","LinkSummon"],["Attack"]),execute:ee,settle:async()=>!0});function*lr(){yield*[{name:"ＬＡＮフォリンクス",validator:t=>t.length===2},{name:"トラフィックゴースト",validator:t=>t.length===3},{name:"天威の鬼神",validator:t=>t.length>1&&t.some(e=>{var i;return(i=e.status.monsterCategories)==null?void 0:i.includes("Link")})},{name:"天威の拳僧",validator:t=>t.every(e=>{var i,a;return((i=e.status.nameTags)==null?void 0:i.includes("天威"))&&!((a=e.status.monsterCategories)!=null&&a.includes("Link"))})},{name:"電影の騎士ガイアセイバー",validator:t=>t.length>1}].map(t=>({name:t.name,actions:[ht(t.validator)]}))}const fi=Object.freeze(Object.defineProperty({__proto__:null,default:lr},Symbol.toStringTag,{value:"Module"}));function*cr(){yield*["サイバー・ドラゴン","六武衆のご隠居","アンノウン・シンクロン"].map(t=>({name:t,actions:[{title:"特殊召喚",isMandatory:!1,playType:"SpecialSummon",spellSpeed:"Normal",executableCells:["Hand"],executablePeriods:["main1","main2"],executableDuelistTypes:["Controller"],isOnlyNTimesPerDuel:t==="アンノウン・シンクロン"?1:void 0,canExecute:e=>{const i=e.action.entity.field.getMonstersOnFieldStrictly();return i.length>0&&i.every(a=>a.controller!==e.activator)&&$(e,T,[],["Rule"])},getDests:e=>J(e,T,[],["Rule"]),prepare:e=>I(e,"SpecialSummon",["SpecialSummon","Rule"],T),execute:ee,settle:async()=>!0}]})),yield{name:"ジャンク・フォアード",actions:[{title:"特殊召喚",isMandatory:!1,playType:"SpecialSummon",spellSpeed:"Normal",executableCells:["Hand"],executablePeriods:["main1","main2"],executableDuelistTypes:["Controller"],canExecute:t=>t.activator.getMonstersOnField().length===0&&$(t,T,[],["Rule"]),getDests:t=>J(t,T,[],["Rule"]),prepare:t=>I(t,"SpecialSummon",["SpecialSummon","Rule"],T),execute:ee,settle:async()=>!0}]},yield{name:"ゾンビキャリア",actions:[{title:"①自己再生",isMandatory:!1,playType:"IgnitionEffect",spellSpeed:"Normal",executableCells:["Graveyard"],executablePeriods:["main1","main2"],executableDuelistTypes:["Controller"],fixedTags:["SpecialSummonFromGraveyard"],canPayCosts:t=>t.activator.getHandCell().cardEntities.length>0,getDests:t=>J(t,T,[],["Effect"]),canExecute:t=>$(t,T,[],["Effect"]),payCosts:async(t,e,i)=>{const a=t.activator.getHandCell().cardEntities,n=await t.activator.waitSelectEntity(a,"デッキトップに戻すカードを一枚選択。",i);if(!n)throw new D(t);return await n.returnToDeck("Top",["Cost"],t.action.entity,t.activator),{returnToDeck:[n]}},prepare:async()=>({selectedEntities:[]}),execute:async t=>await re(t)?(t.action.entity.statusOperatorBundle.push(new R({title:"除外予定",validateAlive:()=>!0,isContinuous:!1,isSpawnedBy:t.action.entity,actionAttr:t.action,isApplicableTo:(e,i)=>i.isOnFieldAsMonsterStrictly&&i.face==="FaceUp",statusCalculator:()=>({willBeBanished:!0})})),!0):!1,settle:async()=>!0}]},yield{name:"グローアップ・バルブ",actions:[{title:"①自己再生",isMandatory:!1,playType:"IgnitionEffect",spellSpeed:"Normal",executableCells:["Graveyard"],executablePeriods:["main1","main2"],executableDuelistTypes:["Controller"],isOnlyNTimesPerDuel:1,fixedTags:["SpecialSummonFromGraveyard"],canPayCosts:t=>t.activator.getDeckCell().cardEntities.length>0,getDests:t=>J(t,T,[],["Effect"]),canExecute:t=>$(t,T,[],["Effect"]),payCosts:async t=>{const e=t.activator.getDeckCell().cardEntities[0];return await t.activator.getDeckCell().cardEntities[0].sendToGraveyard(["Cost"],t.action.entity,t.activator),{sendToGraveyard:[e]}},prepare:async()=>({selectedEntities:[]}),execute:t=>re(t),settle:async()=>!0}]},yield{name:"終末の騎士",actions:[{title:"①墓地送り",isMandatory:!1,playType:"TriggerEffect",spellSpeed:"Normal",executableCells:["MonsterZone"],executablePeriods:[...w,...F],executableDuelistTypes:["Controller"],meetsConditions:t=>t.action.entity.hasBeenSummonedNow(["NormalSummon","SpecialSummon","FlipSummon"]),canExecute:t=>t.activator.getDeckCell().cardEntities.some(e=>e.attr.includes("Dark")),prepare:async t=>{const e=["SendToGraveyardFromDeck"];return t.action.entity.moveLog.latestRecord.movedAs.includes("NormalSummon")?e.push("IfNormarlSummonSucceed"):t.action.entity.moveLog.latestRecord.movedAs.includes("SpecialSummon")&&e.push("IfSpecialSummonSucceed"),{selectedEntities:[],chainBlockTags:e}},execute:async t=>{const e=t.activator.getDeckCell().cardEntities.filter(a=>a.attr.includes("Dark"));if(e.length===0)return!1;const i=await t.activator.waitSelectEntity(e,"墓地に送るモンスターを選択",!1);if(!i)throw new D(t);return await i.sendToGraveyard(["Effect"],t.action.entity,t.activator),t.activator.getDeckCell().shuffle(),!0},settle:async()=>!0}]},yield{name:"マスマティシャン",actions:[{title:"①墓地送り",isMandatory:!1,playType:"TriggerEffect",spellSpeed:"Normal",executableCells:["MonsterZone"],executablePeriods:[...w,...F],executableDuelistTypes:["Controller"],fixedTags:["IfNormarlSummonSucceed","SendToGraveyardFromDeck"],meetsConditions:t=>t.action.entity.hasBeenSummonedNow(["NormalSummon"]),canExecute:t=>t.activator.getDeckCell().cardEntities.some(e=>e.lvl&&e.lvl<5),prepare:async()=>({selectedEntities:[]}),execute:async t=>{const e=t.activator.getDeckCell().cardEntities.filter(a=>a.lvl&&a.lvl<5);if(e.length===0)return!1;const i=await t.activator.waitSelectEntity(e,"墓地に送るモンスターを選択",!1);if(!i)throw new D(t);return await i.sendToGraveyard(["Effect"],t.action.entity,t.activator),t.activator.getDeckCell().shuffle(),!0},settle:async()=>!0},{title:"②ドロー",isMandatory:!1,playType:"TriggerEffect",spellSpeed:"Normal",executableCells:["Graveyard"],executablePeriods:[...w,...F],executableDuelistTypes:["Controller"],fixedTags:["Draw"],meetsConditions:t=>t.action.entity.moveLog.latestRecord.movedAs.includes("BattleDestroy")&&t.action.entity.wasMovedAtPreviousChain,canExecute:t=>t.activator.getDeckCell().cardEntities.length>0&&t.activator.canDraw,prepare:async()=>({selectedEntities:[]}),execute:async t=>(await t.activator.draw(1,t.action.entity,t.activator),!0),settle:async()=>!0}]},yield{name:"ライトロード・ビースト ウォルフ",actions:[{title:"①自己再生",isMandatory:!0,playType:"TriggerEffect",spellSpeed:"Normal",executableCells:["Graveyard"],executablePeriods:[...w,...F],executableDuelistTypes:["Controller"],fixedTags:["SpecialSummonFromGraveyard"],meetsConditions:t=>t.action.entity.wasMovedFrom.cellType==="Deck"&&t.action.entity.wasMovedAtPreviousChain,getDests:t=>J(t,T,[],["Effect"]),canExecute:t=>$(t,T,[],["Effect"]),prepare:async()=>({selectedEntities:[]}),execute:t=>re(t),settle:async()=>!0}]},yield{name:"伝説の白石",actions:[{title:"①サーチ",isMandatory:!0,playType:"TriggerEffect",spellSpeed:"Normal",executableCells:["Graveyard"],executablePeriods:q,executableDuelistTypes:["Controller"],fixedTags:["SearchFromDeck"],meetsConditions:t=>t.action.entity.wasMovedAtPreviousChain&&t.action.entity.wasMovedFrom.cellType!=="Banished",canExecute:t=>t.activator.getDeckCell().cardEntities.some(e=>e.nm==="青眼の白龍")&&t.activator.canAddToHandFromDeck,prepare:async()=>({selectedEntities:[]}),execute:async t=>{const e=t.activator.getDeckCell().cardEntities.find(i=>i.nm==="青眼の白龍");return e?(await e.addToHand(["Effect"],t.action.entity,t.activator),t.activator.getDeckCell().shuffle(),!0):!1},settle:async()=>!0}]};for(const t of[{name:"灰流うらら",chainBlockTags:["Draw","SearchFromDeck","SendToGraveyardFromDeck","SpecialSummonFromDeck"]},{name:"屋敷わらし",chainBlockTags:["BanishFromGraveyard","SpecialSummonFromGraveyard","AddToHandFromGraveyard"]}])yield{name:t.name,actions:[{title:"①無効化",isMandatory:!1,playType:"QuickEffect",spellSpeed:"Quick",executableCells:["Hand"],executablePeriods:w,executableDuelistTypes:["Controller"],isOnlyNTimesPerTurn:1,negatePreviousBlock:!0,fixedTags:["NegateCardEffect"],canPayCosts:e=>e.activator.canDiscard([e.action.entity]),canExecute:e=>(e.targetChainBlock&&e.targetChainBlock.chainBlockTags.union(t.chainBlockTags).length>0)??!1,payCosts:async e=>(await e.action.entity.discard(["Cost"],e.action.entity,e.activator),{sendToGraveyard:[e.action.entity]}),prepare:C,execute:async(e,i)=>{const a=i[e.index-1];return a.isNegatedEffectBy=e.action,!0},settle:async()=>!0}]};for(const t of["翻弄するエルフの剣士","ロードランナー","氷結界の修験者"])yield{name:t,actions:[],continuousEffects:[Qt("①戦闘破壊耐性","Monster",e=>[e],e=>[ye.createContinuous("①戦闘破壊耐性",()=>!0,e,()=>!0,["BattleDestroy"],(i,a,n)=>!e.isEffective||(n.atk??0)<1900?!0:(e.duel.log.info(`${e.toString()}は攻撃力1900以上のモンスターとの先頭では破壊されない。`,e.controller),!1))])]}}const gi=Object.freeze(Object.defineProperty({__proto__:null,default:cr},Symbol.toStringTag,{value:"Module"})),ur=(t,e,i,a,n,r)=>{if(!t.action.entity.origin.level||a.some(u=>!u.lvl)||a.map(u=>u.lvl??0).reduce((u,d)=>u+d,0)!==t.action.entity.origin.level)return;const s=a.filter(u=>{var d;return(d=u.status.monsterCategories)==null?void 0:d.some(p=>p==="Tuner")}),l=a.filter(u=>{var d;return(d=u.status.monsterCategories)==null?void 0:d.every(p=>p!=="Tuner")});if(!n(s)||!r(l))return;const c=[...s.map(u=>({material:u,cell:u.fieldCell,isAsTuner:!0})),...l.map(u=>({material:u,cell:u.fieldCell,isAsTuner:!1}))];if(t.activator.getEnableSummonList(t.activator,"SynchroSummon",["Rule","SpecialSummon"],t.action,[{monster:t.action.entity,posList:e,cells:i}],c,!1).length)return c};function*dr(t,e=a=>a.length===1,i=a=>a.length>0){let a=[...t.activator.getMonstersOnField().filter(s=>s.battlePosition!=="Set"),...t.activator.getHandCell().cardEntities.filter(s=>s.origin.kind==="Monster")];if(a.every(s=>!s.status.allowHandSynchro)&&(a=a.filter(s=>s.fieldCell.isPlayFieldCell)),a.length<2)return;const n=[...t.activator.getMonsterZones(),...t.activator.duel.field.getCells("ExtraMonsterZone")],r=["Attack","Defense"];yield*a.getAllOnOffPattern().filter(s=>s.some(l=>l.status.allowHandSynchro)||s.every(l=>l.isOnFieldAsMonsterStrictly)).map(s=>ur(t,r,n,s,e,i)??[]).filter(s=>s.length)}const pr=async(t,e,i)=>{var c;const a=t.action.getEnableMaterialPatterns(t).toArray(),n=a.map(u=>({infos:u,materialSeqList:u.map(d=>d.material.seq).sort()}));let r=a[0].map(u=>u.material);if(a.length>1){const u=a.flatMap(p=>p.map(f=>f.material)).getDistinct(),d=await t.activator.waitSelectEntities(u,void 0,p=>{const f=p.map(h=>h.seq).sort();return n.some(h=>f.length===h.materialSeqList.length&&f.every((y,E)=>y===h.materialSeqList[E]))},"シンクロ素材とするモンスターを選択",i);if(!d)return;r=d}const s=r.map(u=>u.seq).sort(),l=(c=n.find(u=>s.length===u.materialSeqList.length&&s.every((d,p)=>d===u.materialSeqList[p])))==null?void 0:c.infos;if(!l)throw new m("想定されない状態",t,r);return await v.sendManyToGraveyardForTheSameReason(r,["SynchroMaterial","Cost","Rule","SpecialSummonMaterial"],t.action.entity,t.activator),{summonMaterialInfos:l}},G=(t=i=>i.length===1,e=i=>i.length>0)=>({title:"シンクロ召喚",isMandatory:!1,playType:"SpecialSummon",spellSpeed:"Normal",executableCells:["ExtraDeck"],executablePeriods:["main1","main2"],executableDuelistTypes:["Controller"],getEnableMaterialPatterns:i=>dr(i,t,e),canPayCosts:i=>i.action.getEnableMaterialPatterns(i).some(a=>a.length),canExecute:i=>!i.ignoreCosts||i.activator.getAvailableExtraMonsterZones().length+i.activator.getAvailableMonsterZones().length>0,payCosts:pr,prepare:i=>I(i,"SynchroSummon",["Rule","SpecialSummon","SynchroSummon"],["Attack","Defense"]),execute:ee,settle:async()=>!0}),Nt=t=>({title:"射出",isMandatory:!1,playType:"IgnitionEffect",spellSpeed:"Normal",executableCells:B,executablePeriods:["main1","main2"],executableDuelistTypes:["Controller"],needsToPayRegularCost:!0,fixedTags:["DamageToOpponent"],canPayCosts:e=>e.activator.getMonstersOnField().filter(t.filter).some(i=>i.canBeReleased(e.activator,e.action.entity,["ReleaseAsCost"],e.action)),payCosts:async(e,i,a)=>{const n=await e.activator.waitSelectEntities(e.activator.getMonstersOnField().filter(t.filter).filter(r=>r.canBeReleased(e.activator,e.action.entity,["ReleaseAsCost"],e.action)),t.qty,r=>r.length===t.qty,"リリースするモンスターを選択。",a);if(n)return e.data=t.calcDamage(e,n),await v.releaseManyForTheSameReason(n,["Cost","Release"],e.action.entity,e.activator),{release:n}},prepare:C,execute:async e=>{if(!Ha(e.data))throw new m("値が正しくない。",e,e.data);return e.activator.getOpponentPlayer().effectDamage(e.data,e),!0},settle:async()=>!0,...t.otherActionProps});function*fr(){const t=[{name:"キャノン・ソルジャー",qty:1,filter:()=>!0,calcDamage:()=>500,otherActionProps:{},otherActions:[]},{name:"アマゾネスの射手",qty:2,filter:()=>!0,calcDamage:()=>1200,otherActionProps:{},otherActions:[]},{name:"メガキャノン・ソルジャー",qty:2,filter:()=>!0,calcDamage:()=>1500,otherActionProps:{},otherActions:[]},{name:"プリーステス・オーム",qty:1,filter:e=>e.attr.includes("Dark"),calcDamage:()=>800,otherActionProps:{},otherActions:[]},{name:"対空放花",qty:1,filter:e=>e.types.includes("Insect"),calcDamage:()=>800,otherActionProps:{},otherActions:[]},{name:"人投げトロール",qty:1,filter:e=>{var i,a;return!!((i=e.status.monsterCategories)!=null&&i.includes("Normal")&&!((a=e.status.monsterCategories)!=null&&a.includes("Token")))},calcDamage:()=>800,otherActionProps:{},otherActions:[]},{name:"墓守の大筒持ち",qty:1,filter:e=>{var i;return!!((i=e.status.nameTags)!=null&&i.includes("墓守")&&e.nm!=="墓守の大筒持ち")},calcDamage:()=>700,otherActionProps:{},otherActions:[]},{name:"カタパルト・ウォリアー",qty:1,filter:e=>{var i;return!!((i=e.status.nameTags)!=null&&i.includes("ジャンク"))},calcDamage:(e,i)=>i.map(a=>a.origin.attack??0).reduce((a,n)=>a+n,0),otherActionProps:{isOnlyNTimesPerTurnIfFaceup:1},otherActions:[G()]},{name:"ダーク・ダイブ・ボンバー",qty:1,filter:e=>!!(e.lvl&&e.lvl>0),calcDamage:(e,i)=>i.map(a=>a.lvl??0).reduce((a,n)=>a+n,0)*200,otherActionProps:{isOnlyNTimesPerTurn:1,executablePeriods:["main1"]},otherActions:[G()]}];for(const e of t)yield{name:e.name,actions:[Nt(e),...e.otherActions]};yield{name:"トゥーン・キャノン・ソルジャー",actions:[Nt({qty:1,filter:()=>!0,calcDamage:()=>500,otherActionProps:{}})],immediatelyActions:[{title:"自壊",executableCells:["MonsterZone"],executablePeriods:q.filter(e=>e!=="b1DBeforeDmgCalc"&&e!=="b2DBeforeDmgCalc"&&e!=="b1DDmgCalc"&&e!=="b2DDmgCalc"),execute:async(e,i,a)=>{i&&a&&i.nm==="トゥーン・ワールド"&&(a.movedAs.every(n=>!n.endsWith("Destroy"))||(e.entity.controller.writeInfoLog(`${i.toString()}が破壊されたため、${e.entity.toString()}は破壊される。`),v.tryMarkForDestory([e.entity],{activator:e.entity.controller,action:e,selectedEntities:[]}),e.entity.info.isDying=!0,e.entity.info.causeOfDeath=["EffectDestroy"]))}}],continuousEffects:[_e("召喚酔い","Monster",e=>[e],e=>[new R({title:"召喚酔い",validateAlive:i=>{const a=i.isSpawnedBy.moveLog.latestArrivalRecord;return!a||!i.effectOwner.duel.clock.isSameTurn(a.movedAt)?!1:a.movedAs.union(["NormalSummon","FlipSummon","SpecialSummon"]).length>0},isContinuous:!0,isSpawnedBy:e,actionAttr:{},isApplicableTo:()=>!0,statusCalculator:()=>({canAttack:!1})})]),_e("直接攻撃","Monster",e=>[e],e=>[new R({title:"直接攻撃",validateAlive:()=>!0,isContinuous:!0,isSpawnedBy:e,actionAttr:{},isApplicableTo:()=>!0,statusCalculator:i=>i.controller.getEntiteisOnField().filter(a=>a.nm==="トゥーン・ワールド").some(a=>a.face==="FaceUp")?i.controller.getOpponentPlayer().getMonstersOnField().filter(a=>{var n;return(n=a.status.monsterCategories)==null?void 0:n.includes("Toon")}).some(a=>a.face==="FaceUp")?{}:{canDirectAttack:!0}:{}})])]}}const hi=Object.freeze(Object.defineProperty({__proto__:null,default:fr},Symbol.toStringTag,{value:"Module"}));function*gr(){yield*["ラージマウス","レインボー・フラワー","レッグル","女王の影武者","人造人間７号"].map(t=>({name:t,actions:[],continuousEffects:[nr]}))}const yi=Object.freeze(Object.defineProperty({__proto__:null,default:gr},Symbol.toStringTag,{value:"Module"}));function*hr(){yield*[{name:"キラー・ポテト",filter:t=>t.attr.includes("Dark")&&(t.atk??9999)<=1500,qtyList:[1],posList:["Attack"],destoryTypes:["EffectDestroy"],executableCells:["Graveyard"]},{name:"キラー・トマト",filter:t=>t.attr.includes("Dark")&&(t.atk??9999)<=1500,qtyList:[1],posList:["Attack"],destoryTypes:["BattleDestroy"],executableCells:["Graveyard"]},{name:"巨大ネズミ",filter:t=>t.attr.includes("Earth")&&(t.atk??9999)<=1500,qtyList:[1],posList:["Attack"],destoryTypes:["BattleDestroy"],executableCells:["Graveyard"]},{name:"グリズリーマザー",filter:t=>t.attr.includes("Water")&&(t.atk??9999)<=1500,qtyList:[1],posList:["Attack"],destoryTypes:["BattleDestroy"],executableCells:["Graveyard"]},{name:"シャインエンジェル",filter:t=>t.attr.includes("Light")&&(t.atk??9999)<=1500,qtyList:[1],posList:["Attack"],destoryTypes:["BattleDestroy"],executableCells:["Graveyard"]},{name:"ドラゴンフライ",filter:t=>t.attr.includes("Wind")&&(t.atk??9999)<=1500,qtyList:[1],posList:["Attack"],destoryTypes:["BattleDestroy"],executableCells:["Graveyard"]},{name:"ＵＦＯタートル",filter:t=>t.attr.includes("Fire")&&(t.atk??9999)<=1500,qtyList:[1],posList:["Attack"],destoryTypes:["BattleDestroy"],executableCells:["Graveyard"]},{name:"荒野の女戦士",filter:t=>t.attr.includes("Earth")&&t.types.includes("Warrior")&&(t.atk??9999)<=1500,qtyList:[1],posList:["Attack"],destoryTypes:["BattleDestroy"],executableCells:["Graveyard"]},{name:"リトル・トルーパー",filter:t=>t.types.includes("Warrior")&&(t.lvl??9999)<3,qtyList:[1],posList:["Set"],destoryTypes:["BattleDestroy"],executableCells:["Graveyard","Banished"]},{name:"破面竜",filter:t=>t.types.includes("Warrior")&&(t.def??9999)<=1500,qtyList:[1],posList:["Attack","Defense"],destoryTypes:["BattleDestroy"],executableCells:["Graveyard"]},{name:"共鳴虫",filter:t=>t.types.includes("Insect")&&(t.atk??9999)<=1500,qtyList:[1],posList:["Attack","Defense"],destoryTypes:["BattleDestroy"],executableCells:["Graveyard"]},{name:"ピラミッド・タートル",filter:t=>t.types.includes("Zombie")&&(t.def??9999)<=2e3,qtyList:[1],posList:["Attack","Defense"],destoryTypes:["BattleDestroy"],executableCells:["Graveyard"]},{name:"ユーフォロイド",filter:t=>t.types.includes("Machine")&&(t.atk??9999)<=1500,qtyList:[1],posList:["Attack"],destoryTypes:["BattleDestroy"],executableCells:["Graveyard"]},{name:"ヘル・セキュリティ",filter:t=>t.types.includes("Fiend")&&(t.lvl??9999)===1,qtyList:[1],posList:["Attack","Defense"],destoryTypes:["BattleDestroy"],executableCells:["Graveyard"]},{name:"ガスタ・イグル",filter:t=>(t.status.nameTags??[]).includes("ガスタ")&&(t.status.monsterCategories??[]).includes("Tuner"),qtyList:[1],posList:["Attack","Defense"],destoryTypes:["BattleDestroy"],executableCells:["Graveyard"]},{name:"幻影の魔術士",filter:t=>(t.status.nameTags??[]).includes("ＨＥＲＯ")&&(t.atk??9999)<=1e3,qtyList:[1],posList:["Defense"],destoryTypes:["BattleDestroy"],executableCells:["Graveyard"]},{name:"ジェネクス・サーチャー",filter:t=>(t.status.nameTags??[]).includes("ジェネクス")&&(t.atk??9999)<=1500,qtyList:[1],posList:["Attack"],destoryTypes:["BattleDestroy"],executableCells:["Graveyard"]},{name:"紫炎の足軽",filter:t=>(t.status.nameTags??[]).includes("六武衆")&&(t.lvl??12)<=3,qtyList:[1],posList:["Attack","Defense"],destoryTypes:["BattleDestroy"],executableCells:["Graveyard"]},{name:"スレイブ・エイプ",filter:t=>(t.status.nameTags??[]).includes("剣闘獣")&&(t.lvl??12)<=4,qtyList:[1],posList:["Attack","Defense"],destoryTypes:["BattleDestroy"],executableCells:["Graveyard"]},{name:"ゼンマイハニー",filter:t=>(t.status.nameTags??[]).includes("ゼンマイ")&&(t.lvl??12)<=4,qtyList:[1],posList:["Attack","Defense"],destoryTypes:["BattleDestroy"],executableCells:["Graveyard"]},{name:"ＸＸ－セイバー エマーズブレイド",filter:t=>(t.status.nameTags??[]).includes("Ｘ－セイバー")&&(t.lvl??12)<=4,qtyList:[1],posList:["Attack","Defense"],destoryTypes:["BattleDestroy"],executableCells:["Graveyard"]},{name:"軍隊竜",filter:t=>t.nm==="軍隊竜",qtyList:[1],posList:["Attack","Defense"],destoryTypes:["BattleDestroy"],executableCells:["Graveyard"]},{name:"アサルト・ガンドッグ",filter:t=>t.nm==="アサルト・ガンドッグ",qtyList:[1,2,3,4,5],posList:["Attack","Defense"],destoryTypes:["BattleDestroy"],executableCells:["Graveyard"]},{name:"ハイエナ",filter:t=>t.nm==="ハイエナ",qtyList:[1,2,3,4,5],posList:["Attack","Defense"],destoryTypes:["BattleDestroy"],executableCells:["Graveyard"]}].map(t=>({name:t.name,actions:[{title:"①リクルート",isMandatory:!1,playType:"TriggerEffect",spellSpeed:"Normal",executableCells:t.executableCells,executablePeriods:t.destoryTypes.includes("EffectDestroy")?[...w,...F]:["b1DEnd","b2DEnd"],executableDuelistTypes:["Controller"],fixedTags:["SpecialSummonFromDeck"],meetsConditions:e=>e.action.entity.wasMovedAtPreviousChain&&e.action.entity.moveLog.latestRecord.movedAs.union(t.destoryTypes).length>0,canExecute:e=>{const i=e.activator.getMonsterZones();return e.activator.getEnableSummonList(e.activator,"SpecialSummon",["Effect"],e.action,e.activator.getDeckCell().cardEntities.filter(t.filter).filter(n=>n.kind==="Monster").filter(n=>n.canBeTargetOfEffect(e)).map(n=>({monster:n,posList:t.posList,cells:i})),[],!1).length>0},prepare:async()=>({selectedEntities:[]}),execute:async e=>{const i=e.activator.getDeckCell().cardEntities.filter(t.filter),a=e.activator.getMonsterZones();return e.activator.summonMany(e.activator,"SpecialSummon",["Effect"],e.action,i.map(r=>({monster:r,posList:t.posList,cells:a})),[],!1,t.qtyList.length>1?void 0:t.qtyList[0],r=>t.qtyList.includes(r.length),!1)?(e.activator.getDeckCell().shuffle(),!0):!1},settle:async()=>!0}]}))}const mi=Object.freeze(Object.defineProperty({__proto__:null,default:hr},Symbol.toStringTag,{value:"Module"}));function*yr(){yield{name:"死者蘇生",actions:[{title:"発動",isMandatory:!1,playType:"CardActivation",spellSpeed:"Normal",executableCells:["Hand","SpellAndTrapZone"],executablePeriods:["main1","main2"],executableDuelistTypes:["Controller"],fixedTags:["SpecialSummonFromGraveyard"],hasToTargetCards:!0,canExecute:e=>{const i=e.activator.getMonsterZones();return e.activator.getEnableSummonList(e.activator,"SpecialSummon",["Effect"],e.action,e.activator.duel.field.getCells("Graveyard").flatMap(n=>n.cardEntities).filter(n=>n.kind==="Monster").filter(n=>n.canBeTargetOfEffect(e)).map(n=>({monster:n,posList:T,cells:i})),[],!1).length>0},prepare:e=>le(e,e.activator.duel.field.getCells("Graveyard").flatMap(i=>i.cardEntities).filter(i=>i.kind==="Monster").filter(i=>i.canBeTargetOfEffect(e))),execute:async e=>ce(e),settle:async()=>!0},S]};for(const e of[{name:"大嵐",cellTypes:Me,isOnlyEnemies:!1},{name:"ハーピィの羽根帚",cellTypes:Me,isOnlyEnemies:!0},{name:"ブラック・ホール",cellTypes:B,isOnlyEnemies:!1},{name:"サンダー・ボルト",cellTypes:B,isOnlyEnemies:!0}])yield{name:e.name,actions:[{title:"発動",isMandatory:!1,playType:"CardActivation",spellSpeed:"Normal",executableCells:["Hand","SpellAndTrapZone"],executablePeriods:["main1","main2"],executableDuelistTypes:["Controller"],fixedTags:["DestroyOnField"],canExecute:i=>{let a=i.action.entity.field.getCells(...e.cellTypes).flatMap(n=>n.cardEntities).filter(n=>n!==i.action.entity);return e.isOnlyEnemies&&(a=a.filter(n=>n.controller!==i.activator)),a.length>0},prepare:async i=>{let a=i.action.entity.field.getCells(...e.cellTypes).flatMap(n=>n.cardEntities).filter(n=>n!==i.action.entity);return e.isOnlyEnemies&&(a=a.filter(n=>n.controller!==i.activator)),{selectedEntities:[],chainBlockTags:i.action.calcChainBlockTagsForDestroy(i.activator,a)}},execute:async i=>{let a=i.action.entity.field.getCells(...e.cellTypes).flatMap(n=>n.cardEntities).filter(n=>n!==i.action.entity);return e.isOnlyEnemies&&(a=a.filter(n=>n.controller!==i.activator)),await v.tryDestroy(a,i),!0},settle:async()=>!0},S]};yield{name:"ハリケーン",actions:[{title:"発動",isMandatory:!1,playType:"CardActivation",spellSpeed:"Normal",executableCells:["Hand","SpellAndTrapZone"],executablePeriods:["main1","main2"],executableDuelistTypes:["Controller"],fixedTags:["BounceToHand"],canExecute:e=>e.action.entity.field.getCells("SpellAndTrapZone","FieldSpellZone").flatMap(i=>i.cardEntities).some(i=>i!==e.action.entity),prepare:async()=>({selectedEntities:[]}),execute:async(e,i)=>{const a=i.map(r=>r.action).filter(r=>r.playType==="CardActivation").map(r=>r.entity).filter(r=>r.face==="FaceUp"),n=e.action.entity.field.getCells("SpellAndTrapZone","FieldSpellZone").flatMap(r=>r.cardEntities).filter(r=>!a.includes(r));return await v.returnManyToHandForTheSameReason(n,["Effect"],e.action.entity,e.activator),!0},settle:async()=>!0},S]};const t=e=>e.activator.duel.field.getWaitingRoomCell().cardEntities.find(i=>i.parent===e.action.entity)??k.createTokenEntity(e.activator,e.action.entity,{name:"セキュリティトークン",actions:qe,staticInfo:{name:"セキュリティトークン",kind:"Monster",monsterCategories:["Normal","Token"],level:4,attack:2e3,defense:2e3,attributes:["Light"],types:["Cyberse"],wikiEncodedName:"%A5%BB%A5%AD%A5%E5%A5%EA%A5%C6%A5%A3%A5%C8%A1%BC%A5%AF%A5%F3"}});yield{name:"ワンタイム・パスコード",actions:[{title:"発動",isMandatory:!1,playType:"CardActivation",spellSpeed:"Normal",executableCells:["Hand","SpellAndTrapZone"],executablePeriods:["main1","main2"],executableDuelistTypes:["Controller"],isOnlyNTimesPerTurn:1,fixedTags:["SpecialSummon","SpecialSummonToken"],canExecute:e=>{const i=t(e),a=e.activator.getMonsterZones();return e.activator.getEnableSummonList(e.activator,"SpecialSummon",["Effect"],e.action,[{monster:i,posList:["Defense"],cells:a}],[],!1).length>0},prepare:async()=>({selectedEntities:[]}),execute:async e=>{const i=t(e),a=e.activator.getMonsterZones();return!!await e.activator.summon("SpecialSummon",["Effect"],e.action,i,["Defense"],a,[],!1)},settle:async()=>!0},S]},yield{name:"光の援軍",actions:[{title:"発動",isMandatory:!1,playType:"CardActivation",spellSpeed:"Normal",executableCells:["Hand","SpellAndTrapZone"],executablePeriods:["main1","main2"],executableDuelistTypes:["Controller"],fixedTags:["SearchFromDeck"],priorityForNPC:40,canPayCosts:e=>e.activator.getDeckCell().cardEntities.length>3,canExecute:e=>e.activator.getDeckCell().cardEntities.filter(i=>i.kind==="Monster").filter(i=>(i.lvl??13)<5).some(i=>i.status.nameTags&&i.status.nameTags.includes("ライトロード")),payCosts:async e=>{const i=e.activator.getDeckCell().cardEntities.slice(0,3);return await v.sendManyToGraveyardForTheSameReason(i,["Cost"],e.action.entity,e.activator),{sendToGraveyard:i}},prepare:async()=>({selectedEntities:[]}),execute:async e=>{const i=e.activator.getDeckCell().cardEntities.filter(n=>n.kind==="Monster").filter(n=>(n.lvl??13)<5).filter(n=>n.status.nameTags&&n.status.nameTags.includes("ライトロード"));if(i.length===0)return!1;const a=await e.activator.waitSelectEntity(i,"手札に加えるモンスターを選択",!1);if(!a)throw new D(e);return await a.addToHand(["Effect"],e.action.entity,e.activator),e.activator.getDeckCell().shuffle(),!0},settle:async()=>!0},S]},yield{name:"ワン・フォー・ワン",actions:[{title:"発動",isMandatory:!1,playType:"CardActivation",spellSpeed:"Normal",executableCells:["Hand","SpellAndTrapZone"],executablePeriods:["main1","main2"],executableDuelistTypes:["Controller"],fixedTags:["SpecialSummonFromDeck"],priorityForNPC:40,canPayCosts:e=>{if(e.activator.getDeckCell().cardEntities.every(i=>(i.lvl??12)>1)){if(e.activator.getHandCell().cardEntities.every(i=>(i.lvl??12)>1)||e.activator.getHandCell().cardEntities.filter(i=>i.kind==="Monster").length<2)return!1}else if(e.activator.getHandCell().cardEntities.filter(i=>i.kind==="Monster").length===0)return!1;return!0},canExecute:e=>{let i=[...e.activator.getDeckCell().cardEntities.filter(s=>(s.lvl??12)===1),...e.activator.getHandCell().cardEntities.filter(s=>(s.lvl??12)===1)];const a=e.activator.getHandCell().cardEntities;(a.length<2||!e.ignoreCosts)&&(i=i.filter(s=>!a.includes(s)));const n=e.activator.getMonsterZones();return e.activator.getEnableSummonList(e.activator,"SpecialSummon",["Effect"],e.action,i.map(s=>({monster:s,posList:T,cells:n})),[],!1).length>0},payCosts:async(e,i,a)=>{const n=[...e.activator.getDeckCell().cardEntities.filter(u=>(u.lvl??12)===1),...e.activator.getHandCell().cardEntities.filter(u=>(u.lvl??12)===1)],r=e.activator.getMonsterZones(),s=e.activator.getEnableSummonList(e.activator,"SpecialSummon",["Effect"],e.action,n.map(u=>({monster:u,posList:T,cells:r})),[],!1);let l=e.activator.getHandCell().cardEntities.filter(u=>u.kind==="Monster");s.length===1&&(l=l.filter(u=>!s.map(d=>d.monster).includes(u)));const c=await e.activator.waitSelectEntity(l,"墓地へ送るモンスターを選択",a);if(!c)throw new D(e);return await c.sendToGraveyard(["Cost"],e.action.entity,e.activator),{sendToGraveyard:[c]}},prepare:async()=>({selectedEntities:[]}),execute:async e=>{const i=[...e.activator.getDeckCell().cardEntities.filter(r=>r.lvl===1),...e.activator.getHandCell().cardEntities.filter(r=>r.lvl===1)],a=e.activator.getMonsterZones();return await e.activator.summonOne(e.activator,"SpecialSummon",["Effect"],e.action,i.map(r=>({monster:r,posList:T,cells:a})),[],!1,!1)?(e.activator.getDeckCell().shuffle(),!0):!1},settle:async()=>!0},S]},yield{name:"封印の黄金櫃",actions:[{title:"発動",isMandatory:!1,playType:"CardActivation",spellSpeed:"Normal",executableCells:["Hand","SpellAndTrapZone"],executablePeriods:["main1","main2"],executableDuelistTypes:["Controller"],fixedTags:["BanishFromDeck"],canExecute:e=>e.activator.getDeckCell().cardEntities.some(i=>e.activator.canTryBanish(i,"BanishAsEffect",e.action)),prepare:async()=>({selectedEntities:[]}),execute:async e=>{const i=e.activator.getDeckCell().cardEntities.filter(r=>e.activator.canTryBanish(r,"BanishAsEffect",e.action)),a=await e.activator.waitSelectEntity(i,"除外するカードを選択。",!1);if(!a)throw new D(e);return(await v.tryBanish("BanishAsEffect",[a],e)).forEach(r=>r.counterHolder.removeAll("GoldSarcophagus")),!0},settle:async()=>!0},Hn("回収カウント進行",["stanby"],e=>{e.activator.isTurnPlayer&&e.action.entity.field.getCells("Banished").flatMap(i=>i.cardEntities).filter(i=>i.moveLog.latestRecord.movedBy===e.action.entity).filter(i=>i.moveLog.latestRecord.actionOwner===e.activator).forEach(i=>{i.counterHolder.add("GoldSarcophagus",1,e.action.entity);const a=i.counterHolder.getQty("GoldSarcophagus",e.action.entity);a<3&&e.activator.duel.log.info(`${i.toString()}のターンカウント：${a-1}⇒${a}`)})}),{title:"回収",isMandatory:!0,playType:"LingeringEffect",spellSpeed:"Normal",executableCells:X,executablePeriods:["stanby"],executableDuelistTypes:me,canExecute:e=>e.activator.isTurnPlayer&&e.action.entity.field.getCells("Banished").flatMap(i=>i.cardEntities).filter(i=>i.moveLog.latestRecord.movedBy===e.action.entity).filter(i=>i.moveLog.latestRecord.actionOwner===e.activator).some(i=>i.counterHolder.getQty("GoldSarcophagus")===2),prepare:C,execute:async e=>{const i=e.action.entity.field.getCells("Banished").flatMap(n=>n.cardEntities).filter(n=>n.moveLog.latestRecord.movedBy===e.action.entity).filter(n=>n.moveLog.latestRecord.actionOwner===e.activator).filter(n=>n.counterHolder.getQty("GoldSarcophagus")===2);if(!i.length)throw new m("想定されない状態",e);let a=i[0];if(i.length>1){const n=await e.activator.waitSelectEntity(i,"回収するカードを選択。",!1);if(!n)throw new D(e);a=n}return await a.addToHand(["Effect"],e.action.entity,e.activator),!0},settle:async()=>!0},S]},yield{name:"魔の試着部屋",actions:[{title:"発動",isMandatory:!1,playType:"CardActivation",spellSpeed:"Normal",executableCells:["Hand","SpellAndTrapZone"],executablePeriods:["main1","main2"],executableDuelistTypes:["Controller"],fixedTags:["SpecialSummonFromDeck"],canPayCosts:e=>e.activator.lp>=800,canExecute:e=>e.activator.getDeckCell().cardEntities.length>0&&e.activator.getEnableSummonList(e.activator,"SpecialSummon",["Effect"],e.action,e.activator.getDeckCell().cardEntities.filter(i=>i.kind==="Monster").filter(i=>{var a;return(a=i.status.monsterCategories)==null?void 0:a.includes("Normal")}).filter(i=>(i.lvl??12)<4).map(i=>({monster:i,posList:T,cells:e.activator.getMonsterZones()})),[],!1).length>0,payCosts:(e,i)=>ve(e,i,800),prepare:async()=>({selectedEntities:[]}),execute:async e=>{if(e.activator.getDeckCell().cardEntities.length<4)return!1;const i=await v.excavateManyFromDeck(e.activator,4,["Effect"],e.action.entity,e.activator),a=i.filter(n=>n.kind==="Monster").filter(n=>{var r;return(r=n.status.monsterCategories)==null?void 0:r.includes("Normal")}).filter(n=>(n.lvl??12)<4);if(a.length){const n=e.activator.getMonsterZones(),r=a.length>n.length?n.length:a.length;await e.activator.summonMany(e.activator,"SpecialSummon",["Effect","Excavate"],e.action,a.map(s=>({monster:s,cells:n,posList:T})),[],!1,r,s=>s.length===r,!1)}return await v.sendManyToGraveyardForTheSameReason(a.filter(n=>!n.isOnFieldAsMonsterStrictly),["Effect","Excavate"],e.action.entity,e.activator),await v.returnManyToDeckForTheSameReason("Random",i.filter(n=>n.fieldCell.cellType==="Deck"),["Effect"],e.action.entity,e.activator),!0},settle:async()=>!0},S]}}const vi=Object.freeze(Object.defineProperty({__proto__:null,default:yr},Symbol.toStringTag,{value:"Module"}));function*mr(){yield{name:"強欲な壺",actions:[{title:"発動",isMandatory:!1,playType:"CardActivation",spellSpeed:"Normal",executableCells:["Hand","SpellAndTrapZone"],executablePeriods:["main1","main2"],executableDuelistTypes:["Controller"],priorityForNPC:20,fixedTags:["Draw"],canExecute:t=>t.activator.getDeckCell().cardEntities.length>1&&t.activator.canDraw&&t.activator.canAddToHandFromDeck,prepare:async()=>({selectedEntities:[]}),execute:async t=>(await t.activator.draw(2,t.action.entity,t.activator),!0),settle:async()=>!0},S]},yield{name:"貪欲な壺",actions:[{title:"発動",isMandatory:!1,playType:"CardActivation",spellSpeed:"Normal",executableCells:["Hand","SpellAndTrapZone"],executablePeriods:["main1","main2"],executableDuelistTypes:["Controller"],fixedTags:["Draw","ReturnToDeckFromGraveyard"],priorityForNPC:30,canExecute:t=>t.activator.getGraveyard().cardEntities.filter(e=>e.kind==="Monster").filter(e=>e.canBeTargetOfEffect(t)).length>4&&t.activator.canDraw&&t.activator.canAddToHandFromDeck,prepare:async t=>{const e=await t.activator.waitSelectEntities(t.activator.getGraveyard().cardEntities.filter(i=>i.kind==="Monster").filter(i=>i.canBeTargetOfEffect(t)),5,i=>i.length===5,"デッキに戻すモンスターを選択。",!1);if(e)return{selectedEntities:e}},execute:async t=>t.selectedEntities.some(e=>e.wasMovedAtCurrentChain)?!1:(await v.returnManyToDeckForTheSameReason("Random",t.selectedEntities,["Effect"],t.action.entity,t.activator),await t.activator.draw(2,t.action.entity,t.activator),!0),settle:async()=>!0},S]},yield{name:"天使の施し",actions:[{title:"発動",isMandatory:!1,playType:"CardActivation",spellSpeed:"Normal",executableCells:["Hand","SpellAndTrapZone"],executablePeriods:["main1","main2"],executableDuelistTypes:["Controller"],fixedTags:["Draw","DiscordAsEffect"],priorityForNPC:30,canExecute:t=>t.activator.getDeckCell().cardEntities.length>2&&t.activator.canDraw&&t.activator.canAddToHandFromDeck&&t.activator.status.canDiscardAsEffect,prepare:async()=>({selectedEntities:[]}),execute:async t=>(await t.activator.draw(3,t.action.entity,t.activator),await t.activator.discard(2,"Effect",()=>!0,t.action.entity,t.activator),!0),settle:async()=>!0},S]},yield{name:"成金ゴブリン",actions:[{title:"発動",isMandatory:!1,playType:"CardActivation",spellSpeed:"Normal",executableCells:["Hand","SpellAndTrapZone"],executablePeriods:["main1","main2"],executableDuelistTypes:["Controller"],fixedTags:["Draw"],priorityForNPC:20,canExecute:t=>t.activator.getDeckCell().cardEntities.length>0&&t.activator.canDraw&&t.activator.canAddToHandFromDeck,prepare:async()=>({selectedEntities:[]}),execute:async t=>(await t.activator.draw(1,t.action.entity,t.activator),t.action.entity.field.duel.clock.incrementProcSeq(),t.activator.getOpponentPlayer().heal(1e3,t.action.entity),!0),settle:async()=>!0},S]},yield{name:"手札抹殺",actions:[{title:"発動",isMandatory:!1,playType:"CardActivation",spellSpeed:"Normal",executableCells:["Hand","SpellAndTrapZone"],executablePeriods:["main1","main2"],executableDuelistTypes:["Controller"],fixedTags:["Draw","DiscordAsEffect"],canExecute:t=>t.activator.getDeckCell().cardEntities.length>=t.activator.getHandCell().cardEntities.filter(e=>e.seq!==t.action.entity.seq).length&&t.activator.canDraw&&t.activator.canAddToHandFromDeck&&t.activator.getOpponentPlayer().canDraw&&t.activator.getOpponentPlayer().canAddToHandFromDeck&&t.action.entity.field.getAllCells().filter(e=>e.cellType==="Hand").flatMap(e=>e.cardEntities).some(e=>e.seq!==t.action.entity.seq),prepare:async()=>({selectedEntities:[]}),execute:async t=>{const e=t.activator.getHandCell().cardEntities.length,i=t.activator.getOpponentPlayer().getHandCell().cardEntities.length;return await v.sendManyToGraveyardForTheSameReason(t.action.entity.field.getCells("Hand").flatMap(a=>a.cardEntities),["Effect","Discard"],t.action.entity,t.activator),t.activator.duel.clock.incrementProcSeq(),await v.drawAtSameTime(t.activator,t.action.entity,e,i),!0},settle:async()=>!0},S]},yield{name:"一時休戦",actions:[{title:"発動",isMandatory:!1,playType:"CardActivation",spellSpeed:"Normal",executableCells:["Hand","SpellAndTrapZone"],executablePeriods:["main1","main2"],executableDuelistTypes:["Controller"],fixedTags:["Draw"],canExecute:t=>t.activator.getDeckCell().cardEntities.length>0&&t.activator.canDraw&&t.activator.getOpponentPlayer().getDeckCell().cardEntities.length>0&&t.activator.getOpponentPlayer().canDraw,prepare:C,execute:async t=>(await v.drawAtSameTime(t.activator,t.action.entity,1,1),[t.activator,t.activator.getOpponentPlayer()].forEach(e=>e.entity.damageFilterBundle.push(new Xt({title:"ダメージ無効",validateAlive:i=>i.effectOwner.duel.clock.turn-i.isSpawnedAt.turn<2,isContinuous:!1,isSpawnedBy:t.action.entity,actionAttr:t.action,isApplicableTo:()=>!0,calcType:"zero_typeA",filter:(i,a,n,r)=>(n.writeInfoLog(`${r.profile.name}は${i.isSpawnedBy}の効果でダメージを受けない。`),{zero_typeA:!0})}))),!0),settle:async()=>!0},S]},yield{name:"打ち出の小槌",actions:[{title:"発動",isMandatory:!1,playType:"CardActivation",spellSpeed:"Normal",executableCells:["Hand","SpellAndTrapZone"],executablePeriods:["main1","main2"],executableDuelistTypes:["Controller"],fixedTags:["Draw"],canExecute:t=>t.activator.canDraw,prepare:async()=>({selectedEntities:[]}),execute:async t=>{const e=t.activator.getHandCell().cardEntities;if(!e.length)return!1;let i=[...e];if(i.length>1&&!await t.activator.waitYesNo("全ての手札を入れ替える？")){const a=await t.activator.waitSelectEntities(e,void 0,n=>n.length>0,"デッキに戻すカードを選択。",!1);if(!a)throw new D(t);i=a}return await v.returnManyToDeckForTheSameReason("Random",i,["Effect"],t.action.entity,t.activator),t.activator.duel.clock.incrementTotalProcSeq(),await t.activator.draw(i.length,t.action.entity,t.activator),!0},settle:async()=>!0},S]}}const Si=Object.freeze(Object.defineProperty({__proto__:null,default:mr},Symbol.toStringTag,{value:"Module"}));function*vr(){yield{name:"おろかな埋葬",actions:[{title:"発動",isMandatory:!1,playType:"CardActivation",spellSpeed:"Normal",executableCells:["Hand","SpellAndTrapZone"],executablePeriods:["main1","main2"],executableDuelistTypes:["Controller"],priorityForNPC:40,fixedTags:["SendToGraveyardFromDeck"],canExecute:t=>t.activator.getDeckCell().cardEntities.some(e=>e.kind==="Monster"),prepare:C,execute:async t=>{const e=t.activator.getDeckCell().cardEntities.filter(a=>a.kind==="Monster");if(e.length===0)return!1;const i=await t.activator.waitSelectEntity(e,"墓地に送るモンスターを選択",!1);if(!i)throw new D(t);return await i.sendToGraveyard(["Effect"],t.action.entity,t.activator),t.activator.getDeckCell().shuffle(),!0},settle:async()=>!0},S]},yield{name:"おろかな副葬",actions:[{title:"発動",isMandatory:!1,playType:"CardActivation",spellSpeed:"Normal",executableCells:["Hand","SpellAndTrapZone"],executablePeriods:["main1","main2"],executableDuelistTypes:["Controller"],isOnlyNTimesPerTurn:1,priorityForNPC:40,fixedTags:["SendToGraveyardFromDeck"],canExecute:t=>t.activator.getDeckCell().cardEntities.some(e=>e.kind!=="Monster"),prepare:C,execute:async t=>{const e=t.activator.getDeckCell().cardEntities.filter(a=>a.kind!=="Monster");if(e.length===0)return!1;const i=await t.activator.waitSelectEntity(e,"墓地に送る魔法罠を選択",!1);if(!i)throw new D(t);return await i.sendToGraveyard(["Effect"],t.action.entity,t.activator),t.activator.getDeckCell().shuffle(),!0},settle:async()=>!0},S]},yield{name:"苦渋の選択",actions:[{title:"発動",isMandatory:!1,playType:"CardActivation",spellSpeed:"Normal",executableCells:["Hand","SpellAndTrapZone"],executablePeriods:["main1","main2"],executableDuelistTypes:["Controller"],priorityForNPC:40,fixedTags:["SendToGraveyardFromDeck","SearchFromDeck"],canExecute:t=>t.activator.getDeckCell().cardEntities.length>4,prepare:C,execute:async t=>{const e=t.activator.getDeckCell().cardEntities;if(e.length<5)return!1;const i=await t.activator.waitSelectEntities(e,5,n=>n.length===5,"相手に見せるカードを選択。",!1);if(!i)throw new D(t);const a=await t.activator.getOpponentPlayer().waitSelectEntity(i,"手札に加えさせるカードを選択。",!1);if(!a)throw new D(t,i);return t.activator.writeInfoLog(`${t.activator.getOpponentPlayer().name}は${a.toString()}を選択。`),await a.addToHand(["Effect"],t.action.entity,t.activator),await v.sendManyToGraveyardForTheSameReason(i.filter(n=>n!==a),["Effect"],t.action.entity,t.activator),t.activator.getDeckCell().shuffle(),!0},settle:async()=>!0},S]};for(const t of["モンスターゲート","名推理"]){let e={title:"発動",isMandatory:!1,playType:"CardActivation",spellSpeed:"Normal",executableCells:["Hand","SpellAndTrapZone"],executablePeriods:["main1","main2"],executableDuelistTypes:["Controller"],fixedTags:["SpecialSummonFromDeck","SendToGraveyardFromDeck","SpecialSummon"],canExecute:i=>i.activator.getDeckCell().cardEntities.filter(a=>a.kind==="Monster").some(a=>{var n;return!((n=a.status.monsterCategories)!=null&&n.includes("SpecialSummon"))}),prepare:C,execute:async i=>{var r,s;if(!i.activator.getDeckCell().cardEntities.length||!i.activator.getAvailableMonsterZones().length)return!1;let a=-1;if(t==="名推理"){const l=await i.activator.getOpponentPlayer().waitSelectNumberFromRange("レベルを選択",1,12,!1);if(l===void 0)throw new D(i);a=l,i.activator.writeInfoLog(`${i.activator.getOpponentPlayer().name}は${a}を選択。`)}const n=[...i.activator.getDeckCell().cardEntities];for(const l of i.activator.getDeckCell().cardEntities){if(await l.excavate(["Effect"],i.action.entity,i.activator),l.kind!=="Monster"){await l.sendToGraveyard(["Effect","Excavate"],i.action.entity,i.activator);continue}if((r=l.status.monsterCategories)!=null&&r.includes("SpecialSummon")){await l.sendToGraveyard(["Effect","Excavate"],i.action.entity,i.activator);continue}return(s=l.status.monsterCategories)!=null&&s.includes("NormalSummonOnly")?(await l.sendToGraveyard(["Effect","Excavate"],i.action.entity,i.activator),i.activator.writeInfoLog(`${l.toString()}は通常召喚可能だが特殊召喚できないため、墓地に送られた。`),!1):l.lvl===a?(await l.sendToGraveyard(["Effect","Excavate"],i.action.entity,i.activator),i.activator.writeInfoLog(`${l.toString()}のレベルは${a}のため、墓地に送られた。`),!1):!!await i.activator.summon("SpecialSummon",["Effect","Excavate"],i.action,l,T,i.activator.getAvailableMonsterZones(),[],!1)}return i.activator.writeInfoLog("通常召喚可能なモンスターがめくられなかったため、全てのカードをデッキに戻す。"),await v.returnManyToDeckForTheSameReason("Random",n,["Effect"],i.action.entity,i.activator),!1},settle:async()=>!0};t==="モンスターゲート"&&(e={...e,...qn()}),yield{name:t,actions:[e,S]}}}const Ci=Object.freeze(Object.defineProperty({__proto__:null,default:vr},Symbol.toStringTag,{value:"Module"}));function*Sr(){const t=[{name:"魔法石の採掘",filter:()=>!0,discard:!0},{name:"魔法再生",filter:e=>e.kind==="Spell",discard:!1}];for(const e of t)yield{name:e.name,actions:[{title:"発動",isMandatory:!1,playType:"CardActivation",spellSpeed:"Normal",executableCells:["Hand","SpellAndTrapZone"],executablePeriods:["main1","main2"],executableDuelistTypes:["Controller"],fixedTags:["AddToHandFromGraveyard"],canPayCosts:i=>i.activator.getHandCell().cardEntities.filter(e.filter).length>1,payCosts:async(i,a,n)=>{const r=i.activator.getHandCell().cardEntities.filter(e.filter),s=await i.activator.waitSelectEntities(r,2,l=>l.length===2,"コストとするカードを選択",n);if(s)return e.discard?(await v.discardManyForTheSameReason(s,["Cost"],i.action.entity,i.activator),{discard:s}):(await v.sendManyToGraveyardForTheSameReason(s,["Cost"],i.action.entity,i.activator),{sendToGraveyard:s})},...V(i=>i.activator.getGraveyard().cardEntities.filter(a=>a.kind==="Spell"),{message:"手札に加える魔法カードを選択"}),execute:async i=>{if(!i.selectedEntities.length)throw new m("想定されない状態",i);const a=i.selectedEntities[0];return a.wasMovedAfter(i.isActivatedAt)?!1:(await a.addToHand(["Effect"],i.action.entity,i.activator),!0)},settle:async()=>!0},S]}}const Ti=Object.freeze(Object.defineProperty({__proto__:null,default:Sr},Symbol.toStringTag,{value:"Module"}));function*Cr(){for(const t of[{name:"トゲトゲ神の殺虫剤",type:"Insect"},{name:"戦士抹殺",type:"Warrior"},{name:"酸の嵐",type:"Machine"},{name:"永遠の渇水",type:"Fish"},{name:"神の息吹",type:"Rock"},{name:"魔女狩り",type:"Spellcaster"},{name:"悪魔払い",type:"Fiend"}])yield{name:t.name,actions:[{title:"発動",isMandatory:!1,playType:"CardActivation",spellSpeed:"Normal",executableCells:["Hand","SpellAndTrapZone"],executablePeriods:["main1","main2"],executableDuelistTypes:["Controller"],canExecute:e=>e.action.entity.field.getMonstersOnFieldStrictly().some(i=>i.types.includes(t.type)),prepare:async e=>{const i=e.action.entity.field.getMonstersOnFieldStrictly().filter(a=>a.types.includes(t.type));return{selectedEntities:[],chainBlockTags:e.action.calcChainBlockTagsForDestroy(e.activator,i)}},execute:async e=>{const i=e.action.entity.field.getMonstersOnFieldStrictly().filter(a=>a.types.includes(t.type));return await v.tryDestroy(i,e),!0},settle:async()=>!0},S]};yield*[{name:"増援",filter:t=>t.origin.kind==="Monster"&&t.types.includes("Warrior")&&(t.origin.level??5)<5},{name:"化石調査",filter:t=>t.origin.kind==="Monster"&&t.types.includes("Dinosaur")&&(t.origin.level??6)<6},{name:"Ｅ－エマージェンシーコール",filter:t=>t.origin.kind==="Monster"&&(t.origin.nameTags??[]).includes("Ｅ・ＨＥＲＯ")},{name:"召集の聖刻印",filter:t=>t.origin.kind==="Monster"&&(t.origin.nameTags??[]).includes("聖刻")},{name:"召喚師のスキル",filter:t=>t.origin.kind==="Monster"&&(t.origin.monsterCategories??[]).includes("Normal")&&(t.origin.level??4)>4},{name:"トゥーンのもくじ",filter:t=>(t.origin.nameTags??[]).includes("トゥーン")},{name:"融合賢者",filter:t=>t.origin.name==="融合"},{name:"虹の架け橋",filter:t=>t.origin.kind!=="Monster"&&(t.origin.nameTags??[]).includes("宝玉")},{name:"紫炎の狼煙",filter:t=>t.origin.kind==="Monster"&&(t.origin.nameTags??[]).includes("六武衆")&&(t.origin.level??4)<4},{name:"テラ・フォーミング",filter:t=>t.origin.kind==="Spell"&&t.origin.spellCategory==="Field"},{name:"コール・リゾネーター",filter:t=>t.origin.kind==="Monster"&&(t.origin.nameTags??[]).includes("リゾネーター")}].map(t=>({name:t.name,actions:[{title:"発動",isMandatory:!1,playType:"CardActivation",spellSpeed:"Normal",executableCells:["Hand","SpellAndTrapZone"],executablePeriods:["main1","main2"],executableDuelistTypes:["Controller"],fixedTags:["SearchFromDeck"],priorityForNPC:40,canExecute:e=>e.activator.getDeckCell().cardEntities.some(t.filter)&&e.activator.canAddToHandFromDeck,prepare:C,execute:async e=>{const i=e.activator.getDeckCell().cardEntities.filter(t.filter);if(!i.length)return!1;const a=await e.activator.waitSelectEntity(i,"手札に加えるカードを選択",!1);return a?(await a.addToHand(["Effect"],e.action.entity,e.activator),e.activator.getDeckCell().shuffle(),!0):!1},settle:async()=>!0},S]})),yield*[{name:"戦士の生還",filter:t=>t.kind==="Monster"&&t.types.includes("Warrior"),qty:1},{name:"ダーク・バースト",filter:t=>t.kind==="Monster"&&t.attr.includes("Dark")&&(t.atk??9999)<=1500,qty:1},{name:"悪夢再び",filter:t=>t.kind==="Monster"&&t.attr.includes("Dark")&&(t.def??9999)===0,qty:2},{name:"サルベージ",filter:t=>t.kind==="Monster"&&t.attr.includes("Water")&&(t.atk??9999)<=1500,qty:2},{name:"バッテリーリサイクル",filter:t=>t.kind==="Monster"&&t.types.includes("Thunder")&&(t.atk??9999)<=1500,qty:2},{name:"闇の量産工場",filter:t=>t.kind==="Monster"&&(t.status.monsterCategories??[]).includes("Normal"),qty:2}].map(t=>({name:t.name,actions:[{title:"発動",isMandatory:!1,playType:"CardActivation",spellSpeed:"Normal",executableCells:["Hand","SpellAndTrapZone"],executablePeriods:["main1","main2"],executableDuelistTypes:["Controller"],hasToTargetCards:!0,fixedTags:["AddToHandFromGraveyard"],priorityForNPC:40,canExecute:e=>e.activator.getGraveyard().cardEntities.filter(t.filter).length>=t.qty,prepare:C,execute:async e=>{const i=e.activator.getGraveyard().cardEntities.filter(t.filter);if(i.length===0)return!1;const a=await e.activator.waitSelectEntities(i,t.qty,n=>n.length===t.qty,"手札に加えるカードを選択",!1);for(const n of a??[])await n.addToHand(["Effect"],e.action.entity,e.activator);return!0},settle:async()=>!0},S]})),yield*[{name:"トレード・イン",filter:t=>t.kind==="Monster"&&(t.lvl??0)===8},{name:"調和の宝札",filter:t=>t.kind==="Monster"&&(t.origin.monsterCategories??[]).includes("Tuner")&&t.types.includes("Dragon")&&(t.atk??9999)<=1e3},{name:"デステニー・ドロー",filter:t=>t.kind==="Monster"&&(t.origin.nameTags??[]).includes("Ｄ－ＨＥＲＯ")}].map(t=>({name:t.name,actions:[{title:"発動",isMandatory:!1,playType:"CardActivation",spellSpeed:"Normal",executableCells:["Hand","SpellAndTrapZone"],executablePeriods:["main1","main2"],executableDuelistTypes:["Controller"],fixedTags:["Draw"],priorityForNPC:40,canPayCosts:(...e)=>dt(...e,t.filter),canExecute:e=>e.activator.getDeckCell().cardEntities.length>1,payCosts:async(...e)=>pt(...e,t.filter),prepare:async()=>({selectedEntities:[]}),execute:async e=>(await e.activator.draw(2,e.action.entity,e.activator),!0),settle:async()=>!0},S]})),yield*[{name:"火の粉",calcHeal:()=>[0,-200]},{name:"雷鳴",calcHeal:()=>[0,-300]},{name:"ファイヤー・ボール",calcHeal:()=>[0,-500]},{name:"火あぶりの刑",calcHeal:()=>[0,-600]},{name:"昼夜の大火事",calcHeal:()=>[0,-800]},{name:"火炎地獄",calcHeal:()=>[-500,-1e3]},{name:"盗人ゴブリン",calcHeal:()=>[500,-500]},{name:"ブルー・ポーション",calcHeal:()=>[400,0]},{name:"レッド・ポーション",calcHeal:()=>[500,0]},{name:"ゴブリンの秘薬",calcHeal:()=>[600,0]},{name:"天使の生き血",calcHeal:()=>[800,0]},{name:"治療の神 ディアン・ケト",calcHeal:()=>[1e3,0]},{name:"恵みの雨",calcHeal:()=>[1e3,1e3]}].map(t=>({name:t.name,actions:[{title:"発動",isMandatory:!1,playType:"CardActivation",spellSpeed:"Normal",executableCells:["Hand","SpellAndTrapZone"],executablePeriods:["main1","main2"],executableDuelistTypes:["Controller"],prepare:async()=>{const[e,i]=t.calcHeal(),a=[];return e<0&&a.push("DamageToSelf"),i<0&&a.push("DamageToOpponent"),{selectedEntities:[],chainBlockTags:a}},execute:async e=>{const[i,a]=t.calcHeal();return a>0?e.activator.getOpponentPlayer().heal(a,e.action.entity):a<0&&e.activator.getOpponentPlayer().effectDamage(Math.abs(a),e),i>0?e.activator.heal(i,e.action.entity):i<0&&e.activator.effectDamage(Math.abs(i),e),!0},settle:async()=>!0},S]}))}const _i=Object.freeze(Object.defineProperty({__proto__:null,default:Cr},Symbol.toStringTag,{value:"Module"}));function*Tr(){yield{name:"強欲な瓶",actions:[S,{title:"発動",isMandatory:!1,playType:"CardActivation",spellSpeed:"Quick",executableCells:["SpellAndTrapZone"],executablePeriods:w,executableDuelistTypes:["Controller"],fixedTags:["Draw"],canExecute:t=>t.activator.getDeckCell().cardEntities.length>1&&t.activator.canDraw&&t.activator.canAddToHandFromDeck,prepare:C,execute:async t=>(await t.activator.draw(1,t.action.entity,t.activator),!0),settle:async()=>!0}]},yield{name:"戦線復帰",actions:[{title:"発動",isMandatory:!1,playType:"CardActivation",spellSpeed:"Quick",executableCells:["SpellAndTrapZone"],executablePeriods:w,executableDuelistTypes:["Controller"],hasToTargetCards:!0,fixedTags:["SpecialSummonFromGraveyard"],canExecute:t=>{const e=t.activator.getMonsterZones();return t.activator.getEnableSummonList(t.activator,"SpecialSummon",["Effect"],t.action,t.activator.getGraveyard().cardEntities.filter(a=>a.kind==="Monster").filter(a=>a.canBeTargetOfEffect(t)).map(a=>({monster:a,posList:["Defense"],cells:e})),[],!1).length>0},prepare:t=>le(t,t.activator.getGraveyard().cardEntities.filter(e=>e.kind==="Monster").filter(e=>e.canBeTargetOfEffect(t)),["Defense"]),execute:async t=>ce(t,["Defense"]),settle:async()=>!0},S]},yield{name:"サンダー・ブレイク",actions:[{title:"発動",isMandatory:!1,playType:"CardActivation",spellSpeed:"Quick",executableCells:["SpellAndTrapZone"],executablePeriods:w,executableDuelistTypes:["Controller"],canPayCosts:dt,payCosts:pt,...V((t,e,i)=>t.action.entity.field.getCardsOnFieldStrictly().filter(a=>a!==t.action.entity).filter(a=>a.canBeTargetOfEffect(t)).filter(a=>{if(!i)return!0;const n=An.flatMap(r=>i[r]??[]);return n.push(...n.flatMap(r=>r.info.equipEntities)),!n.includes(a)}),{message:"対象とするカードを選択。",destoryTargets:!0}),execute:async t=>t.selectedEntities.every(e=>!e.isOnField)?!1:(await v.tryDestroy(t.selectedEntities,t),!0),settle:async()=>!0},S]}}const Ei=Object.freeze(Object.defineProperty({__proto__:null,default:Tr},Symbol.toStringTag,{value:"Module"}));function*_r(){for(const t of["炸裂装甲","次元幽閉"])yield{name:t,actions:[S,{title:"発動",playType:"CardActivation",spellSpeed:"Quick",isMandatory:!1,executableCells:["SpellAndTrapZone"],executablePeriods:["b1Battle","b2Battle"],executableDuelistTypes:["Controller"],hasToTargetCards:!0,isNoticedForcibly:!0,meetsConditions:(e,i)=>i.some(a=>a.action.playType==="DeclareAttack"),canExecute:e=>{if(e.activator.isTurnPlayer)return!1;const i=e.activator.duel.attackingMonster;return!(!i||!i.canBeTargetOfEffect(e)||!i.isOnFieldAsMonsterStrictly||t==="次元幽閉"&&!e.activator.canTryBanish(i,"BanishAsEffect",e.action))},prepare:async e=>{const i=e.activator.duel.attackingMonster;if(!i)throw new m("想定されない状態",e,i);const a=t==="炸裂装甲"?e.action.calcChainBlockTagsForDestroy(e.activator,[i]):["BanishFromField"];return{selectedEntities:[i],chainBlockTags:a}},execute:async e=>(t==="炸裂装甲"?await v.tryDestroy(e.selectedEntities,e):await v.tryBanish("BanishAsEffect",e.selectedEntities,e),!0),settle:async()=>!0}]}}const wi=Object.freeze(Object.defineProperty({__proto__:null,default:_r},Symbol.toStringTag,{value:"Module"}));function*Er(){yield{name:"ご隠居の猛毒薬",actions:[S,{title:"発動",isMandatory:!1,playType:"CardActivation",spellSpeed:"Quick",executableCells:["Hand","SpellAndTrapZone"],executablePeriods:w,executableDuelistTypes:["Controller"],prepare:async(t,e,i)=>{const a=[{seq:0,text:"●自分は１２００ＬＰ回復する。",tags:[]},{seq:1,text:"●相手に８００ダメージを与える。",tags:["DamageToOpponent"]}],n=await t.activator.waitSelectText(a,"使用する効果を選択",i);if(n!==void 0)return{selectedEntities:[],chainBlockTags:n.tags}},execute:async t=>{if(t.data===0)t.activator.heal(1200,t.action.entity);else if(t.data===1)t.activator.getOpponentPlayer().effectDamage(800,t);else throw new m("値が正しくない。",t,t.data);return!0},settle:async()=>!0}]},yield{name:"月の書",actions:[{title:"発動",isMandatory:!1,playType:"CardActivation",spellSpeed:"Quick",executableCells:["Hand","SpellAndTrapZone"],executablePeriods:w,executableDuelistTypes:["Controller"],...V(t=>t.action.entity.field.getMonstersOnFieldStrictly().filter(e=>e.canBeTargetOfEffect(t)).filter(e=>e.canBeSet).filter(e=>e.face==="FaceUp"),{message:"対象とするモンスターを選択。"}),execute:async t=>{const e=t.selectedEntities[0];return!e.isOnFieldAsMonsterStrictly||e.battlePosition==="Set"?!1:e.canBeEffected(t.activator,t.action.entity,t.action)?(await e.setBattlePosition("Set",["Effect"],t.action.entity,t.activator),!0):(t.activator.duel.log.info(`${e.toString()}は${t.action.entity.toString()}の効果を受けない。`),!1)},settle:async()=>!0},S]},yield{name:"突進",actions:[{title:"発動",isMandatory:!1,playType:"CardActivation",spellSpeed:"Quick",executableCells:["Hand","SpellAndTrapZone"],executablePeriods:[...w,...F],executableDuelistTypes:["Controller"],...V(t=>t.action.entity.field.getMonstersOnFieldStrictly().filter(e=>e.face==="FaceUp").filter(e=>e.canBeTargetOfEffect(t)),{message:"対象とするモンスターを選択。"}),execute:async t=>{const e=t.selectedEntities[0];return!e.isOnFieldAsMonsterStrictly||e.battlePosition==="Set"?!1:e.canBeEffected(t.activator,t.action.entity,t.action)?(e.numericOprsBundle.push(L.createLingeringAddition("攻撃力上昇",i=>i.effectOwner.duel.clock.isSameTurn(i.isSpawnedAt),t.action.entity,t.action,"attack",(i,a,n)=>n+700)),!0):(t.activator.duel.log.info(`${e.toString()}は${t.action.entity.toString()}の効果を受けない。`),!1)},settle:async()=>!0},S]},yield{name:"手札断殺",actions:[{title:"発動",isMandatory:!1,playType:"CardActivation",spellSpeed:"Quick",executableCells:["Hand","SpellAndTrapZone"],executablePeriods:[...w,...F],executableDuelistTypes:["Controller"],fixedTags:["Draw"],canExecute:t=>{for(const e of[t.activator,t.activator.getOpponentPlayer()])if(!e.canDraw||e.getHandCell().cardEntities.filter(i=>i.canBeSentToGraveyard(t.activator,t.action.entity,"SendToGraveyardAsEffect",t.action)).filter(i=>i!==t.action.entity).length<2||e.getDeckCell().cardEntities.length<2)return!1;return!0},prepare:C,execute:async t=>{if(t.activator.getHandCell().cardEntities.length<2||t.activator.getOpponentPlayer().getHandCell().cardEntities.length<2)return!1;let e=0;for(const i of[t.activator,t.activator.getOpponentPlayer()]){const a=await i.waitSelectEntities(i.getHandCell().cardEntities,2,r=>r.length===2,"墓地に送るカードを２枚選択。",!1);if(!a)throw new D(t,i);const n=await v.sendManyToGraveyardForTheSameReason(a,["Effect"],t.action.entity,t.activator);e+=n.length}return e?(t.activator.duel.clock.incrementTotalProcSeq(),await v.drawAtSameTime(t.activator,t.action.entity,2,2),!0):!1},settle:async()=>!0},S]},yield{name:"リロード",actions:[{title:"発動",isMandatory:!1,playType:"CardActivation",spellSpeed:"Quick",executableCells:["Hand","SpellAndTrapZone"],executablePeriods:[...w,...F],executableDuelistTypes:["Controller"],fixedTags:["Draw"],hasToTargetCards:!0,canExecute:t=>t.activator.canDraw,prepare:C,execute:async t=>{const e=t.activator.getHandCell().cardEntities;return e.length?(await v.returnManyToDeckForTheSameReason("Random",e,["Effect"],t.action.entity,t.activator),t.activator.duel.clock.incrementTotalProcSeq(),await t.activator.draw(e.length,t.action.entity,t.activator),!0):!1},settle:async()=>!0},S]}}const bi=Object.freeze(Object.defineProperty({__proto__:null,default:Er},Symbol.toStringTag,{value:"Module"})),wr=(t,e,i,a,n,r,s)=>{if(!t.lvl||n.some(d=>!d.lvl))return;const l=n.map(d=>d.lvl??0).reduce((d,p)=>d+p,0),c=Oe(...n.map(d=>d.lvl??0));if(l<t.lvl||s==="Equal"&&l!==t.lvl||s==="OrMore"&&l-c>=t.lvl||!r(n))return;const u=[...n.map(d=>({material:d,cell:d.fieldCell}))];if(e.activator.getEnableSummonList(e.activator,"RitualSummon",["Effect","SpecialSummon"],e.action,[{monster:e.action.entity,posList:i,cells:a}],u,!1).length)return u};function*ki(t,...e){const[i,a,n,r,s]=e,l=t.activator.getCells(...i).flatMap(p=>p.cardEntities).filter(p=>{var f;return(f=p.status.monsterCategories)==null?void 0:f.includes("Ritual")}).filter(a);if(!l.length)return;const c=t.activator.getCells(...n).flatMap(p=>p.cardEntities).filter(p=>p.lvl).filter(p=>p.canBeReleased(t.activator,t.action.entity,["RitualMaterial","ReleaseAsEffect"],t.action));if(!c.length)return;const u=t.activator.getMonsterZones(),d=["Attack","Defense"];for(const p of l)for(const f of c.filter(h=>h!==p).getAllOnOffPattern()){const h=wr(p,t,d,u,f,r,s);h&&(yield{monster:p,materialInfos:h})}}const br=async(t,...e)=>{var d,p;const i=ki(t,...e).toArray(),a=i.map(f=>f.monster).getDistinct(),n=await t.activator.waitSelectEntity(a,"儀式召喚するモンスターを選択。");if(!n)return!1;const r=i.filter(f=>f.monster===n).map(f=>f.materialInfos),s=r.map(f=>({infos:f,materialSeqList:f.map(h=>h.material.seq).sort()}));let l=r[0].map(f=>f.material);if(r.length>1){const f=r.flatMap(h=>h.map(y=>y.material)).getDistinct();l=await t.activator.waitSelectEntities(f,void 0,h=>{const y=h.map(E=>E.seq).sort();return s.some(E=>y.length===E.materialSeqList.length&&y.every((g,A)=>g===E.materialSeqList[A]))},"リリースするモンスターを選択",!1)??l}const c=l.map(f=>f.seq).sort(),u=(d=s.find(f=>c.length===f.materialSeqList.length&&c.every((h,y)=>h===f.materialSeqList[y])))==null?void 0:d.infos;if(!u)throw new m("想定されない状態",t,l);return await v.releaseManyForTheSameReason(l,["RitualMaterial","Effect","SpecialSummonMaterial"],t.action.entity,t.activator),await t.activator.summon("RitualSummon",["Effect","SpecialSummon"],t.action,n,T,t.activator.getMonsterZones(),u,!1),n.info.isRebornable=!((p=n.origin.monsterCategories)!=null&&p.includes("RegularSpecialSummonOnly")),u.map(f=>f.material).forEach(f=>f.onUsedAsMaterial(t,t.action.entity)),!0},kr=(t,e,i,a,n)=>({canExecute:r=>ki(r,t,e,i,a,n).some(s=>s.materialInfos.length),prepare:async()=>{const r=[];return t.includes("Hand")&&r.push("SpecialSummonFromHand"),t.includes("Graveyard")&&r.push("SpecialSummonFromGraveyard"),t.includes("ExtraDeck")&&r.push("SpecialSummonFromExtraDeck"),t.includes("Banished")&&r.push("SpecialSummonFromBanished"),t.includes("Deck")&&r.push("SpecialSummonFromDeck"),{selectedEntities:[],chainBlockTags:r}},execute:r=>br(r,t,e,i,a,n),settle:async()=>!0});function*Dr(){for(const t of[{spellName:"カオスの儀式",monsterName:"カオス・ソルジャー"},{spellName:"仮面魔獣の儀式",monsterName:"仮面魔獣マスクド・ヘルレイザー"},{spellName:"亀の誓い",monsterName:"クラブ・タートル"},{spellName:"ジャベリンビートルの契約",monsterName:"ジャベリンビートル"},{spellName:"ゼラの儀式",monsterName:"ゼラ"},{spellName:"カオス－黒魔術の儀式",monsterName:"マジシャン・オブ・ブラックカオス"},{spellName:"ガルマソードの誓い",monsterName:"ガルマソード"},{spellName:"ライオンの儀式",monsterName:"スーパー・ウォー・ライオン"},{spellName:"チャクラの復活",monsterName:"チャクラ"},{spellName:"要塞クジラの誓い",monsterName:"要塞クジラ"},{spellName:"ローの祈り",monsterName:"ローガーディアン"},{spellName:"スカルライダーの復活",monsterName:"スカルライダー"},{spellName:"踊りによる誘発",monsterName:"ダンシング・ソルジャー"},{spellName:"悪魔鏡の儀式",monsterName:"デビルズ・ミラー"},{spellName:"ハンバーガーのレシピ",monsterName:"ハングリーバーガー"}])yield{name:t.spellName,actions:[{title:"発動",isMandatory:!1,playType:"CardActivation",spellSpeed:"Normal",executableCells:["Hand","SpellAndTrapZone"],executablePeriods:["main1","main2"],executableDuelistTypes:["Controller"],...kr(["Hand"],e=>e.nm===t.monsterName,["Hand","MonsterZone","ExtraMonsterZone"],()=>!0,"OrMore")},S]}}const Di=Object.freeze(Object.defineProperty({__proto__:null,default:Dr},Symbol.toStringTag,{value:"Module"}));function*xr(){for(const t of["大地の騎士ガイアナイト","スクラップ・デスデーモン"])yield{name:t,actions:[G()]};yield{name:"ナチュル・ガオドレイク",actions:[G(t=>t.length===1&&t.every(e=>e.attr.some(i=>i==="Earth")),t=>t.length>0&&t.every(e=>e.attr.some(i=>i==="Earth")))]},yield{name:"マジカル・アンドロイド",actions:[G(),{title:"回復",isMandatory:!0,playType:"IgnitionEffect",spellSpeed:"Normal",executableCells:["MonsterZone","ExtraMonsterZone"],executablePeriods:["end"],executableDuelistTypes:["Controller"],isOnlyNTimesPerTurnIfFaceup:1,meetsConditions:t=>t.activator.isTurnPlayer&&t.action.entity.face==="FaceUp",prepare:C,execute:async t=>(t.activator.heal(t.activator.getMonstersOnField().filter(e=>e.face==="FaceUp").filter(e=>e.types.includes("Psychic")).length*600,t.action.entity),!0),settle:async()=>!0}]}}const xi=Object.freeze(Object.defineProperty({__proto__:null,default:xr},Symbol.toStringTag,{value:"Module"}));function*Ar(){yield{name:"にせアバター",actions:[],continuousEffects:[ke("THE_DEVILS_AVATAR","Monster",t=>[t],t=>["attack","defense"].map(e=>L.createContinuous("THE_DEVILS_AVATAR",i=>i.isSpawnedBy.isOnFieldStrictly&&i.isSpawnedBy.face==="FaceUp",t,(i,a)=>a.isOnFieldStrictly&&a.face==="FaceUp",e,"calculated","THE_DEVILS_AVATAR",()=>Number.MIN_VALUE)))]},yield{name:"にせドレッド・ルート",actions:[],continuousEffects:[Fe("THE_DEVILS_DREAD-ROOT","Monster",t=>["attack","defense"].map(e=>L.createContinuous("THE_DEVILS_DREAD-ROOT",i=>i.isSpawnedBy.isOnFieldStrictly&&i.isSpawnedBy.face==="FaceUp",t,(i,a)=>a.isMonster&&a.isOnFieldStrictly&&a.face==="FaceUp"&&a!==i.isSpawnedBy,e,"calculated","THE_DEVILS_DREAD-ROOT",(i,a,n)=>Math.round(n/2))))]}}const Ai=Object.freeze(Object.defineProperty({__proto__:null,default:Ar},Symbol.toStringTag,{value:"Module"})),Pr=(t,e,i,a,n=2,r=2,s)=>{if(!t.action.entity.origin.rank||a.length<n||a.length>r||a.some(c=>!c.lvl)||a.some(c=>c.lvl!==t.action.entity.rank)||!s(a))return;const l=a.map(c=>({material:c,cell:c.fieldCell,level:c.status.level}));if(t.activator.getEnableSummonList(t.activator,"XyzSummon",["Rule","XyzSummon","SpecialSummon"],t.action,[{monster:t.action.entity,posList:e,cells:i}],l,!1).length)return l};function*Mr(t,e=2,i=2,a=n=>n.length>1){const n=t.activator.getMonstersOnField().filter(s=>s.battlePosition!=="Set");if(n.length<e)return;const r=[...t.activator.getMonsterZones(),...t.activator.getAvailableExtraMonsterZones()];yield*n.getAllOnOffPattern().filter(s=>s.length>=e).filter(s=>s.length<=i).map(s=>Pr(t,T,r,s,e,i,a)??[]).filter(s=>s.length)}const Fr=async(t,e,i)=>{var c;const a=t.action.getEnableMaterialPatterns(t).toArray(),n=a.map(u=>({infos:u,materialSeqList:u.map(d=>d.material.seq).sort()}));let r=a[0].map(u=>u.material);if(a.length>1){const u=a.flatMap(p=>p.map(f=>f.material)).getDistinct(),d=await t.activator.waitSelectEntities(u,void 0,p=>{const f=p.map(h=>h.seq).sort();return n.some(h=>f.length===h.materialSeqList.length&&f.every((y,E)=>y===h.materialSeqList[E]))},"エクシーズ素材とするモンスターを選択",i);if(!d)return;r=d}const s=r.map(u=>u.seq).sort(),l=(c=n.find(u=>s.length===u.materialSeqList.length&&s.every((d,p)=>d===u.materialSeqList[p])))==null?void 0:c.infos;if(!l)throw new m("想定されない状態",t,r);return await v.convertManyToXyzMaterials(l.map(u=>u.material),["XyzMaterial","Rule","Cost"],t.action.entity,t.activator),{summonMaterialInfos:l}},Nr=(t=2,e=2,i=a=>a.length>1)=>({title:"エクシーズ召喚",isMandatory:!1,playType:"SpecialSummon",spellSpeed:"Normal",executableCells:["ExtraDeck"],executablePeriods:["main1","main2"],executableDuelistTypes:["Controller"],getEnableMaterialPatterns:a=>Mr(a,t,e,i),canPayCosts:a=>a.action.getEnableMaterialPatterns(a).some(n=>n.length),canExecute:a=>!a.ignoreCosts||a.activator.getAvailableExtraMonsterZones().length+a.activator.getAvailableMonsterZones().length>0,payCosts:Fr,prepare:a=>I(a,"XyzSummon",["Rule","SpecialSummon","XyzSummon"],["Attack","Defense"]),execute:ee,settle:async()=>!0});function*Or(){yield*[{name:"ジェムナイト・パール",qty:2},{name:"覚醒の勇士 ガガギゴ",qty:3}].map(t=>({name:t.name,actions:[Nr(t.qty,t.qty)]}))}const Pi=Object.freeze(Object.defineProperty({__proto__:null,default:Or},Symbol.toStringTag,{value:"Module"}));function*Br(){yield{name:"シューティング・ライザー・ドラゴン",actions:[G(),{title:"①墓地送り",isMandatory:!1,playType:"TriggerEffect",spellSpeed:"Normal",executableCells:B,executablePeriods:[...w,...F],executableDuelistTypes:["Controller"],fixedTags:["SendToGraveyardFromDeck","IfSpecialSummonSucceed"],isOnlyNTimesPerTurn:1,canExecute:t=>t.action.entity.hasBeenSummonedNow(["SynchroSummon"])&&t.activator.getDeckCell().cardEntities.some(e=>(e.lvl??12)<(t.action.entity.lvl??0)),prepare:C,execute:async t=>{const e=t.activator.getDeckCell().cardEntities.filter(n=>(n.lvl??12)<(t.action.entity.lvl??0));if(e.length===0)return!1;const i=await t.activator.waitSelectEntity(e,"墓地に送るモンスターを選択",!1);if(!i)throw new m("想定されない状況",t);await i.sendToGraveyard(["Effect"],t.action.entity,t.activator);const a=i.lvl??0;return t.action.entity.numericOprsBundle.push(L.createLingeringAddition("レベル減少",()=>!0,t.action.entity,t.action,"level",(n,r,s)=>s-a)),!0},settle:async()=>!0},pi({title:"②シンクロ召喚",isOnlyNTimesPerChain:1})]}}const Mi=Object.freeze(Object.defineProperty({__proto__:null,default:Br},Symbol.toStringTag,{value:"Module"})),Lr=(t,e,i,a,n,r)=>{const s=t.fusionMaterialInfos.filter(u=>u.type!=="Overmuch");if(!s.length||!n.length||s.length!==n.length||!r(e,t,n)||!t.validateFusionMaterials(n))return;const l=s.map(u=>{const d=[];return se(u)?d.push(...n.filter(p=>u.cardName===p.nm||p.status.fusionSubstitute)):d.push(...n.filter(u.filter)),{require:u,materials:d}});if(l.some(u=>!u.materials.length)||l.flatMap(u=>u.materials).getDistinct().length<n.length)return;let c=[[]];for(const u of l)c=[...c.flatMap(d=>u.materials.map(p=>{if(d.some(h=>h.material===p))return[...d];const f={material:p,cell:p.fieldCell};return se(u.require)&&(f.name=u.require.cardName),[...d,f]}))];return c=c.filter(u=>u.length===n.length).filter(u=>u.filter(d=>d.name&&d.material.nm!==d.name).length<2),c.find(u=>e.activator.getEnableSummonList(e.activator,"FusionSummon",["Effect","SpecialSummon"],e.action,[{monster:e.action.entity,posList:i,cells:a}],u,!1).length)};function*Fi(t,...e){const[i,a,n,r]=e,s=t.activator.getCells(...i).flatMap(d=>d.cardEntities).filter(d=>{var p;return(p=d.status.monsterCategories)==null?void 0:p.includes("Fusion")}).filter(d=>a(t,d));if(!s.length)return;const l=t.activator.getCells(...n).flatMap(d=>d.cardEntities).filter(d=>d.isMonster).filter(d=>d.canBeEffected(t.activator,t.action.entity,t.action));if(!l.length)return;const c=[...t.activator.getMonsterZones(),...t.activator.duel.field.getCells("ExtraMonsterZone")],u=["Attack","Defense"];for(const d of s){const p=d.fusionMaterialInfos.filter(f=>f.type!=="Overmuch");if(p.length&&!(l.every(f=>!f.status.fusionSubstitute)&&p.filter(se).some(f=>l.every(h=>h.nm!==f.cardName)))&&!p.filter(Ss).some(f=>l.every(h=>!f.filter(h))))for(const f of l.filter(h=>h!==d).getAllOnOffPattern().filter(h=>h.length===p.length)){const h=Lr(d,t,u,c,f,r);h&&(yield{monster:d,materialInfos:h},console.log(d,h))}}}const qr=async(t,...e)=>{var p;const i=Fi(t,...e).toArray(),a=i.map(f=>f.monster).getDistinct(),n=await t.activator.waitSelectEntity(a,"融合召喚するモンスターを選択。");if(!n)return!1;const r=n.fusionMaterialInfos.filter(Cs),s=i.filter(f=>f.monster===n).map(f=>f.materialInfos),l=s.map(f=>({infos:f,requiredSeqList:f.map(h=>h.material.seq)}));let c=s[0].map(f=>f.material);if(s.length>1||r.length){const f=s.flatMap(h=>h.map(y=>y.material)).getDistinct();c=await t.activator.waitSelectEntities(f,void 0,h=>l.some(y=>y.requiredSeqList.every(E=>h.map(g=>g.seq).includes(E))&&h.filter(E=>!y.requiredSeqList.includes(E.seq)).every(E=>r.some(g=>g.filter(E)))),"融合素材とするモンスターを選択",!1)??c}const u=l.find(f=>f.requiredSeqList.every(h=>c.map(y=>y.seq).includes(h))&&c.filter(h=>!f.requiredSeqList.includes(h.seq)).every(h=>r.some(y=>y.filter(h))));if(!u)throw new m("想定されない状態",t,c);const d=u.infos;return d.push(...c.filter(f=>!u.requiredSeqList.includes(f.seq)).map(f=>({material:f,cell:f.fieldCell}))),await v.sendManyToGraveyardForTheSameReason(c,["FusionMaterial","Effect","SpecialSummonMaterial"],t.action.entity,t.activator),await t.activator.summon("FusionSummon",["Effect","SpecialSummon"],t.action,n,T,[...t.activator.getMonsterZones(),...t.activator.duel.field.getCells("ExtraMonsterZone")],d,!1),n.info.isRebornable=!((p=n.origin.monsterCategories)!=null&&p.includes("RegularSpecialSummonOnly")),d.map(f=>f.material).forEach(f=>f.onUsedAsMaterial(t,t.action.entity)),!0},yt=(t,e,i,a,n)=>({fixedTags:["SpecialSummonFromExtraDeck"],canExecute:r=>Fi(r,t,e,i,a,n).some(s=>s.materialInfos.length),prepare:C,execute:r=>qr(r,t,e,i,a,n),settle:async()=>!0});function*Rr(){for(const t of["心眼の女神","沼地の魔獣王","イリュージョン・シープ","破壊神 ヴァサーゴ"])yield{name:t,actions:[],continuousEffects:[Ke]};yield{name:"沼地の魔神王",actions:[{title:"融合サーチ",isMandatory:!1,playType:"IgnitionEffect",spellSpeed:"Normal",executableCells:["Hand"],executablePeriods:["main1","main2"],executableDuelistTypes:["Controller"],fixedTags:["SearchFromDeck"],canPayCosts:On,canExecute:t=>t.activator.getDeckCell().cardEntities.some(e=>e.nm==="融合")&&t.activator.canAddToHandFromDeck,getDests:t=>[t.activator.getGraveyard()],payCosts:Bn,prepare:C,execute:async t=>{const e=t.activator.getDeckCell().cardEntities.filter(a=>a.nm==="融合");if(!e.length)return!1;const i=await t.activator.waitSelectEntity(e,"手札に加えるカードを選択",!1);return i?(await i.addToHand(["Effect"],t.action.entity,t.activator),t.activator.getDeckCell().shuffle(),!0):!1},settle:async()=>!0}],continuousEffects:[Ke]},yield{name:"パラサイト・フュージョナー",actions:[{title:"融合",isMandatory:!1,playType:"TriggerEffect",spellSpeed:"Normal",executableCells:["MonsterZone"],executablePeriods:w,executableDuelistTypes:["Controller"],...yt(["ExtraDeck"],()=>!0,["MonsterZone","ExtraMonsterZone"],(t,e,i)=>i.includes(t.action.entity),"Graveyard"),settle:async()=>!0}],summonFilter:(t,e,i,a,n,r,s,l,c,u)=>{const d={posList:c,cells:u},p={posList:[],cells:[]};if(!n.includes("FusionSummon"))return d;const f=l.find(h=>h.material===t.isSpawnedBy);return f?f.name&&f.name!==t.isSpawnedBy.nm?d:p:d},continuousEffects:[Ke]}}const Ni=Object.freeze(Object.defineProperty({__proto__:null,default:Rr},Symbol.toStringTag,{value:"Module"}));function*Hr(){yield{name:"魔導サイエンティスト",actions:[{title:"特殊召喚",isMandatory:!1,playType:"IgnitionEffect",spellSpeed:"Normal",executableCells:["MonsterZone"],executablePeriods:["main1","main2"],executableDuelistTypes:["Controller"],fixedTags:["SpecialSummonFromExtraDeck"],canPayCosts:t=>t.activator.lp>=1e3,canExecute:t=>{const e=t.activator.getMonsterZones();return t.activator.getEnableSummonList(t.activator,"SpecialSummon",["Effect"],t.action,t.activator.getExtraDeck().cardEntities.filter(a=>{var n;return(n=a.status.monsterCategories)==null?void 0:n.includes("Fusion")}).filter(a=>a.lvl&&a.lvl<7).map(a=>({monster:a,posList:T,cells:e})),[],!1).length>0},payCosts:(t,e)=>ve(t,e,1e3),prepare:C,execute:async t=>{const e=t.activator.getMonsterZones(),i=await t.activator.summonOne(t.activator,"SpecialSummon",["Effect"],t.action,t.activator.getExtraDeck().cardEntities.filter(a=>{var n;return(n=a.status.monsterCategories)==null?void 0:n.includes("Fusion")}).filter(a=>a.lvl&&a.lvl<7).map(a=>({monster:a,posList:T,cells:e})),[],!1,!1);return i?(i.procFilterBundle.push(ye.createLingering("直接攻撃不可",()=>!0,t.action.entity,t.action,(a,n)=>n.face==="FaceUp"&&n.isOnFieldAsMonsterStrictly,["BattleTarget"],(a,n,r,s,l)=>a!==r?!0:l.every(c=>c.entityType!=="Duelist"))),i.counterHolder.setCurfewFlg(t.action.entity),!0):!1},settle:async()=>!0},{title:"自発帰還",isMandatory:!0,playType:"LingeringEffect",spellSpeed:"Normal",executableCells:X,executablePeriods:["end"],executableDuelistTypes:me,canExecute:t=>t.action.entity.field.getMonstersOnFieldStrictly().some(e=>e.counterHolder.getCurfewFlg(t.action.entity)),prepare:C,execute:async t=>{const e=t.action.entity.field.getMonstersOnFieldStrictly().filter(a=>a.counterHolder.getCurfewFlg(t.action.entity));if(!e.length)throw new m("想定されない状態",t);let i=e[0];if(e.length>1){const a=await t.activator.waitSelectEntity(e,"帰還させるカードを選択。",!1);if(!a)throw new D(t);i=a}return await i.returnToDeck("Bottom",["Effect"],t.action.entity,t.activator),!0},settle:async()=>!0}]}}const Oi=Object.freeze(Object.defineProperty({__proto__:null,default:Hr},Symbol.toStringTag,{value:"Module"}));function*Zr(){for(const t of[{name:"マンジュ・ゴッド",kinds:["Monster","Spell"]},{name:"センジュ・ゴッド",kinds:["Monster"]},{name:"ソニックバード",kinds:["Spell"]}])yield{name:t.name,actions:[{title:"①儀式サーチ",isMandatory:!1,playType:"TriggerEffect",spellSpeed:"Normal",executableCells:["MonsterZone"],executablePeriods:w,executableDuelistTypes:["Controller"],fixedTags:["SearchFromDeck"],meetsConditions:e=>e.action.entity.hasBeenSummonedNow(["NormalSummon","FlipSummon"]),canExecute:e=>e.activator.canAddToHandFromDeck&&e.activator.getDeckCell().cardEntities.filter(i=>t.kinds.includes(i.kind)).some(i=>{var a;return i.status.spellCategory==="Ritual"||((a=i.status.monsterCategories)==null?void 0:a.includes("Ritual"))}),prepare:C,execute:async e=>{if(!e.activator.canAddToHandFromDeck)return!1;const i=e.activator.getDeckCell().cardEntities.filter(n=>t.kinds.includes(n.kind)).filter(n=>{var r;return n.status.spellCategory==="Ritual"||((r=n.status.monsterCategories)==null?void 0:r.includes("Ritual"))});if(!i.length)return!1;const a=await e.activator.waitSelectEntity(i,"手札に加えるカードを選択",!1);if(!a)throw new D(e,i);return await a.addToHand(["Effect"],e.action.entity,e.activator),e.activator.getDeckCell().shuffle(),!0},settle:async()=>!0}]}}const Bi=Object.freeze(Object.defineProperty({__proto__:null,default:Zr},Symbol.toStringTag,{value:"Module"}));function*Gr(){yield{name:"儀式の準備",actions:[{title:"発動",isMandatory:!1,playType:"CardActivation",spellSpeed:"Normal",executableCells:["Hand","SpellAndTrapZone"],executablePeriods:["main1","main2"],executableDuelistTypes:["Controller"],fixedTags:["SearchFromDeck","ReturnToHandFromGraveyard"],canExecute:t=>t.activator.getDeckCell().cardEntities.filter(e=>{var i;return(i=e.status.monsterCategories)==null?void 0:i.includes("Ritual")}).some(e=>e.lvl&&e.lvl<8)&&t.activator.canAddToHandFromDeck,prepare:C,execute:async t=>{if(!t.activator.canAddToHandFromDeck)return!1;const e=t.activator.getDeckCell().cardEntities.filter(r=>{var s;return(s=r.status.monsterCategories)==null?void 0:s.includes("Ritual")}).filter(r=>r.lvl&&r.lvl<8);if(!e.length)return!1;const i=await t.activator.waitSelectEntity(e,"手札に加えるカードを選択",!1);if(!i)return!1;if(await i.addToHand(["Effect"],t.action.entity,t.activator),t.activator.getDeckCell().shuffle(),!t.activator.canAddToHandFromGraveyard)return!0;const a=t.activator.getGraveyard().cardEntities.filter(r=>r.status.spellCategory==="Ritual");if(a.length===1&&!await t.activator.waitYesNo("儀式カードをサルベージする？"))return!0;const n=await t.activator.waitSelectEntity(a,"手札に加えるカードを選択",!0);return n&&(t.activator.duel.clock.incrementProcSeq(),await n.addToHand(["Effect"],t.action.entity,t.activator)),!0},settle:async()=>!0},S]},yield{name:"儀式の下準備",actions:[{title:"発動",isMandatory:!1,playType:"CardActivation",spellSpeed:"Normal",executableCells:["Hand","SpellAndTrapZone"],executablePeriods:["main1","main2"],executableDuelistTypes:["Controller"],isOnlyNTimesPerTurn:1,fixedTags:["SearchFromDeck","ReturnToHandFromGraveyard"],canExecute:t=>{if(!t.activator.canAddToHandFromDeck)return!1;const e=t.activator.getDeckCell().cardEntities.filter(a=>a.status.spellCategory==="Ritual").flatMap(a=>a.status.textTags??[]),i=["Deck"];return t.activator.canAddToHandFromGraveyard&&i.push("Graveyard"),t.activator.getCells(...i).flatMap(a=>a.cardEntities).filter(a=>{var n;return(n=a.status.monsterCategories)==null?void 0:n.includes("Ritual")}).some(a=>e.includes(a.nm))},prepare:C,execute:async t=>{if(!t.activator.canAddToHandFromDeck)return!1;let e=t.activator.getDeckCell().cardEntities.filter(l=>l.status.spellCategory==="Ritual").flatMap(l=>l.status.textTags??[]);if(!e.length)return!1;const i=["Deck"];if(t.activator.canAddToHandFromGraveyard&&i.push("Graveyard"),e=t.activator.getCells(...i).flatMap(l=>l.cardEntities).filter(l=>{var c;return(c=l.status.monsterCategories)==null?void 0:c.includes("Ritual")}).filter(l=>e.includes(l.nm)).map(l=>l.nm),!e.length)return!1;const a=t.activator.getDeckCell().cardEntities.filter(l=>l.status.spellCategory==="Ritual").filter(l=>l.status.textTags&&l.status.textTags.union(e).length);if(!a.length)return!1;const n=await t.activator.waitSelectEntity(a,"手札に加えるカードを選択",!1);if(!n)throw new D(t);const r=t.activator.getCells(...i).flatMap(l=>l.cardEntities).filter(l=>{var c;return(c=l.status.monsterCategories)==null?void 0:c.includes("Ritual")}).filter(l=>{var c;return(c=n.status.textTags)==null?void 0:c.includes(l.nm)});if(!r.length)throw console.error(n.status.textTags),new m("想定されない状態",t,n,n.status.textTags);const s=await t.activator.waitSelectEntity(r,"手札に加えるカードを選択",!1);if(!s)throw new D(t,a);return await v.addManyToHand([n,s],["Effect"],t.action.entity,t.activator),t.activator.getDeckCell().shuffle(),!0},settle:async()=>!0},S]}}const Li=Object.freeze(Object.defineProperty({__proto__:null,default:Gr},Symbol.toStringTag,{value:"Module"}));function*$r(){yield{name:"折れ竹光",actions:[he(),S]},yield{name:"妖刀竹光",actions:[he(),S,{title:"②直接攻撃付与",isMandatory:!1,playType:"IgnitionEffect",spellSpeed:"Normal",executableCells:["SpellAndTrapZone"],executablePeriods:["main1","main2"],executableDuelistTypes:["Controller"],isOnlyNTimesPerTurn:1,...V(t=>t.activator.getSpellTrapsOnField().filter(e=>{var i;return(i=e.status.nameTags)==null?void 0:i.includes("竹光")}).filter(e=>e!==t.action.entity).filter(e=>e.status.spellCategory==="Equip"),{message:"手札に戻すカードを選択。",tags:["BounceToHand"]}),execute:async t=>{const e=t.action.entity.info.equipedBy;return e?(await v.returnManyToHandForTheSameReason(t.selectedEntities,["Effect"],t.action.entity,t.activator),e.statusOperatorBundle.push(new R({title:"直接攻撃",validateAlive:i=>i.effectOwner.duel.clock.isSameTurn(i.isSpawnedAt),isContinuous:!1,isSpawnedBy:t.action.entity,actionAttr:t.action,isApplicableTo:(i,a)=>a.isOnFieldAsMonsterStrictly&&a.face==="FaceUp",statusCalculator:()=>({canDirectAttack:!0})})),!0):!1},settle:async()=>!0},{title:"③サーチ",isMandatory:!1,playType:"TriggerEffect",spellSpeed:"Normal",executableCells:["Graveyard"],executablePeriods:[...w,...F],executableDuelistTypes:["Controller"],fixedTags:["SearchFromDeck"],meetsConditions:t=>t.action.entity.wasMovedAtPreviousChain&&t.action.entity.wasMovedFrom.cellType!=="Banished",canExecute:t=>t.activator.canAddToHandFromDeck&&t.activator.getDeckCell().cardEntities.filter(e=>{var i;return(i=e.status.nameTags)==null?void 0:i.includes("竹光")}).some(e=>e.status.name!=="妖刀竹光"),prepare:C,execute:async t=>{const e=t.activator.getDeckCell().cardEntities.filter(a=>{var n;return(n=a.status.nameTags)==null?void 0:n.includes("竹光")}).filter(a=>a.status.name!=="妖刀竹光");if(!e.length)return!1;const i=await t.activator.waitSelectEntity(e,"手札に加えるカードを選択。",!1);if(!i)throw new D(t);return await i.addToHand(["Effect"],t.action.entity,t.activator),t.activator.getDeckCell().shuffle(),!0},settle:async()=>!0}]},yield{name:"真刀竹光",actions:[he(),S,{title:"②相手モンスター破壊",isMandatory:!1,playType:"TriggerEffect",spellSpeed:"Normal",executableCells:["SpellAndTrapZone"],executablePeriods:["b1DAfterDmgCalc","b2DAfterDmgCalc"],executableDuelistTypes:["Controller"],canExecute:t=>{const e=t.action.entity.info.equipedBy;return!(!e||!e.info.battleLog.filter(i=>t.activator.duel.clock.isPreviousStage(i.timestamp)).some(i=>i.enemy.entityType==="Duelist")||!t.activator.getOpponentPlayer().getMonstersOnField().length||!t.activator.getOpponentPlayer().lifeLog.filter(i=>t.activator.duel.clock.isPreviousStage(i.clock)).some(i=>i.entity===e))},prepare:async t=>({selectedEntities:[],chainBlockTags:t.action.calcChainBlockTagsForDestroy(t.activator,t.activator.getOpponentPlayer().getMonstersOnField()),prepared:void 0}),execute:async t=>(await v.tryDestroy(t.activator.getOpponentPlayer().getMonstersOnField(),t)).length>0,settle:async()=>!0},{title:"③竹光入替",isMandatory:!1,playType:"IgnitionEffect",spellSpeed:"Normal",executableCells:["SpellAndTrapZone"],executablePeriods:["main1","main2"],executableDuelistTypes:["Controller"],canPayCosts:t=>t.action.entity.info.equipedBy?Pn(t):!1,canExecute:t=>!!(t.action.entity.info.equipedBy&&t.activator.getDeckCell().cardEntities.filter(e=>{var i;return(i=e.status.nameTags)==null?void 0:i.includes("竹光")}).filter(e=>e.status.name!=="真刀竹光").some(e=>e.status.spellCategory==="Equip"))&&t.activator.duel.field.getMonstersOnFieldStrictly().some(e=>e.canBeTargetOfEffect(t)),payCosts:Mn,prepare:C,execute:async t=>{const e=t.activator.getDeckCell().cardEntities.filter(l=>{var c;return(c=l.status.nameTags)==null?void 0:c.includes("竹光")}).filter(l=>l.status.name!=="真刀竹光").filter(l=>l.status.spellCategory==="Equip");if(!e.length)return!1;const i=t.activator.getAvailableSpellTrapZones();if(!i.length)return!1;const a=t.activator.duel.field.getMonstersOnFieldStrictly().filter(l=>l.canBeTargetOfEffect(t));if(!a.length)return!1;const n=await t.activator.waitSelectEntity(e,"装備するカードを選択。",!1);if(!n)throw new D("竹光選択",t);const r=await t.activator.duel.view.waitSelectDestination(t.activator,n,i,"装備カードを置く場所を選択。","装備",!1);if(!r)throw new D("配置場所選択",t);await n.putDirectly(r,"Spell",["Effect"],t.action.entity,t.activator),t.activator.getDeckCell().shuffle();const s=await t.activator.waitSelectEntity(a,"装備する対象を選択。",!1);if(!s)throw new D("装備対象選択",t);return n.info.equipedBy=s,n.info.effectTargets[t.action.seq]=[s],s.info.equipEntities.push(n),!0},settle:async()=>!0}]}}const qi=Object.freeze(Object.defineProperty({__proto__:null,default:$r},Symbol.toStringTag,{value:"Module"}));function*jr(){yield{name:"黄金色の竹光",actions:[{title:"発動",isMandatory:!1,playType:"CardActivation",spellSpeed:"Normal",executableCells:["Hand","SpellAndTrapZone"],executablePeriods:["main1","main2"],executableDuelistTypes:["Controller"],priorityForNPC:20,fixedTags:["Draw"],meetsConditions:t=>t.activator.getSpellTrapsOnField().filter(e=>{var i;return(i=e.status.nameTags)==null?void 0:i.includes("竹光")}).filter(e=>e.face==="FaceUp").some(e=>e.status.spellCategory==="Equip"),canExecute:t=>t.activator.getDeckCell().cardEntities.length>0&&t.activator.canDraw,prepare:C,execute:async t=>(await t.activator.draw(2,t.action.entity,t.activator),!0),settle:async()=>!0},S]}}const Ri=Object.freeze(Object.defineProperty({__proto__:null,default:jr},Symbol.toStringTag,{value:"Module"}));function*Ur(){yield{name:"ＢＦ－疾風のゲイル",actions:[{title:"①特殊召喚",isMandatory:!1,playType:"SpecialSummon",spellSpeed:"Normal",executableCells:["Hand"],executablePeriods:["main1","main2"],executableDuelistTypes:["Controller"],canExecute:t=>t.activator.getMonstersOnField().filter(e=>(e.status.nameTags??[]).includes("ＢＦ")).some(e=>e.nm!==t.action.entity.origin.name)&&$(t,T,[],["Rule"]),getDests:t=>J(t,T,[],["Rule"]),prepare:t=>I(t,"SpecialSummon",["SpecialSummon","Rule"],T),execute:ee,settle:async()=>!0},{title:"②攻守半減",isMandatory:!1,playType:"IgnitionEffect",spellSpeed:"Normal",executableCells:["MonsterZone"],executablePeriods:["main1","main2"],executableDuelistTypes:["Controller"],isOnlyNTimesPerTurnIfFaceup:1,...V(t=>t.activator.getOpponentPlayer().getMonstersOnField().filter(e=>e.face==="FaceUp").filter(e=>e.canBeTargetOfEffect(t)),{message:"対象モンスターを選択。"}),execute:async t=>{const e=t.selectedEntities.filter(i=>i.isOnFieldAsMonsterStrictly).filter(i=>i.face==="FaceUp").find(i=>i.canBeEffected(t.activator,t.action.entity,t.action));return e?(["attack","defense"].map(i=>L.createLingeringFixation("②攻守半減",()=>!0,t.action.entity,t.action,i,(a,n,r)=>Math.round(r/2))).forEach(i=>e.numericOprsBundle.push(i)),!0):!1},settle:async()=>!0}]}}const Hi=Object.freeze(Object.defineProperty({__proto__:null,default:Ur},Symbol.toStringTag,{value:"Module"}));function*zr(){yield{name:"水晶機巧－ハリファイバー",actions:[ht(t=>t.length===2&&t.some(e=>{var i;return(i=e.status.monsterCategories)==null?void 0:i.includes("Tuner")})),{title:"①リクルート",isMandatory:!1,playType:"TriggerEffect",spellSpeed:"Normal",executableCells:B,executablePeriods:[...w,...F],executableDuelistTypes:["Controller"],fixedTags:["SpecialSummonFromDeck"],meetsConditions:t=>t.action.entity.hasBeenSummonedNow(["LinkSummon"]),canExecute:t=>{const e=[t.activator.getHandCell(),t.activator.getDeckCell()].flatMap(n=>n.cardEntities).filter(n=>(n.lvl??12)<4).filter(n=>{var r;return(r=n.status.monsterCategories)==null?void 0:r.includes("Tuner")}),i=t.activator.getMonsterZones();return t.activator.getEnableSummonList(t.activator,"SpecialSummon",["Effect"],t.action,e.map(n=>({monster:n,cells:i,posList:["Defense"]})),[],!1).length>0},prepare:C,execute:async t=>{const e=[t.activator.getHandCell(),t.activator.getDeckCell()].flatMap(n=>n.cardEntities).filter(n=>(n.lvl??12)<4).filter(n=>{var r;return(r=n.status.monsterCategories)==null?void 0:r.includes("Tuner")}),i=t.activator.getMonsterZones(),a=await t.activator.summonOne(t.activator,"SpecialSummon",["Effect"],t.action,e.map(n=>({monster:n,cells:i,posList:["Defense"]})),[],!1,!1);if(!a)throw new D(t);return a.statusOperatorBundle.push(new R({title:"効果発動不可",validateAlive:n=>n.effectOwner.duel.clock.isSameTurn(n.isSpawnedAt),isContinuous:!1,isSpawnedBy:t.action.entity,actionAttr:t.action,isApplicableTo:(n,r)=>n.effectOwner.duel.clock.isSameTurn(n.isSpawnedAt)&&r.isOnFieldAsMonsterStrictly&&r.face==="FaceUp",statusCalculator:()=>({canActivateEffect:!1})})),!0},settle:async()=>!0},{title:"②シンクロ召喚",isMandatory:!1,playType:"QuickEffect",spellSpeed:"Quick",executableCells:B,executablePeriods:["main1","main2"],executableDuelistTypes:["Controller"],isOnlyNTimesPerChain:1,canPayCosts:De,meetsConditions:t=>!t.activator.isTurnPlayer,canExecute:t=>{const e=[...t.activator.getMonsterZones(),...t.activator.duel.field.getCells("ExtraMonsterZone")],i=t.activator.getExtraDeck().cardEntities.filter(n=>{var r;return(r=n.status.monsterCategories)==null?void 0:r.includes("Synchro")}).filter(n=>{var r;return(r=n.status.monsterCategories)==null?void 0:r.includes("Tuner")});return t.activator.getEnableSummonList(t.activator,"SynchroSummon",["SpecialSummon","Effect"],t.action,i.map(n=>({monster:n,cells:e,posList:T})),[{material:t.action.entity,cell:t.action.entity.fieldCell}],!1).length>0},payCosts:Ue,prepare:C,execute:async t=>{const e=[...t.activator.getMonsterZones(),...t.activator.duel.field.getCells("ExtraMonsterZone")],i=t.activator.getExtraDeck().cardEntities.filter(n=>{var r;return(r=n.status.monsterCategories)==null?void 0:r.includes("Synchro")}).filter(n=>{var r;return(r=n.status.monsterCategories)==null?void 0:r.includes("Tuner")});return!!await t.activator.summonOne(t.activator,"SynchroSummon",["SpecialSummon","Effect"],t.action,i.map(n=>({monster:n,cells:e,posList:T})),[],!1,!1)},settle:async()=>!0}]}}const Zi=Object.freeze(Object.defineProperty({__proto__:null,default:zr},Symbol.toStringTag,{value:"Module"}));function*Vr(){yield{name:"Ｄ－ＨＥＲＯ ディアボリックガイ",actions:[{title:"①リクルート",isMandatory:!1,playType:"IgnitionEffect",spellSpeed:"Normal",executableCells:["Graveyard"],executablePeriods:["main1","main2"],executableDuelistTypes:["Controller"],fixedTags:["SpecialSummonFromDeck"],priorityForNPC:10,canPayCosts:De,canExecute:t=>{const e=t.activator.getDeckCell().cardEntities.find(n=>n.nm==="Ｄ－ＨＥＲＯ ディアボリックガイ");if(!e)return!1;const i=t.activator.getMonsterZones();return t.activator.getEnableSummonList(t.activator,"SpecialSummon",["Effect"],t.action,[{monster:e,posList:T,cells:i}],[],!1).length>0},payCosts:Ue,prepare:C,execute:async t=>{const e=t.activator.getDeckCell().cardEntities.find(i=>i.nm==="Ｄ－ＨＥＲＯ ディアボリックガイ");return e?Rn(t,[e]):!1},settle:async()=>!0}]},yield{name:"Ｄ－ＨＥＲＯ ダイヤモンドガイ",actions:[{title:"魔法効果予約",isMandatory:!1,playType:"IgnitionEffect",spellSpeed:"Normal",executableCells:["MonsterZone"],executablePeriods:["main1","main2"],executableDuelistTypes:["Controller"],isOnlyNTimesPerTurnIfFaceup:1,canExecute:t=>t.action.entity.face==="FaceUp"&&t.activator.getDeckCell().cardEntities.length>0,prepare:C,execute:async t=>{const e=await v.excavateFromDeck(t.activator,["Effect"],t.action.entity,t.activator);if(!e)return!1;if(e.kind!=="Spell"||e.status.spellCategory!=="Normal")return t.activator.duel.view.requireUpdate(),await Be(500),t.activator.writeInfoLog(`${e.toString()}は通常魔法ではないため、デッキボトムに戻った。`),await e.returnToDeck("Bottom",["Effect"],t.action.entity,t.activator),!1;await e.sendToGraveyard(["Effect"],t.action.entity,t.activator);const i=e.actions.filter(r=>r.playType==="CardActivation").find(r=>!r.needsToPayRegularCosts);if(!i)return t.activator.writeInfoLog(`${e.toString()}は${t.action.entity.toString()}の効果では発動できない。`),!0;const a=t.activator.duel.clock.getClone(),n={...i.definition};return n.title+=`(${t.action.entity.toString()})`,n.playType="IgnitionEffect",n.canExecute=(r,s)=>r.activator.duel.clock.turn>a.turn+2||r.action.entity.wasMovedAfter(a)?"RemoveMe":r.activator.duel.clock.turn<a.turn+2?!1:!i.definition.canExecute||i.definition.canExecute(r,s),n.executableCells=["Graveyard"],n.meetsConditions=void 0,n.canPayCosts=void 0,n.payCosts=void 0,n.settle=async()=>!0,n.isOnlyNTimesPerTurn=1,e.actions.push(ne.createNew(e,n)),!0},settle:async()=>!0}]}}const Gi=Object.freeze(Object.defineProperty({__proto__:null,default:Vr},Symbol.toStringTag,{value:"Module"}));function*Wr(){yield{name:"Ｅ・ＨＥＲＯ プリズマー",actions:[{title:"リフレクト・チェンジ",isMandatory:!1,playType:"IgnitionEffect",spellSpeed:"Normal",executableCells:["MonsterZone"],executablePeriods:["main1","main2"],executableDuelistTypes:["Controller"],isOnlyNTimesPerTurnIfFaceup:1,needsToPayRegularCost:!0,canPayCosts:t=>{const e=t.activator.getExtraDeck().cardEntities.flatMap(i=>i.fusionMaterialInfos).filter(se).map(i=>i.cardName).getDistinct();return t.activator.getDeckCell().cardEntities.filter(i=>e.includes(i.nm)).some(i=>i.canBeSentToGraveyard(t.activator,t.action.entity,"SendToGraveyardAsCost",t.action))},canExecute:t=>t.action.entity.face==="FaceUp",payCosts:async(t,e,i)=>{const a=t.activator.getExtraDeck().cardEntities.flatMap(c=>c.fusionMaterialInfos).filter(se).map(c=>c.cardName).getDistinct(),n=t.activator.getDeckCell().cardEntities.filter(c=>a.includes(c.nm)).filter(c=>c.canBeSentToGraveyard(t.activator,t.action.entity,"SendToGraveyardAsCost",t.action));if(n.length===0)throw new m("想定されない状態",t);const r=await t.activator.waitSelectEntity(n,"墓地に送るモンスターを選択",i);if(!r){if(!i)throw new D(t);return}const s=t.activator.getExtraDeck().cardEntities.filter(c=>c.fusionMaterialInfos.filter(se).some(u=>u.cardName===r.nm)),l=await t.activator.waitSelectEntity(s,"公開するモンスターを選択",i);if(!l)throw new m("想定されない状態",t);return t.activator.writeInfoLog(`公開：${l.toString()}`),await r.sendToGraveyard(["Effect"],t.action.entity,t.activator),t.activator.getDeckCell().shuffle(),{sendToGraveyard:[r]}},prepare:C,execute:async t=>{const e=t.costInfo.sendToGraveyard;if(!e||!e.length)throw new m("コスト情報が取得できない",t);const i=e[0];return t.action.entity.statusOperatorBundle.push(new R({title:t.action.title,validateAlive:a=>a.effectOwner.duel.clock.isSameTurn(a.isSpawnedAt),isContinuous:!1,isSpawnedBy:t.action.entity,actionAttr:t.action,isApplicableTo:(a,n)=>n.isOnFieldAsMonsterStrictly&&n.face==="FaceUp",statusCalculator:()=>({name:i.origin.name})})),!0},settle:async()=>!0}]}}const $i=Object.freeze(Object.defineProperty({__proto__:null,default:Wr},Symbol.toStringTag,{value:"Module"}));function*Qr(){yield{name:"封印されしエクゾディア",actions:[{title:"封印開放",isMandatory:!0,playType:"Exodia",spellSpeed:"Normal",executableCells:["Hand"],executablePeriods:q,executableDuelistTypes:["Controller"],canExecute:t=>t.activator.getHandCell().cardEntities.filter(i=>{var a;return(a=i.origin.nameTags)==null?void 0:a.includes("封印されし")}).map(i=>i.origin.name).getDistinct().length===5,prepare:async t=>(await v.sendManyToGraveyardForTheSameReason(t.activator.duel.field.getCardsOnFieldStrictly(),["Rule"],t.action.entity,t.activator),{selectedEntities:[],chainBlockTags:[],nextChainBlockFilter:()=>!1}),execute:async t=>{const e=t.activator.getOpponentPlayer().getHandCell().cardEntities.filter(a=>{var n;return(n=a.origin.nameTags)==null?void 0:n.includes("封印されし")}).map(a=>a.origin.name).getDistinct().length===5,i=[{name:"封印されし者の左足",column:4},{name:"封印されし者の右足",column:2},{name:"封印されし者の左腕",column:5},{name:"封印されし者の右腕",column:1},{name:"封印されしエクゾディア",column:3}];for(const a of i){const n=[t.activator.getHandCell().cardEntities.find(r=>r.origin.name===a.name),t.activator.getOpponentPlayer().getHandCell().cardEntities.find(r=>r.origin.name===a.name)].filter(r=>r!==void 0);if(!n.length)throw new m("想定されない状態",t.activator.getHandCell().cardEntities,a.name);await k.moveMany(n.map(r=>({entity:r,to:r.controller.getMonsterZones().find(s=>s.column===(r.controller.seat==="Above"?6-a.column:a.column))??r.controller.getFieldZone(),kind:"Monster",face:"FaceUp",orientation:"Vertical",pos:"Top",movedAs:["Rule"],movedBy:void 0,actionOwner:void 0,chooser:void 0})))}throw e?new O(void 0,`お互いが、${t.action.entity.toString()}の特殊勝利条件を同時に満たした。`):new O(t.activator,`${t.activator.name}が${t.action.entity.toString()}の特殊勝利条件を満たした。`)},settle:async()=>!0}]}}const ji=Object.freeze(Object.defineProperty({__proto__:null,default:Qr},Symbol.toStringTag,{value:"Module"}));function*Xr(){yield{name:"ファイアウォール・ドラゴン・シンギュラリティ",actions:[ht(t=>t.length>2),{title:"①バウンス＆自己強化",isMandatory:!1,playType:"QuickEffect",spellSpeed:"Quick",executableCells:B,executablePeriods:[...w,...F],executableDuelistTypes:["Controller"],isOnlyNTimesPerTurn:1,hasToTargetCards:!0,fixedTags:["BounceToHand"],canExecute:t=>[...t.activator.getGraveyard().cardEntities,...t.activator.getMonstersOnField()].flatMap(n=>n.status.monsterCategories??[]).getDistinct().union(["Ritual","Fusion","Synchro","Xyz"]).length<1?!1:[...t.activator.getOpponentPlayer().getGraveyard().cardEntities,...t.activator.getOpponentPlayer().getEntiteisOnField()].filter(n=>n.canBeTargetOfEffect(t)).length>0,prepare:async(t,e,i)=>{const n=[...t.activator.getGraveyard().cardEntities,...t.activator.getMonstersOnField()].flatMap(c=>c.status.monsterCategories??[]).getDistinct().union(["Ritual","Fusion","Synchro","Xyz"]).length;if(n<1)return;const r=[...t.activator.getOpponentPlayer().getGraveyard().cardEntities,...t.activator.getOpponentPlayer().getEntiteisOnField()].filter(c=>c.canBeTargetOfEffect(t));if(r.length<1)return;const s=r.length===1?1:void 0,l=await t.activator.waitSelectEntities(r,s,c=>c.length>0&&c.length<=n,"手札に戻すカードを選択。",i);if(l)return{selectedEntities:l}},execute:async t=>{const e=t.selectedEntities.filter(a=>a.isOnFieldStrictly||a.fieldCell.cellType==="Graveyard").filter(a=>a.canBeEffected(t.activator,t.action.entity,t.action));await v.returnManyToHandForTheSameReason(e,["Effect"],t.action.entity,t.activator);const i=e.filter(a=>a.fieldCell.cellType==="Hand"||a.fieldCell.cellType==="ExtraDeck").length;return t.action.entity.numericOprsBundle.push(L.createLingeringAddition(t.action.title,a=>a.isSpawnedBy.isEffective,t.action.entity,t.action,"attack",(a,n,r)=>r+500*i)),!0},settle:async()=>!0},{title:"②蘇生",isMandatory:!1,playType:"TriggerEffect",spellSpeed:"Normal",executableCells:B,executablePeriods:q,executableDuelistTypes:["Controller"],isOnlyNTimesPerTurn:1,fixedTags:["SpecialSummonFromGraveyard"],meetsConditions:t=>{const e=t.action.entity.moveLog.latestRecord.movedAt,i=t.action.duel.field.moveLog.getPriviousChainLog().filter(a=>(console.log(a,a.entity.fieldCell.cellType==="Graveyard",a.movedAs.includes("BattleDestroy")),a.entity.fieldCell.cellType==="Graveyard"||a.movedAs.includes("BattleDestroy"))).filter(a=>a.movedAt.totalProcSeq>e.totalProcSeq).map(a=>a.entity.wasMovedFrom).toArray();return t.action.entity.linkArrowDests.union(i).length>0},canExecute:t=>{const e=t.activator.getMonsterZones();return t.activator.getEnableSummonList(t.activator,"SpecialSummon",["Effect"],t.action,t.activator.getGraveyard().cardEntities.filter(a=>a.kind==="Monster").filter(a=>a.types.includes("Cyberse")).filter(a=>a.canBeTargetOfEffect(t)).map(a=>({monster:a,posList:T,cells:e})),[],!1).length>0},prepare:t=>le(t,t.activator.getGraveyard().cardEntities.filter(e=>e.kind==="Monster").filter(e=>e.types.includes("Cyberse")).filter(e=>e.canBeTargetOfEffect(t)),T),execute:t=>ce(t,T),settle:async()=>!0}]}}const Ui=Object.freeze(Object.defineProperty({__proto__:null,default:Xr},Symbol.toStringTag,{value:"Module"}));function*Kr(){yield{name:"融合",actions:[{title:"発動",isMandatory:!1,playType:"CardActivation",spellSpeed:"Normal",executableCells:["Hand","SpellAndTrapZone"],executablePeriods:["main1","main2"],executableDuelistTypes:["Controller"],...yt(["ExtraDeck"],()=>!0,["Hand","MonsterZone","ExtraMonsterZone"],()=>!0,"Graveyard")},S]};for(const t of[{name:"簡易融合",lvlUpperBound:5,filter:()=>!0},{name:"簡素融合",lvlUpperBound:6,filter:e=>{var i;return!((i=e.status.monsterCategories)!=null&&i.includes("Effect"))}}])yield{name:t.name,actions:[{title:"発動",isMandatory:!1,playType:"CardActivation",spellSpeed:"Normal",executableCells:["Hand","SpellAndTrapZone"],executablePeriods:["main1","main2"],executableDuelistTypes:["Controller"],isOnlyNTimesPerTurn:1,fixedTags:["SpecialSummonFromExtraDeck"],canPayCosts:e=>e.activator.lp>=1e3,canExecute:e=>{const i=e.activator.getMonsterZones();return e.activator.getEnableSummonList(e.activator,"SpecialSummon",["Effect"],e.action,e.activator.getExtraDeck().cardEntities.filter(n=>{var r;return(r=n.status.monsterCategories)==null?void 0:r.includes("Fusion")}).filter(n=>n.lvl&&n.lvl<=t.lvlUpperBound).filter(t.filter).map(n=>({monster:n,posList:T,cells:i})),[],!1).length>0},payCosts:(e,i)=>ve(e,i,1e3),prepare:C,execute:async e=>{var n;const i=e.activator.getMonsterZones(),a=await e.activator.summonOne(e.activator,"FusionSummon",["Effect"],e.action,e.activator.getExtraDeck().cardEntities.filter(r=>{var s;return(s=r.status.monsterCategories)==null?void 0:s.includes("Fusion")}).filter(r=>r.lvl&&r.lvl<=t.lvlUpperBound).filter(t.filter).map(r=>({monster:r,posList:T,cells:i})),[],!1,!1);return a?(a.statusOperatorBundle.push(new R({title:"攻撃不可",validateAlive:()=>!0,isContinuous:!1,isSpawnedBy:e.action.entity,actionAttr:e.action,isApplicableTo:(r,s)=>s.face==="FaceUp"&&s.isOnFieldAsMonsterStrictly,statusCalculator:()=>({canAttack:!1})})),a.counterHolder.setSelfDestructionFlg(e.action.entity),a.info.isRebornable=!((n=a.origin.monsterCategories)!=null&&n.includes("RegularSpecialSummonOnly")),!0):!1},settle:async()=>!0},S,{title:"自壊",isMandatory:!0,playType:"LingeringEffect",spellSpeed:"Normal",executableCells:X,executablePeriods:["end"],executableDuelistTypes:me,canExecute:e=>e.action.entity.field.getMonstersOnFieldStrictly().some(i=>i.counterHolder.getSelfDestructionFlg(e.action.entity)),prepare:C,execute:async e=>{const i=e.action.entity.field.getMonstersOnFieldStrictly().filter(n=>n.counterHolder.getSelfDestructionFlg(e.action.entity));if(!i.length)throw new m("想定されない状態",e);let a=i[0];if(i.length>1){const n=await e.activator.waitSelectEntity(i,"自壊させるカードを選択。",!1);if(!n)throw new D(e);a=n}return await v.tryDestroy([a],e),!0},settle:async()=>!0}]}}const zi=Object.freeze(Object.defineProperty({__proto__:null,default:Kr},Symbol.toStringTag,{value:"Module"}));function*Jr(){yield*["イグナイト・イーグル","イグナイト・マグナム","イグナイト・ドラグノフ","イグナイト・マスケット","イグナイト・デリンジャー","イグナイト・ライオット","イグナイト・ウージー","イグナイト・キャリバー"].map(t=>({name:t,actions:[Y,{title:"①サーチ",isMandatory:!1,playType:"IgnitionEffect",spellSpeed:"Normal",executableCells:["SpellAndTrapZone"],executablePeriods:["main1","main2"],executableDuelistTypes:["Controller"],fixedTags:["Destroy","DestroyMultiple","DestroyMultipleOnField","DestroySpellTrapOnField","DestroySpellTrapsOnField"],meetsConditions:e=>{var a;const i=e.activator.getPendulumScaleMonsters().find(n=>n!==e.action.entity);return!(!i||!((a=i.status.nameTags)!=null&&a.includes("イグナイト")))},canExecute:e=>e.activator.getDeckCell().cardEntities.some(i=>{var a;return(a=i.status.nameTags)==null?void 0:a.includes("イグナイト")}),prepare:async e=>({selectedEntities:[],chainBlockTags:["SearchFromDeck",...e.action.calcChainBlockTagsForDestroy(e.activator,e.activator.getPendulumScaleMonsters())],prepared:void 0}),execute:async e=>{if(!(await v.tryDestroy(e.activator.getPendulumScaleMonsters(),e)).length)return!1;const a=e.activator.getDeckCell().cardEntities.filter(r=>{var s;return(s=r.status.nameTags)==null?void 0:s.includes("イグナイト")});if(!a.length)return!1;const n=await e.activator.waitSelectEntity(a,"手札に加えるカードを選択。",!1);return n?(await n.addToHand(["Effect"],e.action.entity,e.activator),!0):!1},settle:async()=>!0}]}))}const Vi=Object.freeze(Object.defineProperty({__proto__:null,default:Jr},Symbol.toStringTag,{value:"Module"}));function*Yr(){{const t=e=>e.activator.getGraveyard().cardEntities.filter(i=>i.kind==="Trap").filter(i=>i.status.trapCategory==="Normal").filter(i=>e.activator.canTryBanish(i,"BanishAsCost",e.action)).filter(i=>i.canBeBanished("BanishAsCost",e.activator,e.action.entity,e.action)).flatMap(i=>i.actions).filter(i=>i.playType==="CardActivation").filter(i=>!i.needsToPayRegularCosts).filter(i=>i.validate(e.activator,[],["IgnoreRegularCosts","CopyEffectOnly"],{banish:[e.action.entity]}));yield{name:"ジャンク・コレクター",actions:[{title:"罠コピー",isMandatory:!1,playType:"QuickEffect",spellSpeed:"Quick",executableCells:B,executablePeriods:w,executableDuelistTypes:["Controller"],needsToPayRegularCost:!0,canPayCosts:e=>De(e)&&t(e).length>0,payCosts:async(e,i,a)=>{const n=t(e).map(l=>l.entity),r=await e.activator.waitSelectEntity(n,"コピーする罠を選択。",a);if(!r)return;const s=[e.action.entity,r];return await v.banishManyForTheSameReason(s,["Cost"],e.action.entity,e.activator),{banish:s}},prepare:async(e,i)=>{var s;const a=(s=e.costInfo.banish)==null?void 0:s.find(l=>l!==e.action.entity);if(!a)throw new m("正規のコストを支払わずにジャンク・コレクターの効果処理を行おうとした。",e,e.costInfo);const n=a.actions.find(l=>l.playType==="CardActivation");if(!n)throw new m("カードの効果の発動を持たないカードをジャンク・コレクターでコピーしようとした。",e,e.costInfo,a);const r={...await n.prepare(e.activator,void 0,void 0,i,!1,!0)};return r.appendix=[`コピー対象：${a.toString()}`,...r.appendix??[]],r},execute:async(e,i)=>{var r;const a=(r=e.costInfo.banish)==null?void 0:r.find(s=>s!==e.action.entity);if(!a)throw new m("想定されない状況",e,e.costInfo);const n=a.actions.find(s=>s.playType==="CardActivation");if(!n)throw new m("想定されない状況",e,e.costInfo,a);return await n.execute(e,i,{indirectly:!0})},settle:async()=>!0}]}}}const Wi=Object.freeze(Object.defineProperty({__proto__:null,default:Yr},Symbol.toStringTag,{value:"Module"}));function*Ir(){for(const t of["メタルフォーゼ・ゴルドライバー","メタルフォーゼ・シルバード","メタルフォーゼ・スティエレン","メタルフォーゼ・ヴォルフレイム"])yield{name:t,actions:[Y,{title:"①サーチ",isMandatory:!1,playType:"IgnitionEffect",spellSpeed:"Normal",executableCells:["SpellAndTrapZone"],executablePeriods:["main1","main2"],executableDuelistTypes:["Controller"],isOnlyNTimesPerTurnIfFaceup:1,fixedTags:["Destroy"],...V(e=>{let i=e.activator.getEntiteisOnField().filter(a=>a.face==="FaceUp").filter(a=>a.canBeTargetOfEffect(e)).filter(a=>a!==e.action.entity);return e.activator.getAvailableSpellTrapZones.length||(i=i.filter(a=>a.fieldCell.cellType==="SpellAndTrapZone")),i},{message:"破壊するカードを選択。",destoryTargets:!0,canExecute:e=>e.activator.canSet&&e.activator.getDeckCell().cardEntities.filter(i=>i.kind==="Spell"||i.kind==="Trap").some(i=>{var a;return(a=i.status.nameTags)==null?void 0:a.includes("メタルフォーゼ")})}),execute:async e=>{if(!(await v.tryDestroy(e.selectedEntities,e)).length||!e.activator.canSet)return!1;const a=e.activator.getAvailableSpellTrapZones();if(!a.length)return!1;const n=e.activator.getDeckCell().cardEntities.filter(l=>l.kind==="Spell"||l.kind==="Trap").filter(l=>{var c;return(c=l.status.nameTags)==null?void 0:c.includes("メタルフォーゼ")});if(!n.length)return!1;const r=await e.activator.waitSelectEntity(n,"セットするカードを選択。",!1);if(!r)return!1;const s=await e.activator.duel.view.waitSelectDestination(e.activator,r,a,"セットする先を選択","セット",!1);if(!s)throw new D("セット先選択",e);return await r.setAsSpellTrap(s,r.kind,["Effect"],e.action.entity,e.activator),!0},settle:async()=>!0}]}}const Qi=Object.freeze(Object.defineProperty({__proto__:null,default:Ir},Symbol.toStringTag,{value:"Module"}));function*es(){yield{name:"錬装融合",actions:[{title:"発動",isMandatory:!1,playType:"CardActivation",spellSpeed:"Normal",executableCells:["Hand","SpellAndTrapZone"],executablePeriods:["main1","main2"],executableDuelistTypes:["Controller"],...yt(["ExtraDeck"],(t,e)=>{var i;return!!((i=e.status.nameTags)!=null&&i.includes("メタルフォーゼ"))},["Hand","MonsterZone","ExtraMonsterZone"],()=>!0,"Graveyard")},{title:"②ドロー",isMandatory:!1,playType:"IgnitionEffect",spellSpeed:"Normal",executableCells:["Graveyard"],executablePeriods:["main1","main2"],executableDuelistTypes:["Controller"],isOnlyNTimesPerTurn:1,canExecute:t=>t.activator.getDeckCell().cardEntities.length>0&&t.activator.canDraw,prepare:async t=>(await t.action.entity.returnToDeck("Random",["Effect"],t.action.entity,t.activator),{selectedEntities:[],chainBlockTags:["Draw"]}),execute:async t=>(await t.activator.draw(1,t.action.entity,t.activator),!0),settle:async()=>!0},S]}}const Xi=Object.freeze(Object.defineProperty({__proto__:null,default:es},Symbol.toStringTag,{value:"Module"}));function*ts(){yield{name:"ダーク・リゾネーター",actions:[],substituteEffects:[ar(1)]},yield{name:"レッド・リゾネーター",actions:[{title:"①特殊召喚",isMandatory:!1,playType:"TriggerEffect",spellSpeed:"Normal",executableCells:["MonsterZone"],executablePeriods:[...w,...F],executableDuelistTypes:["Controller"],fixedTags:["SpecialSummonFromHand","IfNormarlSummonSucceed","SpecialSummon"],meetsConditions:t=>t.action.entity.hasBeenSummonedNow(["NormalSummon"]),canExecute:t=>{const e=t.activator.getMonsterZones();return t.activator.getEnableSummonList(t.activator,"SpecialSummon",["Effect"],t.action,t.activator.getHandCell().cardEntities.filter(a=>a.kind==="Monster").filter(a=>(a.lvl??12)<5).map(a=>({monster:a,posList:T,cells:e})),[],!1).length>0},prepare:C,execute:async t=>{const e=t.activator.getMonsterZones(),i=t.activator.getHandCell().cardEntities.filter(n=>n.kind==="Monster").filter(n=>(n.lvl??12)<5).map(n=>({monster:n,posList:T,cells:e}));return!!await t.activator.summonOne(t.activator,"SpecialSummon",["Effect"],t.action,i,[],!1,!1)},settle:async()=>!0},{title:"②回復",isMandatory:!1,playType:"TriggerEffect",spellSpeed:"Normal",executableCells:["MonsterZone"],executablePeriods:[...w,...F],executableDuelistTypes:["Controller"],isOnlyNTimesPerTurn:1,meetsConditions:t=>t.action.entity.hasBeenSummonedNow(["SpecialSummon"]),...V(t=>t.activator.getMonstersOnField().filter(e=>e.canBeTargetOfEffect(t)).filter(e=>(e.atk??0)>0).filter(e=>e.info.summonKinds.includes("SpecialSummon")),{message:"対象モンスターを選択。"}),execute:async t=>{const e=t.activator.lp;return t.selectedEntities.filter(i=>i.isOnFieldAsMonsterStrictly).forEach(i=>t.activator.heal(i.atk??0,t.action.entity)),t.activator.lp!==e},settle:async()=>!0}]}}const Ki=Object.freeze(Object.defineProperty({__proto__:null,default:ts},Symbol.toStringTag,{value:"Module"})),Ot=(t,e)=>{const i=e?`魔力充填可能(${e})`:"魔力充填可能";return _e(i,t,a=>[a],a=>[new R({title:i,validateAlive:()=>!0,isContinuous:!0,isSpawnedBy:a,actionAttr:{},isApplicableTo:(n,r)=>n.isSpawnedBy===r,statusCalculator:(n,r,s)=>(s.maxCounterQty.SpellCounter=e??Number.MAX_VALUE,{maxCounterQty:s.maxCounterQty})})])},Je={},is=(t,e=1)=>(Je[e]||(Je[e]={title:`魔力回収(${e})`,isMandatory:!0,playType:"AfterChainBlock",spellSpeed:"Normal",executableCells:["MonsterZone"],executablePeriods:q,executableDuelistTypes:["Controller"],canExecute:i=>!!(i.targetChainBlock&&i.targetChainBlock.action.playType==="CardActivation"&&i.targetChainBlock.action.entity.kind==="Spell"&&i.action.entity.isEffective&&i.action.entity.face==="FaceUp"&&i.action.entity.counterHolder.getQty("SpellCounter")<(i.action.entity.status.maxCounterQty.SpellCounter??0)&&i.action.entity.hadArrivedToFieldAt().totalProcSeq<=i.targetChainBlock.isActivatedAt.totalProcSeq),prepare:C,execute:async i=>i.action.entity.face==="FaceDown"||!i.action.entity.isOnFieldAsMonsterStrictly||!i.action.entity.isEffective?!1:(i.action.entity.counterHolder.add("SpellCounter",e,i.action.entity),!0),settle:async()=>!0}),{...Je[e],title:`${t}魔力回収(${e})`}),nt=(t,e,i)=>t.action.entity.counterHolder.getQty("SpellCounter")>=i,rt=(t,e,i,a)=>{const n=a[0];return t.action.entity.counterHolder.remove("SpellCounter",n),{counter:n}};function*as(){yield{name:"魔導戦士 ブレイカー",actions:[{title:"①魔力充填",isMandatory:!0,playType:"TriggerEffect",spellSpeed:"Normal",executableCells:["MonsterZone"],executablePeriods:["main1","main2"],executableDuelistTypes:["Controller"],fixedTags:["IfNormarlSummonSucceed"],meetsConditions:t=>t.action.entity.hasBeenSummonedNow(["NormalSummon"]),prepare:C,execute:async t=>t.action.entity.face==="FaceDown"?!1:(t.action.entity.counterHolder.setQty("SpellCounter",1,t.action.entity),!0),settle:async()=>!0},{title:"③マナブレイク",isMandatory:!1,playType:"IgnitionEffect",spellSpeed:"Normal",executableCells:["MonsterZone"],executablePeriods:["main1","main2"],executableDuelistTypes:["Controller"],fixedTags:["Destroy","DestroyOnField","DestroySpellTrapOnField"],canPayCosts:(t,e)=>nt(t,e,1),payCosts:async(t,e,i)=>rt(t,e,i,[1]),...V(t=>t.activator.duel.field.getSpellTrapsOnFieldStrictly().filter(e=>e.canBeTargetOfEffect(t)),{message:"破壊する対象を選択。",destoryTargets:!0}),execute:async t=>t.selectedEntities.every(e=>!e.isOnFieldAsSpellTrapStrictly)?!1:(await v.tryDestroy(t.selectedEntities,t),!0),settle:async()=>!0}],continuousEffects:[Ot("Monster",1),ke("②攻撃力上昇","Monster",t=>[t],t=>[L.createContinuous("②攻撃力上昇",()=>!0,t,()=>!0,"attack","wip","Addition",(e,i,a)=>e.isEffective?a+e.counterHolder.getQty("SpellCounter")*300:a)])]},yield{name:"王立魔法図書館",actions:[{...is("①",1)},{title:"②ドロー",isMandatory:!1,playType:"IgnitionEffect",spellSpeed:"Normal",executableCells:["MonsterZone"],executablePeriods:["main1","main2"],executableDuelistTypes:["Controller"],canPayCosts:(t,e)=>nt(t,e,3),canExecute:t=>t.activator.getDeckCell().cardEntities.length>0,payCosts:async(t,e,i)=>rt(t,e,i,[3]),prepare:C,execute:async t=>(await t.activator.draw(1,t.action.entity,t.activator),!0),settle:async()=>!0}],continuousEffects:[Ot("Monster",3)]}}const Ji=Object.freeze(Object.defineProperty({__proto__:null,canPaySpellCounters:nt,default:as,paySpellCounters:rt},Symbol.toStringTag,{value:"Module"}));function*ns(){yield{name:"スターダスト・ドラゴン",actions:[G(),{title:"①ヴィクテム・サンクチュアリ",isMandatory:!1,playType:"QuickEffect",spellSpeed:"Quick",executableCells:["MonsterZone","ExtraMonsterZone"],executablePeriods:q,executableDuelistTypes:["Controller"],canPayCosts:ft,canExecute:t=>!!(t.targetChainBlock&&t.targetChainBlock.action.isWithChainBlock&&t.targetChainBlock.chainBlockTags.includes("DestroyOnField")),payCosts:gt,prepare:async t=>{if(!t.targetChainBlock)throw new m("想定されない状態",t);return{selectedEntities:[],chainBlockTags:t.action.calcChainBlockTagsForDestroy(t.activator,[t.targetChainBlock.action.entity]),prepared:void 0}},execute:async(t,e)=>{const i=e[t.index-1];return i.isNegatedActivationBy=t.action,await v.tryDestroy([i.action.entity],t),!0},settle:async()=>!0},{title:"②自己再生",playType:"IgnitionEffect",isMandatory:!1,spellSpeed:"Normal",executableCells:["Graveyard"],executablePeriods:["end"],executableDuelistTypes:["Controller"],fixedTags:["SpecialSummonFromGraveyard"],canExecute:t=>{const e=t.action.entity.moveLog.latestRecord;if(e.movedBy!==t.action.entity||!t.activator.duel.clock.isSameTurn(e.movedAt)||!e.movedAs.includes("Cost"))return!1;const i=t.activator.duel,a=t.action.entity.actionLogRecords.filter(n=>i.clock.isSameTurn(n.clock)).map(n=>n.chainBlockInfo).findLast(n=>n.action.title==="①ヴィクテム・サンクチュアリ");return!a||a.state!=="done"?!1:$(t,T,[],["Effect"])},prepare:C,execute:t=>re(t),settle:async()=>!0}]},yield{name:"閃珖竜 スターダスト",actions:[G(),{title:"波動音壁",isMandatory:!1,playType:"QuickEffect",spellSpeed:"Quick",executableCells:B,executablePeriods:w,executableDuelistTypes:["Controller"],isOnlyNTimesPerTurnIfFaceup:1,...V(t=>t.activator.getEntiteisOnField().filter(e=>e.face==="FaceUp").filter(e=>e.canBeTargetOfEffect(t))),execute:async t=>(t.selectedEntities.filter(e=>e.isOnFieldStrictly).filter(e=>e.face==="FaceUp").filter(e=>e.canBeEffected(t.activator,t.action.entity,t.action)).forEach(e=>{e.counterHolder.add("SonicBarrier",1,t.action.entity)}),!0),settle:async()=>!0}],substituteEffects:[{title:"波動音壁（適用）",playType:"LingeringEffect",isMandatory:!0,executableCells:X,executablePeriods:q,executableDuelistTypes:["Controller"],isApplicableTo:(t,e,i)=>i.filter(a=>a.counterHolder.getQty("SonicBarrier",t.entity)>0),substitute:async(t,e,i)=>{const a=i.filter(n=>n.counterHolder.getQty("SonicBarrier",t.entity)>0);return a.forEach(n=>{n.counterHolder.removeAll("SonicBarrier",t.entity),t.entity.controller.writeInfoLog(`波動音壁により${n.toString()}は１ターンに１度だけ戦闘効果では破壊されない。`)}),a}}]},yield{name:"真閃珖竜 スターダスト・クロニクル",actions:[G(t=>t.length===1&&t.every(e=>{var i;return(i=e.status.monsterCategories)==null?void 0:i.includes("Synchro")}),t=>t.length>0&&t.every(e=>{var i;return(i=e.status.monsterCategories)==null?void 0:i.includes("Synchro")})),{title:"波動護魂",isMandatory:!1,playType:"QuickEffect",spellSpeed:"Quick",executableCells:B,executablePeriods:w,executableDuelistTypes:["Controller"],isOnlyNTimesPerTurnIfFaceup:1,canPayCosts:t=>Fn(t,t.activator.getGraveyard().cardEntities.filter(e=>{var i;return(i=e.status.monsterCategories)==null?void 0:i.includes("Synchro")})),payCosts:t=>Nn(t,t.activator.getGraveyard().cardEntities.filter(e=>{var i;return(i=e.status.monsterCategories)==null?void 0:i.includes("Synchro")}),e=>e.length===1,1),prepare:C,execute:async t=>(t.action.entity.procFilterBundle.push(ye.createLingering(t.action.title,e=>e.effectOwner.duel.clock.isSameTurn(e.isSpawnedAt),t.action.entity,t.action,()=>!0,["Effect"],()=>!1)),!0),settle:async()=>!0},{title:"②蘇生",isMandatory:!1,playType:"TriggerEffect",spellSpeed:"Normal",executableCells:["Banished"],executablePeriods:[...w,...F],executableDuelistTypes:["Controller"],fixedTags:["SpecialSummonFromGraveyard"],meetsConditions:t=>t.action.entity.wasMovedAtPreviousChain&&t.action.entity.moveLog.latestRecord.actionOwner!==t.activator&&(t.action.entity.wasMovedFrom.owner===t.activator||t.action.entity.wasMovedFrom.cellType==="ExtraMonsterZone"),canExecute:t=>{const e=t.activator.getMonsterZones();return t.activator.getEnableSummonList(t.activator,"SpecialSummon",["Effect"],t.action,t.activator.getBanished().cardEntities.filter(a=>a.kind==="Monster").filter(a=>a.face==="FaceUp").filter(a=>a.types.includes("Dragon")).filter(a=>{var n;return(n=a.status.monsterCategories)==null?void 0:n.includes("Synchro")}).filter(a=>a.canBeTargetOfEffect(t)).map(a=>({monster:a,posList:T,cells:e})),[],!1).length>0},prepare:t=>le(t,t.activator.getBanished().cardEntities.filter(e=>e.kind==="Monster").filter(e=>e.face==="FaceUp").filter(e=>e.types.includes("Dragon")).filter(e=>{var i;return(i=e.status.monsterCategories)==null?void 0:i.includes("Synchro")}).filter(e=>e.canBeTargetOfEffect(t))),execute:async t=>ce(t),settle:async()=>!0}]},yield{name:"聖珖神竜 スターダスト・シフル",actions:[G(t=>t.length===1&&t.every(e=>{var i;return(i=e.status.monsterCategories)==null?void 0:i.includes("Synchro")}),t=>t.length>1&&t.every(e=>{var i;return(i=e.status.monsterCategories)==null?void 0:i.includes("Synchro")})),{title:"②珖波動反撃",isMandatory:!1,playType:"QuickEffect",spellSpeed:"Quick",executableCells:["Hand"],executablePeriods:w,executableDuelistTypes:["Controller"],isOnlyNTimesPerTurnIfFaceup:1,negatePreviousBlock:!0,fixedTags:["NegateCardEffect","DestroyOnField"],canExecute:t=>!!(t.targetChainBlock&&t.targetChainBlock.action.entity.isMonster&&t.targetChainBlock.action.isWithChainBlock&&t.activator!==t.targetChainBlock.activator),prepare:C,execute:async t=>{if(!t.targetChainBlock)return!1;const e=t.targetChainBlock;e.isNegatedEffectBy=t.action;const i=await t.activator.waitSelectEntity(t.action.duel.field.getCardsOnFieldStrictly(),"破壊するカードを選択。",!1);return(await v.tryDestroy(i?[i]:[],t)).length>0},settle:async()=>!0},{title:"③蘇生",isMandatory:!1,playType:"IgnitionEffect",spellSpeed:"Normal",executableCells:["Graveyard"],executablePeriods:["main1","main2"],executableDuelistTypes:["Controller"],priorityForNPC:10,fixedTags:["SpecialSummonFromGraveyard"],canPayCosts:De,canExecute:t=>{const e=t.activator.getMonsterZones();return t.activator.getEnableSummonList(t.activator,"SpecialSummon",["Effect"],t.action,t.activator.getGraveyard().cardEntities.filter(a=>{var n;return(n=a.status.nameTags)==null?void 0:n.includes("スターダスト")}).filter(a=>(a.lvl??12)<9).filter(a=>a.canBeTargetOfEffect(t)).map(a=>({monster:a,posList:T,cells:e})),[],!1).length>0},payCosts:Ue,prepare:t=>le(t,t.activator.getGraveyard().cardEntities.filter(e=>{var i;return(i=e.status.nameTags)==null?void 0:i.includes("スターダスト")}).filter(e=>(e.lvl??12)<9),T,e=>e.length===1),execute:t=>ce(t,T),settle:async()=>!0}],substituteEffects:[{title:"波動聖句",playType:"ContinuousEffect",isMandatory:!0,executableCells:["MonsterZone"],executablePeriods:q,executableDuelistTypes:["Controller"],isApplicableTo:(t,e,i)=>i.filter(a=>a.controller===t.entity.controller).filter(a=>a.counterHolder.getQty("SonicVerse",t.entity)===0),substitute:async(t,e,i)=>{if(!t.entity.isEffective)return[];const a=i.filter(n=>n.controller===t.entity.controller).filter(n=>n.counterHolder.getQty("SonicVerse",t.entity)===0);return a.forEach(n=>{n.counterHolder.add("SonicVerse",1,t.entity),t.entity.controller.writeInfoLog(`${t.entity.toString()}の効果により${n.toString()}は１ターンに１度だけ破壊されない。`)}),a}}]}}const Yi=Object.freeze(Object.defineProperty({__proto__:null,default:ns},Symbol.toStringTag,{value:"Module"}));function*rs(){yield{name:"調律",actions:[{title:"発動",isMandatory:!1,playType:"CardActivation",spellSpeed:"Normal",executableCells:["Hand","SpellAndTrapZone"],executablePeriods:["main1","main2"],executableDuelistTypes:["Controller"],fixedTags:["SearchFromDeck","SendToGraveyardFromDeck"],priorityForNPC:40,canExecute:t=>{const e=t.activator.getDeckCell().cardEntities;return e.length<2?!1:e.filter(i=>{var a;return(a=i.status.nameTags)==null?void 0:a.includes("シンクロン")}).some(i=>{var a;return(a=i.status.monsterCategories)==null?void 0:a.includes("Tuner")})},prepare:C,execute:async t=>{const e=t.activator.getDeckCell().cardEntities;if(e.length<2)return!1;const i=e.filter(n=>{var r;return(r=n.status.nameTags)==null?void 0:r.includes("シンクロン")}).filter(n=>{var r;return(r=n.status.monsterCategories)==null?void 0:r.includes("Tuner")});if(i.length===0)return!1;const a=await t.activator.waitSelectEntity(i,"手札に加えるモンスターを選択",!1);if(!a)throw new D(t);return await a.addToHand(["Effect"],t.action.entity,t.activator),t.activator.getDeckCell().shuffle(),t.activator.duel.clock.incrementProcSeq(),await t.activator.getDeckCell().cardEntities[0].sendToGraveyard(["Effect"],t.action.entity,t.activator),!0},settle:async()=>!0},S]}}const Ii=Object.freeze(Object.defineProperty({__proto__:null,default:rs},Symbol.toStringTag,{value:"Module"}));function*ss(){yield{name:"フォーミュラ・シンクロン",actions:[G(),{title:"①ドロー",isMandatory:!1,playType:"TriggerEffect",spellSpeed:"Normal",executableCells:B,executablePeriods:[...w,...F],executableDuelistTypes:["Controller"],fixedTags:["Draw","IfSpecialSummonSucceed"],meetsConditions:t=>t.action.entity.hasBeenSummonedJustNow(["SynchroSummon"]),canExecute:t=>t.activator.canDraw&&t.activator.getDeckCell().cardEntities.length>0,prepare:C,execute:async t=>(await t.activator.draw(1,t.action.entity,t.activator),!0),settle:async()=>!0},pi({title:"②シンクロ召喚",isOnlyNTimesPerChain:1})]}}const ea=Object.freeze(Object.defineProperty({__proto__:null,default:ss},Symbol.toStringTag,{value:"Module"}));function*os(){yield{name:"トゥーン・ワールド",actions:[{...Y,canPayCosts:t=>t.activator.lp>=1e3,payCosts:(t,e)=>ve(t,e,1e3)},S]}}const ta=Object.freeze(Object.defineProperty({__proto__:null,default:os},Symbol.toStringTag,{value:"Module"}));function*ls(){yield{name:"無の煉獄",actions:[{title:"発動",isMandatory:!1,playType:"CardActivation",spellSpeed:"Normal",executableCells:["Hand","SpellAndTrapZone"],executablePeriods:["main1","main2"],executableDuelistTypes:["Controller"],fixedTags:["Draw","DiscordAsEffect"],meetsConditions:t=>t.activator.getHandCell().cardEntities.length>2,canExecute:t=>t.activator.canDraw&&t.activator.status.canDiscardAsEffect&&t.activator.getDeckCell().cardEntities.length>0,prepare:C,execute:async t=>(await t.activator.draw(1,t.action.entity,t.activator),t.activator.entity.counterHolder.add("IntoTheVoid",1,t.action.entity),!0),settle:async()=>!0},{title:"手札抹殺",isMandatory:!0,playType:"LingeringEffect",spellSpeed:"Normal",executableCells:X,executablePeriods:["end"],executableDuelistTypes:me,meetsConditions:t=>t.activator.entity.counterHolder.getQty("IntoTheVoid",t.action.entity)>0,prepare:C,execute:async t=>(await v.discardManyForTheSameReason(t.activator.getHandCell().cardEntities,["Effect"],t.action.entity,t.activator),t.activator.entity.counterHolder.remove("IntoTheVoid",1,t.action.entity),!0),settle:async()=>!0},S]}}const ia=Object.freeze(Object.defineProperty({__proto__:null,default:ls},Symbol.toStringTag,{value:"Module"}));function*cs(){yield{name:"星杯の妖精リース",actions:[{title:"①サーチ",isMandatory:!1,playType:"TriggerEffect",spellSpeed:"Normal",executableCells:["MonsterZone"],executablePeriods:[...w,...F],executableDuelistTypes:["Controller"],isOnlyNTimesPerTurn:1,fixedTags:["SearchFromDeck"],meetsConditions:t=>t.action.entity.hasBeenSummonedNow(["NormalSummon","SpecialSummon"]),canExecute:t=>t.activator.canAddToHandFromDeck&&t.activator.getDeckCell().cardEntities.filter(e=>e.kind==="Monster").some(e=>{var i;return(i=e.status.nameTags)==null?void 0:i.includes("星杯")}),prepare:async t=>{const e=t.action.entity.hasBeenSummonedNow(["NormalSummon"])?["IfNormarlSummonSucceed"]:["IfSpecialSummonSucceed"];return{selectedEntities:[],chainBlockTags:e}},execute:async t=>{const e=t.activator.getDeckCell().cardEntities.filter(a=>a.kind==="Monster").filter(a=>{var n;return(n=a.status.nameTags)==null?void 0:n.includes("星杯")});if(e.length===0)return!1;const i=await t.activator.waitSelectEntity(e,"手札に加えるモンスターを選択",!1);if(!i)throw new m("想定されない状態",t);return await i.addToHand(["Effect"],t.action.entity,t.activator),t.activator.getDeckCell().shuffle(),!0},settle:async()=>!0},{title:"②自己サルベージ",isMandatory:!1,playType:"IgnitionEffect",spellSpeed:"Normal",executableCells:["Graveyard"],executablePeriods:["main1","main2"],executableDuelistTypes:["Controller"],isOnlyNTimesPerTurn:1,canPayCosts:t=>[...t.activator.getMonstersOnField(),...t.activator.getHandCell().cardEntities.filter(e=>e.kind==="Monster")].some(e=>e.canBeSentToGraveyard(t.activator,t.action.entity,"SendToGraveyardAsCost",t.action)),payCosts:async t=>{const e=[...t.activator.getMonstersOnField(),...t.activator.getHandCell().cardEntities.filter(a=>a.kind==="Monster")].filter(a=>a.canBeSentToGraveyard(t.activator,t.action.entity,"SendToGraveyardAsCost",t.action)),i=await t.activator.waitSelectEntity(e,"墓地に送るモンスターを選択。",!0);if(i)return await i.sendToGraveyard(["Cost"],t.action.entity,t.activator),{sendToGraveyard:[i]}},fixedTags:["SearchFromDeck"],prepare:C,execute:async t=>t.action.entity.wasMovedAfter(t.isActivatedAt)?!1:(await t.action.entity.addToHand(["Effect"],t.action.entity,t.activator),!0),settle:async()=>!0}]},yield{name:"星遺物－『星杯』",actions:[{title:"①墓地送り",isMandatory:!1,playType:"TriggerEffect",spellSpeed:"Normal",executableCells:["MonsterZone"],executablePeriods:[...w,...F],executableDuelistTypes:["Controller"],canPayCosts:ft,canExecute:t=>t.activator.duel.field.moveLog.getPriviousChainLog().filter(e=>e.movedAs.includes("SpecialSummon")).map(e=>e.entity).some(e=>e.wasMovedFrom.cellType==="ExtraDeck"),payCosts:gt,prepare:C,execute:async t=>{const e=t.activator.duel.field.moveLog.getPriviousChainLog().filter(i=>i.movedAs.includes("SpecialSummon")).map(i=>i.entity).filter(i=>i.wasMovedFrom.cellType==="ExtraDeck").filter(i=>i.isOnFieldAsMonsterStrictly).filter(i=>i.canBeEffected(t.activator,t.action.entity,t.action)).toArray();return await v.sendManyToGraveyardForTheSameReason(e,["Effect"],t.action.entity,t.activator),!0},settle:async()=>!0},{title:"②リクルート",isMandatory:!1,playType:"TriggerEffect",spellSpeed:"Normal",executableCells:["Hand","Graveyard","Banished"],executablePeriods:[...w,...F],executableDuelistTypes:["Controller"],meetsConditions:t=>t.action.entity.wasMovedAtPreviousChain&&t.action.entity.info.summonKinds.includes("NormalSummon")&&t.action.entity.moveLog.previousPlaceRecord.face==="FaceUp",canExecute:t=>{const e=t.activator.getDeckCell().cardEntities.filter(n=>n.kind==="Monster").filter(n=>{var r;return(r=n.status.nameTags)==null?void 0:r.includes("星杯")}).filter(n=>n.nm!=="星遺物－『星杯』"),i=t.activator.getMonsterZones();return t.activator.getEnableSummonList(t.activator,"SpecialSummon",["Effect"],t.action,e.map(n=>({monster:n,cells:i,posList:T})),[],!1).length>1},prepare:C,execute:async t=>{const e=t.activator.getDeckCell().cardEntities.filter(n=>n.kind==="Monster").filter(n=>{var r;return(r=n.status.nameTags)==null?void 0:r.includes("星杯")}).filter(n=>n.nm!=="星遺物－『星杯』"),i=t.activator.getMonsterZones();return(await t.activator.summonMany(t.activator,"SpecialSummon",["Effect"],t.action,e.map(n=>({monster:n,cells:i,posList:T})),[],!1,2,n=>n.length==2,!1)??[]).length?(t.activator.getDeckCell().shuffle(),!0):!1},settle:async()=>!0},{title:"③サーチ",isMandatory:!1,playType:"IgnitionEffect",spellSpeed:"Normal",executableCells:["Graveyard"],executablePeriods:["main1","main2"],executableDuelistTypes:["Controller"],canPayCosts:De,meetsConditions:t=>!t.action.entity.wasMovedAtCurrentTurn,canExecute:t=>t.activator.canAddToHandFromDeck&&t.activator.getDeckCell().cardEntities.filter(e=>{var i;return(i=e.status.nameTags)==null?void 0:i.includes("星遺物")}).length>0,payCosts:Ue,fixedTags:["SearchFromDeck"],prepare:C,execute:async t=>{const e=await t.activator.waitSelectEntity(t.activator.getDeckCell().cardEntities.filter(i=>{var a;return(a=i.status.nameTags)==null?void 0:a.includes("星遺物")}),"手札に加えるカードを選択",!1);return e?(await e.addToHand(["Effect"],t.action.entity,t.activator),!0):!1},settle:async()=>!0}]}}const aa=Object.freeze(Object.defineProperty({__proto__:null,default:cs},Symbol.toStringTag,{value:"Module"}));function*us(){yield{name:"ドットスケーパー",actions:[{title:"①自己再生",isMandatory:!1,playType:"TriggerEffect",spellSpeed:"Normal",executableCells:["Graveyard"],executablePeriods:[...w,...F],executableDuelistTypes:["Controller"],isOnlyNTimesPerDuel:1,actionGroupName:"ドットスケーパー",fixedTags:["SpecialSummonFromGraveyard"],meetsConditions:t=>t.action.entity.wasMovedAtPreviousChain&&t.action.entity.wasMovedFrom.cellType!=="Banished",canExecute:t=>$(t,T,[],["Effect"]),prepare:C,execute:t=>re(t),settle:async()=>!0},{title:"②自己帰還",isMandatory:!1,playType:"TriggerEffect",spellSpeed:"Normal",executableCells:["Banished"],executablePeriods:[...w,...F],executableDuelistTypes:["Controller"],isOnlyNTimesPerDuel:1,actionGroupName:"ドットスケーパー",fixedTags:["SpecialSummonFromBanished"],meetsConditions:t=>t.action.entity.wasMovedAtPreviousChain,canExecute:t=>$(t,T,[],["Effect"]),prepare:C,execute:t=>re(t),settle:async()=>!0}]}}const na=Object.freeze(Object.defineProperty({__proto__:null,default:us},Symbol.toStringTag,{value:"Module"}));function*ds(){yield{name:"ゼラの天使",actions:[G(),{title:"②自己帰還",isMandatory:!0,playType:"IgnitionEffect",spellSpeed:"Normal",executableCells:["Banished"],executablePeriods:["stanby"],executableDuelistTypes:["Controller"],fixedTags:["SpecialSummonFromBanished"],meetsConditions:t=>t.action.entity.wasMovedAtPreviousTurn,canExecute:t=>$(t,T,[],["Effect"]),prepare:C,execute:t=>re(t),settle:async()=>!0}],continuousEffects:[ke("②攻撃力上昇","Monster",t=>[t],t=>[L.createContinuous("①攻撃力上昇",()=>!0,t,()=>!0,"attack","wip","Addition",(e,i,a)=>e.isEffective?a+e.controller.getOpponentPlayer().getBanished().cardEntities.length*100:a)])]}}const ra=Object.freeze(Object.defineProperty({__proto__:null,default:ds},Symbol.toStringTag,{value:"Module"}));function*ps(){yield{name:"死霊騎士デスカリバー・ナイト",actions:[{title:"①モンスター効果無効",isMandatory:!0,playType:"TriggerEffect",spellSpeed:"Quick",executableCells:B,executablePeriods:[...w,...F],executableDuelistTypes:["Controller"],negatePreviousBlock:!0,canPayCosts:ft,canExecute:t=>!!(t.targetChainBlock&&t.targetChainBlock.action.entity.isMonster&&t.targetChainBlock.action.isWithChainBlock),payCosts:gt,prepare:async(t,e)=>{const i=t.targetChainBlock,a=e[t.index-1];return i!==a?{selectedEntities:[]}:{selectedEntities:[],chainBlockTags:["NegateCardEffect",...t.action.calcChainBlockTagsForDestroy(t.activator,[i.action.entity])],prepared:void 0}},execute:async(t,e)=>{const i=e.find(n=>n.action.entity.isMonster&&n.action.isWithChainBlock),a=e[t.index-1];return a!==i?!1:(a.isNegatedActivationBy=t.action,await v.tryDestroy([a.action.entity],t),!0)},settle:async()=>!0}]}}const sa=Object.freeze(Object.defineProperty({__proto__:null,default:ps},Symbol.toStringTag,{value:"Module"}));function*fs(){yield{name:"召喚僧サモンプリースト",actions:[{title:"①表示形式変更",isMandatory:!0,playType:"TriggerEffect",spellSpeed:"Normal",executableCells:["MonsterZone"],executablePeriods:[...w,...F],executableDuelistTypes:["Controller"],meetsConditions:t=>t.action.entity.hasBeenSummonedNow(["NormalSummon","FlipSummon"]),fixedTags:["IfNormarlSummonSucceed"],prepare:C,execute:async t=>t.action.entity.battlePosition!=="Attack"||!t.action.entity.isOnFieldAsMonsterStrictly?!1:(await t.action.entity.setBattlePosition("Defense",["Effect"],t.action.entity,t.activator),!0),settle:async()=>!0},{title:"③リクルート",isMandatory:!1,playType:"IgnitionEffect",spellSpeed:"Normal",executableCells:["MonsterZone"],executablePeriods:["main1","main2"],executableDuelistTypes:["Controller"],isOnlyNTimesPerTurnIfFaceup:1,fixedTags:["SpecialSummonFromDeck"],canPayCosts:t=>t.activator.status.canDiscardAsCost?t.activator.getHandCell().cardEntities.some(e=>e.kind==="Spell"):!1,canExecute:t=>{const e=t.activator.getDeckCell().cardEntities.filter(n=>n.kind==="Monster").filter(n=>n.lvl===4),i=t.activator.getMonsterZones();return t.activator.getEnableSummonList(t.activator,"SpecialSummon",["Effect"],t.action,e.map(n=>({monster:n,posList:T,cells:i})),[],!1).length>0},payCosts:async(t,e,i)=>{const a=t.activator.getHandCell().cardEntities.filter(r=>r.kind==="Spell"),n=await t.activator.waitSelectEntity(a,"手札コストを選択",i);if(!n&&!i)throw new D(t);if(n)return await n.discard(["Cost"],t.action.entity,t.activator),{discard:[n]}},prepare:C,execute:async t=>{const e=t.activator.getDeckCell().cardEntities.filter(n=>n.lvl===4),i=t.activator.getMonsterZones(),a=await t.activator.summonOne(t.activator,"SpecialSummon",["Effect"],t.action,e.map(n=>({monster:n,posList:T,cells:i})),[],!1,!1);return!a||(a.statusOperatorBundle.push(new R({title:"攻撃不可",validateAlive:n=>n.effectOwner.duel.clock.isSameTurn(n.isSpawnedAt),isContinuous:!1,isSpawnedBy:t.action.entity,actionAttr:t.action,isApplicableTo:()=>!0,statusCalculator:()=>({canAttack:!1})})),!a)?!1:(t.activator.getDeckCell().shuffle(),!0)},settle:async()=>!0}],continuousEffects:[Qt("②リリース不可","Monster",t=>[t],t=>[ye.createContinuous("②リリース不可",()=>!0,t,()=>!0,["AdvanceSummonRelease","ReleaseAsEffect","ReleaseAsCost"],()=>!1)])]}}const oa=Object.freeze(Object.defineProperty({__proto__:null,default:fs},Symbol.toStringTag,{value:"Module"}));function*gs(){yield{name:"アンカモフライト",actions:[Y,{title:"特殊召喚",isMandatory:!1,playType:"SpecialSummon",spellSpeed:"Normal",executableCells:["ExtraDeck"],executablePeriods:["main1","main2"],executableDuelistTypes:["Controller"],isOnlyNTimesPerDuel:1,meetsConditions:t=>t.activator.getExtraDeck().cardEntities.every(e=>e.nm==="アンカモフライト"),canExecute:t=>t.action.entity.face==="FaceUp"&&$(t,T,[],["Rule"]),getDests:t=>J(t,T,[],["Rule"]),prepare:t=>I(t,"SpecialSummon",["SpecialSummon","Rule"],T),execute:ee,settle:async()=>!0},{title:"①ドロー",isMandatory:!1,playType:"IgnitionEffect",spellSpeed:"Normal",executableCells:["SpellAndTrapZone"],executablePeriods:["main1","main2"],executableDuelistTypes:["Controller"],priorityForNPC:20,isOnlyNTimesPerTurn:1,fixedTags:["DestroySpellTrapOnField","Draw"],meetsConditions:t=>t.activator.getExtraDeck().cardEntities.every(e=>e.nm==="アンカモフライト"),canExecute:t=>t.activator.getDeckCell().cardEntities.length>0&&t.activator.canDraw,prepare:async()=>({selectedEntities:[]}),execute:async t=>(await v.tryDestroy([t.action.entity],t)).length?(t.action.entity.field.duel.clock.incrementProcSeq(),await t.activator.draw(1,t.action.entity,t.activator),!0):!1,settle:async()=>!0}],summonFilter:(t,e,i,a,n,r,s,l,c,u)=>{const d={posList:c,cells:u},p={posList:[],cells:[]};return s!==e||r.entity===e?d:p},continuousEffects:[_e("除外予定","Monster",t=>[t],t=>[new R({title:"除外予定",validateAlive:()=>!0,isContinuous:!0,isSpawnedBy:t,actionAttr:{},isApplicableTo:(e,i)=>i.isOnFieldAsMonsterStrictly&&i.face==="FaceUp",statusCalculator:()=>({willBeBanished:!0})})])]}}const la=Object.freeze(Object.defineProperty({__proto__:null,default:gs},Symbol.toStringTag,{value:"Module"}));function*hs(){yield{name:"エキセントリック・ボーイ",actions:[],summonFilter:(t,e,i,a,n,r,s,l,c,u)=>{const d={posList:c,cells:u},p={posList:[],cells:[]};if(!n.includes("SynchroSummon"))return d;const f=l.find(h=>h.material===t.isSpawnedBy);return f?!f.cell.isMonsterZoneLikeCell||l.length!==2?p:l.filter(h=>h!==f).every(h=>h.cell.cellType==="Hand")?d:p:d},defaultStatus:{allowHandSynchro:!0},onUsedAsMaterial:(t,e)=>{e.info.summonKinds.includes("SynchroSummon")&&(t.action.entity.statusOperatorBundle.push(new R({title:"除外予定",validateAlive:()=>!0,isContinuous:!1,isSpawnedBy:t.action.entity,actionAttr:t.action,isApplicableTo:(i,a)=>a.isOnFieldAsMonsterStrictly&&a.face==="FaceUp",statusCalculator:()=>({willBeBanished:!0})})),e.info.isEffectiveIn=e.info.isEffectiveIn.filter(i=>i!=="ExtraMonsterZone").filter(i=>i!=="MonsterZone"))}}}const ca=Object.freeze(Object.defineProperty({__proto__:null,default:hs},Symbol.toStringTag,{value:"Module"})),ys={title:"ペンデュラム召喚",isMandatory:!1,playType:"SpecialSummon",spellSpeed:"Normal",executableCells:["Hand"],executablePeriods:["main1","main2"],executableDuelistTypes:["Controller"],isOnlyNTimesPerTurn:1,canExecute:t=>{const e=t.activator.getPendulumScales();if(!e||e.upperBound-e.lowerBound<2)return!1;const i=[...t.activator.getHandCell().cardEntities.filter(r=>r.kind==="Monster"),...t.activator.getExtraDeck().cardEntities.filter(r=>r.face==="FaceUp")].filter(r=>r.kind==="Monster").filter(r=>r.lvl&&r.lvl>e.lowerBound).filter(r=>r.lvl&&r.lvl<e.upperBound);if(!i.length)return!1;const a=[...t.activator.getMonsterZones(),...t.activator.getAvailableMonsterZones()];return t.activator.getEnableSummonList(t.activator,"PendulumSummon",["Rule"],t.action,i.map(r=>({monster:r,cells:a,posList:T})),[],!1).length>0},prepare:async t=>{const e=t.activator.getPendulumScales();if(!e||e.upperBound-e.lowerBound<2)return;const i=[...t.activator.getHandCell().cardEntities.filter(n=>n.kind==="Monster"),...t.activator.getExtraDeck().cardEntities.filter(n=>n.face==="FaceUp")].filter(n=>n.kind==="Monster").filter(n=>n.lvl&&n.lvl>e.lowerBound).filter(n=>n.lvl&&n.lvl<e.upperBound);if(!i.length)return;const a=[...t.activator.getMonsterZones(),...t.activator.getAvailableExtraMonsterZones()];return await t.activator.summonMany(t.activator,"PendulumSummon",["Rule"],t.action,i.map(n=>({monster:n,posList:T,cells:a})),[],!1,void 0,n=>n.length>0,!1),C()},execute:async t=>(t.activator.getPendingMonstersOnField().forEach(e=>e.determine()),!0),settle:async()=>!0},ms={title:"強制勝利",isMandatory:!0,playType:"LingeringEffect",spellSpeed:"Normal",executableCells:["Hand"],executablePeriods:["main2"],executableDuelistTypes:["Controller"],isOnlyNTimesPerTurn:1,canExecute:t=>t.activator.duel.clock.turn>1,prepare:async t=>(await v.sendManyToGraveyardForTheSameReason(t.activator.duel.field.getCardsOnFieldStrictly(),["Rule"],t.action.entity,t.activator),{selectedEntities:[],nextChainBlockFilter:()=>!1}),execute:async t=>{const e=[{name:"封印されし者の左足",column:4},{name:"封印されし者の右足",column:2},{name:"封印されし者の左腕",column:5},{name:"封印されし者の右腕",column:1},{name:"封印されしエクゾディア",column:3}];for(const i of e){const a=[t.activator.duel.field.getAllCardEntities().filter(n=>n.owner===t.activator).find(n=>n.origin.name===i.name),t.activator.getOpponentPlayer().getHandCell().cardEntities.find(n=>n.origin.name===i.name)].filter(n=>n!==void 0);if(!a.length)throw new m("想定されない状態",t.activator.getHandCell().cardEntities,i.name);await k.moveMany(a.map(n=>({entity:n,to:n.controller.getMonsterZones().find(r=>r.column===(n.controller.seat==="Above"?6-i.column:i.column))??n.controller.getFieldZone(),kind:"Monster",face:"FaceUp",orientation:"Vertical",pos:"Top",movedAs:["Rule"],movedBy:void 0,actionOwner:void 0,chooser:void 0})))}throw new O(t.activator,`${t.activator.getOpponentPlayer().name}がワンターンキルに失敗した。`)},settle:async()=>!0},vs=t=>{const e=[ys];return t.profile.npcType==="FtkChallenge"&&e.push(ms),{name:t.profile.name,actions:e,staticInfo:{name:t.profile.name,kind:"Monster",wikiEncodedName:"%A5%D7%A5%EC%A5%A4%A5%E4%A1%BC"}}},se=t=>t.type==="Name",Ss=t=>t.type==="Filter",Cs=t=>t.type==="Overmuch";function*Ts(){const t={...Object.assign({"/src/ygo_entity_proc/card_proc_definitions/CardProcDefinitions_ContinuousSpell.ts":ii,"/src/ygo_entity_proc/card_proc_definitions/CardProcDefinitions_ContinuousTrap.ts":ai,"/src/ygo_entity_proc/card_proc_definitions/CardProcDefinitions_CounterTrap.ts":ni,"/src/ygo_entity_proc/card_proc_definitions/CardProcDefinitions_EquipSpell.ts":ri,"/src/ygo_entity_proc/card_proc_definitions/CardProcDefinitions_EquipSpell_Preset.ts":si,"/src/ygo_entity_proc/card_proc_definitions/CardProcDefinitions_FieldSpell.ts":oi,"/src/ygo_entity_proc/card_proc_definitions/CardProcDefinitions_FieldSpell_Preset.ts":li,"/src/ygo_entity_proc/card_proc_definitions/CardProcDefinitions_FusionMonster.ts":ci,"/src/ygo_entity_proc/card_proc_definitions/CardProcDefinitions_LinkMonster.ts":fi,"/src/ygo_entity_proc/card_proc_definitions/CardProcDefinitions_Monster.ts":gi,"/src/ygo_entity_proc/card_proc_definitions/CardProcDefinitions_Monster_Preset_Catapult.ts":hi,"/src/ygo_entity_proc/card_proc_definitions/CardProcDefinitions_Monster_Preset_DirectAttacker.ts":yi,"/src/ygo_entity_proc/card_proc_definitions/CardProcDefinitions_Monster_Preset_Recruiter.ts":mi,"/src/ygo_entity_proc/card_proc_definitions/CardProcDefinitions_NormalSpell.ts":vi,"/src/ygo_entity_proc/card_proc_definitions/CardProcDefinitions_NormalSpell_General_Draw.ts":Si,"/src/ygo_entity_proc/card_proc_definitions/CardProcDefinitions_NormalSpell_General_Mill.ts":Ci,"/src/ygo_entity_proc/card_proc_definitions/CardProcDefinitions_NormalSpell_General_Salvage.ts":Ti,"/src/ygo_entity_proc/card_proc_definitions/CardProcDefinitions_NormalSpell_Preset.ts":_i,"/src/ygo_entity_proc/card_proc_definitions/CardProcDefinitions_NormalTrap.ts":Ei,"/src/ygo_entity_proc/card_proc_definitions/CardProcDefinitions_NormalTrap_UponAttackDeclaration.ts":wi,"/src/ygo_entity_proc/card_proc_definitions/CardProcDefinitions_QuickPlaySpell.ts":bi,"/src/ygo_entity_proc/card_proc_definitions/CardProcDefinitions_RitualSpell.ts":Di,"/src/ygo_entity_proc/card_proc_definitions/CardProcDefinitions_SynchroMonster.ts":xi,"/src/ygo_entity_proc/card_proc_definitions/CardProcDefinitions_TestMonster.ts":Ai,"/src/ygo_entity_proc/card_proc_definitions/CardProcDefinitions_XyzMonster.ts":Pi}),...Object.assign({"/src/ygo_entity_proc/card_proc_definitions/character_yusei/CardProcDefinitions_Yusei_SyncroTunerMonster.ts":Mi,"/src/ygo_entity_proc/card_proc_definitions/support_fusion/CardProcDefinitions_FustionSubstitude_Monster.ts":Ni,"/src/ygo_entity_proc/card_proc_definitions/support_fusion/CardProcDefinitions_FustionSupport_Monster.ts":Oi,"/src/ygo_entity_proc/card_proc_definitions/support_retual/CardProcDefinitions_RetualSupport_Monster.ts":Bi,"/src/ygo_entity_proc/card_proc_definitions/support_retual/CardProcDefinitions_RetualSupport_NormalSpell.ts":Li,"/src/ygo_entity_proc/card_proc_definitions/tag_b/CardProcDefinitions_BambooSword_EquipSpell.ts":qi,"/src/ygo_entity_proc/card_proc_definitions/tag_b/CardProcDefinitions_BambooSword_NormalSpell.ts":Ri,"/src/ygo_entity_proc/card_proc_definitions/tag_b/CardProcDefinitions_Blackwing_Monster.ts":Hi,"/src/ygo_entity_proc/card_proc_definitions/tag_c/CardProcDefinitions_Crystron_LinkMonster.ts":Zi,"/src/ygo_entity_proc/card_proc_definitions/tag_d/CardProcDefinitions_DestinyHero_Monster.ts":Gi,"/src/ygo_entity_proc/card_proc_definitions/tag_e/CardProcDefinitions_ElementalHero_Monster.ts":$i,"/src/ygo_entity_proc/card_proc_definitions/tag_e/CardProcDefinitions_Exodia_Monster.ts":ji,"/src/ygo_entity_proc/card_proc_definitions/tag_f/CardProcDefinitions_Firewall_LinkMonster.ts":Ui,"/src/ygo_entity_proc/card_proc_definitions/tag_f/CardProcDefinitions_Fusion_NormalSpell.ts":zi,"/src/ygo_entity_proc/card_proc_definitions/tag_i/CardProcDefinitions_Igknight_Monster.ts":Vi,"/src/ygo_entity_proc/card_proc_definitions/tag_j/CardProcDefinitions_Junk_Monster.ts":Wi,"/src/ygo_entity_proc/card_proc_definitions/tag_m/CardProcDefinitions_Metalfoes_Monster.ts":Qi,"/src/ygo_entity_proc/card_proc_definitions/tag_m/CardProcDefinitions_Metalfoes_NormalSpell.ts":Xi,"/src/ygo_entity_proc/card_proc_definitions/tag_r/CardProcDefinitions_Resonator_Monster.ts":Ki,"/src/ygo_entity_proc/card_proc_definitions/tag_s/CardProcDefinitions_SpellCounter_Monster.ts":Ji,"/src/ygo_entity_proc/card_proc_definitions/tag_s/CardProcDefinitions_Stardust_Monster.ts":Yi,"/src/ygo_entity_proc/card_proc_definitions/tag_s/CardProcDefinitions_Synchron_NormalSpell.ts":Ii,"/src/ygo_entity_proc/card_proc_definitions/tag_s/CardProcDefinitions_Synchron_SyncroMonster.ts":ea,"/src/ygo_entity_proc/card_proc_definitions/tag_t/CardProcDefinitions_Toon_ContinuousSpell.ts":ta,"/src/ygo_entity_proc/card_proc_definitions/tag_v/CardProcDefinitions_Void_NormalSpell.ts":ia,"/src/ygo_entity_proc/card_proc_definitions/tag_w/CardProcDefinitions_WorldChalice_Monster.ts":aa,"/src/ygo_entity_proc/card_proc_definitions/type_Cyberse/CardProcDefinitions_Earth_Cyberse_lvl1_Monster.ts":na,"/src/ygo_entity_proc/card_proc_definitions/type_Fairy/CardProcDefinitions_Light_Fairy_lvl8_SyncroMonster.ts":ra,"/src/ygo_entity_proc/card_proc_definitions/type_Fiend/CardProcDefinitions_Dark_Fiend_lvl4_Monster.ts":sa,"/src/ygo_entity_proc/card_proc_definitions/type_Spellcaster/CardProcDefinitions_Dark_Spellcaster_lvl4_Monster.ts":oa,"/src/ygo_entity_proc/card_proc_definitions/type_Spellcaster/CardProcDefinitions_Light_Spellcaster_lvl5_PendulumMonster.ts":la,"/src/ygo_entity_proc/card_proc_definitions/type_Spellcaster/CardProcDefinitions_Wind_Spellcaster_lvl3_Monster.ts":ca})};for(const e of Object.keys(t))t[e].default&&(yield*t[e].default())}function*_s(...t){var a,n;const e={...Object.assign({"/src/ygo_entity_proc/card_proc_definitions/CardProcDefinitions_ContinuousSpell.ts":ii,"/src/ygo_entity_proc/card_proc_definitions/CardProcDefinitions_ContinuousTrap.ts":ai,"/src/ygo_entity_proc/card_proc_definitions/CardProcDefinitions_CounterTrap.ts":ni,"/src/ygo_entity_proc/card_proc_definitions/CardProcDefinitions_EquipSpell.ts":ri,"/src/ygo_entity_proc/card_proc_definitions/CardProcDefinitions_EquipSpell_Preset.ts":si,"/src/ygo_entity_proc/card_proc_definitions/CardProcDefinitions_FieldSpell.ts":oi,"/src/ygo_entity_proc/card_proc_definitions/CardProcDefinitions_FieldSpell_Preset.ts":li,"/src/ygo_entity_proc/card_proc_definitions/CardProcDefinitions_FusionMonster.ts":ci,"/src/ygo_entity_proc/card_proc_definitions/CardProcDefinitions_LinkMonster.ts":fi,"/src/ygo_entity_proc/card_proc_definitions/CardProcDefinitions_Monster.ts":gi,"/src/ygo_entity_proc/card_proc_definitions/CardProcDefinitions_Monster_Preset_Catapult.ts":hi,"/src/ygo_entity_proc/card_proc_definitions/CardProcDefinitions_Monster_Preset_DirectAttacker.ts":yi,"/src/ygo_entity_proc/card_proc_definitions/CardProcDefinitions_Monster_Preset_Recruiter.ts":mi,"/src/ygo_entity_proc/card_proc_definitions/CardProcDefinitions_NormalSpell.ts":vi,"/src/ygo_entity_proc/card_proc_definitions/CardProcDefinitions_NormalSpell_General_Draw.ts":Si,"/src/ygo_entity_proc/card_proc_definitions/CardProcDefinitions_NormalSpell_General_Mill.ts":Ci,"/src/ygo_entity_proc/card_proc_definitions/CardProcDefinitions_NormalSpell_General_Salvage.ts":Ti,"/src/ygo_entity_proc/card_proc_definitions/CardProcDefinitions_NormalSpell_Preset.ts":_i,"/src/ygo_entity_proc/card_proc_definitions/CardProcDefinitions_NormalTrap.ts":Ei,"/src/ygo_entity_proc/card_proc_definitions/CardProcDefinitions_NormalTrap_UponAttackDeclaration.ts":wi,"/src/ygo_entity_proc/card_proc_definitions/CardProcDefinitions_QuickPlaySpell.ts":bi,"/src/ygo_entity_proc/card_proc_definitions/CardProcDefinitions_RitualSpell.ts":Di,"/src/ygo_entity_proc/card_proc_definitions/CardProcDefinitions_SynchroMonster.ts":xi,"/src/ygo_entity_proc/card_proc_definitions/CardProcDefinitions_TestMonster.ts":Ai,"/src/ygo_entity_proc/card_proc_definitions/CardProcDefinitions_XyzMonster.ts":Pi}),...Object.assign({"/src/ygo_entity_proc/card_proc_definitions/character_yusei/CardProcDefinitions_Yusei_SyncroTunerMonster.ts":Mi,"/src/ygo_entity_proc/card_proc_definitions/support_fusion/CardProcDefinitions_FustionSubstitude_Monster.ts":Ni,"/src/ygo_entity_proc/card_proc_definitions/support_fusion/CardProcDefinitions_FustionSupport_Monster.ts":Oi,"/src/ygo_entity_proc/card_proc_definitions/support_retual/CardProcDefinitions_RetualSupport_Monster.ts":Bi,"/src/ygo_entity_proc/card_proc_definitions/support_retual/CardProcDefinitions_RetualSupport_NormalSpell.ts":Li,"/src/ygo_entity_proc/card_proc_definitions/tag_b/CardProcDefinitions_BambooSword_EquipSpell.ts":qi,"/src/ygo_entity_proc/card_proc_definitions/tag_b/CardProcDefinitions_BambooSword_NormalSpell.ts":Ri,"/src/ygo_entity_proc/card_proc_definitions/tag_b/CardProcDefinitions_Blackwing_Monster.ts":Hi,"/src/ygo_entity_proc/card_proc_definitions/tag_c/CardProcDefinitions_Crystron_LinkMonster.ts":Zi,"/src/ygo_entity_proc/card_proc_definitions/tag_d/CardProcDefinitions_DestinyHero_Monster.ts":Gi,"/src/ygo_entity_proc/card_proc_definitions/tag_e/CardProcDefinitions_ElementalHero_Monster.ts":$i,"/src/ygo_entity_proc/card_proc_definitions/tag_e/CardProcDefinitions_Exodia_Monster.ts":ji,"/src/ygo_entity_proc/card_proc_definitions/tag_f/CardProcDefinitions_Firewall_LinkMonster.ts":Ui,"/src/ygo_entity_proc/card_proc_definitions/tag_f/CardProcDefinitions_Fusion_NormalSpell.ts":zi,"/src/ygo_entity_proc/card_proc_definitions/tag_i/CardProcDefinitions_Igknight_Monster.ts":Vi,"/src/ygo_entity_proc/card_proc_definitions/tag_j/CardProcDefinitions_Junk_Monster.ts":Wi,"/src/ygo_entity_proc/card_proc_definitions/tag_m/CardProcDefinitions_Metalfoes_Monster.ts":Qi,"/src/ygo_entity_proc/card_proc_definitions/tag_m/CardProcDefinitions_Metalfoes_NormalSpell.ts":Xi,"/src/ygo_entity_proc/card_proc_definitions/tag_r/CardProcDefinitions_Resonator_Monster.ts":Ki,"/src/ygo_entity_proc/card_proc_definitions/tag_s/CardProcDefinitions_SpellCounter_Monster.ts":Ji,"/src/ygo_entity_proc/card_proc_definitions/tag_s/CardProcDefinitions_Stardust_Monster.ts":Yi,"/src/ygo_entity_proc/card_proc_definitions/tag_s/CardProcDefinitions_Synchron_NormalSpell.ts":Ii,"/src/ygo_entity_proc/card_proc_definitions/tag_s/CardProcDefinitions_Synchron_SyncroMonster.ts":ea,"/src/ygo_entity_proc/card_proc_definitions/tag_t/CardProcDefinitions_Toon_ContinuousSpell.ts":ta,"/src/ygo_entity_proc/card_proc_definitions/tag_v/CardProcDefinitions_Void_NormalSpell.ts":ia,"/src/ygo_entity_proc/card_proc_definitions/tag_w/CardProcDefinitions_WorldChalice_Monster.ts":aa,"/src/ygo_entity_proc/card_proc_definitions/type_Cyberse/CardProcDefinitions_Earth_Cyberse_lvl1_Monster.ts":na,"/src/ygo_entity_proc/card_proc_definitions/type_Fairy/CardProcDefinitions_Light_Fairy_lvl8_SyncroMonster.ts":ra,"/src/ygo_entity_proc/card_proc_definitions/type_Fiend/CardProcDefinitions_Dark_Fiend_lvl4_Monster.ts":sa,"/src/ygo_entity_proc/card_proc_definitions/type_Spellcaster/CardProcDefinitions_Dark_Spellcaster_lvl4_Monster.ts":oa,"/src/ygo_entity_proc/card_proc_definitions/type_Spellcaster/CardProcDefinitions_Light_Spellcaster_lvl5_PendulumMonster.ts":la,"/src/ygo_entity_proc/card_proc_definitions/type_Spellcaster/CardProcDefinitions_Wind_Spellcaster_lvl3_Monster.ts":ca})},i=[];for(const r of Object.values(e))if(r.default){for(const s of r.default())if(t.includes(s.name)){const l={...K[s.name]};let c=s.summonFilter;l.kind==="Monster"&&l.monsterCategories&&!s.summonFilter&&l.monsterCategories.union(Ht).length&&(c=ir),s.fusionMaterialInfos&&s.fusionMaterialInfos.some(d=>d.type==="Name")&&(l.textTags=[...l.textTags??[],...s.fusionMaterialInfos.filter(se).map(d=>d.cardName)]);const u={...s,summonFilter:c,staticInfo:l};(a=l.monsterCategories)!=null&&a.includes("Link")?u.actions=[...di,...u.actions]:(n=l.monsterCategories)!=null&&n.includes("SpecialSummon")?u.actions=[...qe,...u.actions]:u.actions=[...Ft,...s.actions],yield u,i.push(s.name)}}yield*t.filter(r=>!i.includes(r)).map(r=>K[r]).filter(r=>r).filter(r=>r.kind==="Monster").filter(r=>{var s;return!((s=r.monsterCategories)!=null&&s.includes("Effect"))}).filter(r=>{var s;return!((s=r.monsterCategories)!=null&&s.includes("Pendulum"))}).map(r=>{var s;return i.push(r.name),{name:r.name,actions:(s=r.monsterCategories)!=null&&s.includes("SpecialSummon")?qe:Ft,staticInfo:r}}),i.length!==t.length&&console.log(t.filter(r=>!i.includes(r)))}const Es=t=>({...vs(t),staticInfo:{name:t.profile.name,kind:"Monster",wikiEncodedName:"%A5%D7%A5%EC%A5%A4%A5%E4%A1%BC"}}),ws=new Set,st=ma;let ua=0,da=0;for(const t of Ts()){if(ws.has(t.name))throw new Error(`カード定義重複${t.name}`);st[t.name]&&(st[t.name].isImplemented=!0,ua++)}const K=Object.values(st).reduce((t,e)=>{var i;return e.kind==="Monster"&&e.monsterCategories&&!((i=e.monsterCategories)!=null&&i.includes("Effect"))&&!e.monsterCategories.includes("Pendulum")&&(e.isImplemented=!0,da++),e.isForTest&&e.isImplemented,t[e.name]=e,t},{}),Ys=ua,Is=da,ot=[{id:-1,name:"サンプルデッキ１",deckType:"NPC",description:"",cardNames:["アンノウン・シンクロン","六武衆のご隠居","ジャンク・フォアード","ジャンク・フォアード","ジャンク・フォアード","チューン・ウォリアー","チューン・ウォリアー","ガード・オブ・フレムベル","ガード・オブ・フレムベル","守護竜ユスティア","守護竜ユスティア","エンジェル・トランペッター","エンジェル・トランペッター","ジェムナイト・サフィア","ジェムナイト・サフィア","魂虎","魂虎","暗黒界の番兵 レンジ","暗黒界の番兵 レンジ","バトルフットボーラー","バトルフットボーラー","球騎士の三人娘","球騎士の三人娘","エンジェル・トランペッター","エンジェル・トランペッター","Ｇ戦隊 シャインブラック","Ｇ戦隊 シャインブラック","しゃりの軍貫","しゃりの軍貫","ジョングルグールの幻術師","ジョングルグールの幻術師","ゾンビーノ","ゾンビーノ","メガロスマッシャーＸ","メガロスマッシャーＸ","ライドロン","ライドロン","機界騎士アヴラム","機界騎士アヴラム","幻のグリフォン","幻のグリフォン","幻殻竜","幻殻竜","アレキサンドライドラゴン","アレキサンドライドラゴン","ジェネティック・ワーウルフ","ジェネティック・ワーウルフ","サイバー・ドラゴン","フロストザウルス","フロストザウルス","フロストザウルス","青眼の白龍","マジカル・アンドロイド","マジカル・アンドロイド","マジカル・アンドロイド","大地の騎士ガイアナイト","大地の騎士ガイアナイト","大地の騎士ガイアナイト","スクラップ・デスデーモン","スクラップ・デスデーモン","スクラップ・デスデーモン","スターダスト・ドラゴン","スターダスト・ドラゴン","スターダスト・ドラゴン","ナチュル・ガオドレイク","ナチュル・ガオドレイク","ナチュル・ガオドレイク"]},{id:-2,name:"サンプルデッキ２",deckType:"NPC",description:"",cardNames:["アンノウン・シンクロン","六武衆のご隠居","ジャンク・フォアード","グローアップ・バルブ","ガード・オブ・フレムベル","伝説の白石","伝説の白石","伝説の白石","守護竜ユスティア","ギャラクシーサーペント","ジェネクス・コントローラー","Ｅ・ＨＥＲＯ フェザーマン","Ｅ・ＨＥＲＯ バーストレディ","チューン・ウォリアー","Ｅ・ＨＥＲＯ クレイマン","Ｅ・ＨＥＲＯ スパークマン","しゃりの軍貫","ジョングルグールの幻術師","ゾンビーノ","ジェネティック・ワーウルフ","ライトロード・ビースト ウォルフ","サイバー・ドラゴン","サイバー・ドラゴン","サイバー・ドラゴン","ラブラドライドラゴン","Ｄ－ＨＥＲＯ ディアボリックガイ","Ｄ－ＨＥＲＯ ディアボリックガイ","Ｄ－ＨＥＲＯ ディアボリックガイ","フロストザウルス","Ｅ・ＨＥＲＯ ネオス","青眼の白龍","青眼の白龍","青眼の白龍","Ｅ－エマージェンシーコール","おろかな埋葬","トレード・イン","トレード・イン","トレード・イン","闇の量産工場","強欲な壺","強欲な壺","強欲な壺","死者蘇生","死者蘇生","死者蘇生","召喚師のスキル","召喚師のスキル","召喚師のスキル","成金ゴブリン","成金ゴブリン","成金ゴブリン","戦士の生還","増援","調和の宝札","調和の宝札","調和の宝札","天使の施し","天使の施し","天使の施し","貪欲な壺","貪欲な壺","貪欲な壺","マジカル・アンドロイド","マジカル・アンドロイド","マジカル・アンドロイド","大地の騎士ガイアナイト","大地の騎士ガイアナイト","大地の騎士ガイアナイト","スクラップ・デスデーモン","スクラップ・デスデーモン","スクラップ・デスデーモン","スターダスト・ドラゴン","スターダスト・ドラゴン","スターダスト・ドラゴン","ナチュル・ガオドレイク","ナチュル・ガオドレイク","ナチュル・ガオドレイク"]},{id:-3,name:"サンプルデッキ３",deckType:"NPC",description:"",cardNames:["アンノウン・シンクロン","六武衆のご隠居","ジャンク・フォアード","グローアップ・バルブ","ガード・オブ・フレムベル","伝説の白石","伝説の白石","伝説の白石","守護竜ユスティア","ギャラクシーサーペント","ジェネクス・コントローラー","Ｅ・ＨＥＲＯ フェザーマン","Ｅ・ＨＥＲＯ バーストレディ","チューン・ウォリアー","Ｅ・ＨＥＲＯ クレイマン","Ｅ・ＨＥＲＯ スパークマン","しゃりの軍貫","ジョングルグールの幻術師","ゾンビーノ","ジェネティック・ワーウルフ","ライトロード・ビースト ウォルフ","サイバー・ドラゴン","サイバー・ドラゴン","サイバー・ドラゴン","ラブラドライドラゴン","Ｄ－ＨＥＲＯ ディアボリックガイ","Ｄ－ＨＥＲＯ ディアボリックガイ","Ｄ－ＨＥＲＯ ディアボリックガイ","フロストザウルス","Ｅ・ＨＥＲＯ ネオス","青眼の白龍","青眼の白龍","青眼の白龍","Ｅ－エマージェンシーコール","おろかな埋葬","トレード・イン","トレード・イン","トレード・イン","闇の量産工場","強欲な壺","強欲な壺","強欲な壺","死者蘇生","死者蘇生","死者蘇生","召喚師のスキル","召喚師のスキル","召喚師のスキル","成金ゴブリン","成金ゴブリン","成金ゴブリン","戦士の生還","増援","調和の宝札","調和の宝札","調和の宝札","天使の施し","天使の施し","天使の施し","貪欲な壺","貪欲な壺","貪欲な壺","マジカル・アンドロイド","マジカル・アンドロイド","マジカル・アンドロイド","大地の騎士ガイアナイト","大地の騎士ガイアナイト","大地の騎士ガイアナイト","スクラップ・デスデーモン","スクラップ・デスデーモン","スクラップ・デスデーモン","スターダスト・ドラゴン","スターダスト・ドラゴン","スターダスト・ドラゴン","ナチュル・ガオドレイク","ナチュル・ガオドレイク","ナチュル・ガオドレイク"]},{id:-9007199254740991,name:"FtkChallenge",deckType:"NPC",description:"FtkChallenge",cardNames:["封印されし者の右足","封印されし者の右腕","封印されし者の左足","封印されし者の左腕","封印されしエクゾディア","スカゴブリン","スカゴブリン","スカゴブリン","スカゴブリン","スカゴブリン","スカゴブリン","スカゴブリン","スカゴブリン","スカゴブリン","スカゴブリン","スカゴブリン","スカゴブリン","スカゴブリン","スカゴブリン","スカゴブリン","スカゴブリン","スカゴブリン","スカゴブリン","スカゴブリン","スカゴブリン","スカゴブリン","スカゴブリン","スカゴブリン","スカゴブリン","スカゴブリン","スカゴブリン","スカゴブリン","スカゴブリン","スカゴブリン","スカゴブリン","スカゴブリン","スカゴブリン","スカゴブリン","スカゴブリン","スカゴブリン","スカゴブリン","スカゴブリン","スカゴブリン","スカゴブリン","スカゴブリン","スカゴブリン","スカゴブリン","スカゴブリン","スカゴブリン","スカゴブリン","スカゴブリン","スカゴブリン","スカゴブリン","スカゴブリン","スカゴブリン","スカゴブリン","スカゴブリン","スカゴブリン","スカゴブリン","スカゴブリン"]},{id:-1e3,name:"図書館エクゾプリセット",deckType:"Preset",description:"プリセット",cardNames:["封印されし者の右足","封印されし者の右腕","封印されし者の左足","封印されし者の左腕","封印されしエクゾディア","王立魔法図書館","王立魔法図書館","王立魔法図書館","召喚僧サモンプリースト","召喚僧サモンプリースト","召喚僧サモンプリースト","アンカモフライト","ダーク・バースト","チキンレース","チキンレース","チキンレース","テラ・フォーミング","トゥーン・ワールド","トゥーンのもくじ","トゥーンのもくじ","トゥーンのもくじ","一時休戦","黄金色の竹光","黄金色の竹光","黄金色の竹光","手札断殺","手札断殺","手札断殺","真刀竹光","成金ゴブリン","成金ゴブリン","成金ゴブリン","打ち出の小槌","打ち出の小槌","無の煉獄","無の煉獄","無の煉獄","妖刀竹光","妖刀竹光","妖刀竹光"]}],_=class _{constructor(e,i){o(this,"id");o(this,"name");o(this,"deckType");o(this,"description");o(this,"lastUsedAt");o(this,"cardNames");o(this,"getIllegalCardNames",()=>Array.from(new Set(this.cardNames.filter(e=>!Object.keys(K).includes(e)))));o(this,"getDisableCardNames",()=>Array.from(new Set(this.cardNames.filter(e=>!Object.keys(K).includes(e)))));o(this,"createCardInfos",()=>{const e=this.getIllegalCardNames();if(e.length>0)throw new Error(`存在しないカード名からデッキを生成しようとした。${e}`);return this.cardNames.map(i=>K==null?void 0:K[i]).filter(i=>i)});o(this,"copy",async()=>_.createNewDeck(this.name,this.description,this.cardNames));o(this,"updateTimestamp",async()=>{await _.tblHeader.update(this.id,e=>({...e,lastUsedAt:new Date}))});o(this,"saveDeckInfo",async e=>{const i=e??this;await _.tblHeader.update(this.id,r=>({...r,name:i.name,description:i.description,deckType:"User",lastUsedAt:new Date}));const a=(await _.tblDetail.getAll()).filter(r=>r.deckId===this.id);await _.tblDetail.delete(a.map(r=>r.id));const n=await _.tblDetail.insertMany(i.cardNames.map((r,s)=>({deckId:this.id,seq:s,name:r,description:""})));return new _(await _.tblHeader.get(this.id),n)});o(this,"delete",async()=>{await _.tblHeader.delete([this.id]);const e=(await _.tblDetail.getAll()).filter(i=>i.deckId===this.id);await _.tblDetail.delete(e.map(i=>i.id))});this.id=e.id,this.name=e.name,this.deckType=e.deckType,this.description=e.description,this.lastUsedAt=e.lastUsedAt,this.cardNames=i.filter(a=>a.deckId===this.id).map(a=>a.name)}};o(_,"toJson",e=>{const i=e.map(a=>{const{id:n,name:r,description:s,lastUsedAt:l,cardNames:c}=a;return{id:n,name:r,description:s,lastUsedAt:l,cardNames:c}});return i.forEach(a=>{a.cardNames=a.cardNames.map(n=>K[n]).sort($t).map(n=>n.name)}),JSON.stringify(i,null,2)}),o(_,"convertToObjectURL",e=>{const i=_.toJson(e),a=new Blob([i],{type:"text/plain"});return window.URL.createObjectURL(a)}),o(_,"idb"),o(_,"tblHeader"),o(_,"tblDetail"),o(_,"getAllDeckInfo",async e=>{if(e&&(_.idb=e),!_.idb)throw new Error("illegal argument: idb is undefined.");_.tblHeader||(_.tblHeader=new bs(_.idb)),_.tblDetail||(_.tblDetail=new ks(_.idb));const i=await _.tblHeader.getAll(),a=await _.tblDetail.getAll();return i.length?i.map(n=>new _(n,a)):[await _.prepareSampleDeck()]}),o(_,"createNewDeck",async(e,i,a)=>{const n=await _.tblHeader.insert({name:e,description:i,deckType:"User",lastUsedAt:new Date}),r=await _.tblDetail.insertMany(a.map((s,l)=>({deckId:n.id,seq:l,name:s,description:""})));return new _(n,r)}),o(_,"prepareSampleDeck",async()=>{const e=ot.find(i=>i.deckType==="Preset")??ot.slice(-1)[0];return await _.createNewDeck(e.name,e.description,e.cardNames)});let Bt=_;class bs extends lt{constructor(i){super(i,"TblDeckHeader");o(this,"_prepareInitialRecords",()=>[])}}class ks extends lt{constructor(i){super(i,"TblDeckDetail");o(this,"_prepareInitialRecords",()=>[])}}const eo=ot.map(t=>({...t,lastUsedAt:new Date})).filter(t=>t.id<0);export{Bt as A,Is as B,Ys as C,at as D,As as E,At as F,Pt as G,eo as H,We as I,Xs as J,Qs as K,m as S,js as a,Bs as b,Os as c,Ma as d,Be as e,Ws as f,Vs as g,K as h,qs as i,Js as j,Ks as k,Pe as l,Us as m,$t as n,Fs as o,Ms as p,Ps as q,zs as r,Zs as s,$s as t,va as u,Gs as v,Hs as w,Rs as x,Ls as y,Ns as z};
