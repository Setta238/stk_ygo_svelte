import{f as b,D as T,I as M,d as K,s as q,c as $,N as D,a as S,b as B,e as G,g as ie,S as x,m as w,h as R,n as oe,i as h,j as re,P as J,k as ue,l as te}from"./duel.js";const k=async()=>({selectedEntities:[],chainBlockTags:[],prepared:void 0}),de=async(e,t,a)=>(e.activator.payLp(a,e.action.entity),{lifePoint:a}),pe=e=>e.activator.canSendToGraveyard([e.action.entity])&&e.action.entity.canBeSentToGraveyard(e.activator,e.action.entity,"SendToGraveyardAsCost",e.action),ve=async e=>(await e.action.entity.sendToGraveyard(["Cost"],e.action.entity,e.activator),{sendToGraveyard:[e.action.entity]}),j=e=>e.activator.canTryBanish(e.action.entity,"BanishAsCost",e.action)&&e.action.entity.canBeBanished("BanishAsCost",e.activator,e.action.entity,e.action),z=async e=>(await e.action.entity.banish(["Cost"],e.action.entity,e.activator),{banish:[e.action.entity]}),ge=(e,t,a=1)=>t.filter(i=>e.activator.canTryBanish(i,"BanishAsCost",e.action)).filter(i=>i.canBeBanished("BanishAsCost",e.activator,e.action.entity,e.action)).length>=a,fe=async(e,t,a,i)=>{const r=t.filter(l=>e.activator.canTryBanish(l,"BanishAsCost",e.action)).filter(l=>l.canBeBanished("BanishAsCost",e.activator,e.action.entity,e.action)),n=await e.activator.waitSelectEntities(r,i,a,"コストとして除外するカードを選択",!1)??[];return await T.banishManyForTheSameReason(n,["Cost"],e.action.entity,e.activator),{banish:n}},P=async(e,t,a=b,i=n=>n.length===1,r=1)=>{const n=e.activator.getMonsterZones(),l=e.activator.getEnableSummonList(e.activator,"SpecialSummon",["Effect"],e.action,t.filter(s=>s.kind==="Monster").filter(s=>s.canBeTargetOfEffect(e)).map(s=>({monster:s,posList:a,cells:n})),[],!1),c=await e.activator.waitSelectEntities(l.map(s=>s.monster),r,i,"特殊召喚するモンスターを選択",!1)??[];if(!c.length)throw new M(e);const o=c.map(s=>s.fieldCell.cellType).getDistinct().filter(s=>s==="Graveyard"||s==="Banished").map(s=>s==="Graveyard"?"SpecialSummonFromGraveyard":"SpecialSummonFromBanished");return{selectedEntities:c,chainBlockTags:o,prepared:void 0}},O=async(e,t=["Attack","Defense"],a=!0)=>{const i=e.activator.getMonsterZones(),r=e.selectedEntities.filter(n=>!n.wasMovedAfter(e.isActivatedAt)).map(n=>({monster:n,posList:t,cells:i}));return a&&(r.length!==e.selectedEntities.length||i.length<r.length)?!1:(await e.activator.summonAll(e.activator,"SpecialSummon",["Effect"],e.action,r,[],!1,!1),!0)},ye=async(e,t,a=["Attack","Defense"])=>{const i=e.activator.getMonsterZones(),r=t.map(n=>({monster:n,posList:a,cells:i}));return await e.activator.summonAll(e.activator,"SpecialSummon",["Effect"],e.action,r,[],!1,!1),!0},Se=(e,t,a)=>({title:e,playType:"SystemPeriodAction",spellSpeed:"Normal",executableCells:K,executablePeriods:t,executableDuelistTypes:["Controller","Opponent"],isMandatory:!0,validate:a,prepare:k,execute:async()=>!0,settle:async()=>!0}),Te=e=>{if(e.action.entity.status.spellCategory==="Field")return[e.activator.getFieldZone()];const t=e.activator.getAvailableSpellTrapZones();return t.length>0?t:void 0},g={title:"セット",playType:"SpellTrapSet",spellSpeed:"Normal",executableCells:["Hand"],executablePeriods:["main1","main2"],executableDuelistTypes:["Controller"],isMandatory:!1,validate:Te,prepare:k,execute:async()=>!0,settle:async()=>!0},y=e=>{var a;if(e.action.entity.info.isPending||e.action.entity.info.isDying||e.action.entity.info.isSettingSickness)return;if(q.some(i=>i===e.action.entity.fieldCell.cellType))return e.action.entity.face==="FaceDown"?[]:void 0;if(e.action.spellSpeed==="Normal"&&!e.activator.isTurnPlayer||e.action.entity.fieldCell.cellType==="Hand"&&!e.activator.isTurnPlayer)return;if(e.action.entity.status.spellCategory==="Field")return[e.activator.getFieldZone()];let t=e.activator.getAvailableSpellTrapZones();return(a=e.action.entity.status.monsterCategories)!=null&&a.includes("Pendulum")&&(t=t.filter(i=>i.isAvailableForPendulum)),t.length>0?t:void 0},ne={title:"発動",isMandatory:!1,playType:"CardActivation",spellSpeed:"Normal",executableCells:["Hand","SpellAndTrapZone"],executablePeriods:["main1","main2"],executableDuelistTypes:["Controller"],validate:y,prepare:k,execute:async()=>!0,settle:async()=>!0},Ce=(e,t,a=()=>!0)=>e.action.entity.field.getMonstersOnFieldStrictly().filter(r=>r.face==="FaceUp").filter(r=>r.canBeTargetOfEffect(e)).filter(r=>a(r,e.action.entity)).length?y(e):void 0,be=async(e,t,a,i,r,n=()=>!0)=>{const l=e.action.entity.field.getMonstersOnFieldStrictly().filter(o=>o.face==="FaceUp").filter(o=>o.canBeTargetOfEffect(e)).filter(o=>n(o,e.action.entity)),c=await e.activator.waitSelectEntity(l,"装備対象モンスターを選択",a);if(c)return e.action.entity.info.equipedBy=c,e.action.entity.info.effectTargets[e.action.seq]=[c],{chainBlockTags:i??[],selectedEntities:[c],prepared:r}},le=async(e,t,a=()=>!0)=>{const i=e.selectedEntities[0];return e.action.entity.info.equipedBy=i,e.action.entity.info.effectTargets[e.action.seq]=[i],a(i,e.action.entity)?(e.action.entity.info.equipedBy=i,e.action.entity.info.validateEquipOwner=a,i.info.equipEntities.push(e.action.entity),!0):(await e.action.entity.ruleDestory(),e.activator.writeInfoLog(`${i.toString()}が装備条件を満たさなくなったため、${e.action.entity.toString()}は破壊された。`),!1)},N=(e=()=>!0)=>({title:"発動",isMandatory:!1,playType:"CardActivation",spellSpeed:"Normal",executableCells:["Hand","SpellAndTrapZone"],executablePeriods:["main1","main2"],executableDuelistTypes:["Controller"],validate:(t,a)=>Ce(t,a,e),prepare:(t,a,i)=>be(t,a,i,[],void 0,e),execute:le,settle:async()=>!0});function*Ee(){yield{name:"連合軍",actions:[ne,g],continuousEffects:[$("発動","Spell",e=>e.isOnFieldStrictly&&e.face==="FaceUp",e=>[D.createContinuous("発動",t=>t.isSpawnedBy.isOnFieldStrictly&&t.isSpawnedBy.face==="FaceUp",e,(t,a)=>a.controller===t.isSpawnedBy.controller&&a.types.includes("Warrior")&&a.isOnFieldStrictly&&a.face==="FaceUp","attack","wip","Addition",(t,a,i)=>{if(!t.isEffective||a.face==="FaceDown")return i;const r=t.controller.getMonstersOnField().filter(n=>n.face==="FaceUp").filter(n=>n.types.includes("Warrior")||n.types.includes("Spellcaster")).length;return i+r*200})])]}}const wt=Object.freeze(Object.defineProperty({__proto__:null,default:Ee},Symbol.toStringTag,{value:"Module"}));function*he(){yield*[{name:"リビングデッドの呼び声",pos:"Attack",filter:()=>!0},{name:"エンジェル・リフト",pos:"Attack",filter:e=>(e.lvl??12)<3},{name:"正統なる血統",pos:"Attack",filter:e=>{var t;return(t=e.status.monsterCategories)==null?void 0:t.includes("Normal")}},{name:"蘇りし魂",pos:"Defense",filter:e=>{var t;return(t=e.status.monsterCategories)==null?void 0:t.includes("Normal")}},{name:"リミット・リバース",pos:"Attack",filter:e=>(e.atk??9999)<=1e3,onMonsterAfterMove:async(e,t)=>{if(!t.isOnFieldAsMonsterStrictly||t.face==="FaceDown")return"RemoveMe";if(e.action.entity.isEffective&&t.battlePosition==="Defense")return e.action.entity.controller.writeInfoLog(`${t.toString()}が守備表示になったため、${e.action.entity.toString()}とともに破壊される。`),await T.tryMarkForDestory([t,e.action.entity],e),"RemoveMe"}}].map(e=>({name:e.name,actions:[{title:"発動",isMandatory:!1,playType:"CardActivation",spellSpeed:"Quick",executableCells:["SpellAndTrapZone"],executablePeriods:S,executableDuelistTypes:["Controller"],validate:t=>{const a=t.activator.getMonsterZones();if(t.activator.getEnableSummonList(t.activator,"SpecialSummon",["Effect"],t.action,t.activator.getGraveyard().cardEntities.filter(r=>r.kind==="Monster").filter(e.filter).filter(r=>r.canBeTargetOfEffect(t)).map(r=>({monster:r,posList:["Attack"],cells:a})),[],!1).length)return y(t)},prepare:t=>P(t,t.activator.getGraveyard().cardEntities.filter(a=>a.kind==="Monster").filter(e.filter).filter(a=>a.canBeTargetOfEffect(t)),["Attack"]),execute:async t=>{if(!await O(t,["Attack"])||!t.selectedEntities.length)return!1;t.action.entity.info.effectTargets[t.action.seq]=t.selectedEntities,t.action.entity.onBeforeMove.append(async r=>{if(r.entity.face!=="FaceUp"||!r.entity.isOnFieldAsSpellTrapStrictly)return"RemoveMe";const n=Object.values(r.entity.info.effectTargets).flatMap(o=>o),[l]=r.args;if(!n.length)return"RemoveMe";const c=n[0];return c.isOnFieldStrictly&&c.face==="FaceUp"&&r.entity.isEffective&&!l.isSpellTrapZoneLikeCell&&(r.entity.controller.writeInfoLog(`${t.action.entity.toString()}がフィールドを離れたため、対象モンスター${c.toString()}を破壊。`),await T.tryMarkForDestory([c],t)),"RemoveMe"});const i=t.selectedEntities[0];return i.onBeforeMove.append(async r=>{if(r.entity.face!=="FaceUp"||!r.entity.isOnFieldAsMonsterStrictly)return"RemoveMe";const[,,,,,n]=r.args;return t.action.entity.isOnFieldStrictly&&t.action.entity.face==="FaceUp"&&r.entity.isEffective&&n.union(["EffectDestroy","RuleDestroy"]).length&&(t.activator.writeInfoLog(`${r.entity.toString()}が破壊されたため、${t.action.entity.toString()}を破壊。`),await T.tryMarkForDestory([i],t)),"RemoveMe"}),i.onAfterMove.append(async r=>e.onMonsterAfterMove?await e.onMonsterAfterMove(t,r):"RemoveMe"),!0},settle:async()=>!0},g]}))}const _t=Object.freeze(Object.defineProperty({__proto__:null,default:he},Symbol.toStringTag,{value:"Module"}));function*me(){yield{name:"昇天の黒角笛",actions:[{title:"発動",isMandatory:!1,playType:"CardActivation",spellSpeed:"Counter",executableCells:["SpellAndTrapZone"],executablePeriods:B,executableDuelistTypes:["Controller"],negateSummon:!0,validate:e=>{if(e.targetChainBlock&&e.targetChainBlock.action.playType==="SpecialSummon"&&e.targetChainBlock.activator!==e.activator&&e.activator.duel.field.getPendingMonstersOnField().length===1)return y(e)},prepare:async()=>({selectedEntities:[],chainBlockTags:["NegateSpecialSummon"],prepared:void 0}),execute:async e=>{const t=T.negateSummonMany(e.action.entity,e.activator);return await T.tryDestroy(t,e),!0},settle:async()=>!0},g]}}const Bt=Object.freeze(Object.defineProperty({__proto__:null,default:me},Symbol.toStringTag,{value:"Module"}));function*ke(){yield*[{name:"団結の力",kind:["Monster"],rate:800},{name:"魔導師の力",kind:["Spell","Trap"],rate:500}].map(e=>({name:e.name,actions:[N(),g],continuousEffects:[G(e.name,"Spell",t=>t.info.equipedBy?[t.info.equipedBy]:[],t=>t.isOnFieldStrictly&&t.face==="FaceUp",t=>["attack","defense"].map(a=>D.createContinuous("発動",i=>i.isSpawnedBy.isOnFieldStrictly&&i.isSpawnedBy.face==="FaceUp",t,(i,r)=>r.isOnFieldStrictly&&r.face==="FaceUp",a,"wip","Addition",(i,r,n)=>{if(!i.isEffective)return n;const l=i.controller.getEntiteisOnField().filter(c=>e.kind.includes(c.kind)).length;return n+l*e.rate})))]})),yield{name:"早すぎた埋葬",actions:[{title:"発動",isMandatory:!1,playType:"CardActivation",spellSpeed:"Normal",executableCells:["Hand","SpellAndTrapZone"],executablePeriods:["main1","main2"],executableDuelistTypes:["Controller"],hasToTargetCards:!0,canPayCosts:e=>e.activator.lp>=800,validate:e=>{const t=e.activator.getMonsterZones();if(e.activator.getEnableSummonList(e.activator,"SpecialSummon",["Effect"],e.action,e.activator.getGraveyard().cardEntities.filter(i=>i.kind==="Monster").filter(i=>i.canBeTargetOfEffect(e)).map(i=>({monster:i,posList:["Attack"],cells:t})),[],!1).length)return y(e)},payCosts:(e,t)=>de(e,t,800),prepare:async e=>{const t=await P(e,e.activator.getGraveyard().cardEntities,["Attack"]);return t.chainBlockTags.push("PayLifePoint"),t},execute:async(e,t)=>e.action.entity.info.equipedBy?(await e.action.entity.ruleDestory(),!1):await O(e,["Attack"])?(e.action.entity.onBeforeMove.append(async i=>{if(i.entity.face!=="FaceUp"||!i.entity.isOnFieldAsSpellTrapStrictly)return"RemoveMe";const r=i.entity.info.equipedBy;if(!r)return"RemoveMe";const[,,,,,n]=i.args;return r.isOnFieldStrictly&&r.face==="FaceUp"&&i.entity.isEffective&&n.union(["EffectDestroy","RuleDestroy"]).length&&(i.entity.controller.writeInfoLog(`${e.action.entity.toString()}が破壊されたため、装備対象モンスター${r.toString()}を破壊。`),T.tryMarkForDestory([r],e)),"RemoveMe"}),le(e,t,(i,r)=>{var n;return(n=r.info.effectTargets[e.action.seq])==null?void 0:n.includes(i)})):(await e.action.entity.ruleDestory(),!1),settle:async()=>!0},g]},yield{name:"幻惑の巻物",actions:[N(),g],continuousEffects:[]}}const At=Object.freeze(Object.defineProperty({__proto__:null,default:ke},Symbol.toStringTag,{value:"Module"}));function*Me(){yield*[{name:"伝説の剣",attr:void 0,monType:"Warrior",atk:200,def:200},{name:"秘術の書",attr:void 0,monType:"Spellcaster",atk:200,def:200},{name:"ポセイドンの力",attr:void 0,monType:"Aqua",atk:200,def:200},{name:"紫水晶",attr:void 0,monType:"Zombie",atk:200,def:200},{name:"猛獣の歯",attr:void 0,monType:"Beast",atk:200,def:200},{name:"機械改造工場",attr:void 0,monType:"Machine",atk:200,def:200},{name:"体温の上昇",attr:void 0,monType:"Reptile",atk:200,def:200},{name:"魔菌",attr:void 0,monType:"Plant",atk:200,def:200},{name:"闇・エネルギー",attr:void 0,monType:"Fiend",atk:200,def:200},{name:"レーザー砲機甲鎧",attr:void 0,monType:"Insect",atk:200,def:200},{name:"銀の弓矢",attr:void 0,monType:"Fairy",atk:200,def:200},{name:"電撃鞭",attr:void 0,monType:"Thunder",atk:200,def:200},{name:"ドラゴンの秘宝",attr:void 0,monType:"Dragon",atk:200,def:200},{name:"フォロー・ウィンド",attr:void 0,monType:"WingedBeast",atk:200,def:200},{name:"魔性の月",attr:void 0,monType:"BeastWarrior",atk:200,def:200},{name:"エルフの光",attr:"Light",monType:void 0,atk:400,def:-200},{name:"覚醒",attr:"Earth",monType:void 0,atk:400,def:-200},{name:"灼熱の槍",attr:"Fire",monType:void 0,atk:400,def:-200},{name:"突風の扇",attr:"Wind",monType:void 0,atk:400,def:-200},{name:"はがねの甲羅",attr:"Water",monType:void 0,atk:400,def:-200},{name:"闇の破神剣",attr:"Dark",monType:void 0,atk:400,def:-200},{name:"火器付機甲鎧",attr:void 0,monType:"Insect",atk:700,def:0},{name:"サラマンドラ",attr:"Fire",monType:void 0,atk:700,def:0},{name:"シャイン・キャッスル",attr:"Light",monType:void 0,atk:700,def:0}].map(e=>({name:e.name,actions:[N(t=>(!e.attr||t.attr.includes(e.attr))&&(!e.monType||t.types.includes(e.monType))),g],continuousEffects:[G(e.name,"Spell",t=>t.info.equipedBy?[t.info.equipedBy]:[],t=>t.isOnFieldStrictly&&t.face==="FaceUp",t=>{const a=[];return e.atk!==0&&a.push(["attack",e.atk]),e.def!==0&&a.push(["defense",e.def]),a.map(([i,r])=>D.createContinuous("発動",n=>n.isSpawnedBy.isOnFieldStrictly&&n.isSpawnedBy.face==="FaceUp",t,(n,l)=>l.isOnFieldStrictly&&l.face==="FaceUp"&&(!e.monType||l.types.includes(e.monType))&&(!e.attr||l.attr.includes(e.attr)),i,"wip","Addition",(n,l,c)=>n.isEffective?c+r:c))})]}))}const Pt=Object.freeze(Object.defineProperty({__proto__:null,default:Me},Symbol.toStringTag,{value:"Module"}));function*xe(){yield*[{name:"草原",up:["Warrior","BeastWarrior"],down:[]},{name:"森",up:["Insect","Plant","Beast","BeastWarrior"],down:[]},{name:"山",up:["Dragon","WingedBeast","Thunder"],down:[]},{name:"荒野",up:["Dinosaur","Zombie","Rock"],down:[]},{name:"海",up:["Aqua","SeaSerpent","Fish"],down:["Machine","Pyro"]},{name:"闇",up:["Fiend","Spellcaster"],down:["Fairy"]}].map(e=>({name:e.name,actions:[{title:"発動",isMandatory:!1,playType:"CardActivation",spellSpeed:"Normal",executableCells:["Hand","SpellAndTrapZone"],executablePeriods:["main1","main2"],executableDuelistTypes:["Controller"],validate:y,prepare:k,execute:async()=>!0,settle:async()=>!0},g],continuousEffects:[$("発動","Spell",t=>t.isOnFieldStrictly&&t.face==="FaceUp",t=>["attack","defense"].flatMap(a=>["up","down"].map(i=>D.createContinuous("発動",r=>r.isSpawnedBy.isOnFieldStrictly&&r.isSpawnedBy.face==="FaceUp",t,(r,n)=>n.isOnFieldStrictly&&n.face==="FaceUp"&&(n.status.monsterCategories??!1)&&e[i].union(n.types).length>0,a,"wip","Addition",(r,n,l)=>!r.isEffective||n.face==="FaceDown"?l:l+(i==="up"?200:-200)))))]})),yield*[{name:"バーニングブラッド",attr:"Fire"},{name:"ウォーターワールド",attr:"Water"},{name:"ガイアパワー",attr:"Earth"},{name:"シャインスパーク",attr:"Light"},{name:"ダークゾーン",attr:"Dark"},{name:"デザートストーム",attr:"Wind"}].map(e=>({name:e.name,actions:[{title:"発動",isMandatory:!1,playType:"CardActivation",spellSpeed:"Normal",executableCells:["Hand","FieldSpellZone"],executablePeriods:["main1","main2"],executableDuelistTypes:["Controller"],validate:y,prepare:k,execute:async()=>!0,settle:async()=>!0},g],continuousEffects:[$("発動","Spell",t=>t.isOnFieldStrictly&&t.face==="FaceUp",t=>["attack","defense"].flatMap(a=>D.createContinuous("発動",i=>i.isSpawnedBy.isOnFieldStrictly&&i.isSpawnedBy.face==="FaceUp",t,(i,r)=>r.isOnFieldStrictly&&r.face==="FaceUp"&&r.attr.includes(e.attr),a,"wip","Addition",(i,r,n)=>!i.isEffective||r.face==="FaceDown"?n:n+(a==="attack"?500:-400))))]}))}const Ot=Object.freeze(Object.defineProperty({__proto__:null,default:xe},Symbol.toStringTag,{value:"Module"})),De=e=>{if(!(e.activator.info.ruleNormalSummonCount>=e.activator.info.maxRuleNormalSummonCount)&&e.action.entity.lvl)if(e.action.entity.lvl<5){const t=e.activator.getEnableSummonList(e.activator,"NormalSummon",["Rule"],e.action,[{monster:e.action.entity,posList:["Attack","Set"],cells:e.activator.getMonsterZones()}],[],!1);return t.length?t.flatMap(a=>a.cells).getDistinct():void 0}else{const t=e.activator.getMonstersOnField().filter(r=>r.canBeReleased(e.activator,e.action.entity,["AdvanceSummonRelease"],e.action)),a=e.action.entity.lvl<7?1:2;if(t.length<a)return;if(t.getAllOnOffPattern().filter(r=>r.length===a).some(r=>e.activator.getEnableSummonList(e.activator,"AdvanceSummon",["Rule","NormalSummon"],e.action,[{monster:e.action.entity,posList:["Attack","Set"],cells:e.activator.getMonsterZones()}],r.map(n=>({material:n,cell:n.fieldCell})),!1).length))return[]}},we=async(e,t,a)=>{if(!e.action.entity.lvl)return;if(e.action.entity.lvl<5)return{};const i=e.activator.getAvailableMonsterZones();let r=e.activator.getMonstersOnField().filter(s=>s.canBeReleased(e.activator,e.action.entity,["AdvanceSummonRelease"],e.action));const n=e.activator.getExtraMonsterZones(),l=e.action.entity.lvl<7?1:2;n.length>=l&&(r=r.filter(s=>s.fieldCell.cellType!=="ExtraMonsterZone"));const c=await e.activator.waitSelectEntities(r,l,s=>(a||s.length>0)&&(l<0||s.length===l)&&(i.length>0||s.some(p=>p.fieldCell.cellType==="ExtraMonsterZone")),"リリースするモンスターを選択",a??!1)??[];return c.length?(await T.releaseManyForTheSameReason(c,["Cost","AdvanceSummonRelease","Rule"],e.action.entity,e.activator),{summonMaterialInfos:c.map(s=>({material:s,cell:s.fieldCell}))}):void 0},_e=async e=>{var r;const t=["Rule","NormalSummon"];let a="NormalSummon";(r=e.costInfo.summonMaterialInfos)!=null&&r.length&&(a="AdvanceSummon",t.push("AdvanceSummon"));const i=e.dest?[e.dest]:e.activator.getAvailableMonsterZones();return F(e,a,t,["Attack","Set"],i)},F=async(e,t,a,i,r)=>{let n=r;return n||(n=e.activator.getMonsterZones(),e.action.entity.fieldCell.cellType==="ExtraDeck"&&n.push(...e.activator.duel.field.getCells("ExtraMonsterZone"))),await e.activator.summon(t,a,e.action,e.action.entity,i,n,e.costInfo.summonMaterialInfos??[],!1),{selectedEntities:[],chainBlockTags:[],prepared:void 0}},L=async e=>{var t,a;return e.action.entity.info.isRebornable=!((t=e.action.entity.origin.monsterCategories)!=null&&t.includes("RegularSpecialSummonOnly")),e.action.entity.determine(),(a=e.costInfo.summonMaterialInfos)==null||a.map(i=>i.material).forEach(i=>i.onUsedAsMaterial(e,e.action.entity)),!0},C={title:"通常召喚",isMandatory:!1,playType:"NormalSummon",spellSpeed:"Normal",executableCells:["Hand"],executablePeriods:["main1","main2"],executableDuelistTypes:["Controller"],validate:De,payCosts:we,prepare:_e,execute:L,settle:async()=>!0},V=(e,t,a)=>{const i=e.activator.getMonsterZones();if(e.action.entity.fieldCell.cellType==="ExtraDeck"&&i.push(...e.activator.getAvailableExtraZones()),!!e.activator.getEnableSummonList(e.activator,"SpecialSummon",["Rule"],e.action,[{monster:e.action.entity,posList:t,cells:i}],a,!1).length)return a.length===0?i:[]},Be=e=>{if(!e.activator.isTurnPlayer)return;const t=e.action.entity.getAttackTargets();return t.length?t.map(a=>a.fieldCell):void 0},Ae=async e=>{var i;if(e.action.entity.info.attackCount>0||e.action.entity.battlePosition!=="Attack")return;if((i=e.dest)!=null&&i.targetForAttack){const r=e.dest.entities.find(n=>n.entityType==="Duelist");return{selectedEntities:r?[r]:e.dest.cardEntities,chainBlockTags:[],prepared:void 0}}const t=e.action.entity.getAttackTargets();if(t.length===0)throw new x("想定されない状態",e);if(t.length===1)return{selectedEntities:t,chainBlockTags:[],prepared:void 0};if(e.activator.duelistType==="NPC"){let r=e.activator.selectAttackTargetForNPC(e.action.entity,e.action);return r||(e.activator.duel.log.warn("NPCの攻撃対象選択に失敗したため、ランダムに攻撃対象を選択。"),r=t.randomPick()),{selectedEntities:[r],chainBlockTags:[],prepared:void 0}}const a=await e.activator.waitSelectEntity(t,"攻撃対象を選択。",!0);if(a)return{selectedEntities:[a],chainBlockTags:[],prepared:void 0}},Pe=async e=>(e.action.entity.field.duel.declareAnAttack(e.action.entity,e.selectedEntities[0]),!0),u={title:"攻撃宣言",isMandatory:!1,playType:"Battle",spellSpeed:"Normal",executableCells:["MonsterZone","ExtraMonsterZone"],executablePeriods:["b1Battle","b2Battle"],executableDuelistTypes:["Controller"],validate:Be,prepare:Ae,execute:Pe,settle:async()=>!0},se=async e=>{if(!(e.action.entity.info.battlePotisionChangeCount>0||!e.activator.isTurnPlayer))return await e.action.entity.setBattlePosition(e.action.entity.battlePosition==="Attack"?"Defense":"Attack",["Rule"],e.action.entity,e.activator),e.action.entity.info.battlePotisionChangeCount++,{selectedEntities:[],chainBlockTags:[],prepared:void 0}},v={title:"反転召喚",isMandatory:!1,playType:"FlipSummon",spellSpeed:"Normal",executableCells:["MonsterZone","ExtraMonsterZone"],executablePeriods:["main1","main2"],executableDuelistTypes:["Controller"],validate:e=>e.action.entity.info.battlePotisionChangeCount===0&&e.action.entity.info.attackCount===0&&e.activator.isTurnPlayer&&e.action.entity.face==="FaceDown"?[]:void 0,prepare:se,execute:async e=>(e.action.entity.determine(),!0),settle:async()=>!0},d={title:"表示形式変更",isMandatory:!1,playType:"ChangeBattlePosition",spellSpeed:"Normal",executableCells:["MonsterZone","ExtraMonsterZone"],executablePeriods:["main1","main2"],executableDuelistTypes:["Controller"],validate:e=>e.action.entity.info.battlePotisionChangeCount===0&&e.action.entity.info.attackCount===0&&e.activator.isTurnPlayer&&e.action.entity.face==="FaceUp"?[]:void 0,prepare:se,execute:async e=>(e.action.entity.determine(),!0),settle:async()=>!0},A=async(e,t=["Attack","Defense"])=>{const a=e.activator.getMonsterZones();return e.action.entity.wasMovedAfter(e.isActivatedAt)?!1:(await e.activator.summon("SpecialSummon",["Effect"],e.action,e.action.entity,t,a,[],!1),!0)},Ft=[u,d,v,C],Lt=(e,t,a,i,r,n,l,c,o,s,p)=>{const f={posList:o,cells:s},E={posList:[],cells:[]};return t!==l||l.kind!=="Monster"||!l.origin.monsterCategories?f:l.origin.monsterCategories.includes("NormalSummonOnly")?r.includes("NormalSummon")||r.includes("AdvanceSummon")?f:E:l.origin.monsterCategories.includes("SpecialSummon")?l.isInTrashCell&&!l.origin.monsterCategories.includes("RegularSpecialSummonOnly")?l.info.isRebornable||l.origin.monsterCategories.includes("FreeReborn")?f:E:r.includes("PendulumSummon")&&l.origin.monsterCategories.includes("FreeReborn")?E:r.union(oe).length?f:l.origin.monsterCategories.includes("RegularSpecialSummonOnly")?p?f:E:f:f},U={},Oe=e=>(U[e]||(U[e]={title:`戦闘破壊耐性(${e})`,isMandatory:!0,executableCells:["MonsterZone"],executablePeriods:["b1DDmgCalc","b2DDmgCalc"],executableDuelistTypes:["Controller"],isOnlyNTimesPerTurnIfFaceup:e,isApplicableTo:(t,a,i)=>i.includes(t.entity)?a!=="BattleDestroy"?[]:[t.entity]:[],substitute:async(t,a,i)=>i.includes(t.entity)?a!=="BattleDestroy"?[]:t.entity.isEffective?(t.entity.controller.writeInfoLog(`${t.entity.toString()}は１ターンに１度だけ戦闘では破壊されない。`),[t.entity]):[]:[]}),U[e]),Y=e=>e.activator.canRelease([e.action.entity])&&e.action.entity.canBeReleased(e.activator,e.action.entity,["ReleaseAsCost"],e.action),I=async e=>(await e.action.entity.release(["Cost"],e.action.entity,e.activator),{release:[e.action.entity]}),ce=e=>({title:"シンクロ召喚",isMandatory:!1,playType:"QuickEffect",spellSpeed:"Quick",executableCells:w,executablePeriods:["main1","main2"],executableDuelistTypes:["Controller"],isOnlyNTimesPerChain:1,validate:t=>t.activator.isTurnPlayer?void 0:t.activator.getExtraDeck().cardEntities.filter(i=>{var r;return(r=i.status.monsterCategories)==null?void 0:r.includes("Syncro")}).flatMap(i=>i.actions).filter(i=>i.playType==="SpecialSummon").map(i=>({index:-1,chainNumber:void 0,action:i,activator:t.activator,targetChainBlock:void 0,isActivatedIn:i.entity.fieldCell,isActivatedAt:t.isActivatedAt,costInfo:{},state:"unloaded",dest:void 0,ignoreCost:!1})).some(i=>i.action.getEnableMaterialPatterns(i).some(r=>{const n=r.map(l=>l.material);return n.every(l=>l.controller===t.activator)&&n.every(l=>l.isOnFieldAsMonsterStrictly)&&n.includes(t.action.entity)}))?[]:void 0,prepare:k,execute:async t=>{if(t.activator!==t.action.entity.controller||t.activator.getMonstersOnField().filter(l=>l.lvl!==void 0).length<2)return!1;const a=t.activator.getExtraDeck().cardEntities.filter(l=>{var c;return(c=l.status.monsterCategories)==null?void 0:c.includes("Syncro")}).flatMap(l=>l.actions).filter(l=>l.playType==="SpecialSummon").map(l=>({index:-1,chainNumber:void 0,action:l,activator:t.activator,targetChainBlock:void 0,isActivatedIn:l.entity.fieldCell,isActivatedAt:t.isActivatedAt,costInfo:{},state:"unloaded",dest:void 0,ignoreCost:!1})).filter(l=>l.action.getEnableMaterialPatterns(l).some(c=>{const o=c.map(s=>s.material);return o.every(s=>s.controller===t.activator)&&o.every(s=>s.isOnFieldAsMonsterStrictly)&&o.includes(t.action.entity)})).map(l=>l.action.entity).getDistinct();if(!a.length)return!1;const i=await t.activator.waitSelectEntities(a,1,l=>l.length===1,"シンクロ召喚するモンスターを選択。",!1)??[];if(!i.length)throw new x("想定されない状態",t);const r=i[0].actions.find(l=>l.playType==="SpecialSummon");if(!r)throw new x("想定されない状態",t);const n=r.getClone(l=>{const c=l.map(o=>o.material);return c.every(o=>o.controller===t.activator)&&c.every(o=>o.isOnFieldAsMonsterStrictly)&&c.includes(t.action.entity)});return t.nextActionInfo={action:n,originSeq:n.seq},!0},settle:async()=>!0,...e}),Fe=ie("直接攻撃","Monster",e=>[e],()=>!0,e=>[new R("直接攻撃",()=>!0,!0,e,{},(t,a)=>t.isSpawnedBy===a,(t,a)=>({...a,canDirectAttack:!0}))]),Le=(e,t,a,i)=>{if(!e.action.entity.origin.link||e.action.entity.origin.link<a.length)return;let r=a.map(l=>({material:l,cell:l.fieldCell,link:1}));if(e.action.entity.origin.link>a.length){if(a.every(o=>(o.origin.link??1)<2))return;const l=[r];a.filter(o=>(o.origin.link??1)>1).forEach(o=>{[...l].forEach(s=>{l.push([...s.filter(p=>p.material!==o),{material:o,cell:o.fieldCell,link:o.origin.link??1}])})});const c=l.find(o=>o.reduce((s,p)=>s+p.link,0)===e.action.entity.origin.link);if(!c)return;r=c}if(!i(a)||!e.activator.getEnableSummonList(e.activator,"LinkSummon",["Rule","SpecialSummon"],e.action,[{monster:e.action.entity,posList:["Attack"],cells:t}],r,!1).length)return;if(e.activator.getAvailableExtraZones().length)return r;const n=e.activator.duel.field.getCells("ExtraMonsterZone").map(l=>l.cardEntities[0]).filter(l=>l);if(n.filter(l=>l.controller===e.activator).length&&n.filter(l=>l.controller===e.activator).length===a.filter(l=>l.fieldCell.cellType==="ExtraMonsterZone").length||e.activator.getMonsterZones().flatMap(l=>l.linkArrowSources).some(l=>!a.includes(l))||e.activator.duel.field.canExtraLink(e.action.entity,r))return r},Ne=(e,t=()=>!0)=>{let a=[...e.activator.getMonstersOnField().filter(r=>r.battlePosition!=="Set"),...e.activator.getHandCell().entities.filter(r=>r.origin.kind==="Monster")];if(a.every(r=>!r.status.allowHandLink)&&(a=a.filter(r=>r.fieldCell.isPlayFieldCell)),a.length<1)return[];const i=[...e.activator.getMonsterZones(),...e.activator.duel.field.getAvailableExtraMonsterZones()];return a.getAllOnOffPattern().filter(r=>r.some(n=>n.status.allowHandLink)||r.every(n=>n.isOnFieldAsMonsterStrictly)).map(r=>Le(e,i,r,t)??[]).filter(r=>r.length)},Ze=async(e,t,a)=>{var o;const i=e.action.getEnableMaterialPatterns(e),r=i.map(s=>({infos:s,materialSeqList:s.map(p=>p.material.seq).sort()}));let n=i[0].map(s=>s.material);if(i.length>1){const s=i.flatMap(f=>f.map(E=>E.material)).getDistinct(),p=await e.action.entity.duel.view.waitSelectEntities(e.activator,{selectables:s,qty:void 0,validator:f=>{const E=f.map(m=>m.seq).sort();return r.some(m=>E.length===m.materialSeqList.length&&E.every((Z,H)=>Z===m.materialSeqList[H]))},cancelable:a},"リンク素材とするモンスターを選択");if(!p)return;n=p}const l=n.map(s=>s.seq).sort(),c=(o=r.find(s=>l.length===s.materialSeqList.length&&l.every((p,f)=>p===s.materialSeqList[f])))==null?void 0:o.infos;if(!c)throw new x("想定されない状態",e,n);return await T.sendManyToGraveyardForTheSameReason(n,["LinkMaterial","Cost","Rule","SpecialSummonMaterial"],e.action.entity,e.activator),{summonMaterialInfos:c}},ee=(e=()=>!0)=>({title:"リンク召喚",isMandatory:!1,playType:"SpecialSummon",spellSpeed:"Normal",executableCells:["ExtraDeck"],executablePeriods:["main1","main2"],executableDuelistTypes:["Controller"],getEnableMaterialPatterns:t=>Ne(t,e),canPayCosts:t=>t.action.getEnableMaterialPatterns(t).length>0,validate:t=>!t.ignoreCost||t.activator.getAvailableExtraZones().length+t.activator.getAvailableMonsterZones().length>0?[]:void 0,payCosts:Ze,prepare:t=>F(t,"LinkSummon",["Rule","SpecialSummon","LinkSummon"],["Attack"]),execute:L,settle:async()=>!0});function*He(){yield*[{name:"ＬＡＮフォリンクス",validator:e=>e.length===2},{name:"トラフィックゴースト",validator:e=>e.length===3},{name:"天威の鬼神",validator:e=>e.length>1&&e.some(t=>{var a;return(a=t.status.monsterCategories)==null?void 0:a.includes("Link")})},{name:"天威の拳僧",validator:e=>e.every(t=>{var a,i;return((a=t.status.nameTags)==null?void 0:a.includes("天威"))&&!((i=t.status.monsterCategories)!=null&&i.includes("Link"))})},{name:"電影の騎士ガイアセイバー",validator:e=>e.length>1}].map(e=>({name:e.name,actions:[u,ee(e.validator)]}))}const Nt=Object.freeze(Object.defineProperty({__proto__:null,default:He},Symbol.toStringTag,{value:"Module"}));function*qe(){yield*["サイバー・ドラゴン","六武衆のご隠居","アンノウン・シンクロン"].map(e=>({name:e,actions:[C,u,d,v,{title:"特殊召喚",isMandatory:!1,playType:"SpecialSummon",spellSpeed:"Normal",executableCells:["Hand"],executablePeriods:["main1","main2"],executableDuelistTypes:["Controller"],isOnlyNTimesPerDuel:e==="アンノウン・シンクロン"?1:void 0,validate:t=>{const a=t.action.entity.field.getMonstersOnFieldStrictly();if(!(a.length==0||a.some(i=>i.controller===t.activator)))return V(t,b,[])},prepare:t=>F(t,"SpecialSummon",["SpecialSummon","Rule"],b),execute:L,settle:async()=>!0}]})),yield{name:"ジャンク・フォアード",actions:[C,u,d,v,{title:"特殊召喚",isMandatory:!1,playType:"SpecialSummon",spellSpeed:"Normal",executableCells:["Hand"],executablePeriods:["main1","main2"],executableDuelistTypes:["Controller"],validate:e=>{if(!e.activator.getMonstersOnField().length)return V(e,b,[])},prepare:e=>F(e,"SpecialSummon",["SpecialSummon","Rule"],b),execute:L,settle:async()=>!0}]},yield{name:"Ｄ－ＨＥＲＯ ディアボリックガイ",actions:[C,u,d,v,{title:"①リクルート",isMandatory:!1,playType:"IgnitionEffect",spellSpeed:"Normal",executableCells:["Graveyard"],executablePeriods:["main1","main2"],executableDuelistTypes:["Controller"],priorityForNPC:10,canPayCosts:j,validate:e=>e.activator.getDeckCell().cardEntities.filter(a=>a.nm==="Ｄ－ＨＥＲＯ ディアボリックガイ").length===0?void 0:e.activator.getAvailableMonsterZones().length>0?[]:void 0,payCosts:z,prepare:async()=>({selectedEntities:[],chainBlockTags:["SpecialSummonFromDeck"],prepared:void 0}),execute:async e=>{const t=e.activator.getDeckCell().cardEntities.find(a=>a.nm==="Ｄ－ＨＥＲＯ ディアボリックガイ");return t?ye(e,[t]):!1},settle:async()=>!0}]},yield{name:"ゾンビキャリア",actions:[C,u,d,v,{title:"①自己再生",isMandatory:!1,playType:"IgnitionEffect",spellSpeed:"Normal",executableCells:["Graveyard"],executablePeriods:["main1","main2"],executableDuelistTypes:["Controller"],canPayCosts:e=>e.activator.getHandCell().cardEntities.length>0,validate:e=>e.activator.getAvailableMonsterZones().length>0?[]:void 0,payCosts:async(e,t,a)=>{const i=e.activator.getHandCell().cardEntities,r=await e.activator.waitSelectEntity(i,"デッキトップに戻すカードを一枚選択。",a);if(!r)throw new M(e);return await r.returnToDeck("Top",["Cost"],e.action.entity,e.activator),{returnToDeck:[r]}},prepare:async()=>({selectedEntities:[],chainBlockTags:["SpecialSummonFromGraveyard"],prepared:void 0}),execute:async e=>(e.action.entity.info.willBeBanished=await A(e),e.action.entity.info.willBeBanished),settle:async()=>!0}]},yield{name:"グローアップ・バルブ",actions:[C,u,d,v,{title:"①自己再生",isMandatory:!1,playType:"IgnitionEffect",spellSpeed:"Normal",executableCells:["Graveyard"],executablePeriods:["main1","main2"],executableDuelistTypes:["Controller"],isOnlyNTimesPerDuel:1,canPayCosts:e=>e.activator.getDeckCell().cardEntities.length>0,validate:e=>e.activator.getAvailableMonsterZones().length>0?[]:void 0,payCosts:async e=>{const t=e.activator.getDeckCell().cardEntities[0];return await e.activator.getDeckCell().cardEntities[0].sendToGraveyard(["Cost"],e.action.entity,e.activator),{sendToGraveyard:[t]}},prepare:async()=>({selectedEntities:[],chainBlockTags:["SpecialSummonFromGraveyard"],prepared:void 0}),execute:e=>A(e),settle:async()=>!0}]},yield{name:"終末の騎士",actions:[C,u,d,v,{title:"①墓地送り",isMandatory:!1,playType:"TriggerEffect",spellSpeed:"Normal",executableCells:["MonsterZone"],executablePeriods:[...S,...h],executableDuelistTypes:["Controller"],validate:e=>{if(e.action.entity.hasBeenSummonedNow(["NormalSummon","SpecialSummon","FlipSummon"])&&e.activator.getDeckCell().cardEntities.filter(t=>t.attr.includes("Dark")).length!==0)return[]},prepare:async e=>{const t=["SendToGraveyardFromDeck"];return e.action.entity.moveLog.latestRecord.movedAs.includes("NormalSummon")?t.push("IfNormarlSummonSucceed"):t.push("IfSpecialSummonSucceed"),{selectedEntities:[],chainBlockTags:t,prepared:void 0}},execute:async e=>{const t=e.activator.getDeckCell().cardEntities.filter(a=>a.attr.includes("Dark"));return t.length===0?!1:(await e.action.entity.field.sendToGraveyard("墓地に送るモンスターを選択",e.activator,t,1,a=>a.length===1,["Effect"],e.action.entity,!1),e.activator.getDeckCell().shuffle(),!0)},settle:async()=>!0}]},yield{name:"マスマティシャン",actions:[C,u,d,v,{title:"①墓地送り",isMandatory:!1,playType:"TriggerEffect",spellSpeed:"Normal",executableCells:["MonsterZone"],executablePeriods:[...S,...h],executableDuelistTypes:["Controller"],validate:e=>{if(e.action.entity.hasBeenSummonedNow(["NormalSummon"])&&e.activator.getDeckCell().cardEntities.find(t=>(t.lvl??5)<5))return[]},prepare:async()=>({selectedEntities:[],chainBlockTags:["IfNormarlSummonSucceed","SendToGraveyardFromDeck"],prepared:void 0}),execute:async e=>{const t=e.activator.getDeckCell().cardEntities.filter(a=>(a.lvl??5)<5);return t.length===0?!1:(await e.action.entity.field.sendToGraveyard("墓地に送るモンスターを選択",e.activator,t,1,a=>a.length===1,["Effect"],e.action.entity,!1),e.activator.getDeckCell().shuffle(),!0)},settle:async()=>!0},{title:"②ドロー",isMandatory:!1,playType:"TriggerEffect",spellSpeed:"Normal",executableCells:["Graveyard"],executablePeriods:[...S,...h],executableDuelistTypes:["Controller"],validate:e=>{if(e.action.entity.face!=="FaceDown"&&e.action.entity.moveLog.latestRecord.movedAs.includes("BattleDestroy")&&e.action.entity.wasMovedAtPreviousChain&&e.activator.getDeckCell().cardEntities.length!==0)return[]},prepare:async()=>({selectedEntities:[],chainBlockTags:["Draw"],prepared:void 0}),execute:async e=>(await e.activator.draw(1,e.action.entity,e.activator),!0),settle:async()=>!0}]},yield{name:"ライトロード・ビースト ウォルフ",actions:[u,d,v,{title:"①自己再生",isMandatory:!0,playType:"TriggerEffect",spellSpeed:"Normal",executableCells:["Graveyard"],executablePeriods:[...S,...h],executableDuelistTypes:["Controller"],validate:e=>{if(!e.action.entity.wasMovedAtPreviousChain||e.action.entity.wasMovedFrom.cellType!=="Deck")return;const t=e.activator.getMonsterZones();return e.activator.getEnableSummonList(e.activator,"SpecialSummon",["Effect"],e.action,[{monster:e.action.entity,posList:b,cells:t}],[],!1).length?[]:void 0},prepare:async()=>({selectedEntities:[],chainBlockTags:["SpecialSummonFromGraveyard"],prepared:void 0}),execute:e=>A(e),settle:async()=>!0}]},yield{name:"伝説の白石",actions:[u,d,v,C,{title:"①サーチ",isMandatory:!0,playType:"TriggerEffect",spellSpeed:"Normal",executableCells:["Graveyard"],executablePeriods:B,executableDuelistTypes:["Controller"],validate:e=>{if(e.action.entity.wasMovedAtPreviousChain&&e.action.entity.wasMovedFrom.cellType!=="Banished")return e.activator.getDeckCell().cardEntities.find(t=>t.nm==="青眼の白龍")?[]:void 0},prepare:async()=>({selectedEntities:[],chainBlockTags:["SearchFromDeck"],prepared:void 0}),execute:async e=>{const t=e.activator.getDeckCell().cardEntities.find(a=>a.nm==="青眼の白龍");return t?(await t.addToHand(["Effect"],e.action.entity,e.activator),e.activator.getDeckCell().shuffle(),!0):!1},settle:async()=>!0}]},yield*[{name:"灰流うらら",chainBlockTags:["Draw","SearchFromDeck","SendToGraveyardFromDeck","SpecialSummonFromDeck"]},{name:"屋敷わらし",chainBlockTags:["BanishFromGraveyard","SpecialSummonFromGraveyard","AddToHandFromGraveyard"]}].map(e=>({name:e.name,actions:[u,d,v,C,{title:"①無効化",isMandatory:!1,playType:"QuickEffect",spellSpeed:"Quick",executableCells:["Hand"],executablePeriods:S,executableDuelistTypes:["Controller"],isOnlyNTimesPerTurn:1,negatePreviousBlock:!0,canPayCosts:t=>t.activator.canDiscard([t.action.entity]),validate:(t,a)=>a.length===0?void 0:a[t.index-1].chainBlockTags.union(e.chainBlockTags).length>0?[]:void 0,payCosts:async t=>(await t.action.entity.discard(["Cost"],t.action.entity,t.activator),{sendToGraveyard:[t.action.entity]}),prepare:async()=>({selectedEntities:[],chainBlockTags:["NegateCardEffect"],prepared:void 0}),execute:async(t,a)=>{const i=a[t.index-1];return i.isNegatedEffectBy=t.action,!0},settle:async()=>!0}]})),yield*["翻弄するエルフの剣士","ロードランナー","氷結界の修験者"].map(e=>({name:e,actions:[u,d,v,C],continuousEffects:[re("①戦闘破壊耐性","Monster",t=>[t],()=>!0,t=>[new J("①戦闘破壊耐性",()=>!0,!0,t,{},()=>!0,["BattleDestroy"],(a,i)=>!t.isEffective||(i.atk??0)<1900?!0:(t.duel.log.info(`${t.toString()}は攻撃力1900以上のモンスターとの先頭では破壊されない。`,t.controller),!1))])]}))}const Zt=Object.freeze(Object.defineProperty({__proto__:null,default:qe},Symbol.toStringTag,{value:"Module"}));function*Ge(){yield*["ラージマウス","レインボー・フラワー","レッグル","女王の影武者","人造人間７号"].map(e=>({name:e,actions:[u,d,v,C],continuousEffects:[Fe]}))}const Ht=Object.freeze(Object.defineProperty({__proto__:null,default:Ge},Symbol.toStringTag,{value:"Module"}));function*Re(){yield*[{name:"キラー・ポテト",filter:e=>e.attr.includes("Dark")&&(e.atk??9999)<=1500,qtyList:[1],posList:["Attack"],destoryTypes:["EffectDestroy"],executableCells:["Graveyard"]},{name:"キラー・トマト",filter:e=>e.attr.includes("Dark")&&(e.atk??9999)<=1500,qtyList:[1],posList:["Attack"],destoryTypes:["BattleDestroy"],executableCells:["Graveyard"]},{name:"巨大ネズミ",filter:e=>e.attr.includes("Earth")&&(e.atk??9999)<=1500,qtyList:[1],posList:["Attack"],destoryTypes:["BattleDestroy"],executableCells:["Graveyard"]},{name:"グリズリーマザー",filter:e=>e.attr.includes("Water")&&(e.atk??9999)<=1500,qtyList:[1],posList:["Attack"],destoryTypes:["BattleDestroy"],executableCells:["Graveyard"]},{name:"シャインエンジェル",filter:e=>e.attr.includes("Light")&&(e.atk??9999)<=1500,qtyList:[1],posList:["Attack"],destoryTypes:["BattleDestroy"],executableCells:["Graveyard"]},{name:"ドラゴンフライ",filter:e=>e.attr.includes("Wind")&&(e.atk??9999)<=1500,qtyList:[1],posList:["Attack"],destoryTypes:["BattleDestroy"],executableCells:["Graveyard"]},{name:"ＵＦＯタートル",filter:e=>e.attr.includes("Fire")&&(e.atk??9999)<=1500,qtyList:[1],posList:["Attack"],destoryTypes:["BattleDestroy"],executableCells:["Graveyard"]},{name:"荒野の女戦士",filter:e=>e.attr.includes("Earth")&&e.types.includes("Warrior")&&(e.atk??9999)<=1500,qtyList:[1],posList:["Attack"],destoryTypes:["BattleDestroy"],executableCells:["Graveyard"]},{name:"リトル・トルーパー",filter:e=>e.types.includes("Warrior")&&(e.lvl??9999)<3,qtyList:[1],posList:["Set"],destoryTypes:["BattleDestroy"],executableCells:["Graveyard","Banished"]},{name:"破面竜",filter:e=>e.types.includes("Warrior")&&(e.def??9999)<=1500,qtyList:[1],posList:["Attack","Defense"],destoryTypes:["BattleDestroy"],executableCells:["Graveyard"]},{name:"共鳴虫",filter:e=>e.types.includes("Insect")&&(e.atk??9999)<=1500,qtyList:[1],posList:["Attack","Defense"],destoryTypes:["BattleDestroy"],executableCells:["Graveyard"]},{name:"ピラミッド・タートル",filter:e=>e.types.includes("Zombie")&&(e.def??9999)<=2e3,qtyList:[1],posList:["Attack","Defense"],destoryTypes:["BattleDestroy"],executableCells:["Graveyard"]},{name:"ユーフォロイド",filter:e=>e.types.includes("Machine")&&(e.atk??9999)<=1500,qtyList:[1],posList:["Attack"],destoryTypes:["BattleDestroy"],executableCells:["Graveyard"]},{name:"ヘル・セキュリティ",filter:e=>e.types.includes("Fiend")&&(e.lvl??9999)===1,qtyList:[1],posList:["Attack","Defense"],destoryTypes:["BattleDestroy"],executableCells:["Graveyard"]},{name:"ガスタ・イグル",filter:e=>(e.status.nameTags??[]).includes("ガスタ")&&(e.status.monsterCategories??[]).includes("Tuner"),qtyList:[1],posList:["Attack","Defense"],destoryTypes:["BattleDestroy"],executableCells:["Graveyard"]},{name:"幻影の魔術士",filter:e=>(e.status.nameTags??[]).includes("ＨＥＲＯ")&&(e.atk??9999)<=1e3,qtyList:[1],posList:["Defense"],destoryTypes:["BattleDestroy"],executableCells:["Graveyard"]},{name:"ジェネクス・サーチャー",filter:e=>(e.status.nameTags??[]).includes("ジェネクス")&&(e.atk??9999)<=1500,qtyList:[1],posList:["Attack"],destoryTypes:["BattleDestroy"],executableCells:["Graveyard"]},{name:"紫炎の足軽",filter:e=>(e.status.nameTags??[]).includes("六武衆")&&(e.lvl??12)<=3,qtyList:[1],posList:["Attack","Defense"],destoryTypes:["BattleDestroy"],executableCells:["Graveyard"]},{name:"スレイブ・エイプ",filter:e=>(e.status.nameTags??[]).includes("剣闘獣")&&(e.lvl??12)<=4,qtyList:[1],posList:["Attack","Defense"],destoryTypes:["BattleDestroy"],executableCells:["Graveyard"]},{name:"ゼンマイハニー",filter:e=>(e.status.nameTags??[]).includes("ゼンマイ")&&(e.lvl??12)<=4,qtyList:[1],posList:["Attack","Defense"],destoryTypes:["BattleDestroy"],executableCells:["Graveyard"]},{name:"ＸＸ－セイバー エマーズブレイド",filter:e=>(e.status.nameTags??[]).includes("Ｘ－セイバー")&&(e.lvl??12)<=4,qtyList:[1],posList:["Attack","Defense"],destoryTypes:["BattleDestroy"],executableCells:["Graveyard"]},{name:"軍隊竜",filter:e=>e.nm==="軍隊竜",qtyList:[1],posList:["Attack","Defense"],destoryTypes:["BattleDestroy"],executableCells:["Graveyard"]},{name:"アサルト・ガンドッグ",filter:e=>e.nm==="アサルト・ガンドッグ",qtyList:[1,2,3,4,5],posList:["Attack","Defense"],destoryTypes:["BattleDestroy"],executableCells:["Graveyard"]},{name:"ハイエナ",filter:e=>e.nm==="ハイエナ",qtyList:[1,2,3,4,5],posList:["Attack","Defense"],destoryTypes:["BattleDestroy"],executableCells:["Graveyard"]}].map(e=>({name:e.name,actions:[{title:"①リクルート",isMandatory:!1,playType:"TriggerEffect",spellSpeed:"Normal",executableCells:e.executableCells,executablePeriods:e.destoryTypes.includes("EffectDestroy")?[...S,...h]:["b1DEnd","b2DEnd"],executableDuelistTypes:["Controller"],validate:t=>{if(!t.action.entity.wasMovedAtPreviousChain)return;const a=t.activator.getMonsterZones();if(t.activator.getEnableSummonList(t.activator,"SpecialSummon",["Effect"],t.action,t.activator.getDeckCell().cardEntities.filter(e.filter).filter(r=>r.kind==="Monster").filter(r=>r.canBeTargetOfEffect(t)).map(r=>({monster:r,posList:e.posList,cells:a})),[],!1).length)return[]},prepare:async()=>({selectedEntities:[],chainBlockTags:["SpecialSummonFromDeck"],prepared:void 0}),execute:async t=>{const a=t.activator.getDeckCell().cardEntities.filter(e.filter),i=t.activator.getMonsterZones();return!!t.activator.summonMany(t.activator,"SpecialSummon",["Effect"],t.action,a.map(n=>({monster:n,posList:e.posList,cells:i})),[],!1,e.qtyList.length>1?void 0:e.qtyList[0],n=>e.qtyList.includes(n.length),!1)},settle:async()=>!0},u,d,v,C]}))}const qt=Object.freeze(Object.defineProperty({__proto__:null,default:Re},Symbol.toStringTag,{value:"Module"}));function*je(){yield{name:"おろかな埋葬",actions:[{title:"発動",isMandatory:!1,playType:"CardActivation",spellSpeed:"Normal",executableCells:["Hand","SpellAndTrapZone"],executablePeriods:["main1","main2"],executableDuelistTypes:["Controller"],priorityForNPC:40,validate:e=>{if(e.activator.getDeckCell().cardEntities.filter(t=>t.kind==="Monster").length!==0)return y(e)},prepare:async()=>({selectedEntities:[],chainBlockTags:["SendToGraveyardFromDeck"],prepared:void 0}),execute:async e=>{const t=e.activator.getDeckCell().cardEntities.filter(i=>i.kind==="Monster");if(t.length===0)return!1;const a=await e.activator.waitSelectEntity(t,"墓地に送るモンスターを選択",!1);if(!a)throw new M(e);return await a.sendToGraveyard(["Effect"],e.action.entity,e.activator),await e.activator.getDeckCell().shuffle(),!0},settle:async()=>!0},g]},yield{name:"おろかな副葬",actions:[{title:"発動",isMandatory:!1,playType:"CardActivation",spellSpeed:"Normal",executableCells:["Hand","SpellAndTrapZone"],executablePeriods:["main1","main2"],executableDuelistTypes:["Controller"],isOnlyNTimesPerTurn:1,priorityForNPC:40,validate:e=>{if(e.activator.getDeckCell().cardEntities.filter(t=>t.kind!=="Monster").length!==0)return y(e)},prepare:async()=>({selectedEntities:[],chainBlockTags:["SendToGraveyardFromDeck"],prepared:void 0}),execute:async e=>{const t=e.activator.getDeckCell().cardEntities.filter(i=>i.kind!=="Monster");if(t.length===0)return!1;const a=await e.activator.waitSelectEntity(t,"墓地に送る魔法罠を選択",!1);if(!a)throw new M(e);return await a.sendToGraveyard(["Effect"],e.action.entity,e.activator),!0},settle:async()=>!0},g]},yield{name:"死者蘇生",actions:[{title:"発動",isMandatory:!1,playType:"CardActivation",spellSpeed:"Normal",executableCells:["Hand","SpellAndTrapZone"],executablePeriods:["main1","main2"],executableDuelistTypes:["Controller"],hasToTargetCards:!0,validate:e=>{const t=e.activator.getMonsterZones();if(e.activator.getEnableSummonList(e.activator,"SpecialSummon",["Effect"],e.action,e.activator.duel.field.getCells("Graveyard").flatMap(i=>i.cardEntities).filter(i=>i.kind==="Monster").filter(i=>i.canBeTargetOfEffect(e)).map(i=>({monster:i,posList:b,cells:t})),[],!1).length)return y(e)},prepare:e=>P(e,e.activator.duel.field.getCells("Graveyard").flatMap(t=>t.cardEntities).filter(t=>t.kind==="Monster").filter(t=>t.canBeTargetOfEffect(e))),execute:async e=>O(e),settle:async()=>!0},g]},yield*[{name:"大嵐",cellTypes:q,isOnlyEnemies:!1},{name:"ハーピィの羽根帚",cellTypes:q,isOnlyEnemies:!0},{name:"ブラック・ホール",cellTypes:w,isOnlyEnemies:!1},{name:"サンダー・ボルト",cellTypes:w,isOnlyEnemies:!0}].map(e=>({name:e.name,actions:[{title:"発動",isMandatory:!1,playType:"CardActivation",spellSpeed:"Normal",executableCells:["Hand","SpellAndTrapZone"],executablePeriods:["main1","main2"],executableDuelistTypes:["Controller"],validate:t=>{let a=t.action.entity.field.getCells(...e.cellTypes).flatMap(i=>i.cardEntities).filter(i=>i!==t.action.entity);if(e.isOnlyEnemies&&(a=a.filter(i=>i.controller!==t.activator)),!!a.length)return y(t)},prepare:async t=>{let a=t.action.entity.field.getCells(...e.cellTypes).flatMap(i=>i.cardEntities).filter(i=>i!==t.action.entity);return e.isOnlyEnemies&&(a=a.filter(i=>i.controller!==t.activator)),{selectedEntities:[],chainBlockTags:t.action.calcChainBlockTagsForDestroy(a),prepared:void 0}},execute:async t=>{let a=t.action.entity.field.getCells(...e.cellTypes).flatMap(i=>i.cardEntities).filter(i=>i!==t.action.entity);return e.isOnlyEnemies&&(a=a.filter(i=>i.controller!==t.activator)),await T.tryDestroy(a,t),!0},settle:async()=>!0},g]})),yield{name:"ハリケーン",actions:[{title:"発動",isMandatory:!1,playType:"CardActivation",spellSpeed:"Normal",executableCells:["Hand","SpellAndTrapZone"],executablePeriods:["main1","main2"],executableDuelistTypes:["Controller"],validate:e=>{if(e.action.entity.field.getCells("SpellAndTrapZone","FieldSpellZone").flatMap(a=>a.cardEntities).filter(a=>a!==e.action.entity).length)return y(e)},prepare:async()=>({selectedEntities:[],chainBlockTags:["BounceToHand"],prepared:void 0}),execute:async(e,t)=>{const a=t.map(r=>r.action).filter(r=>r.playType==="CardActivation").map(r=>r.entity).filter(r=>r.isOnFieldStrictly).filter(r=>r.face==="FaceUp").filter(r=>!r.isLikeContinuousSpell),i=e.action.entity.field.getCells("SpellAndTrapZone","FieldSpellZone").flatMap(r=>r.cardEntities).filter(r=>!a.includes(r));return await T.returnManyToHandForTheSameReason(i,["Effect"],e.action.entity,e.activator),!0},settle:async()=>!0},g]},yield{name:"光の援軍",actions:[{title:"発動",isMandatory:!1,playType:"CardActivation",spellSpeed:"Normal",executableCells:["Hand","SpellAndTrapZone"],executablePeriods:["main1","main2"],executableDuelistTypes:["Controller"],priorityForNPC:40,canPayCosts:e=>e.activator.getDeckCell().cardEntities.length>3,validate:e=>{if(e.activator.getDeckCell().cardEntities.filter(t=>t.kind==="Monster").filter(t=>(t.lvl??13)<5).filter(t=>t.status.nameTags&&t.status.nameTags.includes("ライトロード")).length!==0)return y(e)},payCosts:async e=>{const t=e.activator.getDeckCell().cardEntities.slice(0,3);return await T.sendManyToGraveyardForTheSameReason(t,["Cost"],e.action.entity,e.activator),{sendToGraveyard:t}},prepare:async()=>({selectedEntities:[],chainBlockTags:["SearchFromDeck"],prepared:void 0}),execute:async e=>{const t=e.activator.getDeckCell().cardEntities.filter(i=>i.kind==="Monster").filter(i=>(i.lvl??13)<5).filter(i=>i.status.nameTags&&i.status.nameTags.includes("ライトロード"));if(t.length===0)return!1;const a=await e.activator.waitSelectEntity(t,"手札に加えるモンスターを選択",!1);if(!a)throw new M(e);return await a.addToHand(["Effect"],e.action.entity,e.activator),!0},settle:async()=>!0},g]},yield{name:"ワン・フォー・ワン",actions:[{title:"発動",isMandatory:!1,playType:"CardActivation",spellSpeed:"Normal",executableCells:["Hand","SpellAndTrapZone"],executablePeriods:["main1","main2"],executableDuelistTypes:["Controller"],priorityForNPC:40,canPayCosts:e=>{if(e.activator.getDeckCell().cardEntities.every(t=>(t.lvl??12)>1)){if(e.activator.getHandCell().cardEntities.every(t=>(t.lvl??12)>1)||e.activator.getHandCell().cardEntities.filter(t=>t.kind==="Monster").length<2)return!1}else if(e.activator.getHandCell().cardEntities.filter(t=>t.kind==="Monster").length===0)return!1;return!0},validate:e=>{let t=[...e.activator.getDeckCell().cardEntities.filter(n=>(n.lvl??12)===1),...e.activator.getHandCell().cardEntities.filter(n=>(n.lvl??12)===1)];const a=e.activator.getHandCell().cardEntities;(a.length<2||!e.ignoreCost)&&(t=t.filter(n=>!a.includes(n)));const i=e.activator.getMonsterZones();if(e.activator.getEnableSummonList(e.activator,"SpecialSummon",["Effect"],e.action,t.map(n=>({monster:n,posList:b,cells:i})),[],!1).length)return y(e)},payCosts:async(e,t,a)=>{const i=[...e.activator.getDeckCell().cardEntities.filter(o=>(o.lvl??12)===1),...e.activator.getHandCell().cardEntities.filter(o=>(o.lvl??12)===1)],r=e.activator.getMonsterZones(),n=e.activator.getEnableSummonList(e.activator,"SpecialSummon",["Effect"],e.action,i.map(o=>({monster:o,posList:b,cells:r})),[],!1);let l=e.activator.getHandCell().cardEntities.filter(o=>o.kind==="Monster");n.length===1&&(l=l.filter(o=>!n.map(s=>s.monster).includes(o)));const c=await e.activator.waitSelectEntity(l,"墓地へ送るモンスターを選択",a);if(!c)throw new M(e);return await c.sendToGraveyard(["Cost"],e.action.entity,e.activator),{sendToGraveyard:[c]}},prepare:async()=>({selectedEntities:[],chainBlockTags:["SpecialSummonFromDeck"],prepared:void 0}),execute:async e=>{const t=[...e.activator.getDeckCell().cardEntities.filter(r=>r.lvl===1),...e.activator.getHandCell().cardEntities.filter(r=>r.lvl===1)],a=e.activator.getMonsterZones();return!!await e.activator.summonOne(e.activator,"SpecialSummon",["Effect"],e.action,t.map(r=>({monster:r,posList:b,cells:a})),[],!1,!1)},settle:async()=>!0},g]},yield{name:"封印の黄金櫃",actions:[{title:"発動",isMandatory:!1,playType:"CardActivation",spellSpeed:"Normal",executableCells:["Hand","SpellAndTrapZone"],executablePeriods:["main1","main2"],executableDuelistTypes:["Controller"],validate:e=>{if(!e.activator.getDeckCell().cardEntities.every(t=>!e.activator.canTryBanish(t,"BanishAsEffect",e.action)))return y(e)},prepare:async()=>({selectedEntities:[],chainBlockTags:["BanishFromDeck"],prepared:void 0}),execute:async e=>{const t=e.activator.getDeckCell().cardEntities.filter(r=>e.activator.canTryBanish(r,"BanishAsEffect",e.action)),a=await e.activator.waitSelectEntity(t,"除外するカードを選択。",!1);if(!a)throw new M(e);return(await T.tryBanish("BanishAsEffect",[a],e)).forEach(r=>r.counterHolder.removeAll("GoldSarcophagus")),!0},settle:async()=>!0},Se("回収カウント進行",["stanby"],e=>{e.activator.isTurnPlayer&&e.action.entity.field.getCells("Banished").flatMap(t=>t.cardEntities).filter(t=>t.moveLog.latestRecord.movedBy===e.action.entity).filter(t=>t.moveLog.latestRecord.actionOwner===e.activator).forEach(t=>{t.counterHolder.add("GoldSarcophagus",1,e.action.entity);const a=t.counterHolder.getQty("GoldSarcophagus",e.action.entity);a<3&&e.activator.duel.log.info(`${t.toString()}のターンカウント：${a-1}⇒${a}`)})}),{title:"回収",isMandatory:!0,playType:"LingeringEffect",spellSpeed:"Normal",executableCells:K,executablePeriods:["stanby"],executableDuelistTypes:["Controller","Opponent"],validate:e=>{if(e.activator.isTurnPlayer)return e.action.entity.field.getCells("Banished").flatMap(t=>t.cardEntities).filter(t=>t.moveLog.latestRecord.movedBy===e.action.entity).filter(t=>t.moveLog.latestRecord.actionOwner===e.activator).some(t=>t.counterHolder.getQty("GoldSarcophagus")===2)?[]:void 0},prepare:k,execute:async e=>{const t=e.action.entity.field.getCells("Banished").flatMap(i=>i.cardEntities).filter(i=>i.moveLog.latestRecord.movedBy===e.action.entity).filter(i=>i.moveLog.latestRecord.actionOwner===e.activator).filter(i=>i.counterHolder.getQty("GoldSarcophagus")===2);if(!t.length)throw new x("想定されない状態",e);let a=t[0];if(t.length>1){const i=await e.activator.waitSelectEntity(t,"回収するカードを選択。",!1);if(!i)throw new M(e);a=i}return await a.addToHand(["Effect"],e.action.entity,e.activator),!0},settle:async()=>!0},g]}}const Gt=Object.freeze(Object.defineProperty({__proto__:null,default:je},Symbol.toStringTag,{value:"Module"}));function*$e(){yield{name:"強欲な壺",actions:[{title:"発動",isMandatory:!1,playType:"CardActivation",spellSpeed:"Normal",executableCells:["Hand","SpellAndTrapZone"],executablePeriods:["main1","main2"],executableDuelistTypes:["Controller"],priorityForNPC:20,validate:e=>{if(!(e.activator.getDeckCell().cardEntities.length<2)&&e.activator.canDraw&&e.activator.canAddToHandFromDeck)return y(e)},prepare:async()=>({selectedEntities:[],chainBlockTags:["Draw"],prepared:void 0}),execute:async e=>(await e.activator.draw(2,e.action.entity,e.activator),!0),settle:async()=>!0},g]},yield{name:"貪欲な壺",actions:[{title:"発動",isMandatory:!1,playType:"CardActivation",spellSpeed:"Normal",executableCells:["Hand","SpellAndTrapZone"],executablePeriods:["main1","main2"],executableDuelistTypes:["Controller"],priorityForNPC:30,validate:e=>{if(!(e.activator.getGraveyard().cardEntities.filter(t=>t.kind==="Monster").filter(t=>t.canBeTargetOfEffect(e)).length<5)&&e.activator.canDraw&&e.activator.canAddToHandFromDeck)return y(e)},prepare:async e=>{const t=await e.activator.waitSelectEntities(e.activator.getGraveyard().cardEntities.filter(a=>a.kind==="Monster").filter(a=>a.canBeTargetOfEffect(e)),5,a=>a.length===5,"デッキに戻すモンスターを選択。",!1);if(t)return{selectedEntities:t,chainBlockTags:["Draw","ReturnToDeckFromGraveyard"],prepared:void 0}},execute:async e=>e.selectedEntities.some(t=>t.wasMovedAtCurrentChain)?!1:(await T.returnManyToDeckForTheSameReason("Random",e.selectedEntities,["Effect"],e.action.entity,e.activator),await e.activator.draw(2,e.action.entity,e.activator),!0),settle:async()=>!0},g]},yield{name:"天使の施し",actions:[{title:"発動",isMandatory:!1,playType:"CardActivation",spellSpeed:"Normal",executableCells:["Hand","SpellAndTrapZone"],executablePeriods:["main1","main2"],executableDuelistTypes:["Controller"],priorityForNPC:30,validate:e=>{if(!(e.activator.getDeckCell().cardEntities.length<3))return y(e)},prepare:async()=>({selectedEntities:[],chainBlockTags:["Draw","DiscordAsEffect"],prepared:void 0}),execute:async e=>(await e.activator.draw(3,e.action.entity,e.activator),await e.activator.discard(2,["Effect","Discard"],e.action.entity,e.activator,()=>!0,e.activator),!0),settle:async()=>!0},g]},yield{name:"成金ゴブリン",actions:[{title:"発動",isMandatory:!1,playType:"CardActivation",spellSpeed:"Normal",executableCells:["Hand","SpellAndTrapZone"],executablePeriods:["main1","main2"],executableDuelistTypes:["Controller"],priorityForNPC:20,validate:e=>{if(!(e.activator.getDeckCell().cardEntities.length<1))return y(e)},prepare:async()=>({selectedEntities:[],chainBlockTags:["Draw"],prepared:void 0}),execute:async e=>(await e.activator.draw(1,e.action.entity,e.activator),e.action.entity.field.duel.clock.incrementProcSeq(),e.activator.getOpponentPlayer().heal(1e3,e.action.entity),!0),settle:async()=>!0},g]},yield{name:"手札抹殺",actions:[{title:"発動",isMandatory:!1,playType:"CardActivation",spellSpeed:"Normal",executableCells:["Hand","SpellAndTrapZone"],executablePeriods:["main1","main2"],executableDuelistTypes:["Controller"],validate:e=>{if(!(e.activator.getDeckCell().cardEntities.length<e.activator.getHandCell().cardEntities.filter(t=>t.seq!==e.action.entity.seq).length)&&e.action.entity.field.getAllCells().filter(t=>t.cellType==="Hand").flatMap(t=>t.cardEntities).filter(t=>t.seq!==e.action.entity.seq).length!==0)return y(e)},prepare:async()=>({selectedEntities:[],chainBlockTags:["SearchFromDeck"],prepared:void 0}),execute:async e=>{const t=e.activator.getHandCell().cardEntities.length,a=e.activator.getOpponentPlayer().getHandCell().cardEntities.length;return await T.sendManyToGraveyardForTheSameReason(e.action.entity.field.getCells("Hand").flatMap(i=>i.cardEntities),["Effect","Discard"],e.action.entity,e.activator),e.activator.duel.clock.incrementProcSeq(),await e.action.entity.field.drawAtSameTime(e.activator,t,e.activator.getOpponentPlayer(),a,e.action.entity,e.activator),!0},settle:async()=>!0},g]}}const Rt=Object.freeze(Object.defineProperty({__proto__:null,default:$e},Symbol.toStringTag,{value:"Module"}));function*ze(){yield*[{name:"増援",filter:e=>e.origin.kind==="Monster"&&e.types.includes("Warrior")&&(e.origin.level??5)<5},{name:"化石調査",filter:e=>e.origin.kind==="Monster"&&e.types.includes("Dinosaur")&&(e.origin.level??6)<6},{name:"Ｅ－エマージェンシーコール",filter:e=>e.origin.kind==="Monster"&&(e.origin.nameTags??[]).includes("Ｅ・ＨＥＲＯ")},{name:"召集の聖刻印",filter:e=>e.origin.kind==="Monster"&&(e.origin.nameTags??[]).includes("聖刻")},{name:"召喚師のスキル",filter:e=>e.origin.kind==="Monster"&&(e.origin.monsterCategories??[]).includes("Normal")&&(e.origin.level??4)>4},{name:"トゥーンのもくじ",filter:e=>(e.origin.nameTags??[]).includes("トゥーン")},{name:"融合賢者",filter:e=>e.origin.name==="融合"},{name:"虹の架け橋",filter:e=>e.origin.kind!=="Monster"&&(e.origin.nameTags??[]).includes("宝玉")},{name:"紫炎の狼煙",filter:e=>e.origin.kind==="Monster"&&(e.origin.nameTags??[]).includes("六武衆")&&(e.origin.level??4)<4},{name:"テラ・フォーミング",filter:e=>e.origin.kind==="Spell"&&e.origin.spellCategory==="Field"},{name:"コール・リゾネーター",filter:e=>e.origin.kind==="Monster"&&(e.origin.nameTags??[]).includes("リゾネーター")}].map(e=>({name:e.name,actions:[{title:"発動",isMandatory:!1,playType:"CardActivation",spellSpeed:"Normal",executableCells:["Hand","SpellAndTrapZone"],executablePeriods:["main1","main2"],executableDuelistTypes:["Controller"],priorityForNPC:40,validate:t=>{if(t.activator.getDeckCell().cardEntities.filter(e.filter).length&&t.activator.canDraw)return y(t)},prepare:async()=>({selectedEntities:[],chainBlockTags:["SearchFromDeck"],prepared:void 0}),execute:async t=>{const a=t.activator.getDeckCell().cardEntities.filter(e.filter);if(!a.length)return!1;const i=await t.activator.waitSelectEntity(a,"手札に加えるカードを選択",!1);return i?(await i.addToHand(["Effect"],t.action.entity,t.activator),!0):!1},settle:async()=>!0},g]})),yield*[{name:"戦士の生還",filter:e=>e.kind==="Monster"&&e.types.includes("Warrior"),qty:1},{name:"ダーク・バースト",filter:e=>e.kind==="Monster"&&e.attr.includes("Dark")&&(e.atk??9999)<=1500,qty:1},{name:"悪夢再び",filter:e=>e.kind==="Monster"&&e.attr.includes("Dark")&&(e.def??9999)===0,qty:2},{name:"サルベージ",filter:e=>e.kind==="Monster"&&e.attr.includes("Water")&&(e.atk??9999)<=1500,qty:2},{name:"バッテリーリサイクル",filter:e=>e.kind==="Monster"&&e.types.includes("Thunder")&&(e.atk??9999)<=1500,qty:2},{name:"闇の量産工場",filter:e=>e.kind==="Monster"&&(e.status.monsterCategories??[]).includes("Normal"),qty:2}].map(e=>({name:e.name,actions:[{title:"発動",isMandatory:!1,playType:"CardActivation",spellSpeed:"Normal",executableCells:["Hand","SpellAndTrapZone"],executablePeriods:["main1","main2"],executableDuelistTypes:["Controller"],hasToTargetCards:!0,priorityForNPC:40,validate:t=>{if(!(t.activator.getGraveyard().cardEntities.filter(e.filter).length<e.qty))return y(t)},prepare:async()=>({selectedEntities:[],chainBlockTags:["AddToHandFromGraveyard"],prepared:void 0}),execute:async t=>{const a=t.activator.getGraveyard().cardEntities.filter(e.filter);if(a.length===0)return!1;const i=await t.activator.waitSelectEntities(a,e.qty,r=>r.length===e.qty,"手札に加えるカードを選択",!1);for(const r of i??[])await r.addToHand(["Effect"],t.action.entity,t.activator);return!0},settle:async()=>!0},g]})),yield*[{name:"トレード・イン",filter:e=>e.kind==="Monster"&&(e.lvl??0)===8},{name:"調和の宝札",filter:e=>e.kind==="Monster"&&(e.origin.monsterCategories??[]).includes("Tuner")&&e.types.includes("Dragon")&&(e.atk??9999)<=1e3},{name:"デステニー・ドロー",filter:e=>e.kind==="Monster"&&(e.origin.nameTags??[]).includes("Ｄ－ＨＥＲＯ")}].map(e=>({name:e.name,actions:[{title:"発動",isMandatory:!1,playType:"CardActivation",spellSpeed:"Normal",executableCells:["Hand","SpellAndTrapZone"],executablePeriods:["main1","main2"],executableDuelistTypes:["Controller"],priorityForNPC:40,canPayCosts:t=>t.activator.getHandCell().cardEntities.filter(e.filter).some(a=>t.activator.canDiscard([a])),validate:t=>{if(!(t.activator.getDeckCell().cardEntities.length<2))return y(t)},payCosts:async t=>({discard:await t.activator.discard(1,["Discard","Cost"],t.action.entity,t.activator,e.filter)}),prepare:async()=>({selectedEntities:[],chainBlockTags:["Draw"],prepared:void 0}),execute:async t=>(await t.activator.draw(2,t.action.entity,t.activator),!0),settle:async()=>!0},g]})),yield*[{name:"火の粉",calcHeal:()=>[0,-200]},{name:"雷鳴",calcHeal:()=>[0,-300]},{name:"ファイヤー・ボール",calcHeal:()=>[0,-500]},{name:"火あぶりの刑",calcHeal:()=>[0,-600]},{name:"昼夜の大火事",calcHeal:()=>[0,-800]},{name:"火炎地獄",calcHeal:()=>[-500,-1e3]},{name:"盗人ゴブリン",calcHeal:()=>[500,-500]},{name:"ブルー・ポーション",calcHeal:()=>[400,0]},{name:"レッド・ポーション",calcHeal:()=>[500,0]},{name:"ゴブリンの秘薬",calcHeal:()=>[600,0]},{name:"天使の生き血",calcHeal:()=>[800,0]},{name:"治療の神 ディアン・ケト",calcHeal:()=>[1e3,0]},{name:"恵みの雨",calcHeal:()=>[1e3,1e3]}].map(e=>({name:e.name,actions:[{title:"発動",isMandatory:!1,playType:"CardActivation",spellSpeed:"Normal",executableCells:["Hand","SpellAndTrapZone"],executablePeriods:["main1","main2"],executableDuelistTypes:["Controller"],validate:y,prepare:async()=>{const[t,a]=e.calcHeal(),i=[];return t<0&&i.push("DamageToSelf"),a<0&&i.push("DamageToOpponent"),{selectedEntities:[],chainBlockTags:i,prepared:void 0}},execute:async t=>{const[a,i]=e.calcHeal();return i>0?t.activator.getOpponentPlayer().heal(i,t.action.entity):i<0&&t.activator.getOpponentPlayer().effectDamage(Math.abs(i),t.action.entity),a>0?t.activator.heal(a,t.action.entity):a<0&&t.activator.effectDamage(Math.abs(a),t.action.entity),!0},settle:async()=>!0},g]}))}const jt=Object.freeze(Object.defineProperty({__proto__:null,default:ze},Symbol.toStringTag,{value:"Module"}));function*Ue(){yield{name:"強欲な瓶",actions:[g,{title:"発動",isMandatory:!1,playType:"CardActivation",spellSpeed:"Quick",executableCells:["SpellAndTrapZone"],executablePeriods:S,executableDuelistTypes:["Controller"],validate:e=>{if(!(e.activator.getDeckCell().cardEntities.length<2)&&e.activator.canDraw&&e.activator.canAddToHandFromDeck)return y(e)},prepare:async()=>({selectedEntities:[],chainBlockTags:["Draw"],prepared:void 0}),execute:async e=>(await e.activator.draw(1,e.action.entity,e.activator),!0),settle:async()=>!0}]},yield{name:"戦線復帰",actions:[{title:"発動",isMandatory:!1,playType:"CardActivation",spellSpeed:"Quick",executableCells:["SpellAndTrapZone"],executablePeriods:S,executableDuelistTypes:["Controller"],hasToTargetCards:!0,validate:e=>{const t=e.activator.getMonsterZones();if(e.activator.getEnableSummonList(e.activator,"SpecialSummon",["Effect"],e.action,e.activator.getGraveyard().cardEntities.filter(i=>i.kind==="Monster").filter(i=>i.canBeTargetOfEffect(e)).map(i=>({monster:i,posList:["Defense"],cells:t})),[],!1).length)return y(e)},prepare:e=>P(e,e.activator.getGraveyard().cardEntities.filter(t=>t.kind==="Monster").filter(t=>t.canBeTargetOfEffect(e)),["Defense"]),execute:async e=>O(e,["Defense"]),settle:async()=>!0},g]}}const $t=Object.freeze(Object.defineProperty({__proto__:null,default:Ue},Symbol.toStringTag,{value:"Module"}));function*Qe(){yield*["炸裂装甲","次元幽閉"].map(e=>({name:e,actions:[g,{title:"発動",playType:"CardActivation",spellSpeed:"Quick",isMandatory:!1,executableCells:["SpellAndTrapZone"],executablePeriods:["b1Battle","b2Battle"],executableDuelistTypes:["Controller"],hasToTargetCards:!0,validate:t=>{if(!t.activator.duel.clock.isUponAttackDeclaration()||t.activator.isTurnPlayer)return;const a=t.activator.duel.attackingMonster;if(!a)throw new x("想定されない状態",t,a);if(a.canBeTargetOfEffect(t)&&!(e==="次元幽閉"&&!t.activator.canTryBanish(a,"BanishAsEffect",t.action)))return y(t)},prepare:async t=>{const a=t.activator.duel.attackingMonster;if(!a)throw new x("想定されない状態",t,a);const i=e==="炸裂装甲"?t.action.calcChainBlockTagsForDestroy([a]):["BanishFromField"];return{selectedEntities:[a],chainBlockTags:i,prepared:void 0}},execute:async t=>(e==="炸裂装甲"?await T.tryDestroy(t.selectedEntities,t):await T.tryBanish("BanishAsEffect",t.selectedEntities,t),!0),settle:async()=>!0}]}))}const zt=Object.freeze(Object.defineProperty({__proto__:null,default:Qe},Symbol.toStringTag,{value:"Module"}));function*Ve(){yield{name:"ご隠居の猛毒薬",actions:[g,{title:"発動",isMandatory:!1,playType:"CardActivation",spellSpeed:"Quick",executableCells:["Hand","SpellAndTrapZone"],executablePeriods:S,executableDuelistTypes:["Controller"],validate:y,prepare:async(e,t,a)=>{const i=await e.action.entity.field.duel.view.waitSelectText([{seq:0,text:"●自分は１２００ＬＰ回復する。"},{seq:1,text:"●相手に８００ダメージを与える。"}],"使用する効果を選択",!1);if(i===void 0&&!a)throw new M(e);const r=[];return i===1&&r.push("DamageToOpponent"),{selectedEntities:[],chainBlockTags:r,prepared:i??0}},execute:async e=>e.prepared===1?(e.activator.getOpponentPlayer().effectDamage(800,e.action.entity),!0):(e.activator.heal(1200,e.action.entity),!0),settle:async()=>!0}]},yield{name:"月の書",actions:[{title:"発動",isMandatory:!1,playType:"CardActivation",spellSpeed:"Quick",executableCells:["Hand","SpellAndTrapZone"],executablePeriods:S,executableDuelistTypes:["Controller"],hasToTargetCards:!0,validate:e=>{if(e.action.entity.field.getMonstersOnFieldStrictly().filter(a=>a.canBeTargetOfEffect(e)).filter(a=>a.face==="FaceUp").length)return y(e)},prepare:async(e,t,a)=>{const i=e.action.entity.field.getMonstersOnFieldStrictly().filter(n=>n.canBeTargetOfEffect(e)).filter(n=>n.face==="FaceUp"),r=await e.activator.waitSelectEntity(i,"対象とするモンスターを選択",a);if(r)return{selectedEntities:[r],chainBlockTags:[],prepared:void 0}},execute:async e=>{const t=e.selectedEntities[0];if(!t.isOnFieldAsMonsterStrictly||t.battlePosition==="Set")return!1;if(!t.canBeEffected(e.activator,e.action.entity,e.action)){e.activator.duel.log.info(`${t.toString()}は${e.action.entity.toString()}の効果を受けない。`);return}return await t.setBattlePosition("Set",["Effect"],e.action.entity,e.activator),!0},settle:async()=>!0},g]},yield{name:"突進",actions:[{title:"発動",isMandatory:!1,playType:"CardActivation",spellSpeed:"Quick",executableCells:["Hand","SpellAndTrapZone"],executablePeriods:[...S,...h],executableDuelistTypes:["Controller"],hasToTargetCards:!0,validate:e=>{if(e.action.entity.field.getMonstersOnFieldStrictly().filter(a=>a.canBeTargetOfEffect(e)).length)return y(e)},prepare:async(e,t,a)=>{const i=e.action.entity.field.getMonstersOnFieldStrictly().filter(n=>n.canBeTargetOfEffect(e)),r=await e.activator.waitSelectEntity(i,"対象とするモンスターを選択",a);if(r)return{selectedEntities:[r],chainBlockTags:[],prepared:void 0}},execute:async e=>{const t=e.selectedEntities[0];if(!t.isOnFieldAsMonsterStrictly||t.battlePosition==="Set")return!1;if(!t.canBeEffected(e.activator,e.action.entity,e.action)){e.activator.duel.log.info(`${t.toString()}は${e.action.entity.toString()}の効果を受けない。`);return}return t.numericOprsBundle.push(D.createLingeringAddition("攻撃力上昇",a=>a.effectOwner.duel.clock.isSameTurn(a.isSpawnedAt),e.action.entity,e.action,"attack",(a,i,r)=>r+700)),!0},settle:async()=>!0},g]}}const Ut=Object.freeze(Object.defineProperty({__proto__:null,default:Ve},Symbol.toStringTag,{value:"Module"})),We=(e,t,a,i,r,n)=>{if(!e.action.entity.origin.level||i.some(s=>!s.lvl)||i.map(s=>s.lvl??0).reduce((s,p)=>s+p,0)!==e.action.entity.origin.level)return;const l=i.filter(s=>{var p;return(p=s.status.monsterCategories)==null?void 0:p.some(f=>f==="Tuner")}),c=i.filter(s=>{var p;return(p=s.status.monsterCategories)==null?void 0:p.every(f=>f!=="Tuner")});if(!r(l)||!n(c))return;const o=[...l.map(s=>({material:s,cell:s.fieldCell,isAsTuner:!0})),...c.map(s=>({material:s,cell:s.fieldCell,isAsTuner:!1}))];if(e.activator.getEnableSummonList(e.activator,"SyncroSummon",["Rule","SpecialSummon"],e.action,[{monster:e.action.entity,posList:t,cells:a}],o,!1).length)return o},Xe=(e,t=i=>i.length===1,a=i=>i.length>0)=>{let i=[...e.activator.getMonstersOnField().filter(l=>l.battlePosition!=="Set"),...e.activator.getHandCell().cardEntities.filter(l=>l.origin.kind==="Monster")];if(i.every(l=>!l.status.allowHandSyncro)&&(i=i.filter(l=>l.fieldCell.isPlayFieldCell)),i.length<2)return[];const r=[...e.activator.getMonsterZones(),...e.activator.duel.field.getCells("ExtraMonsterZone")],n=["Attack","Defense"];return i.getAllOnOffPattern().filter(l=>l.some(c=>c.status.allowHandSyncro)||l.every(c=>c.isOnFieldAsMonsterStrictly)).map(l=>We(e,n,r,l,t,a)??[]).filter(l=>l.length)},Ke=async(e,t,a)=>{var o;const i=e.action.getEnableMaterialPatterns(e),r=i.map(s=>({infos:s,materialSeqList:s.map(p=>p.material.seq).sort()}));let n=i[0].map(s=>s.material);if(i.length>1){const s=i.flatMap(f=>f.map(E=>E.material)).getDistinct(),p=await e.activator.waitSelectEntities(s,void 0,f=>{const E=f.map(m=>m.seq).sort();return r.some(m=>E.length===m.materialSeqList.length&&E.every((Z,H)=>Z===m.materialSeqList[H]))},"シンクロ素材とするモンスターを選択",a);if(!p)return;n=p}const l=n.map(s=>s.seq).sort(),c=(o=r.find(s=>l.length===s.materialSeqList.length&&l.every((p,f)=>p===s.materialSeqList[f])))==null?void 0:o.infos;if(!c)throw new x("想定されない状態",e,n);return await T.sendManyToGraveyardForTheSameReason(n,["SyncroMaterial","Cost","Rule","SpecialSummonMaterial"],e.action.entity,e.activator),{summonMaterialInfos:c}},_=(e=a=>a.length===1,t=a=>a.length>0)=>({title:"シンクロ召喚",isMandatory:!1,playType:"SpecialSummon",spellSpeed:"Normal",executableCells:["ExtraDeck"],executablePeriods:["main1","main2"],executableDuelistTypes:["Controller"],getEnableMaterialPatterns:a=>Xe(a,e,t),canPayCosts:a=>a.action.getEnableMaterialPatterns(a).length>0,validate:a=>!a.ignoreCost||a.activator.getAvailableExtraZones().length+a.activator.getAvailableMonsterZones().length>0?[]:void 0,payCosts:Ke,prepare:a=>F(a,"SyncroSummon",["Rule","SpecialSummon","SyncroSummon"],["Attack","Defense"]),execute:L,settle:async()=>!0});function*Je(){yield*["大地の騎士ガイアナイト","スクラップ・デスデーモン"].map(e=>({name:e,actions:[u,d,v,_()]})),yield{name:"ナチュル・ガオドレイク",actions:[u,d,v,_(e=>e.length===1&&e.every(t=>t.attr.some(a=>a==="Earth")),e=>e.length>0&&e.every(t=>t.attr.some(a=>a==="Earth")))]},yield{name:"マジカル・アンドロイド",actions:[u,d,v,_(),{title:"回復",isMandatory:!0,playType:"IgnitionEffect",spellSpeed:"Normal",executableCells:["MonsterZone","ExtraMonsterZone"],executablePeriods:["end"],executableDuelistTypes:["Controller"],isOnlyNTimesPerTurnIfFaceup:1,validate:e=>e.action.entity.duel.phase==="end"&&e.activator.isTurnPlayer&&e.action.entity.face==="FaceUp"?[]:void 0,prepare:k,execute:async e=>(e.activator.heal(e.activator.getMonstersOnField().filter(t=>t.face==="FaceUp").filter(t=>t.types.includes("Psychic")).length*600,e.action.entity),!0),settle:async()=>!0}]}}const Qt=Object.freeze(Object.defineProperty({__proto__:null,default:Je},Symbol.toStringTag,{value:"Module"}));function*Ye(){yield{name:"にせアバター",actions:[C,u,d,v],continuousEffects:[G("THE_DEVILS_AVATAR","Monster",e=>[e],e=>e.isOnFieldStrictly&&e.face==="FaceUp",e=>["attack","defense"].map(t=>D.createContinuous("THE_DEVILS_AVATAR",a=>a.isSpawnedBy.isOnFieldStrictly&&a.isSpawnedBy.face==="FaceUp",e,(a,i)=>i.isOnFieldStrictly&&i.face==="FaceUp",t,"calculated","THE_DEVILS_AVATAR",()=>Number.MIN_VALUE)))]},yield{name:"にせドレッド・ルート",actions:[C,u,d,v],continuousEffects:[$("THE_DEVILS_DREAD-ROOT","Monster",e=>e.isOnFieldStrictly&&e.face==="FaceUp",e=>["attack","defense"].map(t=>D.createContinuous("THE_DEVILS_DREAD-ROOT",a=>a.isSpawnedBy.isOnFieldStrictly&&a.isSpawnedBy.face==="FaceUp",e,(a,i)=>i.kind==="Monster"&&i.isOnFieldStrictly&&i.face==="FaceUp"&&i!==a.isSpawnedBy,t,"calculated","THE_DEVILS_DREAD-ROOT",(a,i,r)=>Math.round(r/2))))]}}const Vt=Object.freeze(Object.defineProperty({__proto__:null,default:Ye},Symbol.toStringTag,{value:"Module"})),Ie=(e,t,a,i,r=2,n=2,l)=>{if(!e.action.entity.origin.rank||i.length<r||i.length>n||i.some(o=>!o.lvl)||i.some(o=>o.lvl!==e.action.entity.rank)||!l(i))return;const c=i.map(o=>({material:o,cell:o.fieldCell,level:o.status.level}));if(e.activator.getEnableSummonList(e.activator,"XyzSummon",["Rule","XyzSummon","SpecialSummon"],e.action,[{monster:e.action.entity,posList:t,cells:a}],c,!1).length)return c},et=(e,t=2,a=2,i=r=>r.length>1)=>{const r=e.activator.getMonstersOnField().filter(l=>l.battlePosition!=="Set");if(r.length<t)return[];const n=[...e.activator.getMonsterZones(),...e.activator.getAvailableExtraZones()];return r.getAllOnOffPattern().filter(l=>l.length>=t).filter(l=>l.length<=a).map(l=>Ie(e,b,n,l,t,a,i)??[]).filter(l=>l.length)},tt=async(e,t,a)=>{var o;const i=e.action.getEnableMaterialPatterns(e),r=i.map(s=>({infos:s,materialSeqList:s.map(p=>p.material.seq).sort()}));let n=i[0].map(s=>s.material);if(i.length>1){const s=i.flatMap(f=>f.map(E=>E.material)).getDistinct(),p=await e.activator.waitSelectEntities(s,void 0,f=>{const E=f.map(m=>m.seq).sort();return r.some(m=>E.length===m.materialSeqList.length&&E.every((Z,H)=>Z===m.materialSeqList[H]))},"エクシーズ素材とするモンスターを選択",a);if(!p)return;n=p}const l=n.map(s=>s.seq).sort(),c=(o=r.find(s=>l.length===s.materialSeqList.length&&l.every((p,f)=>p===s.materialSeqList[f])))==null?void 0:o.infos;if(!c)throw new x("想定されない状態",e,n);return console.log(c),await T.convertManyToXyzMaterials(c.map(s=>s.material),["XyzMaterial","Rule","Cost"],e.action.entity,e.activator),console.log(c.map(s=>s.material.kind)),{summonMaterialInfos:c}},at=(e=2,t=2,a=i=>i.length>1)=>({title:"エクシーズ召喚",isMandatory:!1,playType:"SpecialSummon",spellSpeed:"Normal",executableCells:["ExtraDeck"],executablePeriods:["main1","main2"],executableDuelistTypes:["Controller"],getEnableMaterialPatterns:i=>et(i,e,t,a),canPayCosts:i=>i.action.getEnableMaterialPatterns(i).length>0,validate:i=>!i.ignoreCost||i.activator.getAvailableExtraZones().length+i.activator.getAvailableMonsterZones().length>0?[]:void 0,payCosts:tt,prepare:i=>F(i,"XyzSummon",["Rule","SpecialSummon","XyzSummon"],["Attack","Defense"]),execute:L,settle:async()=>!0});function*it(){yield*[{name:"ジェムナイト・パール",qty:2},{name:"覚醒の勇士 ガガギゴ",qty:3}].map(e=>({name:e.name,actions:[u,d,v,at(e.qty,e.qty)]}))}const Wt=Object.freeze(Object.defineProperty({__proto__:null,default:it},Symbol.toStringTag,{value:"Module"}));function*rt(){yield{name:"シューティング・ライザー・ドラゴン",actions:[u,d,v,_(),{title:"①墓地送り",isMandatory:!1,playType:"TriggerEffect",spellSpeed:"Normal",executableCells:w,executablePeriods:[...S,...h],executableDuelistTypes:["Controller"],isOnlyNTimesPerTurn:1,validate:e=>{if(e.action.entity.hasBeenSummonedNow(["SyncroSummon"])&&e.activator.getDeckCell().cardEntities.some(t=>(t.lvl??12)<(e.action.entity.lvl??0)))return[]},prepare:async()=>({selectedEntities:[],chainBlockTags:["SendToGraveyardFromDeck","IfSpecialSummonSucceed"],prepared:void 0}),execute:async e=>{const t=e.activator.getDeckCell().cardEntities.filter(r=>(r.lvl??12)<(e.action.entity.lvl??0));if(t.length===0)return!1;const a=await e.activator.waitSelectEntity(t,"墓地に送るモンスターを選択",!1);if(!a)throw new x("想定されない状況",e);await a.sendToGraveyard(["Effect"],e.action.entity,e.activator);const i=a.lvl??0;return e.action.entity.numericOprsBundle.push(D.createLingeringAddition("レベル減少",()=>!0,e.action.entity,e.action,"level",(r,n,l)=>l-i)),!0},settle:async()=>!0},ce({title:"②シンクロ召喚",isOnlyNTimesPerChain:1})]}}const Xt=Object.freeze(Object.defineProperty({__proto__:null,default:rt},Symbol.toStringTag,{value:"Module"}));function*nt(){yield{name:"折れ竹光",actions:[N(),g]},yield{name:"妖刀竹光",actions:[N(),g,{title:"②直接攻撃付与",isMandatory:!1,playType:"IgnitionEffect",spellSpeed:"Normal",executableCells:["SpellAndTrapZone"],executablePeriods:["main1","main2"],executableDuelistTypes:["Controller"],isOnlyNTimesPerTurn:1,validate:e=>{if(!e.activator.getSpellTrapsOnField().filter(a=>{var i;return(i=a.status.nameTags)==null?void 0:i.includes("竹光")}).filter(a=>a!==e.action.entity).some(a=>a.status.spellCategory==="Equip"))return;const t=e.action.entity.info.equipedBy;if(t&&!t.status.canDirectAttack)return[]},prepare:async(e,t,a)=>{const i=await e.activator.waitSelectEntity(e.activator.getSpellTrapsOnField().filter(r=>{var n;return(n=r.status.nameTags)==null?void 0:n.includes("竹光")}).filter(r=>r!==e.action.entity).filter(r=>r.status.spellCategory==="Equip"),"手札に戻すカードを選択。",a);if(i)return{selectedEntities:[i],chainBlockTags:[],prepared:void 0}},execute:async e=>{const t=e.action.entity.info.equipedBy;return t?(await T.returnManyToHandForTheSameReason(e.selectedEntities,["Effect"],e.action.entity,e.activator),t.statusOperatorBundle.push(new R("直接攻撃",a=>(console.log(a.effectOwner.duel.clock.turn,a.isSpawnedAt.turn),a.effectOwner.duel.clock.isSameTurn(a.isSpawnedAt)),!1,e.action.entity,e.action,()=>!0,(a,i)=>({...i,canDirectAttack:!0}))),!0):!1},settle:async()=>!0},{title:"③サーチ",isMandatory:!1,playType:"TriggerEffect",spellSpeed:"Normal",executableCells:["Graveyard"],executablePeriods:[...S,...h],executableDuelistTypes:["Controller"],validate:e=>{if(e.action.entity.wasMovedAtPreviousChain&&e.activator.canAddToHandFromDeck)return e.activator.getDeckCell().cardEntities.filter(t=>{var a;return(a=t.status.nameTags)==null?void 0:a.includes("竹光")}).some(t=>t.status.name!=="妖刀竹光")?[]:void 0},prepare:async()=>({selectedEntities:[],chainBlockTags:["SearchFromDeck"],prepared:void 0}),execute:async e=>{const t=e.activator.getDeckCell().cardEntities.filter(i=>{var r;return(r=i.status.nameTags)==null?void 0:r.includes("竹光")}).filter(i=>i.status.name!=="妖刀竹光");if(!t.length)return!1;const a=await e.activator.waitSelectEntity(t,"手札に加えるカードを選択。",!1);if(!a)throw new M(e);return(await a.addToHand(["Effect"],e.action.entity,e.activator)).cellType==="Hand"},settle:async()=>!0}]},yield{name:"真刀竹光",actions:[N(),g,{title:"②相手モンスター破壊",isMandatory:!1,playType:"TriggerEffect",spellSpeed:"Normal",executableCells:["SpellAndTrapZone"],executablePeriods:["b1DAfterDmgCalc","b2DAfterDmgCalc"],executableDuelistTypes:["Controller"],validate:e=>{const t=e.action.entity.info.equipedBy;if(t&&t.info.battleLog.filter(a=>e.activator.duel.clock.isPreviousStage(a.timestamp)).some(a=>a.enemy.entityType==="Duelist")&&e.activator.getOpponentPlayer().getMonstersOnField().length&&e.activator.getOpponentPlayer().lifeLog.filter(a=>e.activator.duel.clock.isPreviousStage(a.clock)).some(a=>a.entity===t))return[]},prepare:async e=>({selectedEntities:[],chainBlockTags:e.action.calcChainBlockTagsForDestroy(e.activator.getOpponentPlayer().getMonstersOnField()),prepared:void 0}),execute:async e=>(await T.tryDestroy(e.activator.getOpponentPlayer().getMonstersOnField(),e)).length>0,settle:async()=>!0},{title:"③竹光入替",isMandatory:!1,playType:"IgnitionEffect",spellSpeed:"Normal",executableCells:["SpellAndTrapZone"],executablePeriods:["main1","main2"],executableDuelistTypes:["Controller"],canPayCosts:e=>e.action.entity.info.equipedBy?pe(e):!1,validate:e=>{if(!(!e.action.entity.info.equipedBy||!e.activator.getDeckCell().cardEntities.filter(i=>{var r;return(r=i.status.nameTags)==null?void 0:r.includes("竹光")}).filter(i=>i.status.name!=="真刀竹光").filter(i=>i.status.spellCategory==="Equip").length))return e.activator.duel.field.getMonstersOnFieldStrictly().some(i=>i.canBeTargetOfEffect(e))?[]:void 0},payCosts:ve,prepare:k,execute:async e=>{const t=e.activator.getDeckCell().cardEntities.filter(c=>{var o;return(o=c.status.nameTags)==null?void 0:o.includes("竹光")}).filter(c=>c.status.name!=="真刀竹光").filter(c=>c.status.spellCategory==="Equip");if(!t.length)return!1;const a=e.activator.getAvailableSpellTrapZones();if(!a.length)return!1;const i=e.activator.duel.field.getMonstersOnFieldStrictly().filter(c=>c.canBeTargetOfEffect(e));if(!i.length)return!1;const r=await e.activator.waitSelectEntity(t,"装備するカードを選択。",!1);if(!r)throw new M("竹光選択",e);const n=await e.activator.duel.view.waitSelectDestination(e.activator,r,a,"装備カードを置く場所を選択。","装備",!1);if(!n)throw new M("配置場所選択",e);await r.putDirectly(n,"Spell",["Effect"],e.action.entity,e.activator);const l=await e.activator.waitSelectEntity(i,"装備する対象を選択。",!1);if(!l)throw new M("装備対象選択",e);return r.info.equipedBy=l,r.info.effectTargets[e.action.seq]=[l],l.info.equipEntities.push(r),!0},settle:async()=>!0}]}}const Kt=Object.freeze(Object.defineProperty({__proto__:null,default:nt},Symbol.toStringTag,{value:"Module"}));function*lt(){yield{name:"黄金色の竹光",actions:[{title:"発動",isMandatory:!1,playType:"CardActivation",spellSpeed:"Normal",executableCells:["Hand","SpellAndTrapZone"],executablePeriods:["main1","main2"],executableDuelistTypes:["Controller"],priorityForNPC:20,validate:e=>{if(!(e.activator.getDeckCell().cardEntities.length<2)&&e.activator.canDraw&&e.activator.canAddToHandFromDeck&&e.activator.getSpellTrapsOnField().filter(t=>{var a;return(a=t.status.nameTags)==null?void 0:a.includes("竹光")}).filter(t=>t.face==="FaceUp").some(t=>t.status.spellCategory==="Equip"))return y(e)},prepare:async()=>({selectedEntities:[],chainBlockTags:["Draw"],prepared:void 0}),execute:async e=>(await e.activator.draw(2,e.action.entity,e.activator),!0),settle:async()=>!0},g]}}const Jt=Object.freeze(Object.defineProperty({__proto__:null,default:lt},Symbol.toStringTag,{value:"Module"}));function*st(){yield{name:"ＢＦ－疾風のゲイル",actions:[C,u,d,v,{title:"①特殊召喚",isMandatory:!1,playType:"SpecialSummon",spellSpeed:"Normal",executableCells:["Hand"],executablePeriods:["main1","main2"],executableDuelistTypes:["Controller"],validate:e=>{if(e.activator.getMonstersOnField().filter(a=>(a.status.nameTags??[]).includes("ＢＦ")).filter(a=>a.nm!==e.action.entity.origin.name).length)return V(e,["Attack","Defense"],[])},prepare:e=>F(e,"SpecialSummon",["SpecialSummon","Rule"],b),execute:L,settle:async()=>!0},{title:"②攻守半減",isMandatory:!1,playType:"IgnitionEffect",spellSpeed:"Normal",executableCells:["MonsterZone"],executablePeriods:["main1","main2"],executableDuelistTypes:["Controller"],hasToTargetCards:!0,isOnlyNTimesPerTurnIfFaceup:1,validate:e=>{const t=e.activator.getOpponentPlayer().getMonstersOnField().filter(a=>a.face==="FaceUp").filter(a=>a.canBeTargetOfEffect(e));if(t.length)return t.length?t.map(a=>a.fieldCell):void 0},prepare:async(e,t,a)=>{var r;let i=(r=e.dest)==null?void 0:r.cardEntities[0];if(!i){const n=e.activator.getOpponentPlayer().getMonstersOnField().filter(c=>c.face==="FaceUp").filter(c=>c.canBeTargetOfEffect(e)),l=await e.activator.waitSelectEntity(n,"効果対象を選択。",a);if(!l)return;i=l}return{selectedEntities:[i],chainBlockTags:[],prepared:void 0}},execute:async e=>{const t=e.selectedEntities.filter(a=>a.isOnFieldAsMonsterStrictly).filter(a=>a.face==="FaceUp").find(a=>a.canBeEffected(e.activator,e.action.entity,e.action));return t?(["attack","defense"].map(a=>D.createLingeringFixation("②攻守半減",()=>!0,e.action.entity,e.action,a,(i,r,n)=>Math.round(n/2))).forEach(a=>t.numericOprsBundle.push(a)),!0):!1},settle:async()=>!0}]}}const Yt=Object.freeze(Object.defineProperty({__proto__:null,default:st},Symbol.toStringTag,{value:"Module"}));function*ct(){yield{name:"水晶機巧－ハリファイバー",actions:[u,ee(e=>e.length===2&&e.some(t=>{var a;return(a=t.status.monsterCategories)==null?void 0:a.includes("Tuner")})),{title:"①リクルート",isMandatory:!1,playType:"TriggerEffect",spellSpeed:"Normal",executableCells:w,executablePeriods:[...S,...h],executableDuelistTypes:["Controller"],validate:e=>{if(!e.action.entity.hasBeenSummonedNow(["LinkSummon"]))return;const t=[e.activator.getHandCell(),e.activator.getDeckCell()].flatMap(r=>r.cardEntities).filter(r=>(r.lvl??12)<4).filter(r=>{var n;return(n=r.status.monsterCategories)==null?void 0:n.includes("Tuner")}),a=e.activator.getMonsterZones();return e.activator.getEnableSummonList(e.activator,"SpecialSummon",["Effect"],e.action,t.map(r=>({monster:r,cells:a,posList:["Defense"]})),[],!1).length?[]:void 0},prepare:async()=>({selectedEntities:[],chainBlockTags:["SpecialSummonFromDeck"],prepared:void 0}),execute:async e=>{const t=[e.activator.getHandCell(),e.activator.getDeckCell()].flatMap(r=>r.cardEntities).filter(r=>(r.lvl??12)<4).filter(r=>{var n;return(n=r.status.monsterCategories)==null?void 0:n.includes("Tuner")}),a=e.activator.getMonsterZones(),i=await e.activator.summonOne(e.activator,"SpecialSummon",["Effect"],e.action,t.map(r=>({monster:r,cells:a,posList:["Defense"]})),[],!1,!1);if(!i)throw new M(e);return i.statusOperatorBundle.push(new R("効果発動不可",r=>r.effectOwner.duel.clock.isSameTurn(r.isSpawnedAt),!1,e.action.entity,e.action,()=>!0,()=>({canActivateEffect:!1}))),!0},settle:async()=>!0},{title:"②シンクロ召喚",isMandatory:!1,playType:"QuickEffect",spellSpeed:"Quick",executableCells:w,executablePeriods:["main1","main2"],executableDuelistTypes:["Controller"],isOnlyNTimesPerChain:1,canPayCosts:j,validate:e=>{if(e.activator.isTurnPlayer)return;const t=[...e.activator.getMonsterZones(),...e.activator.duel.field.getCells("ExtraMonsterZone")],a=e.activator.getExtraDeck().cardEntities.filter(r=>{var n;return(n=r.status.monsterCategories)==null?void 0:n.includes("Syncro")}).filter(r=>{var n;return(n=r.status.monsterCategories)==null?void 0:n.includes("Tuner")});return e.activator.getEnableSummonList(e.activator,"SyncroSummon",["SpecialSummon","Effect"],e.action,a.map(r=>({monster:r,cells:t,posList:b})),[{material:e.action.entity,cell:e.action.entity.fieldCell}],!1).length?[]:void 0},payCosts:z,prepare:k,execute:async e=>{const t=[...e.activator.getMonsterZones(),...e.activator.duel.field.getCells("ExtraMonsterZone")],a=e.activator.getExtraDeck().cardEntities.filter(r=>{var n;return(n=r.status.monsterCategories)==null?void 0:n.includes("Syncro")}).filter(r=>{var n;return(n=r.status.monsterCategories)==null?void 0:n.includes("Tuner")});return!!await e.activator.summonOne(e.activator,"SyncroSummon",["SpecialSummon","Effect"],e.action,a.map(r=>({monster:r,cells:t,posList:b})),[],!1,!1)},settle:async()=>!0}]}}const It=Object.freeze(Object.defineProperty({__proto__:null,default:ct},Symbol.toStringTag,{value:"Module"}));function*ot(){yield{name:"封印されしエクゾディア",actions:[u,d,C,v,{title:"封印開放",isMandatory:!0,playType:"Exodia",spellSpeed:"Normal",executableCells:["Hand"],executablePeriods:B,executableDuelistTypes:["Controller"],validate:e=>{const t=e.activator.getHandCell().cardEntities.filter(a=>{var i;return(i=a.origin.nameTags)==null?void 0:i.includes("封印されし")}).map(a=>a.origin.name).getDistinct();return console.log(e.action.entity.toString(),t),t.length===5?[]:void 0},prepare:async e=>(await T.sendManyToGraveyardForTheSameReason(e.activator.duel.field.getCardsOnFieldStrictly(),["Rule"],e.action.entity,e.activator),{selectedEntities:[],chainBlockTags:[],prepared:void 0,nextChainBlockFilter:()=>!1}),execute:async e=>{const t=e.activator.getOpponentPlayer().getHandCell().cardEntities.filter(i=>{var r;return(r=i.origin.nameTags)==null?void 0:r.includes("封印されし")}).map(i=>i.origin.name).getDistinct().length===5,a=[{name:"封印されし者の左足",column:4},{name:"封印されし者の右足",column:2},{name:"封印されし者の左腕",column:5},{name:"封印されし者の右腕",column:1},{name:"封印されしエクゾディア",column:3}];for(const i of a){const r=[e.activator.getHandCell().cardEntities.find(n=>n.origin.name===i.name),e.activator.getOpponentPlayer().getHandCell().cardEntities.find(n=>n.origin.name===i.name)].filter(n=>n!==void 0);if(!r.length)throw new x("想定されない状態",e.activator.getHandCell().cardEntities,i.name);await ue.moveMany(r.map(n=>[n,n.controller.getMonsterZones().find(l=>l.column===(n.controller.seat==="Above"?6-i.column:i.column))??n.controller.getFieldZone(),"Monster","FaceUp","Vertical","Top",["Rule"],void 0,void 0,void 0]))}throw t?new te(void 0,`お互いが、${e.action.entity.toString()}の特殊勝利条件を同時に満たした。`):new te(e.activator,`${e.action.entity.toString()}の特殊勝利条件を満たした。`)},settle:async()=>!0}]}}const ea=Object.freeze(Object.defineProperty({__proto__:null,default:ot},Symbol.toStringTag,{value:"Module"}));function*ut(){yield{name:"ファイアウォール・ドラゴン・シンギュラリティ",actions:[u,ee(e=>e.length>2),{title:"①バウンス＆自己強化",isMandatory:!1,playType:"QuickEffect",spellSpeed:"Quick",executableCells:w,executablePeriods:[...S,...h],executableDuelistTypes:["Controller"],isOnlyNTimesPerTurn:1,validate:e=>[...e.activator.getGraveyard().cardEntities,...e.activator.getMonstersOnField()].flatMap(r=>r.status.monsterCategories??[]).getDistinct().union(["Ritual","Fusion","Syncro","Xyz"]).length<1?void 0:[...e.activator.getOpponentPlayer().getGraveyard().cardEntities,...e.activator.getOpponentPlayer().getEntiteisOnField()].filter(r=>r.canBeTargetOfEffect(e)).length?[]:void 0,prepare:async e=>{const a=[...e.activator.getGraveyard().cardEntities,...e.activator.getMonstersOnField()].flatMap(n=>n.status.monsterCategories??[]).getDistinct().union(["Ritual","Fusion","Syncro","Xyz"]).length;if(a<1)return;const i=[...e.activator.getOpponentPlayer().getGraveyard().cardEntities,...e.activator.getOpponentPlayer().getEntiteisOnField()].filter(n=>n.canBeTargetOfEffect(e));if(i.length<1)return;const r=await e.action.entity.duel.view.waitSelectEntities(e.activator,{selectables:i,qty:void 0,validator:n=>n.length>0&&n.length<=a,cancelable:!1},"手札に戻すカードを選択。")??[];if(r.length)return{selectedEntities:r,chainBlockTags:[],prepared:void 0}},execute:async e=>{const t=e.selectedEntities.filter(i=>i.isOnFieldStrictly||i.fieldCell.cellType==="Graveyard").filter(i=>i.canBeEffected(e.activator,e.action.entity,e.action));await T.returnManyToHandForTheSameReason(t,["Effect"],e.action.entity,e.activator);const a=t.filter(i=>i.fieldCell.cellType==="Hand"||i.fieldCell.cellType==="ExtraDeck").length;return e.action.entity.numericOprsBundle.push(D.createLingeringAddition(e.action.title,i=>i.isSpawnedBy.isEffective,e.action.entity,e.action,"attack",(i,r,n)=>n+500*a)),!0},settle:async()=>!0},{title:"②蘇生",isMandatory:!1,playType:"TriggerEffect",spellSpeed:"Normal",executableCells:w,executablePeriods:B,executableDuelistTypes:["Controller"],isOnlyNTimesPerTurn:1,validate:e=>{const t=e.action.entity.moveLog.latestRecord.movedAt,a=e.action.duel.field.moveLog.getPriviousChainLog().filter(n=>(console.log(n,n.entity.fieldCell.cellType==="Graveyard",n.movedAs.includes("BattleDestroy")),n.entity.fieldCell.cellType==="Graveyard"||n.movedAs.includes("BattleDestroy"))).filter(n=>n.movedAt.totalProcSeq>t.totalProcSeq).map(n=>n.entity.wasMovedFrom).toArray();if(!e.action.entity.linkArrowDests.union(a).length)return;const i=e.activator.getMonsterZones();if(e.activator.getEnableSummonList(e.activator,"SpecialSummon",["Effect"],e.action,e.activator.getGraveyard().cardEntities.filter(n=>n.kind==="Monster").filter(n=>n.types.includes("Cyberse")).filter(n=>n.canBeTargetOfEffect(e)).map(n=>({monster:n,posList:b,cells:i})),[],!1).length)return y(e)},prepare:e=>P(e,e.activator.getGraveyard().cardEntities.filter(t=>t.kind==="Monster").filter(t=>t.types.includes("Cyberse")).filter(t=>t.canBeTargetOfEffect(e)),b),execute:e=>O(e,b),settle:async()=>!0}]}}const ta=Object.freeze(Object.defineProperty({__proto__:null,default:ut},Symbol.toStringTag,{value:"Module"}));function*dt(){yield*["イグナイト・イーグル","イグナイト・マグナム","イグナイト・ドラグノフ","イグナイト・マスケット","イグナイト・デリンジャー","イグナイト・ライオット","イグナイト・ウージー","イグナイト・キャリバー"].map(e=>({name:e,actions:[u,d,v,C,ne,{title:"①サーチ",isMandatory:!1,playType:"IgnitionEffect",spellSpeed:"Normal",executableCells:["SpellAndTrapZone"],executablePeriods:["main1","main2"],executableDuelistTypes:["Controller"],validate:t=>{var i;const a=t.activator.getPendulumScaleMonsters().find(r=>r!==t.action.entity);if(a&&(i=a.status.nameTags)!=null&&i.includes("イグナイト"))return t.activator.getDeckCell().cardEntities.some(r=>{var n;return(n=r.status.nameTags)==null?void 0:n.includes("イグナイト")})?[]:void 0},prepare:async t=>({selectedEntities:[],chainBlockTags:["SearchFromDeck",...t.action.calcChainBlockTagsForDestroy(t.activator.getPendulumScaleMonsters())],prepared:void 0}),execute:async t=>{if(!(await T.tryDestroy(t.activator.getPendulumScaleMonsters(),t)).length)return!1;const i=t.activator.getDeckCell().cardEntities.filter(n=>{var l;return(l=n.status.nameTags)==null?void 0:l.includes("イグナイト")});if(!i.length)return!1;const r=await t.activator.waitSelectEntity(i,"手札に加えるカードを選択。",!1);return r?(await r.addToHand(["Effect"],t.action.entity,t.activator),!0):!1},settle:async()=>!0}]}))}const aa=Object.freeze(Object.defineProperty({__proto__:null,default:dt},Symbol.toStringTag,{value:"Module"}));function*pt(){yield{name:"ジャンク・コレクター",actions:[u,d,v,C,{title:"罠コピー",isMandatory:!1,playType:"QuickEffect",spellSpeed:"Quick",executableCells:w,executablePeriods:S,executableDuelistTypes:["Controller"],canPayCosts:e=>e.activator.getGraveyard().cardEntities.filter(a=>a.kind==="Trap").filter(a=>a.status.trapCategory==="Normal").filter(a=>e.activator.canTryBanish(a,"BanishAsCost",e.action)).filter(a=>a.canBeBanished("BanishAsCost",e.activator,e.action.entity,e.action)).flatMap(a=>a.actions).filter(a=>a.playType==="CardActivation").filter(a=>!a.needsToPayCost).filter(a=>a.validate(e.activator,[],!0)).length?j(e):!1,validate:()=>[],payCosts:async(e,t,a)=>{const i=e.activator.getGraveyard().cardEntities.filter(l=>l.kind==="Trap").filter(l=>l.status.trapCategory==="Normal").filter(l=>e.activator.canTryBanish(l,"BanishAsCost",e.action)).filter(l=>l.canBeBanished("BanishAsCost",e.activator,e.action.entity,e.action)).flatMap(l=>l.actions).filter(l=>l.playType==="CardActivation").filter(l=>!l.needsToPayCost).filter(l=>l.validate(e.activator,[],!0)).map(l=>l.entity),r=await e.activator.waitSelectEntity(i,"コピーする罠を選択。",a);if(!r)return;const n=[e.action.entity,r];return await T.banishManyForTheSameReason(n,["Cost"],e.action.entity,e.activator),{banish:n}},prepare:async(e,t)=>{var r;const a=(r=e.costInfo.banish)==null?void 0:r.find(n=>n!==e.action.entity);if(!a)throw new x("想定されない状況",e,e.costInfo);const i=a.actions.find(n=>n.playType==="CardActivation");if(!i)throw new x("想定されない状況",e,e.costInfo,a);return await i.prepare(e.activator,void 0,void 0,t,!1,!0)},execute:async(e,t)=>{var r;const a=(r=e.costInfo.banish)==null?void 0:r.find(n=>n!==e.action.entity);if(!a)throw new x("想定されない状況",e,e.costInfo);const i=a.actions.find(n=>n.playType==="CardActivation");if(!i)throw new x("想定されない状況",e,e.costInfo,a);return await i.execute(e,t)},settle:async()=>!0}]}}const ia=Object.freeze(Object.defineProperty({__proto__:null,default:pt},Symbol.toStringTag,{value:"Module"}));function*vt(){yield{name:"ダーク・リゾネーター",actions:[u,d,v,C],substituteEffects:[Oe(1)]},yield{name:"レッド・リゾネーター",actions:[u,d,v,C,{title:"①特殊召喚",isMandatory:!1,playType:"TriggerEffect",spellSpeed:"Normal",executableCells:["MonsterZone"],executablePeriods:[...S,...h],executableDuelistTypes:["Controller"],validate:e=>{if(!e.action.entity.hasBeenSummonedNow(["NormalSummon"]))return;const t=e.activator.getMonsterZones();if(e.activator.getEnableSummonList(e.activator,"SpecialSummon",["Effect"],e.action,e.activator.getHandCell().cardEntities.filter(i=>i.kind==="Monster").filter(i=>(i.lvl??12)<5).map(i=>({monster:i,posList:b,cells:t})),[],!1).length)return[]},prepare:async()=>({selectedEntities:[],chainBlockTags:["SpecialSummonFromHand"],prepared:void 0}),execute:async e=>{const t=e.activator.getMonsterZones(),a=e.activator.getHandCell().cardEntities.filter(r=>r.kind==="Monster").filter(r=>(r.lvl??12)<5).map(r=>({monster:r,posList:b,cells:t}));return!!await e.activator.summonOne(e.activator,"SpecialSummon",["Effect"],e.action,a,[],!1,!1)},settle:async()=>!0},{title:"②回復",isMandatory:!1,playType:"TriggerEffect",spellSpeed:"Normal",executableCells:["MonsterZone"],executablePeriods:[...S,...h],executableDuelistTypes:["Controller"],hasToTargetCards:!0,isOnlyNTimesPerTurn:1,validate:e=>{if(e.action.entity.hasBeenSummonedNow(["SpecialSummon"]))return e.activator.getMonstersOnField().filter(t=>t.canBeTargetOfEffect(e)).filter(t=>(t.atk??0)>0).some(t=>t.info.summonKinds.includes("SpecialSummon"))?[]:void 0},prepare:async e=>{const t=await e.activator.waitSelectEntity(e.activator.getMonstersOnField().filter(a=>a.canBeTargetOfEffect(e)).filter(a=>(a.atk??0)>0).filter(a=>a.info.summonKinds.includes("SpecialSummon")),"対象とするモンスターを選択",!1);if(t)return{selectedEntities:[t],chainBlockTags:[],prepared:void 0}},execute:async e=>{const t=e.activator.lp;return e.selectedEntities.filter(a=>a.isOnFieldAsMonsterStrictly).forEach(a=>e.activator.heal(a.atk??0,e.action.entity)),e.activator.lp!==t},settle:async()=>!0}]}}const ra=Object.freeze(Object.defineProperty({__proto__:null,default:vt},Symbol.toStringTag,{value:"Module"})),ae=(e,t)=>{const a=t?`魔力充填可能(${t})`:"魔力充填可能";return ie(a,e,i=>[i],()=>!0,i=>[new R(a,()=>!0,!0,i,{},(r,n)=>r.isSpawnedBy===n,(r,n)=>(n.maxCounterQty.SpellCounter=t??Number.MAX_VALUE,{...n,maxCounterQty:n.maxCounterQty}))])},Q={},gt=(e,t=1)=>(Q[t]||(Q[t]={title:`魔力回収(${t})`,isMandatory:!0,playType:"AfterChainBlock",spellSpeed:"Normal",executableCells:["MonsterZone"],executablePeriods:B,executableDuelistTypes:["Controller"],validate:a=>{if(!a.targetChainBlock||a.targetChainBlock.action.playType!=="CardActivation"||a.targetChainBlock.action.entity.kind!=="Spell"||!a.action.entity.isEffective||a.action.entity.face==="FaceDown")return;const i=a.action.entity.status.maxCounterQty.SpellCounter??0;if(!(a.action.entity.counterHolder.getQty("SpellCounter")>=i)&&!(a.action.entity.hadArrivedToFieldAt().totalProcSeq>a.targetChainBlock.isActivatedAt.totalProcSeq))return[]},prepare:k,execute:async a=>a.action.entity.face==="FaceDown"||!a.action.entity.isOnFieldAsMonsterStrictly||!a.action.entity.isEffective?!1:(a.action.entity.counterHolder.add("SpellCounter",t,a.action.entity),!0),settle:async()=>!0}),{...Q[t],title:`${e}魔力回収(${t})`}),W=(e,t,a)=>e.action.entity.counterHolder.getQty("SpellCounter")>=a,X=(e,t,a,i)=>{const r=i[0];return e.action.entity.counterHolder.remove("SpellCounter",r),{counter:r}};function*ft(){yield{name:"魔導戦士 ブレイカー",actions:[u,d,v,C,{title:"①魔力充填",isMandatory:!0,playType:"TriggerEffect",spellSpeed:"Normal",executableCells:["MonsterZone"],executablePeriods:["main1","main2"],executableDuelistTypes:["Controller"],validate:e=>{if(e.action.entity.hasBeenSummonedNow(["NormalSummon"]))return[]},prepare:async()=>({selectedEntities:[],chainBlockTags:["IfNormarlSummonSucceed"],prepared:void 0}),execute:async e=>e.action.entity.face==="FaceDown"?!1:(e.action.entity.counterHolder.setQty("SpellCounter",1,e.action.entity),!0),settle:async()=>!0},{title:"③マナブレイク",isMandatory:!1,playType:"IgnitionEffect",spellSpeed:"Normal",executableCells:["MonsterZone"],executablePeriods:["main1","main2"],executableDuelistTypes:["Controller"],hasToTargetCards:!0,canPayCosts:(e,t)=>W(e,t,1),validate:e=>{const t=e.action.entity.field.getCells(...q).flatMap(a=>a.cardEntities).filter(a=>a.canBeTargetOfEffect(e));if(t.length)return t.map(a=>a.fieldCell)},payCosts:async(e,t,a)=>X(e,t,a,[1]),prepare:async(e,t,a)=>{var r;let i=(r=e.dest)==null?void 0:r.cardEntities[0];if(!i){const n=e.action.entity.field.getCells(...q).flatMap(c=>c.cardEntities).filter(c=>c.canBeTargetOfEffect(e)),l=await e.activator.waitSelectEntity(n,"破壊する対象を選択。",a);if(!l)return;i=l}return{selectedEntities:[i],chainBlockTags:e.action.calcChainBlockTagsForDestroy([i]),prepared:void 0}},execute:async e=>e.selectedEntities.every(t=>!t.isOnFieldAsSpellTrapStrictly)?!1:(await T.tryDestroy(e.selectedEntities,e),!0),settle:async()=>!0}],continuousEffects:[ae("Monster",1),G("②攻撃力上昇","Monster",e=>[e],()=>!0,e=>[D.createContinuous("②攻撃力上昇",()=>!0,e,()=>!0,"attack","wip","Addition",(t,a,i)=>t.isEffective?i+t.counterHolder.getQty("SpellCounter")*300:i)])]},yield{name:"王立魔法図書館",actions:[u,d,v,C,{...gt("①",1)},{title:"②ドロー",isMandatory:!1,playType:"IgnitionEffect",spellSpeed:"Normal",executableCells:["MonsterZone"],executablePeriods:["main1","main2"],executableDuelistTypes:["Controller"],canPayCosts:(e,t)=>W(e,t,3),validate:e=>{if(e.activator.getDeckCell().cardEntities.length)return[]},payCosts:async(e,t,a)=>X(e,t,a,[3]),prepare:k,execute:async e=>(await e.activator.draw(1,e.action.entity,e.activator),!0),settle:async()=>!0}],continuousEffects:[ae("Monster",3)]}}const na=Object.freeze(Object.defineProperty({__proto__:null,canPaySpellCounters:W,default:ft,paySpellCounters:X},Symbol.toStringTag,{value:"Module"}));function*yt(){yield{name:"スターダスト・ドラゴン",actions:[u,d,v,_(),{title:"①ヴィクテム・サンクチュアリ",isMandatory:!1,playType:"QuickEffect",spellSpeed:"Quick",executableCells:["MonsterZone","ExtraMonsterZone"],executablePeriods:B,executableDuelistTypes:["Controller"],canPayCosts:Y,validate:(e,t)=>t.length===0?void 0:t[e.index-1].chainBlockTags.includes("DestroyOnField")?[]:void 0,payCosts:I,prepare:async(e,t)=>{const a=t.slice(-1)[0];return{selectedEntities:[],chainBlockTags:e.action.calcChainBlockTagsForDestroy([a.action.entity]),prepared:void 0}},execute:async(e,t)=>{const a=t[e.index-1];return a.isNegatedActivationBy=e.action,await T.tryDestroy([a.action.entity],e),!0},settle:async()=>!0},{title:"②自己再生",playType:"IgnitionEffect",isMandatory:!1,spellSpeed:"Normal",executableCells:["Graveyard"],executablePeriods:["end"],executableDuelistTypes:["Controller"],validate:e=>{const t=e.action.entity.moveLog.latestRecord;if(t.movedBy!==e.action.entity||!e.activator.duel.clock.isSameTurn(t.movedAt)||!t.movedAs.includes("Cost"))return;const a=e.activator.duel,i=e.action.entity.actionLogRecords.filter(n=>a.clock.isSameTurn(n.clock)).map(n=>n.chainBlockInfo).findLast(n=>n.action.title==="①ヴィクテム・サンクチュアリ");return!i||i.state!=="done"?void 0:e.activator.getAvailableMonsterZones().length>0?[]:void 0},prepare:k,execute:e=>A(e),settle:async()=>!0}]},yield{name:"閃珖竜 スターダスト",actions:[u,d,_(),{title:"波動音壁",isMandatory:!1,playType:"QuickEffect",spellSpeed:"Quick",executableCells:w,executablePeriods:S,executableDuelistTypes:["Controller"],isOnlyNTimesPerTurnIfFaceup:1,hasToTargetCards:!0,validate:e=>{const t=e.activator.getEntiteisOnField().filter(a=>a.face==="FaceUp").filter(a=>a.canBeTargetOfEffect(e));if(t.length)return t.map(a=>a.fieldCell)},prepare:async(e,t,a)=>{if(e.dest)return{selectedEntities:e.dest.cardEntities,chainBlockTags:[],prepared:void 0};const i=e.activator.getEntiteisOnField().filter(n=>n.face==="FaceUp").filter(n=>n.canBeTargetOfEffect(e));if(!i.length)return;const r=await e.activator.waitSelectEntity(i,"対象とするカードを選択",a);if(r)return{selectedEntities:[r],chainBlockTags:[],prepared:void 0}},execute:async e=>(e.selectedEntities.filter(t=>t.isOnFieldStrictly).filter(t=>t.face==="FaceUp").filter(t=>t.canBeEffected(e.activator,e.action.entity,e.action)).forEach(t=>{t.counterHolder.add("SonicBarrier",1,e.action.entity)}),!0),settle:async()=>!0}],substituteEffects:[{title:"波動音壁（適用）",isMandatory:!0,executableCells:K,executablePeriods:B,executableDuelistTypes:["Controller"],isApplicableTo:(e,t,a)=>a.filter(i=>i.counterHolder.getQty("SonicBarrier",e.entity)>0),substitute:async(e,t,a)=>{const i=a.filter(r=>r.counterHolder.getQty("SonicBarrier",e.entity)>0);return i.forEach(r=>{r.counterHolder.removeAll("SonicBarrier",e.entity),e.entity.controller.writeInfoLog(`波動音壁により${r.toString()}は１ターンに１度だけ戦闘効果では破壊されない。`)}),i}}]},yield{name:"真閃珖竜 スターダスト・クロニクル",actions:[u,d,_(e=>e.length===1&&e.every(t=>{var a;return(a=t.status.monsterCategories)==null?void 0:a.includes("Syncro")}),e=>e.length>0&&e.every(t=>{var a;return(a=t.status.monsterCategories)==null?void 0:a.includes("Syncro")})),{title:"波動護魂",isMandatory:!1,playType:"QuickEffect",spellSpeed:"Quick",executableCells:w,executablePeriods:S,executableDuelistTypes:["Controller"],isOnlyNTimesPerTurnIfFaceup:1,canPayCosts:e=>ge(e,e.activator.getGraveyard().cardEntities.filter(t=>{var a;return(a=t.status.monsterCategories)==null?void 0:a.includes("Syncro")})),validate:()=>[],payCosts:e=>fe(e,e.activator.getGraveyard().cardEntities.filter(t=>{var a;return(a=t.status.monsterCategories)==null?void 0:a.includes("Syncro")}),t=>t.length===1,1),prepare:k,execute:async e=>(e.action.entity.procFilterBundle.push(J.createLingering(e.action.title,t=>t.effectOwner.duel.clock.isSameTurn(t.isSpawnedAt),e.action.entity,e.action,()=>!0,["Effect"],()=>!1)),!0),settle:async()=>!0},{title:"②蘇生",isMandatory:!1,playType:"TriggerEffect",spellSpeed:"Normal",executableCells:["Banished"],executablePeriods:[...S,...h],executableDuelistTypes:["Controller"],validate:e=>{if(!e.action.entity.wasMovedAtPreviousChain)return;const t=e.activator.getMonsterZones();if(e.activator.getEnableSummonList(e.activator,"SpecialSummon",["Effect"],e.action,e.activator.getBanished().cardEntities.filter(i=>i.kind==="Monster").filter(i=>i.face==="FaceUp").filter(i=>i.types.includes("Dragon")).filter(i=>{var r;return(r=i.status.monsterCategories)==null?void 0:r.includes("Syncro")}).filter(i=>i.canBeTargetOfEffect(e)).map(i=>({monster:i,posList:b,cells:t})),[],!1).length)return[]},prepare:e=>P(e,e.activator.getBanished().cardEntities.filter(t=>t.kind==="Monster").filter(t=>t.face==="FaceUp").filter(t=>t.types.includes("Dragon")).filter(t=>{var a;return(a=t.status.monsterCategories)==null?void 0:a.includes("Syncro")}).filter(t=>t.canBeTargetOfEffect(e))),execute:async e=>O(e),settle:async()=>!0}]},yield{name:"聖珖神竜 スターダスト・シフル",actions:[u,d,_(e=>e.length===1&&e.every(t=>{var a;return(a=t.status.monsterCategories)==null?void 0:a.includes("Syncro")}),e=>e.length>1&&e.every(t=>{var a;return(a=t.status.monsterCategories)==null?void 0:a.includes("Syncro")})),{title:"②珖波動反撃",isMandatory:!1,playType:"QuickEffect",spellSpeed:"Quick",executableCells:["Hand"],executablePeriods:S,executableDuelistTypes:["Controller"],isOnlyNTimesPerTurnIfFaceup:1,negatePreviousBlock:!0,validate:e=>{if(e.targetChainBlock&&e.activator!==e.targetChainBlock.activator&&e.targetChainBlock.action.entity.kind==="Monster"&&e.targetChainBlock.action.isWithChainBlock)return[]},prepare:async()=>({selectedEntities:[],chainBlockTags:["NegateCardEffect","DestroyOnField"],prepared:void 0}),execute:async e=>{if(!e.targetChainBlock)return!1;const t=e.targetChainBlock;t.isNegatedEffectBy=e.action;const a=await e.activator.waitSelectEntity(e.action.duel.field.getCardsOnFieldStrictly(),"破壊するカードを選択。",!1);return(await T.tryDestroy(a?[a]:[],e)).length>0},settle:async()=>!0},{title:"③蘇生",isMandatory:!1,playType:"IgnitionEffect",spellSpeed:"Normal",executableCells:["Graveyard"],executablePeriods:["main1","main2"],executableDuelistTypes:["Controller"],priorityForNPC:10,canPayCosts:j,validate:e=>e.activator.getBanished().cardEntities.filter(a=>{var i;return(i=a.status.nameTags)==null?void 0:i.includes("スターダスト")}).filter(a=>(a.lvl??12)<9).length===0?void 0:e.activator.getAvailableMonsterZones().length>0?[]:void 0,payCosts:z,prepare:e=>P(e,e.activator.getBanished().cardEntities.filter(t=>{var a;return(a=t.status.nameTags)==null?void 0:a.includes("スターダスト")}).filter(t=>(t.lvl??12)<9),b,t=>t.length===1),execute:e=>O(e,b),settle:async()=>!0}],substituteEffects:[{title:"波動聖句",isMandatory:!0,executableCells:["MonsterZone"],executablePeriods:B,executableDuelistTypes:["Controller"],isApplicableTo:(e,t,a)=>a.filter(i=>i.controller===e.entity.controller).filter(i=>i.counterHolder.getQty("SonicVerse",e.entity)===0),substitute:async(e,t,a)=>{if(!e.entity.isEffective)return[];const i=a.filter(r=>r.controller===e.entity.controller).filter(r=>r.counterHolder.getQty("SonicVerse",e.entity)===0);return i.forEach(r=>{r.counterHolder.add("SonicVerse",1,e.entity),e.entity.controller.writeInfoLog(`${e.entity.toString()}の効果により${r.toString()}は１ターンに１度だけ破壊されない。`)}),i}}]}}const la=Object.freeze(Object.defineProperty({__proto__:null,default:yt},Symbol.toStringTag,{value:"Module"}));function*St(){yield{name:"フォーミュラ・シンクロン",actions:[u,d,v,_(),{title:"①ドロー",isMandatory:!1,playType:"TriggerEffect",spellSpeed:"Normal",executableCells:w,executablePeriods:[...S,...h],executableDuelistTypes:["Controller"],validate:e=>{if(e.action.entity.hasBeenSummonedJustNow(["SyncroSummon"])&&e.activator.getDeckCell().cardEntities.length)return[]},prepare:async()=>({selectedEntities:[],chainBlockTags:["Draw"],prepared:void 0}),execute:async e=>(await e.activator.draw(1,e.action.entity,e.activator),!0),settle:async()=>!0},ce({title:"②シンクロ召喚",isOnlyNTimesPerChain:1})]}}const sa=Object.freeze(Object.defineProperty({__proto__:null,default:St},Symbol.toStringTag,{value:"Module"}));function*Tt(){yield{name:"調律",actions:[{title:"発動",isMandatory:!1,playType:"CardActivation",spellSpeed:"Normal",executableCells:["Hand","SpellAndTrapZone"],executablePeriods:["main1","main2"],executableDuelistTypes:["Controller"],priorityForNPC:40,validate:e=>{const t=e.activator.getDeckCell().cardEntities;if(!(t.length<2)&&t.filter(a=>{var i;return(i=a.status.nameTags)==null?void 0:i.includes("シンクロン")}).filter(a=>{var i;return(i=a.status.monsterCategories)==null?void 0:i.includes("Tuner")}).length!==0)return y(e)},prepare:async()=>({selectedEntities:[],chainBlockTags:["SearchFromDeck","SendToGraveyardFromDeck"],prepared:void 0}),execute:async e=>{const t=e.activator.getDeckCell().cardEntities;if(t.length<2)return!1;const a=t.filter(r=>{var n;return(n=r.status.nameTags)==null?void 0:n.includes("シンクロン")}).filter(r=>{var n;return(n=r.status.monsterCategories)==null?void 0:n.includes("Tuner")});if(a.length===0)return!1;const i=await e.activator.waitSelectEntity(a,"手札に加えるモンスターを選択",!1);if(!i)throw new M(e);return await i.addToHand(["Effect"],e.action.entity,e.activator),e.activator.getDeckCell().shuffle(),e.activator.duel.clock.incrementProcSeq(),await e.activator.getDeckCell().cardEntities[0].sendToGraveyard(["Effect"],e.action.entity,e.activator),!0},settle:async()=>!0},g]}}const ca=Object.freeze(Object.defineProperty({__proto__:null,default:Tt},Symbol.toStringTag,{value:"Module"}));function*Ct(){yield{name:"星杯の妖精リース",actions:[u,d,v,C,{title:"①サーチ",isMandatory:!1,playType:"TriggerEffect",spellSpeed:"Normal",executableCells:["MonsterZone"],executablePeriods:[...S,...h],executableDuelistTypes:["Controller"],isOnlyNTimesPerTurn:1,validate:e=>{if(e.action.entity.hasBeenSummonedNow(["NormalSummon","SpecialSummon"])&&e.activator.getDeckCell().cardEntities.filter(t=>t.kind==="Monster").filter(t=>{var a;return(a=t.status.nameTags)==null?void 0:a.includes("星杯")}).length!==0)return[]},prepare:async()=>({selectedEntities:[],chainBlockTags:["SearchFromDeck"],prepared:void 0}),execute:async e=>{const t=e.activator.getDeckCell().cardEntities.filter(i=>i.kind==="Monster").filter(i=>{var r;return(r=i.status.nameTags)==null?void 0:r.includes("星杯")});if(t.length===0)return!1;const a=await e.activator.waitSelectEntity(t,"手札に加えるモンスターを選択",!1);if(!a)throw new x("想定されない状態",e);return await a.addToHand(["Effect"],e.action.entity,e.activator),!0},settle:async()=>!0},{title:"②自己サルベージ",isMandatory:!1,playType:"IgnitionEffect",spellSpeed:"Normal",executableCells:["Graveyard"],executablePeriods:["main1","main2"],executableDuelistTypes:["Controller"],isOnlyNTimesPerTurn:1,canPayCosts:e=>[...e.activator.getMonstersOnField(),...e.activator.getHandCell().cardEntities.filter(t=>t.kind==="Monster")].some(t=>t.canBeSentToGraveyard(e.activator,e.action.entity,"SendToGraveyardAsCost",e.action)),validate:()=>[],payCosts:async e=>{const t=[...e.activator.getMonstersOnField(),...e.activator.getHandCell().cardEntities.filter(i=>i.kind==="Monster")].filter(i=>i.canBeSentToGraveyard(e.activator,e.action.entity,"SendToGraveyardAsCost",e.action)),a=await e.activator.waitSelectEntity(t,"墓地に送るモンスターを選択。",!0);if(a)return await a.sendToGraveyard(["Cost"],e.action.entity,e.activator),{sendToGraveyard:[a]}},prepare:async()=>({selectedEntities:[],chainBlockTags:["SearchFromDeck"],prepared:void 0}),execute:async e=>e.action.entity.wasMovedAfter(e.isActivatedAt)?!1:(await e.action.entity.addToHand(["Effect"],e.action.entity,e.activator),!0),settle:async()=>!0}]},yield{name:"星遺物－『星杯』",actions:[u,d,v,C,{title:"①墓地送り",isMandatory:!1,playType:"TriggerEffect",spellSpeed:"Normal",executableCells:["MonsterZone"],executablePeriods:[...S,...h],executableDuelistTypes:["Controller"],canPayCosts:Y,validate:e=>e.activator.duel.field.moveLog.getPriviousChainLog().filter(t=>t.movedAs.includes("SpecialSummon")).map(t=>t.entity).some(t=>t.wasMovedFrom.cellType==="ExtraDeck")?[]:void 0,payCosts:I,prepare:k,execute:async e=>{const t=e.activator.duel.field.moveLog.getPriviousChainLog().filter(a=>a.movedAs.includes("SpecialSummon")).map(a=>a.entity).filter(a=>a.wasMovedFrom.cellType==="ExtraDeck").filter(a=>a.isOnFieldAsMonsterStrictly).filter(a=>a.canBeEffected(e.activator,e.action.entity,e.action)).toArray();return await T.sendManyToGraveyardForTheSameReason(t,["Effect"],e.action.entity,e.activator),!0},settle:async()=>!0},{title:"②リクルート",isMandatory:!1,playType:"TriggerEffect",spellSpeed:"Normal",executableCells:["Hand","Graveyard","Banished"],executablePeriods:[...S,...h],executableDuelistTypes:["Controller"],validate:e=>{if(!e.action.entity.wasMovedAtPreviousChain||!e.action.entity.info.summonKinds.includes("NormalSummon")||e.action.entity.moveLog.previousPlaceRecord.face==="FaceDown")return;const t=e.activator.getDeckCell().cardEntities.filter(r=>r.kind==="Monster").filter(r=>{var n;return(n=r.status.nameTags)==null?void 0:n.includes("星杯")}).filter(r=>r.nm!=="星遺物－『星杯』"),a=e.activator.getMonsterZones();return e.activator.getEnableSummonList(e.activator,"SpecialSummon",["Effect"],e.action,t.map(r=>({monster:r,cells:a,posList:b})),[],!1).length>1?[]:void 0},prepare:k,execute:async e=>{const t=e.activator.getDeckCell().cardEntities.filter(r=>r.kind==="Monster").filter(r=>{var n;return(n=r.status.nameTags)==null?void 0:n.includes("星杯")}).filter(r=>r.nm!=="星遺物－『星杯』"),a=e.activator.getMonsterZones();return(await e.activator.summonMany(e.activator,"SpecialSummon",["Effect"],e.action,t.map(r=>({monster:r,cells:a,posList:b})),[],!1,2,r=>r.length==2,!1)??[]).length==2},settle:async()=>!0},{title:"③サーチ",isMandatory:!1,playType:"IgnitionEffect",spellSpeed:"Normal",executableCells:["Graveyard"],executablePeriods:["main1","main2"],executableDuelistTypes:["Controller"],canPayCosts:j,validate:e=>{if(!e.action.entity.wasMovedAtCurrentTurn)return e.activator.getDeckCell().cardEntities.filter(t=>{var a;return(a=t.status.nameTags)==null?void 0:a.includes("星遺物")}).length>0?[]:void 0},payCosts:z,prepare:async()=>({selectedEntities:[],chainBlockTags:["SearchFromDeck"],prepared:void 0}),execute:async e=>{const t=await e.activator.waitSelectEntity(e.activator.getDeckCell().cardEntities.filter(a=>{var i;return(i=a.status.nameTags)==null?void 0:i.includes("星遺物")}),"手札に加えるカードを選択",!1);return t?(await t.addToHand(["Effect"],e.action.entity,e.activator),!0):!1},settle:async()=>!0}]}}const oa=Object.freeze(Object.defineProperty({__proto__:null,default:Ct},Symbol.toStringTag,{value:"Module"}));function*bt(){yield{name:"ドットスケーパー",actions:[u,d,C,v,{title:"①自己再生",isMandatory:!1,playType:"TriggerEffect",spellSpeed:"Normal",executableCells:["Graveyard"],executablePeriods:[...S,...h],executableDuelistTypes:["Controller"],isOnlyNTimesPerDuel:1,actionGroupName:"ドットスケーパー",validate:e=>{if(e.action.entity.wasMovedAtPreviousChain)return e.activator.getAvailableMonsterZones().length>0?[]:void 0},prepare:async()=>({selectedEntities:[],chainBlockTags:["SpecialSummonFromGraveyard"],prepared:void 0}),execute:e=>A(e),settle:async()=>!0},{title:"②自己帰還",isMandatory:!1,playType:"TriggerEffect",spellSpeed:"Normal",executableCells:["Banished"],executablePeriods:[...S,...h],executableDuelistTypes:["Controller"],isOnlyNTimesPerDuel:1,actionGroupName:"ドットスケーパー",validate:e=>{if(e.action.entity.wasMovedAtPreviousChain)return e.activator.getAvailableMonsterZones().length>0?[]:void 0},prepare:async()=>({selectedEntities:[],chainBlockTags:["SpecialSummonFromBanished"],prepared:void 0}),execute:e=>A(e),settle:async()=>!0}]}}const ua=Object.freeze(Object.defineProperty({__proto__:null,default:bt},Symbol.toStringTag,{value:"Module"}));function*Et(){yield{name:"ゼラの天使",actions:[u,d,v,_(),{title:"②自己帰還",isMandatory:!0,playType:"IgnitionEffect",spellSpeed:"Normal",executableCells:["Banished"],executablePeriods:["stanby"],executableDuelistTypes:["Controller"],validate:e=>{if(e.action.entity.wasMovedAtPreviousTurn)return e.activator.getAvailableMonsterZones().length>0?[]:void 0},prepare:async()=>({selectedEntities:[],chainBlockTags:["SpecialSummonFromBanished"],prepared:void 0}),execute:e=>A(e),settle:async()=>!0}],continuousEffects:[G("②攻撃力上昇","Monster",e=>[e],()=>!0,e=>[D.createContinuous("①攻撃力上昇",()=>!0,e,()=>!0,"attack","wip","Addition",(t,a,i)=>t.isEffective?i+t.controller.getOpponentPlayer().getBanished().cardEntities.length*100:i)])]}}const da=Object.freeze(Object.defineProperty({__proto__:null,default:Et},Symbol.toStringTag,{value:"Module"}));function*ht(){yield{name:"死霊騎士デスカリバー・ナイト",actions:[u,d,C,v,{title:"①モンスター効果無効",isMandatory:!0,playType:"TriggerEffect",spellSpeed:"Quick",executableCells:w,executablePeriods:[...S,...h],executableDuelistTypes:["Controller"],negatePreviousBlock:!0,canPayCosts:Y,validate:e=>e.targetChainBlock&&e.targetChainBlock.action.entity.kind==="Monster"&&e.targetChainBlock.action.isWithChainBlock?[]:void 0,payCosts:I,prepare:async(e,t)=>{const a=e.targetChainBlock,i=t[e.index-1];return a!==i?{selectedEntities:[],chainBlockTags:[],prepared:void 0}:{selectedEntities:[],chainBlockTags:["NegateCardEffect",...e.action.calcChainBlockTagsForDestroy([a.action.entity])],prepared:void 0}},execute:async(e,t)=>{const a=t.find(r=>r.action.entity.kind!=="Monster"&&r.action.isWithChainBlock),i=t[e.index-1];return i!==a?!1:(i.isNegatedActivationBy=e.action,await T.tryDestroy([i.action.entity],e),!0)},settle:async()=>!0}]}}const pa=Object.freeze(Object.defineProperty({__proto__:null,default:ht},Symbol.toStringTag,{value:"Module"}));function*mt(){yield{name:"召喚僧サモンプリースト",actions:[u,d,C,v,{title:"①表示形式変更",isMandatory:!0,playType:"TriggerEffect",spellSpeed:"Normal",executableCells:["MonsterZone"],executablePeriods:[...S,...h],executableDuelistTypes:["Controller"],validate:e=>{if(e.action.entity.hasBeenSummonedNow(["NormalSummon","FlipSummon"]))return[]},prepare:async()=>({selectedEntities:[],chainBlockTags:["IfNormarlSummonSucceed"],prepared:void 0}),execute:async e=>e.action.entity.battlePosition!=="Attack"||!e.action.entity.isOnFieldAsMonsterStrictly?!1:(await e.action.entity.setBattlePosition("Defense",["Effect"],e.action.entity,e.activator),!0),settle:async()=>!0},{title:"③リクルート",isMandatory:!1,playType:"IgnitionEffect",spellSpeed:"Normal",executableCells:["MonsterZone"],executablePeriods:["main1","main2"],executableDuelistTypes:["Controller"],isOnlyNTimesPerTurnIfFaceup:1,canPayCosts:e=>e.activator.canDiscard?e.activator.getHandCell().cardEntities.some(t=>t.kind==="Spell"):!1,validate:e=>{const t=e.activator.getDeckCell().cardEntities.filter(r=>r.kind==="Monster").filter(r=>r.lvl===4),a=e.activator.getMonsterZones();if(e.activator.getEnableSummonList(e.activator,"SpecialSummon",["Effect"],e.action,t.map(r=>({monster:r,posList:b,cells:a})),[],!1).length)return[]},payCosts:async(e,t,a)=>{const i=e.activator.getHandCell().cardEntities.filter(n=>n.kind==="Spell"),r=await e.activator.waitSelectEntity(i,"手札コストを選択",a);if(!r&&!a)throw new M(e);if(r)return await r.discard(["Cost"],e.action.entity,e.activator),{discard:[r]}},prepare:async()=>({selectedEntities:[],chainBlockTags:["SpecialSummonFromDeck"],prepared:void 0}),execute:async e=>{const t=e.activator.getDeckCell().cardEntities.filter(r=>r.lvl===4),a=e.activator.getMonsterZones(),i=await e.activator.summonOne(e.activator,"SpecialSummon",["Effect"],e.action,t.map(r=>({monster:r,posList:b,cells:a})),[],!1,!1);return i?(i.statusOperatorBundle.push(new R("攻撃不可",r=>r.effectOwner.duel.clock.isSameTurn(r.isSpawnedAt),!1,e.action.entity,e.action,()=>!0,(r,n)=>({...n,canAttack:!1}))),!!i):!1},settle:async()=>!0}],continuousEffects:[re("②リリース不可","Monster",e=>[e],()=>!0,e=>[new J("②リリース不可",()=>!0,!0,e,{},()=>!0,["AdvanceSummonRelease","ReleaseAsEffect","ReleaseAsCost"],()=>!1)])]}}const va=Object.freeze(Object.defineProperty({__proto__:null,default:mt},Symbol.toStringTag,{value:"Module"}));function*kt(){yield{name:"エキセントリック・ボーイ",actions:[u,d,C,v],summonFilter:(e,t,a,i,r,n,l,c,o,s)=>{const p={posList:o,cells:s},f={posList:[],cells:[]};if(!r.includes("SyncroSummon"))return p;const E=c.find(m=>m.material===e.isSpawnedBy);return E?!E.cell.isMonsterZoneLikeCell||c.length!==2?f:c.filter(m=>m!==E).every(m=>m.cell.cellType==="Hand")?p:f:p},defaultStatus:{allowHandSyncro:!0},onUsedAsMaterial:(e,t)=>{t.info.summonKinds.includes("SyncroSummon")&&(t.info.willBeBanished=!0,t.info.isEffectiveIn=t.info.isEffectiveIn.filter(a=>a!=="ExtraMonsterZone").filter(a=>a!=="MonsterZone"))}}}const ga=Object.freeze(Object.defineProperty({__proto__:null,default:kt},Symbol.toStringTag,{value:"Module"})),Mt={title:"ペンデュラム召喚",isMandatory:!1,playType:"SpecialSummon",spellSpeed:"Normal",executableCells:["Hand"],executablePeriods:["main1","main2"],executableDuelistTypes:["Controller"],isOnlyNTimesPerTurn:1,validate:e=>{const t=e.activator.getPendulumScales();if(!t||t.upperBound-t.lowerBound<2)return;const a=[...e.activator.getHandCell().cardEntities.filter(n=>n.kind==="Monster"),...e.activator.getExtraDeck().cardEntities.filter(n=>n.face==="FaceUp")].filter(n=>n.kind==="Monster").filter(n=>n.lvl&&n.lvl>t.lowerBound).filter(n=>n.lvl&&n.lvl<t.upperBound);if(!a.length)return;const i=[...e.activator.getMonsterZones(),...e.activator.getEmptyExtraZones()];return e.activator.getEnableSummonList(e.activator,"PendulumSummon",["Rule"],e.action,a.map(n=>({monster:n,cells:i,posList:b})),[],!1).length?[]:void 0},prepare:async e=>{const t=e.activator.getPendulumScales();if(!t||t.upperBound-t.lowerBound<2)return;const a=[...e.activator.getHandCell().cardEntities.filter(r=>r.kind==="Monster"),...e.activator.getExtraDeck().cardEntities.filter(r=>r.face==="FaceUp")].filter(r=>r.kind==="Monster").filter(r=>r.lvl&&r.lvl>t.lowerBound).filter(r=>r.lvl&&r.lvl<t.upperBound);if(!a.length)return;const i=[...e.activator.getMonsterZones(),...e.activator.getEmptyExtraZones()];return await e.activator.summonMany(e.activator,"PendulumSummon",["Rule"],e.action,a.map(r=>({monster:r,posList:b,cells:i})),[],!1,void 0,r=>r.length>0,!1),k()},execute:async e=>(e.activator.getPendingMonstersOnField().forEach(t=>t.determine()),!0),settle:async()=>!0},xt=[Mt],fa=e=>({name:e.profile.name,actions:[...xt],staticInfo:{name:e.profile.name,kind:"Monster",wikiEncodedName:"%A5%D7%A5%EC%A5%A4%A5%E4%A1%BC"}});export{Rt as A,Gt as B,qt as C,Ht as D,Zt as E,Nt as F,Ot as G,Pt as H,At as I,Bt as J,_t as K,wt as L,fa as M,Ft as N,Lt as O,ga as _,va as a,pa as b,da as c,ua as d,oa as e,ca as f,sa as g,la as h,na as i,ra as j,ia as k,aa as l,ta as m,ea as n,It as o,Yt as p,Jt as q,Kt as r,Xt as s,Wt as t,Vt as u,Qt as v,Ut as w,zt as x,$t as y,jt as z};
