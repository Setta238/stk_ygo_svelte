export const deckTypes = ["Deck", "ExtraDeck"] as const;
export type TDeckTypes = (typeof deckTypes)[number];
export const deckTypeDic: { [key in TDeckTypes]: string } = {
  Deck: "„É°„Ç§„É≥„Éá„ÉÉ„Ç≠",
  ExtraDeck: "„Ç®„ÇØ„Çπ„Éà„É©„Éá„ÉÉ„Ç≠",
};
export const cardKinds = ["Monster", "Spell", "Trap"] as const;
export type TCardKind = (typeof cardKinds)[number];
export const cardKindDic: { [key in TCardKind]: string } = {
  Monster: "„É¢„É≥„Çπ„Çø„Éº",
  Spell: "È≠îÊ≥ï",
  Trap: "ÁΩ†",
};
export const exMonsterCategories = ["Fusion", "Syncro", "Xyz", "Link"] as const;
export type TMonsterExSummonCategory = (typeof exMonsterCategories)[number];
export const specialMonsterCategories = [...exMonsterCategories, "SpecialSummon"] as const;
export type TMonsterSpecialSummonCategory = (typeof specialMonsterCategories)[number];
export const monsterEffectCategories = ["Toon", "Spirit", "Union", "Gemini", "FlipEffect"] as const;
export type TMonsterEffectCategory = (typeof monsterEffectCategories)[number];
export const monsterOtherCategories = ["Tuner", "Effect", "Normal", "Pendulum", "Token", "NormalSummonOnly"] as const;
export type TMonsterOtherCategory = (typeof monsterOtherCategories)[number];
export const monsterCategories = [...specialMonsterCategories, ...monsterEffectCategories, ...monsterOtherCategories] as const;
export type TMonsterCategory = (typeof monsterCategories)[number];
export const monsterCategoryDic: { [key in TMonsterCategory]: string } = {
  Syncro: "„Ç∑„É≥„ÇØ„É≠",
  Fusion: "ËûçÂêà",
  Xyz: "„Ç®„ÇØ„Ç∑„Éº„Ç∫",
  Link: "„É™„É≥„ÇØ",
  SpecialSummon: "ÁâπÊÆäÂè¨Âñö",
  Toon: "„Éà„Ç•„Éº„É≥",
  Spirit: "„Çπ„Éî„É™„ÉÉ„Éà",
  Union: "„É¶„Éã„Ç™„É≥",
  Gemini: "„Éá„É•„Ç¢„É´",
  FlipEffect: "„É™„Éê„Éº„Çπ",
  Tuner: "„ÉÅ„É•„Éº„Éä„Éº",
  Effect: "ÂäπÊûú",
  Normal: "ÈÄöÂ∏∏",
  Pendulum: "„Éö„É≥„Éá„É•„É©„É†",
  Token: "„Éà„Éº„ÇØ„É≥",
  NormalSummonOnly: "ÁâπÊÆäÂè¨Âñö‰∏çÂèØ",
};
export const monsterCategoryEmojiDic: { [key in TMonsterCategory]: string } = {
  Syncro: "üéµ",
  Fusion: "üåÄ",
  Xyz: "üì∞",
  Link: "‚õìÔ∏è",
  SpecialSummon: "üîØ",
  Toon: "üìñ",
  Spirit: "üëª",
  Union: "üöó",
  Gemini: "üë´",
  FlipEffect: "üîÑ",
  Tuner: "üé∂",
  Effect: "‚ú®",
  Normal: "üîò",
  Pendulum: "üí†",
  Token: "üêè",
  NormalSummonOnly: "üî≤",
};
export const monsterAttributes = ["Light", "Dark", "Earth", "Water", "Fire", "Wind", "Divine"] as const;
export type TMonsterAttribute = (typeof monsterAttributes)[number];

export const monsterAttributeDic = {
  Light: "ÂÖâ",
  Dark: "Èóá",
  Earth: "Âú∞",
  Water: "Ê∞¥",
  Fire: "ÁÇé",
  Wind: "È¢®",
  Divine: "Á•û",
} as { [key in TMonsterAttribute]: string };

export const getMonsterAttribute = (text: string): TMonsterAttribute | undefined => {
  return (Object.entries(monsterAttributeDic) as [TMonsterAttribute, string][]).find((entry) => entry[1] === text)?.[0] || undefined;
};

export const monsterTypes = [
  "Aqua",
  "Beast",
  "BeastWarrior",
  "CreatorGod",
  "Cyberse",
  "Dinosaur",
  "DivineBeast",
  "Dragon",
  "Fairy",
  "Fiend",
  "Fish",
  "Insect",
  "Illusion",
  "Machine",
  "Plant",
  "Psychic",
  "Pyro",
  "Reptile",
  "Rock",
  "SeaSerpent",
  "Spellcaster",
  "Thunder",
  "Warrior",
  "WingedBeast",
  "Wyrm",
  "Zombie",
] as const;
export type TMonsterType = (typeof monsterTypes)[number];
export const spellCategories = ["Normal", "Continuous", "Field", "QuickPlay", "Equip", "Ritual"] as const;
export type TSpellCategory = (typeof spellCategories)[number];

export const spellCategoryDic: { [key in TSpellCategory]: string } = {
  Normal: "ÈÄöÂ∏∏",
  Continuous: "Ê∞∏Á∂ö",
  Field: "„Éï„Ç£„Éº„É´„Éâ",
  QuickPlay: "ÈÄüÊîª",
  Equip: "Ë£ÖÂÇô",
  Ritual: "ÂÑÄÂºè",
};
export const trapCategories = ["Normal", "Continuous", "Counter"] as const;
export type TTrapCategory = (typeof trapCategories)[number];
export const trapCategoryDic: { [key in TTrapCategory]: string } = {
  Normal: "ÈÄöÂ∏∏",
  Continuous: "Ê∞∏Á∂ö",
  Counter: "„Ç´„Ç¶„É≥„Çø„Éº",
};
export type TBattlePosition = "Attack" | "Defense" | "Set";
export const battlePositionDic: { [key in TBattlePosition]: string } = {
  Attack: "ÊîªÊíÉË°®Á§∫",
  Defense: "ÂÆàÂÇôË°®Á§∫",
  Set: "Ë£èÂÅ¥ÂÆàÂÇôË°®Á§∫",
};
export type TNonBattlePosition = "FaceUp" | "Set" | "XysMaterial";

export type CardInfoWiki = {
  wikiName: string;
  wikiHref: string;
  wikiEncodedName: string;
  wikiTextAll: string;
};

export const entityFlexibleStatusKeys = ["level", "rank", "attack", "defense", "pendulumScaleR", "pendulumScaleL"] as const;
export type TEntityFlexibleStatusKey = (typeof entityFlexibleStatusKeys)[number];
export type TEntityFlexibleStatusGen = "origin" | "current" | "calculated";
export type FlexibleStatus = { [key in TEntityFlexibleStatusKey]: number | undefined };

export type EntityStatusBase = {
  name: string;
  kind: TCardKind;
  monsterCategories?: Array<TMonsterCategory>;
  spellCategory?: TSpellCategory;
  trapCategory?: TTrapCategory;
  nameTags?: Array<string>;
  textTags?: Array<string>;
  link?: number;
  attributes?: TMonsterAttribute[];
  types?: TMonsterType[];
  canReborn?: boolean;
  cardId?: number;
  isForTest?: boolean;
} & Partial<FlexibleStatus> & { wikiEncodedName: string };
export type EntityStatus = {
  canAttack: boolean;
  canDirectAttack: boolean;
  allowHandSyncro: boolean;
  isEffective: boolean;
  isSelectableForAttack: boolean /** false„ÅÆ„É¢„É≥„Çπ„Çø„Éº„Åó„Åã„ÅÑ„Å™„ÅÑÂ†¥Âêà„ÄÅ„ÉÄ„Ç§„É¨„ÇØ„Éà„Ç¢„Çø„ÉÉ„ÇØ„Å´„Å™„Çã„ÄÇ„Ää‰ºùË™¨„ÅÆ„Éï„Ç£„ÉÉ„Ç∑„É£„Éº„Éû„É≥„Äã„Å™„Å©„ÄÇ */;
  maxCounterQty: { [key: string]: number };
} & EntityStatusBase;
export type EntityNumericStatus = { [key in TEntityFlexibleStatusGen]: FlexibleStatus };
export type CardInfoDescription = {
  nameKana?: string;
  description?: string;
  pendulumDescription?: string;
};

export type CardInfoJson = CardInfoWiki & EntityStatusBase & CardInfoDescription;

const _getSubsetAsEntityStatusBase = ({
  // eslint-disable-next-line @typescript-eslint/no-unused-vars
  wikiName,
  // eslint-disable-next-line @typescript-eslint/no-unused-vars
  wikiHref,
  // eslint-disable-next-line @typescript-eslint/no-unused-vars
  wikiTextAll,
  // eslint-disable-next-line @typescript-eslint/no-unused-vars
  nameKana,
  // eslint-disable-next-line @typescript-eslint/no-unused-vars
  description,
  // eslint-disable-next-line @typescript-eslint/no-unused-vars
  pendulumDescription,
  ...rest
}: CardInfoJson): EntityStatusBase => {
  return rest;
};
export const getSubsetAsEntityStatusBase = (json: CardInfoJson): EntityStatusBase => _getSubsetAsEntityStatusBase(json);

export type CardInfoDeckEdit = CardInfoJson & {
  isImplemented: true;
};
export const monsterTypeDic = {
  Aqua: "Ê∞¥",
  Beast: "Áç£",
  BeastWarrior: "Áç£Êà¶Â£´",
  CreatorGod: "ÂâµÈÄ†Á•û",
  Cyberse: "„Çµ„Ç§„Éê„Éº„Çπ",
  Dinosaur: "ÊÅêÁ´ú",
  DivineBeast: "ÂπªÁç£Á•û",
  Dragon: "„Éâ„É©„Ç¥„É≥",
  Fairy: "Â§©‰Ωø",
  Fiend: "ÊÇ™È≠î",
  Fish: "È≠ö",
  Insect: "ÊòÜËô´",
  Illusion: "ÂπªÊÉ≥È≠î",
  Machine: "Ê©üÊ¢∞",
  Plant: "Ê§çÁâ©",
  Psychic: "„Çµ„Ç§„Ç≠„ÉÉ„ÇØ",
  Pyro: "ÁÇé",
  Reptile: "Áà¨Ëô´È°û",
  Rock: "Â≤©Áü≥",
  SeaSerpent: "Êµ∑Á´ú",
  Spellcaster: "È≠îÊ≥ï‰Ωø„ÅÑ",
  Thunder: "Èõ∑",
  Warrior: "Êà¶Â£´",
  WingedBeast: "È≥•Áç£",
  Wyrm: "ÂπªÁ´ú",
  Zombie: "„Ç¢„É≥„Éá„ÉÉ„Éà",
} as { [key in TMonsterType]: string };

export const monsterTypeEmojiDic = {
  Aqua: "üö∞",
  Beast: "üêÖ",
  BeastWarrior: "ü¶Å",
  CreatorGod: "üîÜ",
  Cyberse: "üíªÔ∏è",
  Dinosaur: "ü¶ñ",
  DivineBeast: "üí´",
  Dragon: "üê≤",
  Fairy: "üëº",
  Fiend: "üëø",
  Fish: "üêüÔ∏è",
  Insect: "ü¶ã",
  Illusion: "ü§°",
  Machine: "ü§ñ",
  Plant: "üå±",
  Psychic: "üëÅÔ∏è",
  Pyro: "üî•",
  Reptile: "ü¶é",
  Rock: "‚õ∞",
  SeaSerpent: "üêç",
  Spellcaster: "üßô",
  Thunder: "‚ö°Ô∏è",
  Warrior: "‚öîÔ∏è",
  WingedBeast: "ü¶Ö",
  Wyrm: "üêâ",
  Zombie: "ü¶¥",
} as { [key in TMonsterType]: string };
export const getMonsterType = (text: string): TMonsterType | undefined => {
  return (Object.entries(monsterTypeDic) as [TMonsterType, string][]).find((entry) => entry[1] === text)?.[0] || undefined;
};
