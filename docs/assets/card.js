import{d as J,I as w,D as E,S as b,n as ve,m as A,c as ne,a as $,f as h,b as D,e as ge,g as L,P as se,s as G,h as W,N as B,i as U,j as fe,k as te}from"./duel.js";const Ut=["Deck","ExtraDeck"],Qt={Deck:"メインデッキ",ExtraDeck:"エクストラデッキ"},ye=["Monster","Spell","Trap","XyzMaterial"],Wt={Monster:"モンスター",Spell:"魔法",Trap:"罠",XyzMaterial:"XYZ素材"},le=["Fusion","Syncro","Xyz","Link"],Se=[...le,"SpecialSummon","Ritual"],Ce=["Toon","Spirit","Union","Gemini","FlipEffect"],Te=["Tuner","Effect","Normal","Pendulum","Token","FreeReborn","NormalSummonOnly","RegularSpecialSummonOnly"],$t=[...Se,...Ce,...Te],Vt={Syncro:"シンクロ",Fusion:"融合",Xyz:"エクシーズ",Link:"リンク",Ritual:"儀式",SpecialSummon:"特殊召喚",Toon:"トゥーン",Spirit:"スピリット",Union:"ユニオン",Gemini:"デュアル",FlipEffect:"リバース",Tuner:"チューナー",Effect:"効果",Normal:"通常",Pendulum:"ペンデュラム",Token:"トークン",FreeReborn:"特殊召喚モンスター（蘇生制限なし）",NormalSummonOnly:"特殊召喚不可",RegularSpecialSummonOnly:"正規の方法以外での特殊召喚不可"},Xt={Syncro:"🎵",Fusion:"🌀",Xyz:"📰",Link:"⛓️",Ritual:"📜",SpecialSummon:"🔯",Toon:"📖",Spirit:"👻",Union:"🚗",Gemini:"👫",FlipEffect:"🔄",Tuner:"🎶",Effect:"✨",Normal:"🔘",Pendulum:"💠",Token:"🐏",FreeReborn:"🆓",NormalSummonOnly:"🔲",RegularSpecialSummonOnly:"❗"},zt=["Light","Dark","Earth","Water","Fire","Wind","Divine"],Kt={Light:"光",Dark:"闇",Earth:"地",Water:"水",Fire:"炎",Wind:"風",Divine:"神"},jt=["Aqua","Beast","BeastWarrior","CreatorGod","Cyberse","Dinosaur","DivineBeast","Dragon","Fairy","Fiend","Fish","Insect","Illusion","Machine","Plant","Psychic","Pyro","Reptile","Rock","SeaSerpent","Spellcaster","Thunder","Warrior","WingedBeast","Wyrm","Zombie"],Jt=["Normal","Continuous","Field","QuickPlay","Equip","Ritual","PendulumScale"],Yt={Normal:"通常",Continuous:"永続",Field:"フィールド",QuickPlay:"速攻",Equip:"装備",Ritual:"儀式",PendulumScale:"ペンデュラム"},It=["Normal","Continuous","Counter"],ea={Normal:"通常",Continuous:"永続",Counter:"カウンター"},m=["Attack","Defense"],ta={Attack:"攻撃表示",Defense:"守備表示",Set:"裏側守備表示"},aa=["level","rank","attack","defense","pendulumScaleR","pendulumScaleL"],he=({wikiName:t,wikiHref:e,wikiTextAll:a,nameKana:i,description:n,pendulumDescription:r,...s})=>s,ia=t=>he(t),ra={Aqua:"水",Beast:"獣",BeastWarrior:"獣戦士",CreatorGod:"創造神",Cyberse:"サイバース",Dinosaur:"恐竜",DivineBeast:"幻獣神",Dragon:"ドラゴン",Fairy:"天使",Fiend:"悪魔",Fish:"魚",Insect:"昆虫",Illusion:"幻想魔",Machine:"機械",Plant:"植物",Psychic:"サイキック",Pyro:"炎",Reptile:"爬虫類",Rock:"岩石",SeaSerpent:"海竜",Spellcaster:"魔法使い",Thunder:"雷",Warrior:"戦士",WingedBeast:"鳥獣",Wyrm:"幻竜",Zombie:"アンデット"},na={Aqua:"🚰",Beast:"🐅",BeastWarrior:"🦁",CreatorGod:"🔆",Cyberse:"💻️",Dinosaur:"🦖",DivineBeast:"💫",Dragon:"🐲",Fairy:"👼",Fiend:"👿",Fish:"🐟️",Insect:"🦋",Illusion:"🤡",Machine:"🤖",Plant:"🌱",Psychic:"👁️",Pyro:"🔥",Reptile:"🦎",Rock:"⛰",SeaSerpent:"🐍",Spellcaster:"🧙",Thunder:"⚡️",Warrior:"⚔️",WingedBeast:"🦅",Wyrm:"🐉",Zombie:"🦴"},Ee=["TopLeft","TopCenter","TopRight","MiddleLeft","MiddleRight","BottomLeft","BottomCenter","BottomRight"],ke={TopLeft:{name:"左上",linkArrow:{offsetRow:-1,offsetColumn:-1}},TopCenter:{name:"上",linkArrow:{offsetRow:-1,offsetColumn:0}},TopRight:{name:"右上",linkArrow:{offsetRow:-1,offsetColumn:1}},MiddleLeft:{name:"左",linkArrow:{offsetRow:0,offsetColumn:-1}},MiddleRight:{name:"右",linkArrow:{offsetRow:0,offsetColumn:1}},BottomLeft:{name:"左下",linkArrow:{offsetRow:1,offsetColumn:-1}},BottomCenter:{name:"下",linkArrow:{offsetRow:1,offsetColumn:0}},BottomRight:{name:"右下",linkArrow:{offsetRow:1,offsetColumn:1}}};Ee.reduce((t,e)=>(t[ke[e].name]=e,t),{});const sa=t=>t.cardId??!1?`https://www.db.yugioh-card.com/yugiohdb/card_search.action?ope=2&cid=${t.cardId}`:`https://www.db.yugioh-card.com/yugiohdb/card_search.action?ope=1&sess=1&rp=10&mode=&sort=1&keyword=${t.name}&stype=1&ctype=&othercon=2&starfr=&starto=&pscalefr=&pscaleto=&linkmarkerfr=&linkmarkerto=&link_m=2&atkfr=&atkto=&deffr=&defto=&releaseDStart=1&releaseMStart=1&releaseYStart=1999&releaseDEnd=&releaseMEnd=&releaseYEnd=`,la=(t,e)=>{const a=t.monsterCategories??[],i=e.monsterCategories??[];for(const n of le.toReversed()){if(a.includes(n)&&!i.includes(n))return 1;if(!a.includes(n)&&i.includes(n))return-1}if(t.kind===e.kind){if(t.kind==="Monster"){if((t.link??0)!==(e.link??0))return(t.link??0)-(e.link??0);if((t.rank??0)!==(e.rank??0))return(t.rank??0)-(e.rank??0);if((t.level??0)!==(e.level??0))return(t.level??0)-(e.level??0);if((t.attack??0)!==(e.attack??0))return(t.attack??0)-(e.attack??0);if((t.defense??0)!==(e.defense??0))return(t.defense??0)-(e.defense??0)}return t.name.localeCompare(e.name,"Ja")}for(const n of ye){if(t.kind===n)return-1;if(e.kind===n)return 1}return t.name.localeCompare(e.name,"Ja")};Array.prototype.shuffle=function(){return this.map(e=>({item:e,seq:Math.random()})).toSorted((e,a)=>e.seq-a.seq).map(e=>e.item)};Array.prototype.randomPickMany=function(t){return this.shuffle().slice(0,t)};Array.prototype.randomPick=function(){return this.shuffle().slice(0,1)[0]};Array.prototype.reset=function(...t){this.splice(0),this.push(...t)};Array.prototype.union=function(t){return this.filter(e=>t.find(a=>e===a))};Array.prototype.getAllOnOffPattern=function(){const t=[];return this.forEach(e=>{if(t.length==0){t.push([e]),t.push([]);return}t.forEach(a=>t.push([...a,e]))}),t};Array.prototype.getDistinct=function(){return Array.from(new Set(this))};Array.prototype.distinct=function(){this.reset(...this.getDistinct())};const x=async()=>({selectedEntities:[],chainBlockTags:[],prepared:void 0}),me=async(t,e,a)=>(t.activator.payLp(a,t.action.entity),{lifePoint:a}),De=t=>t.activator.canSendToGraveyard([t.action.entity])&&t.action.entity.canBeSentToGraveyard(t.activator,t.action.entity,"SendToGraveyardAsCost",t.action),be=async t=>(await t.action.entity.sendToGraveyard(["Cost"],t.action.entity,t.activator),{sendToGraveyard:[t.action.entity]}),Q=t=>t.activator.canTryBanish(t.action.entity,"BanishAsCost",t.action)&&t.action.entity.canBeBanished("BanishAsCost",t.activator,t.action.entity,t.action),V=async t=>(await t.action.entity.banish(["Cost"],t.action.entity,t.activator),{banish:[t.action.entity]}),xe=(t,e,a=1)=>e.filter(i=>t.activator.canTryBanish(i,"BanishAsCost",t.action)).filter(i=>i.canBeBanished("BanishAsCost",t.activator,t.action.entity,t.action)).length>=a,Me=async(t,e,a,i)=>{const n=e.filter(s=>t.activator.canTryBanish(s,"BanishAsCost",t.action)).filter(s=>s.canBeBanished("BanishAsCost",t.activator,t.action.entity,t.action)),r=await t.activator.waitSelectEntities(n,i,a,"コストとして除外するカードを選択",!1)??[];return await E.banishManyForTheSameReason(r,["Cost"],t.action.entity,t.activator),{banish:r}},Z=async(t,e,a=m,i=r=>r.length===1,n=1)=>{const r=t.activator.getMonsterZones(),s=t.activator.getEnableSummonList(t.activator,"SpecialSummon",["Effect"],t.action,e.filter(l=>l.kind==="Monster").filter(l=>l.canBeTargetOfEffect(t)).map(l=>({monster:l,posList:a,cells:r})),[],!1),u=await t.activator.waitSelectEntities(s.map(l=>l.monster),n,i,"特殊召喚するモンスターを選択",!1)??[];if(!u.length)throw new w(t);const p=u.map(l=>l.fieldCell.cellType).getDistinct().filter(l=>l==="Graveyard"||l==="Banished").map(l=>l==="Graveyard"?"SpecialSummonFromGraveyard":"SpecialSummonFromBanished");return{selectedEntities:u,chainBlockTags:p,prepared:void 0}},H=async(t,e=["Attack","Defense"],a=!0)=>{const i=t.activator.getMonsterZones(),n=t.selectedEntities.filter(r=>!r.wasMovedAfter(t.isActivatedAt)).map(r=>({monster:r,posList:e,cells:i}));return a&&(n.length!==t.selectedEntities.length||i.length<n.length)?!1:(await t.activator.summonAll(t.activator,"SpecialSummon",["Effect"],t.action,n,[],!1,!1),!0)},we=async(t,e,a=["Attack","Defense"])=>{const i=t.activator.getMonsterZones(),n=e.map(r=>({monster:r,posList:a,cells:i}));return await t.activator.summonAll(t.activator,"SpecialSummon",["Effect"],t.action,n,[],!1,!1),!0},Ae=(t,e,a)=>({title:t,playType:"SystemPeriodAction",spellSpeed:"Normal",executableCells:J,executablePeriods:e,executableDuelistTypes:["Controller","Opponent"],isMandatory:!0,validate:a,prepare:x,execute:async()=>!0,settle:async()=>!0}),Be=t=>{if(!(t.activator.info.ruleNormalSummonCount>=t.activator.info.maxRuleNormalSummonCount)&&t.action.entity.lvl)if(t.action.entity.lvl<5){const e=t.activator.getEnableSummonList(t.activator,"NormalSummon",["Rule"],t.action,[{monster:t.action.entity,posList:["Attack","Set"],cells:t.activator.getMonsterZones()}],[],!1);return e.length?e.flatMap(a=>a.cells).getDistinct():void 0}else{const e=t.activator.getReleasableMonsters(),a=t.action.entity.lvl<7?1:2;if(e.length<a)return;if(e.getAllOnOffPattern().filter(n=>n.length===a).some(n=>t.activator.getEnableSummonList(t.activator,"AdvanceSummon",["Rule","NormalSummon"],t.action,[{monster:t.action.entity,posList:["Attack","Set"],cells:t.activator.getMonsterZones()}],n.map(r=>({material:r,cell:r.fieldCell})),!1).length))return[]}},Pe=async(t,e,a)=>{if(!t.action.entity.lvl)return;if(t.action.entity.lvl<5)return{};const i=t.activator.getAvailableMonsterZones(),n=t.activator.getReleasableMonsters(),r=t.activator.getExtraMonsterZones(),s=t.action.entity.lvl<7?1:2;r.length>=s&&n.filter(l=>l.fieldCell.cellType!=="ExtraMonsterZone");const u=await t.activator.waitSelectEntities(t.activator.getReleasableMonsters(),s,l=>(a||l.length>0)&&(s<0||l.length===s)&&(i.length>0||l.some(c=>c.fieldCell.cellType==="ExtraMonsterZone")),"リリースするモンスターを選択",a??!1)??[];return u.length?(await E.releaseManyForTheSameReason(u,["Cost","AdvanceSummonRelease","Rule"],t.action.entity,t.activator),{summonMaterialInfos:u.map(l=>({material:l,cell:l.fieldCell}))}):void 0},Fe=async t=>{var n;const e=["Rule","NormalSummon"];let a="NormalSummon";(n=t.costInfo.summonMaterialInfos)!=null&&n.length&&(a="AdvanceSummon",e.push("AdvanceSummon"));const i=t.dest?[t.dest]:t.activator.getAvailableMonsterZones();return R(t,a,e,["Attack","Set"],i)},R=async(t,e,a,i,n)=>{let r=n;return r||(r=t.activator.getMonsterZones(),t.action.entity.fieldCell.cellType==="ExtraDeck"&&r.push(...t.activator.duel.field.getCells("ExtraMonsterZone"))),await t.activator.summon(e,a,t.action,t.action.entity,i,r,t.costInfo.summonMaterialInfos??[],!1),{selectedEntities:[],chainBlockTags:[],prepared:void 0}},q=async t=>{var e,a;return t.action.entity.info.isRebornable=!((e=t.action.entity.origin.monsterCategories)!=null&&e.includes("RegularSpecialSummonOnly")),t.action.entity.determine(),(a=t.costInfo.summonMaterialInfos)==null||a.map(i=>i.material).forEach(i=>i.onUsedAsMaterial(t,t.action.entity)),!0},k={title:"通常召喚",isMandatory:!1,playType:"NormalSummon",spellSpeed:"Normal",executableCells:["Hand"],executablePeriods:["main1","main2"],executableDuelistTypes:["Controller"],validate:Be,payCosts:Pe,prepare:Fe,execute:q,settle:async()=>!0},j=(t,e,a)=>{const i=t.activator.getMonsterZones();if(t.action.entity.fieldCell.cellType==="ExtraDeck"&&i.push(...t.activator.getAvailableExtraZones()),!!t.activator.getEnableSummonList(t.activator,"SpecialSummon",["Rule"],t.action,[{monster:t.action.entity,posList:e,cells:i}],a,!1).length)return a.length===0?i:[]},Oe=t=>{if(!t.activator.isTurnPlayer)return;const e=t.action.entity.getAttackTargets();return e.length?e.map(a=>a.fieldCell):void 0},Le=async t=>{var i;if(t.action.entity.info.attackCount>0||t.action.entity.battlePosition!=="Attack")return;if((i=t.dest)!=null&&i.targetForAttack){const n=t.dest.entities.find(r=>r.entityType==="Duelist");return{selectedEntities:n?[n]:t.dest.cardEntities,chainBlockTags:[],prepared:void 0}}const e=t.action.entity.getAttackTargets();if(e.length===0)throw new b("想定されない状態",t);if(e.length===1)return{selectedEntities:e,chainBlockTags:[],prepared:void 0};if(t.activator.duelistType==="NPC"){let n=t.activator.selectAttackTargetForNPC(t.action.entity,t.action);return n||(t.activator.duel.log.warn("NPCの攻撃対象選択に失敗したため、ランダムに攻撃対象を選択。"),n=e.randomPick()),{selectedEntities:[n],chainBlockTags:[],prepared:void 0}}const a=await t.activator.waitSelectEntity(e,"攻撃対象を選択。",!0);if(a)return{selectedEntities:[a],chainBlockTags:[],prepared:void 0}},Ne=async t=>(t.action.entity.field.duel.declareAnAttack(t.action.entity,t.selectedEntities[0]),!0),g={title:"攻撃宣言",isMandatory:!1,playType:"Battle",spellSpeed:"Normal",executableCells:["MonsterZone","ExtraMonsterZone"],executablePeriods:["b1Battle","b2Battle"],executableDuelistTypes:["Controller"],validate:Oe,prepare:Le,execute:Ne,settle:async()=>!0},ce=async t=>{if(!(t.action.entity.info.battlePotisionChangeCount>0||!t.activator.isTurnPlayer))return await t.action.entity.setBattlePosition(t.action.entity.battlePosition==="Attack"?"Defense":"Attack",["Rule"],t.action.entity,t.activator),t.action.entity.info.battlePotisionChangeCount++,{selectedEntities:[],chainBlockTags:[],prepared:void 0}},S={title:"反転召喚",isMandatory:!1,playType:"FlipSummon",spellSpeed:"Normal",executableCells:["MonsterZone","ExtraMonsterZone"],executablePeriods:["main1","main2"],executableDuelistTypes:["Controller"],validate:t=>t.action.entity.info.battlePotisionChangeCount===0&&t.action.entity.info.attackCount===0&&t.activator.isTurnPlayer&&t.action.entity.face==="FaceDown"?[]:void 0,prepare:ce,execute:async t=>(t.action.entity.determine(),!0),settle:async()=>!0},f={title:"表示形式変更",isMandatory:!1,playType:"ChangeBattlePosition",spellSpeed:"Normal",executableCells:["MonsterZone","ExtraMonsterZone"],executablePeriods:["main1","main2"],executableDuelistTypes:["Controller"],validate:t=>t.action.entity.info.battlePotisionChangeCount===0&&t.action.entity.info.attackCount===0&&t.activator.isTurnPlayer&&t.action.entity.face==="FaceUp"?[]:void 0,prepare:ce,execute:async t=>(t.action.entity.determine(),!0),settle:async()=>!0},N=async(t,e=["Attack","Defense"])=>{const a=t.activator.getMonsterZones();return t.action.entity.wasMovedAfter(t.isActivatedAt)?!1:(await t.activator.summon("SpecialSummon",["Effect"],t.action,t.action.entity,e,a,[],!1),!0)},M=(t,e,a,i,n,r,s,u,p,l,c)=>{const o={posList:p,cells:l},d={posList:[],cells:[]};return e!==s||s.kind!=="Monster"||!s.origin.monsterCategories?o:s.origin.monsterCategories.includes("NormalSummonOnly")?n.includes("NormalSummon")||n.includes("AdvanceSummon")?o:d:s.origin.monsterCategories.includes("SpecialSummon")?s.isInTrashCell&&!s.origin.monsterCategories.includes("RegularSpecialSummonOnly")?s.info.isRebornable||s.origin.monsterCategories.includes("FreeReborn")?o:d:n.includes("PendulumSummon")&&s.origin.monsterCategories.includes("FreeReborn")?d:n.union(ve).length?o:s.origin.monsterCategories.includes("RegularSpecialSummonOnly")?c?o:d:o:o},z={},Ze=t=>(z[t]||(z[t]={title:`戦闘破壊耐性(${t})`,isMandatory:!0,executableCells:["MonsterZone"],executablePeriods:["b1DDmgCalc","b2DDmgCalc"],executableDuelistTypes:["Controller"],isOnlyNTimesPerTurnIfFaceup:t,isApplicableTo:(e,a,i)=>i.includes(e.entity)?a!=="BattleDestroy"?[]:[e.entity]:[],substitute:async(e,a,i)=>i.includes(e.entity)?a!=="BattleDestroy"?[]:e.entity.isEffective?(e.entity.controller.writeInfoLog(`${e.entity.toString()}は１ターンに１度だけ戦闘では破壊されない。`),[e.entity]):[]:[]}),z[t]),Y=t=>t.activator.canRelease([t.action.entity])&&t.action.entity.canBeReleased(t.activator,t.action.entity,["ReleaseAsCost"],t.action),I=async t=>(await t.action.entity.release(["Cost"],t.action.entity,t.activator),{release:[t.action.entity]}),oe=t=>({title:"シンクロ召喚",isMandatory:!1,playType:"QuickEffect",spellSpeed:"Quick",executableCells:A,executablePeriods:["main1","main2"],executableDuelistTypes:["Controller"],isOnlyNTimesPerChain:1,validate:e=>e.activator.isTurnPlayer?void 0:e.activator.getExtraDeck().cardEntities.filter(i=>{var n;return(n=i.status.monsterCategories)==null?void 0:n.includes("Syncro")}).flatMap(i=>i.actions).filter(i=>i.playType==="SpecialSummon").map(i=>({index:-1,chainNumber:void 0,action:i,activator:e.activator,targetChainBlock:void 0,isActivatedIn:i.entity.fieldCell,isActivatedAt:e.isActivatedAt,costInfo:{},state:"unloaded",dest:void 0,ignoreCost:!1})).some(i=>i.action.getEnableMaterialPatterns(i).some(n=>{const r=n.map(s=>s.material);return r.every(s=>s.controller===e.activator)&&r.every(s=>s.isOnFieldAsMonsterStrictly)&&r.includes(e.action.entity)}))?[]:void 0,prepare:x,execute:async e=>{if(e.activator!==e.action.entity.controller||e.activator.getMonstersOnField().filter(s=>s.lvl!==void 0).length<2)return!1;const a=e.activator.getExtraDeck().cardEntities.filter(s=>{var u;return(u=s.status.monsterCategories)==null?void 0:u.includes("Syncro")}).flatMap(s=>s.actions).filter(s=>s.playType==="SpecialSummon").map(s=>({index:-1,chainNumber:void 0,action:s,activator:e.activator,targetChainBlock:void 0,isActivatedIn:s.entity.fieldCell,isActivatedAt:e.isActivatedAt,costInfo:{},state:"unloaded",dest:void 0,ignoreCost:!1})).filter(s=>s.action.getEnableMaterialPatterns(s).some(u=>{const p=u.map(l=>l.material);return p.every(l=>l.controller===e.activator)&&p.every(l=>l.isOnFieldAsMonsterStrictly)&&p.includes(e.action.entity)})).map(s=>s.action.entity).getDistinct();if(!a.length)return!1;const i=await e.activator.waitSelectEntities(a,1,s=>s.length===1,"シンクロ召喚するモンスターを選択。",!1)??[];if(!i.length)throw new b("想定されない状態",e);const n=i[0].actions.find(s=>s.playType==="SpecialSummon");if(!n)throw new b("想定されない状態",e);const r=n.getClone(s=>{const u=s.map(p=>p.material);return u.every(p=>p.controller===e.activator)&&u.every(p=>p.isOnFieldAsMonsterStrictly)&&u.includes(e.action.entity)});return e.nextActionInfo={action:r,originSeq:r.seq},!0},settle:async()=>!0,...t}),He=ne("直接攻撃","Monster",t=>[t],()=>!0,t=>[new $("直接攻撃",()=>!0,!0,t,{},(e,a)=>e.isSpawnedBy===a,(e,a)=>({...a,canDirectAttack:!0}))]),Re={title:"ペンデュラム召喚",isMandatory:!1,playType:"SpecialSummon",spellSpeed:"Normal",executableCells:["Hand"],executablePeriods:["main1","main2"],executableDuelistTypes:["Controller"],isOnlyNTimesPerTurn:1,validate:t=>{const e=t.activator.getPendulumScales();if(!e||e.upperBound-e.lowerBound<2)return;const a=[...t.activator.getHandCell().cardEntities.filter(r=>r.kind==="Monster"),...t.activator.getExtraDeck().cardEntities.filter(r=>r.face==="FaceUp")].filter(r=>r.kind==="Monster").filter(r=>r.lvl&&r.lvl>e.lowerBound).filter(r=>r.lvl&&r.lvl<e.upperBound);if(!a.length)return;const i=[...t.activator.getMonsterZones(),...t.activator.getEmptyExtraZones()];return t.activator.getEnableSummonList(t.activator,"PendulumSummon",["Rule"],t.action,a.map(r=>({monster:r,cells:i,posList:m})),[],!1).length?[]:void 0},prepare:async t=>{const e=t.activator.getPendulumScales();if(!e||e.upperBound-e.lowerBound<2)return;const a=[...t.activator.getHandCell().cardEntities.filter(n=>n.kind==="Monster"),...t.activator.getExtraDeck().cardEntities.filter(n=>n.face==="FaceUp")].filter(n=>n.kind==="Monster").filter(n=>n.lvl&&n.lvl>e.lowerBound).filter(n=>n.lvl&&n.lvl<e.upperBound);if(!a.length)return;const i=[...t.activator.getMonsterZones(),...t.activator.getEmptyExtraZones()];return await t.activator.summonMany(t.activator,"PendulumSummon",["Rule"],t.action,a.map(n=>({monster:n,posList:m,cells:i})),[],!1,void 0,n=>n.length>0,!1),x()},execute:async t=>(t.activator.getPendingMonstersOnField().forEach(e=>e.determine()),!0),settle:async()=>!0},ca=[Re],qe=()=>{const t=[];["サイバー・ドラゴン","六武衆のご隠居","アンノウン・シンクロン"].forEach(c=>t.push({name:c,actions:[k,g,f,S,{title:"特殊召喚",isMandatory:!1,playType:"SpecialSummon",spellSpeed:"Normal",executableCells:["Hand"],executablePeriods:["main1","main2"],executableDuelistTypes:["Controller"],isOnlyNTimesPerDuel:c==="アンノウン・シンクロン"?1:void 0,validate:o=>{const d=o.action.entity.field.getMonstersOnFieldStrictly();if(!(d.length==0||d.some(v=>v.controller===o.activator)))return j(o,["Attack","Defense"],[])},prepare:o=>R(o,"SpecialSummon",["SpecialSummon","Rule"],m),execute:q,settle:async()=>!0}]}));const e={name:"ジャンク・フォアード",actions:[k,g,f,S,{title:"特殊召喚",isMandatory:!1,playType:"SpecialSummon",spellSpeed:"Normal",executableCells:["Hand"],executablePeriods:["main1","main2"],executableDuelistTypes:["Controller"],validate:c=>{if(!c.activator.getMonstersOnField().length)return j(c,m,[])},prepare:c=>R(c,"SpecialSummon",["SpecialSummon","Rule"],m),execute:q,settle:async()=>!0}]};t.push(e);const a={name:"Ｄ－ＨＥＲＯ ディアボリックガイ",actions:[k,g,f,S,{title:"①リクルート",isMandatory:!1,playType:"IgnitionEffect",spellSpeed:"Normal",executableCells:["Graveyard"],executablePeriods:["main1","main2"],executableDuelistTypes:["Controller"],priorityForNPC:10,canPayCosts:Q,validate:c=>c.activator.getDeckCell().cardEntities.filter(d=>d.nm==="Ｄ－ＨＥＲＯ ディアボリックガイ").length===0?void 0:c.activator.getAvailableMonsterZones().length>0?[]:void 0,payCosts:V,prepare:async()=>({selectedEntities:[],chainBlockTags:["SpecialSummonFromDeck"],prepared:void 0}),execute:async c=>{const o=c.activator.getDeckCell().cardEntities.find(d=>d.nm==="Ｄ－ＨＥＲＯ ディアボリックガイ");return o?we(c,[o]):!1},settle:async()=>!0}]};t.push(a);const i={name:"ゾンビキャリア",actions:[k,g,f,S,{title:"①自己再生",isMandatory:!1,playType:"IgnitionEffect",spellSpeed:"Normal",executableCells:["Graveyard"],executablePeriods:["main1","main2"],executableDuelistTypes:["Controller"],canPayCosts:c=>c.activator.getHandCell().cardEntities.length>0,validate:c=>c.activator.getAvailableMonsterZones().length>0?[]:void 0,payCosts:async(c,o,d)=>{const v=c.activator.getHandCell().cardEntities,T=await c.activator.waitSelectEntity(v,"デッキトップに戻すカードを一枚選択。",d);if(!T)throw new w(c);return await T.returnToDeck("Top",["Cost"],c.action.entity,c.activator),{returnToDeck:[T]}},prepare:async()=>({selectedEntities:[],chainBlockTags:["SpecialSummonFromGraveyard"],prepared:void 0}),execute:async c=>(c.action.entity.info.willBeBanished=await N(c),c.action.entity.info.willBeBanished),settle:async()=>!0}]};t.push(i);const n={name:"グローアップ・バルブ",actions:[k,g,f,S,{title:"①自己再生",isMandatory:!1,playType:"IgnitionEffect",spellSpeed:"Normal",executableCells:["Graveyard"],executablePeriods:["main1","main2"],executableDuelistTypes:["Controller"],isOnlyNTimesPerDuel:1,canPayCosts:c=>c.activator.getDeckCell().cardEntities.length>0,validate:c=>c.activator.getAvailableMonsterZones().length>0?[]:void 0,payCosts:async c=>{const o=c.activator.getDeckCell().cardEntities[0];return await c.activator.getDeckCell().cardEntities[0].sendToGraveyard(["Cost"],c.action.entity,c.activator),{sendToGraveyard:[o]}},prepare:async()=>({selectedEntities:[],chainBlockTags:["SpecialSummonFromGraveyard"],prepared:void 0}),execute:c=>N(c),settle:async()=>!0}]};t.push(n);const r={name:"終末の騎士",actions:[k,g,f,S,{title:"①墓地送り",isMandatory:!1,playType:"TriggerEffect",spellSpeed:"Normal",executableCells:["MonsterZone"],executablePeriods:[...h,...D],executableDuelistTypes:["Controller"],validate:c=>{if(c.action.entity.hasBeenSummonedNow(["NormalSummon","SpecialSummon","FlipSummon"])&&c.activator.getDeckCell().cardEntities.filter(o=>o.attr.includes("Dark")).length!==0)return[]},prepare:async c=>{const o=["SendToGraveyardFromDeck"];return c.action.entity.moveLog.latestRecord.movedAs.includes("NormalSummon")?o.push("IfNormarlSummonSucceed"):o.push("IfSpecialSummonSucceed"),{selectedEntities:[],chainBlockTags:o,prepared:void 0}},execute:async c=>{const o=c.activator.getDeckCell().cardEntities.filter(d=>d.attr.includes("Dark"));return o.length===0?!1:(await c.action.entity.field.sendToGraveyard("墓地に送るモンスターを選択",c.activator,o,1,d=>d.length===1,["Effect"],c.action.entity,!1),c.activator.getDeckCell().shuffle(),!0)},settle:async()=>!0}]};t.push(r);const s={name:"マスマティシャン",actions:[k,g,f,S,{title:"①墓地送り",isMandatory:!1,playType:"TriggerEffect",spellSpeed:"Normal",executableCells:["MonsterZone"],executablePeriods:[...h,...D],executableDuelistTypes:["Controller"],validate:c=>{if(c.action.entity.hasBeenSummonedNow(["NormalSummon"])&&c.activator.getDeckCell().cardEntities.find(o=>(o.lvl??5)<5))return[]},prepare:async()=>({selectedEntities:[],chainBlockTags:["IfNormarlSummonSucceed","SendToGraveyardFromDeck"],prepared:void 0}),execute:async c=>{const o=c.activator.getDeckCell().cardEntities.filter(d=>(d.lvl??5)<5);return o.length===0?!1:(await c.action.entity.field.sendToGraveyard("墓地に送るモンスターを選択",c.activator,o,1,d=>d.length===1,["Effect"],c.action.entity,!1),c.activator.getDeckCell().shuffle(),!0)},settle:async()=>!0},{title:"②ドロー",isMandatory:!1,playType:"TriggerEffect",spellSpeed:"Normal",executableCells:["Graveyard"],executablePeriods:[...h,...D],executableDuelistTypes:["Controller"],validate:c=>{if(c.action.entity.face!=="FaceDown"&&c.action.entity.moveLog.latestRecord.movedAs.includes("BattleDestroy")&&c.action.entity.wasMovedAtPreviousChain&&c.activator.getDeckCell().cardEntities.length!==0)return[]},prepare:async()=>({selectedEntities:[],chainBlockTags:["Draw"],prepared:void 0}),execute:async c=>(await c.activator.draw(1,c.action.entity,c.activator),!0),settle:async()=>!0}]};t.push(s);const u={name:"ライトロード・ビースト ウォルフ",actions:[g,f,S,{title:"①自己再生",isMandatory:!0,playType:"TriggerEffect",spellSpeed:"Normal",executableCells:["Graveyard"],executablePeriods:[...h,...D],executableDuelistTypes:["Controller"],validate:c=>{if(!c.action.entity.wasMovedAtPreviousChain||c.action.entity.wasMovedFrom.cellType!=="Deck")return;const o=c.activator.getMonsterZones();return c.activator.getEnableSummonList(c.activator,"SpecialSummon",["Effect"],c.action,[{monster:c.action.entity,posList:m,cells:o}],[],!1).length?[]:void 0},prepare:async()=>({selectedEntities:[],chainBlockTags:["SpecialSummonFromGraveyard"],prepared:void 0}),execute:c=>N(c),settle:async()=>!0}]};t.push(u);const p={name:"伝説の白石",actions:[g,f,S,k,{title:"①サーチ",isMandatory:!0,playType:"TriggerEffect",spellSpeed:"Normal",executableCells:["Graveyard"],executablePeriods:L,executableDuelistTypes:["Controller"],validate:c=>{if(c.action.entity.wasMovedAtPreviousChain&&c.action.entity.wasMovedFrom.cellType!=="Banished")return c.activator.getDeckCell().cardEntities.find(o=>o.nm==="青眼の白龍")?[]:void 0},prepare:async()=>({selectedEntities:[],chainBlockTags:["SearchFromDeck"],prepared:void 0}),execute:async c=>{const o=c.activator.getDeckCell().cardEntities.find(d=>d.nm==="青眼の白龍");return o?(await o.addToHand(["Effect"],c.action.entity,c.activator),c.activator.getDeckCell().shuffle(),!0):!1},settle:async()=>!0}]};return t.push(p),[{name:"灰流うらら",chainBlockTags:["Draw","SearchFromDeck","SendToGraveyardFromDeck","SpecialSummonFromDeck"]},{name:"屋敷わらし",chainBlockTags:["BanishFromGraveyard","SpecialSummonFromGraveyard","AddToHandFromGraveyard"]}].forEach(c=>{t.push({name:c.name,actions:[g,f,S,k,{title:"①無効化",isMandatory:!1,playType:"QuickEffect",spellSpeed:"Quick",executableCells:["Hand"],executablePeriods:h,executableDuelistTypes:["Controller"],isOnlyNTimesPerTurn:1,negatePreviousBlock:!0,canPayCosts:o=>o.activator.canDiscard([o.action.entity]),validate:(o,d)=>d.length===0?void 0:d[o.index-1].chainBlockTags.union(c.chainBlockTags).length>0?[]:void 0,payCosts:async o=>(await o.action.entity.discard(["Cost"],o.action.entity,o.activator),{sendToGraveyard:[o.action.entity]}),prepare:async()=>({selectedEntities:[],chainBlockTags:["NegateCardEffect"],prepared:void 0}),execute:async(o,d)=>{const v=d[o.index-1];return v.isNegatedEffectBy=o.action,!0},settle:async()=>!0}]})}),["翻弄するエルフの剣士","ロードランナー","氷結界の修験者"].forEach(c=>{t.push({name:c,actions:[g,f,S,k],continuousEffects:[ge("①戦闘破壊耐性","Monster",o=>[o],()=>!0,o=>[new se("①戦闘破壊耐性",()=>!0,!0,o,{},()=>!0,["BattleDestroy"],(d,v)=>!o.isEffective||(v.atk??0)<1900?!0:(o.duel.log.info(`${o.toString()}は攻撃力1900以上のモンスターとの先頭では破壊されない。`,o.controller),!1))])]})}),t},_e=t=>{if(t.action.entity.status.spellCategory==="Field")return[t.activator.getFieldZone()];const e=t.activator.getAvailableSpellTrapZones();return e.length>0?e:void 0},y={title:"セット",playType:"SpellTrapSet",spellSpeed:"Normal",executableCells:["Hand"],executablePeriods:["main1","main2"],executableDuelistTypes:["Controller"],isMandatory:!1,validate:_e,prepare:x,execute:async()=>!0,settle:async()=>!0},C=t=>{var a;if(t.action.entity.info.isPending||t.action.entity.info.isDying||t.action.entity.info.isSettingSickness)return;if(G.some(i=>i===t.action.entity.fieldCell.cellType))return t.action.entity.face==="FaceDown"?[]:void 0;if(t.action.spellSpeed==="Normal"&&!t.activator.isTurnPlayer||t.action.entity.fieldCell.cellType==="Hand"&&!t.activator.isTurnPlayer)return;if(t.action.entity.status.spellCategory==="Field")return[t.activator.getFieldZone()];let e=t.activator.getAvailableSpellTrapZones();return(a=t.action.entity.status.monsterCategories)!=null&&a.includes("Pendulum")&&(e=e.filter(i=>i.isAvailableForPendulum)),e.length>0?e:void 0},ue={title:"発動",isMandatory:!1,playType:"CardActivation",spellSpeed:"Normal",executableCells:["Hand","SpellAndTrapZone"],executablePeriods:["main1","main2"],executableDuelistTypes:["Controller"],validate:C,prepare:x,execute:async()=>!0,settle:async()=>!0},Ge=(t,e,a=()=>!0)=>t.action.entity.field.getMonstersOnFieldStrictly().filter(n=>n.face==="FaceUp").filter(n=>n.canBeTargetOfEffect(t)).filter(n=>a(n,t.action.entity)).length?C(t):void 0,Ue=async(t,e,a,i,n,r=()=>!0)=>{const s=t.action.entity.field.getMonstersOnFieldStrictly().filter(p=>p.face==="FaceUp").filter(p=>p.canBeTargetOfEffect(t)).filter(p=>r(p,t.action.entity)),u=await t.activator.waitSelectEntity(s,"装備対象モンスターを選択",a);if(u)return t.action.entity.info.equipedBy=u,t.action.entity.info.effectTargets[t.action.seq]=[u],{chainBlockTags:i??[],selectedEntities:[u],prepared:n}},de=async(t,e,a=()=>!0)=>{const i=t.selectedEntities[0];return t.action.entity.info.equipedBy=i,t.action.entity.info.effectTargets[t.action.seq]=[i],a(i,t.action.entity)?(t.action.entity.info.equipedBy=i,t.action.entity.info.validateEquipOwner=a,i.info.equipEntities.push(t.action.entity),!0):(await t.action.entity.ruleDestory(),t.activator.writeInfoLog(`${i.toString()}が装備条件を満たさなくなったため、${t.action.entity.toString()}は破壊された。`),!1)},_=(t=()=>!0)=>({title:"発動",isMandatory:!1,playType:"CardActivation",spellSpeed:"Normal",executableCells:["Hand","SpellAndTrapZone"],executablePeriods:["main1","main2"],executableDuelistTypes:["Controller"],validate:(e,a)=>Ge(e,a,t),prepare:(e,a,i)=>Ue(e,a,i,[],void 0,t),execute:de,settle:async()=>!0}),Qe=()=>{const t=[],e={name:"連合軍",actions:[ue,y],continuousEffects:[W("発動","Spell",a=>a.isOnFieldStrictly&&a.face==="FaceUp",a=>[B.createContinuous("発動",i=>i.isSpawnedBy.isOnFieldStrictly&&i.isSpawnedBy.face==="FaceUp",a,(i,n)=>n.controller===i.isSpawnedBy.controller&&n.types.includes("Warrior")&&n.isOnFieldStrictly&&n.face==="FaceUp","attack","wip","Addition",(i,n,r)=>{if(!i.isEffective||n.face==="FaceDown")return r;const s=i.controller.getMonstersOnField().filter(u=>u.face==="FaceUp").filter(u=>u.types.includes("Warrior")||u.types.includes("Spellcaster")).length;return r+s*200})])]};return t.push(e),t},We=()=>{const t=[];return[{name:"リビングデッドの呼び声",pos:"Attack",filter:()=>!0},{name:"エンジェル・リフト",pos:"Attack",filter:e=>(e.lvl??12)<3},{name:"正統なる血統",pos:"Attack",filter:e=>{var a;return(a=e.status.monsterCategories)==null?void 0:a.includes("Normal")}},{name:"蘇りし魂",pos:"Defense",filter:e=>{var a;return(a=e.status.monsterCategories)==null?void 0:a.includes("Normal")}},{name:"リミット・リバース",pos:"Attack",filter:e=>(e.atk??9999)<=1e3,onMonsterAfterMove:async(e,a)=>{if(!a.isOnFieldAsMonsterStrictly||a.face==="FaceDown")return"RemoveMe";if(e.action.entity.isEffective&&a.battlePosition==="Defense")return e.action.entity.controller.writeInfoLog(`${a.toString()}が守備表示になったため、${e.action.entity.toString()}とともに破壊される。`),await E.tryMarkForDestory([a,e.action.entity],e),"RemoveMe"}}].forEach(e=>t.push({name:e.name,actions:[{title:"発動",isMandatory:!1,playType:"CardActivation",spellSpeed:"Quick",executableCells:["SpellAndTrapZone"],executablePeriods:h,executableDuelistTypes:["Controller"],validate:a=>{const i=a.activator.getMonsterZones();if(a.activator.getEnableSummonList(a.activator,"SpecialSummon",["Effect"],a.action,a.activator.getGraveyard().cardEntities.filter(r=>r.kind==="Monster").filter(e.filter).filter(r=>r.canBeTargetOfEffect(a)).map(r=>({monster:r,posList:["Attack"],cells:i})),[],!1).length)return C(a)},prepare:a=>Z(a,a.activator.getGraveyard().cardEntities.filter(i=>i.kind==="Monster").filter(e.filter).filter(i=>i.canBeTargetOfEffect(a)),["Attack"]),execute:async a=>{if(!await H(a,["Attack"])||!a.selectedEntities.length)return!1;a.action.entity.info.effectTargets[a.action.seq]=a.selectedEntities,a.action.entity.onBeforeMove.append(async r=>{if(r.entity.face!=="FaceUp"||!r.entity.isOnFieldAsSpellTrapStrictly)return"RemoveMe";const s=Object.values(r.entity.info.effectTargets).flatMap(l=>l),[u]=r.args;if(!s.length)return"RemoveMe";const p=s[0];return p.isOnFieldStrictly&&p.face==="FaceUp"&&r.entity.isEffective&&!u.isSpellTrapZoneLikeCell&&(r.entity.controller.writeInfoLog(`${a.action.entity.toString()}がフィールドを離れたため、対象モンスター${p.toString()}を破壊。`),await E.tryMarkForDestory([p],a)),"RemoveMe"});const n=a.selectedEntities[0];return n.onBeforeMove.append(async r=>{if(r.entity.face!=="FaceUp"||!r.entity.isOnFieldAsMonsterStrictly)return"RemoveMe";const[,,,,,s]=r.args;return a.action.entity.isOnFieldStrictly&&a.action.entity.face==="FaceUp"&&r.entity.isEffective&&s.union(["EffectDestroy","RuleDestroy"]).length&&(a.activator.writeInfoLog(`${r.entity.toString()}が破壊されたため、${a.action.entity.toString()}を破壊。`),await E.tryMarkForDestory([n],a)),"RemoveMe"}),n.onAfterMove.append(async r=>e.onMonsterAfterMove?await e.onMonsterAfterMove(a,r):"RemoveMe"),!0},settle:async()=>!0},y]})),t},$e=()=>{const t=[];return t.push({name:"昇天の黒角笛",actions:[{title:"発動",isMandatory:!1,playType:"CardActivation",spellSpeed:"Counter",executableCells:["SpellAndTrapZone"],executablePeriods:L,executableDuelistTypes:["Controller"],negateSummon:!0,validate:e=>{if(e.targetChainBlock&&e.targetChainBlock.action.playType==="SpecialSummon"&&e.targetChainBlock.activator!==e.activator&&e.activator.duel.field.getPendingMonstersOnField().length===1)return C(e)},prepare:async()=>({selectedEntities:[],chainBlockTags:["NegateSpecialSummon"],prepared:void 0}),execute:async e=>{const a=E.negateSummonMany(e.action.entity,e.activator);return await E.tryDestroy(a,e),!0},settle:async()=>!0},y]}),t},Ve=()=>{const t=[];[{name:"団結の力",kind:["Monster"],rate:800},{name:"魔導師の力",kind:["Spell","Trap"],rate:500}].forEach(a=>{t.push({name:a.name,actions:[_(),y],continuousEffects:[U(a.name,"Spell",i=>i.info.equipedBy?[i.info.equipedBy]:[],i=>i.isOnFieldStrictly&&i.face==="FaceUp",i=>["attack","defense"].map(n=>B.createContinuous("発動",r=>r.isSpawnedBy.isOnFieldStrictly&&r.isSpawnedBy.face==="FaceUp",i,(r,s)=>s.isOnFieldStrictly&&s.face==="FaceUp",n,"wip","Addition",(r,s,u)=>{if(!r.isEffective)return u;const p=r.controller.getEntiteisOnField().filter(l=>a.kind.includes(l.kind)).length;return u+p*a.rate})))]})});const e={name:"早すぎた埋葬",actions:[{title:"発動",isMandatory:!1,playType:"CardActivation",spellSpeed:"Normal",executableCells:["Hand","SpellAndTrapZone"],executablePeriods:["main1","main2"],executableDuelistTypes:["Controller"],hasToTargetCards:!0,canPayCosts:a=>a.activator.lp>=800,validate:a=>{const i=a.activator.getMonsterZones();if(a.activator.getEnableSummonList(a.activator,"SpecialSummon",["Effect"],a.action,a.activator.getGraveyard().cardEntities.filter(r=>r.kind==="Monster").filter(r=>r.canBeTargetOfEffect(a)).map(r=>({monster:r,posList:["Attack"],cells:i})),[],!1).length)return C(a)},payCosts:(a,i)=>me(a,i,800),prepare:async a=>{const i=await Z(a,a.activator.getGraveyard().cardEntities,["Attack"]);return i.chainBlockTags.push("PayLifePoint"),i},execute:async(a,i)=>a.action.entity.info.equipedBy?(await a.action.entity.ruleDestory(),!1):await H(a,["Attack"])?(a.action.entity.onBeforeMove.append(async r=>{if(r.entity.face!=="FaceUp"||!r.entity.isOnFieldAsSpellTrapStrictly)return"RemoveMe";const s=r.entity.info.equipedBy;if(!s)return"RemoveMe";const[,,,,,u]=r.args;return s.isOnFieldStrictly&&s.face==="FaceUp"&&r.entity.isEffective&&u.union(["EffectDestroy","RuleDestroy"]).length&&(r.entity.controller.writeInfoLog(`${a.action.entity.toString()}が破壊されたため、装備対象モンスター${s.toString()}を破壊。`),E.tryMarkForDestory([s],a)),"RemoveMe"}),de(a,i,(r,s)=>{var u;return(u=s.info.effectTargets[a.action.seq])==null?void 0:u.includes(r)})):(await a.action.entity.ruleDestory(),!1),settle:async()=>!0},y]};return t.push(e),t.push({name:"幻惑の巻物",actions:[_(),y],continuousEffects:[]}),t},Xe=()=>{const t=[];return[{name:"伝説の剣",attr:void 0,monType:"Warrior",atk:200,def:200},{name:"秘術の書",attr:void 0,monType:"Spellcaster",atk:200,def:200},{name:"ポセイドンの力",attr:void 0,monType:"Aqua",atk:200,def:200},{name:"紫水晶",attr:void 0,monType:"Zombie",atk:200,def:200},{name:"猛獣の歯",attr:void 0,monType:"Beast",atk:200,def:200},{name:"機械改造工場",attr:void 0,monType:"Machine",atk:200,def:200},{name:"体温の上昇",attr:void 0,monType:"Reptile",atk:200,def:200},{name:"魔菌",attr:void 0,monType:"Plant",atk:200,def:200},{name:"闇・エネルギー",attr:void 0,monType:"Fiend",atk:200,def:200},{name:"レーザー砲機甲鎧",attr:void 0,monType:"Insect",atk:200,def:200},{name:"銀の弓矢",attr:void 0,monType:"Fairy",atk:200,def:200},{name:"電撃鞭",attr:void 0,monType:"Thunder",atk:200,def:200},{name:"ドラゴンの秘宝",attr:void 0,monType:"Dragon",atk:200,def:200},{name:"フォロー・ウィンド",attr:void 0,monType:"WingedBeast",atk:200,def:200},{name:"魔性の月",attr:void 0,monType:"BeastWarrior",atk:200,def:200},{name:"エルフの光",attr:"Light",monType:void 0,atk:400,def:-200},{name:"覚醒",attr:"Earth",monType:void 0,atk:400,def:-200},{name:"灼熱の槍",attr:"Fire",monType:void 0,atk:400,def:-200},{name:"突風の扇",attr:"Wind",monType:void 0,atk:400,def:-200},{name:"はがねの甲羅",attr:"Water",monType:void 0,atk:400,def:-200},{name:"闇の破神剣",attr:"Dark",monType:void 0,atk:400,def:-200},{name:"火器付機甲鎧",attr:void 0,monType:"Insect",atk:700,def:0},{name:"サラマンドラ",attr:"Fire",monType:void 0,atk:700,def:0},{name:"シャイン・キャッスル",attr:"Light",monType:void 0,atk:700,def:0}].forEach(e=>{t.push({name:e.name,actions:[_(a=>(!e.attr||a.attr.includes(e.attr))&&(!e.monType||a.types.includes(e.monType))),y],continuousEffects:[U(e.name,"Spell",a=>a.info.equipedBy?[a.info.equipedBy]:[],a=>a.isOnFieldStrictly&&a.face==="FaceUp",a=>{const i=[];return e.atk!==0&&i.push(["attack",e.atk]),e.def!==0&&i.push(["defense",e.def]),i.map(([n,r])=>B.createContinuous("発動",s=>s.isSpawnedBy.isOnFieldStrictly&&s.isSpawnedBy.face==="FaceUp",a,(s,u)=>u.isOnFieldStrictly&&u.face==="FaceUp"&&(!e.monType||u.types.includes(e.monType))&&(!e.attr||u.attr.includes(e.attr)),n,"wip","Addition",(s,u,p)=>s.isEffective?p+r:p))})]})}),t},ze=()=>{const t=[];return[{name:"草原",up:["Warrior","BeastWarrior"],down:[]},{name:"森",up:["Insect","Plant","Beast","BeastWarrior"],down:[]},{name:"山",up:["Dragon","WingedBeast","Thunder"],down:[]},{name:"荒野",up:["Dinosaur","Zombie","Rock"],down:[]},{name:"海",up:["Aqua","SeaSerpent","Fish"],down:["Machine","Pyro"]},{name:"闇",up:["Fiend","Spellcaster"],down:["Fairy"]}].forEach(e=>{t.push({name:e.name,actions:[{title:"発動",isMandatory:!1,canIgnoreCosts:!0,playType:"CardActivation",spellSpeed:"Normal",executableCells:["Hand","SpellAndTrapZone"],executablePeriods:["main1","main2"],executableDuelistTypes:["Controller"],validate:C,prepare:x,execute:async()=>!0,settle:async()=>!0},y],continuousEffects:[W("発動","Spell",a=>a.isOnFieldStrictly&&a.face==="FaceUp",a=>["attack","defense"].flatMap(i=>["up","down"].map(n=>B.createContinuous("発動",r=>r.isSpawnedBy.isOnFieldStrictly&&r.isSpawnedBy.face==="FaceUp",a,(r,s)=>s.isOnFieldStrictly&&s.face==="FaceUp"&&(s.status.monsterCategories??!1)&&e[n].union(s.types).length>0,i,"wip","Addition",(r,s,u)=>!r.isEffective||s.face==="FaceDown"?u:u+(n==="up"?200:-200)))))]})}),[{name:"バーニングブラッド",attr:"Fire"},{name:"ウォーターワールド",attr:"Water"},{name:"ガイアパワー",attr:"Earth"},{name:"シャインスパーク",attr:"Light"},{name:"ダークゾーン",attr:"Dark"},{name:"デザートストーム",attr:"Wind"}].forEach(e=>{t.push({name:e.name,actions:[{title:"発動",isMandatory:!1,playType:"CardActivation",spellSpeed:"Normal",executableCells:["Hand","FieldSpellZone"],executablePeriods:["main1","main2"],executableDuelistTypes:["Controller"],validate:C,prepare:x,execute:async()=>!0,settle:async()=>!0},y],continuousEffects:[W("発動","Spell",a=>a.isOnFieldStrictly&&a.face==="FaceUp",a=>["attack","defense"].flatMap(i=>B.createContinuous("発動",n=>n.isSpawnedBy.isOnFieldStrictly&&n.isSpawnedBy.face==="FaceUp",a,(n,r)=>r.isOnFieldStrictly&&r.face==="FaceUp"&&r.attr.includes(e.attr),i,"wip","Addition",(n,r,s)=>!n.isEffective||r.face==="FaceDown"?s:s+(i==="attack"?500:-400))))]})}),t},Ke=(t,e,a,i)=>{if(!t.action.entity.origin.link||t.action.entity.origin.link<a.length)return;let n=a.map(s=>({material:s,cell:s.fieldCell,link:1}));if(t.action.entity.origin.link>a.length){if(a.every(p=>(p.origin.link??1)<2))return;const s=[n];a.filter(p=>(p.origin.link??1)>1).forEach(p=>{[...s].forEach(l=>{s.push([...l.filter(c=>c.material!==p),{material:p,cell:p.fieldCell,link:p.origin.link??1}])})});const u=s.find(p=>p.reduce((l,c)=>l+c.link,0)===t.action.entity.origin.link);if(!u)return;n=u}if(!i(a)||!t.activator.getEnableSummonList(t.activator,"LinkSummon",["Rule","SpecialSummon"],t.action,[{monster:t.action.entity,posList:["Attack"],cells:e}],n,!1).length)return;if(t.activator.getAvailableExtraZones().length)return n;const r=t.activator.duel.field.getCells("ExtraMonsterZone").map(s=>s.cardEntities[0]).filter(s=>s);if(r.filter(s=>s.controller===t.activator).length&&r.filter(s=>s.controller===t.activator).length===a.filter(s=>s.fieldCell.cellType==="ExtraMonsterZone").length||t.activator.getMonsterZones().flatMap(s=>s.linkArrowSources).some(s=>!a.includes(s))||t.activator.duel.field.canExtraLink(t.action.entity,n))return n},je=(t,e=()=>!0)=>{let a=[...t.activator.getMonstersOnField().filter(n=>n.battlePosition!=="Set"),...t.activator.getHandCell().entities.filter(n=>n.origin.kind==="Monster")];if(a.every(n=>!n.status.allowHandLink)&&(a=a.filter(n=>n.fieldCell.isPlayFieldCell)),a.length<1)return[];const i=[...t.activator.getMonsterZones(),...t.activator.duel.field.getAvailableExtraMonsterZones()];return a.getAllOnOffPattern().filter(n=>n.some(r=>r.status.allowHandLink)||n.every(r=>r.isOnFieldAsMonsterStrictly)).map(n=>Ke(t,i,n,e)??[]).filter(n=>n.length)},Je=async(t,e,a)=>{var p;const i=t.action.getEnableMaterialPatterns(t),n=i.map(l=>({infos:l,materialSeqList:l.map(c=>c.material.seq).sort()}));let r=i[0].map(l=>l.material);if(i.length>1){const l=i.flatMap(o=>o.map(d=>d.material)).getDistinct(),c=await t.action.entity.duel.view.waitSelectEntities(t.activator,{selectables:l,qty:void 0,validator:o=>{const d=o.map(v=>v.seq).sort();return n.some(v=>d.length===v.materialSeqList.length&&d.every((T,F)=>T===v.materialSeqList[F]))},cancelable:a},"リンク素材とするモンスターを選択");if(!c)return;r=c}const s=r.map(l=>l.seq).sort(),u=(p=n.find(l=>s.length===l.materialSeqList.length&&s.every((c,o)=>c===l.materialSeqList[o])))==null?void 0:p.infos;if(!u)throw new b("想定されない状態",t,r);return await E.sendManyToGraveyardForTheSameReason(r,["LinkMaterial","Cost","Rule","SpecialSummonMaterial"],t.action.entity,t.activator),{summonMaterialInfos:u}},ee=(t=()=>!0)=>({title:"リンク召喚",isMandatory:!1,playType:"SpecialSummon",spellSpeed:"Normal",executableCells:["ExtraDeck"],executablePeriods:["main1","main2"],executableDuelistTypes:["Controller"],getEnableMaterialPatterns:e=>je(e,t),canPayCosts:e=>e.action.getEnableMaterialPatterns(e).length>0,validate:e=>!e.ignoreCost||e.activator.getAvailableExtraZones().length+e.activator.getAvailableMonsterZones().length>0?[]:void 0,payCosts:Je,prepare:e=>R(e,"LinkSummon",["Rule","SpecialSummon","LinkSummon"],["Attack"]),execute:q,settle:async()=>!0}),Ye=()=>{const t=[];return[{name:"ＬＡＮフォリンクス",validator:e=>e.length===2},{name:"トラフィックゴースト",validator:e=>e.length===3},{name:"天威の鬼神",validator:e=>e.length>1&&e.some(a=>{var i;return(i=a.status.monsterCategories)==null?void 0:i.includes("Link")})},{name:"天威の拳僧",validator:e=>e.every(a=>{var i,n;return((i=a.status.nameTags)==null?void 0:i.includes("天威"))&&!((n=a.status.monsterCategories)!=null&&n.includes("Link"))})},{name:"電影の騎士ガイアセイバー",validator:e=>e.length>1}].forEach(e=>t.push({name:e.name,actions:[g,ee(e.validator)],defaultSummonFilter:M})),t},Ie=()=>{const t=[];return["ラージマウス","レインボー・フラワー","レッグル","女王の影武者","人造人間７号"].forEach(e=>{t.push({name:e,actions:[g,f,S,k],continuousEffects:[He]})}),t},et=(t,e,a,i,n)=>({title:"①リクルート",isMandatory:!1,playType:"TriggerEffect",spellSpeed:"Normal",executableCells:n,executablePeriods:i.includes("EffectDestroy")?[...h,...D]:["b1DEnd","b2DEnd"],executableDuelistTypes:["Controller"],validate:r=>{if(!r.action.entity.wasMovedAtPreviousChain)return;const s=r.activator.getMonsterZones();if(r.activator.getEnableSummonList(r.activator,"SpecialSummon",["Effect"],r.action,r.activator.getDeckCell().cardEntities.filter(t).filter(p=>p.kind==="Monster").filter(p=>p.canBeTargetOfEffect(r)).map(p=>({monster:p,posList:a,cells:s})),[],!1).length)return[]},prepare:async()=>({selectedEntities:[],chainBlockTags:["SpecialSummonFromDeck"],prepared:void 0}),execute:async r=>{const s=r.activator.getDeckCell().cardEntities.filter(t),u=r.activator.getMonsterZones();return!!r.activator.summonMany(r.activator,"SpecialSummon",["Effect"],r.action,s.map(l=>({monster:l,posList:a,cells:u})),[],!1,e.length>1?void 0:e[0],l=>e.includes(l.length),!1)},settle:async()=>!0}),tt=()=>{const t=[];return[{name:"キラー・ポテト",filter:e=>e.attr.includes("Dark")&&(e.atk??9999)<=1500,qtyList:[1],posList:["Attack"],destoryTypes:["EffectDestroy"],executableCells:["Graveyard"]},{name:"キラー・トマト",filter:e=>e.attr.includes("Dark")&&(e.atk??9999)<=1500,qtyList:[1],posList:["Attack"],destoryTypes:["BattleDestroy"],executableCells:["Graveyard"]},{name:"巨大ネズミ",filter:e=>e.attr.includes("Earth")&&(e.atk??9999)<=1500,qtyList:[1],posList:["Attack"],destoryTypes:["BattleDestroy"],executableCells:["Graveyard"]},{name:"グリズリーマザー",filter:e=>e.attr.includes("Water")&&(e.atk??9999)<=1500,qtyList:[1],posList:["Attack"],destoryTypes:["BattleDestroy"],executableCells:["Graveyard"]},{name:"シャインエンジェル",filter:e=>e.attr.includes("Light")&&(e.atk??9999)<=1500,qtyList:[1],posList:["Attack"],destoryTypes:["BattleDestroy"],executableCells:["Graveyard"]},{name:"ドラゴンフライ",filter:e=>e.attr.includes("Wind")&&(e.atk??9999)<=1500,qtyList:[1],posList:["Attack"],destoryTypes:["BattleDestroy"],executableCells:["Graveyard"]},{name:"ＵＦＯタートル",filter:e=>e.attr.includes("Fire")&&(e.atk??9999)<=1500,qtyList:[1],posList:["Attack"],destoryTypes:["BattleDestroy"],executableCells:["Graveyard"]},{name:"荒野の女戦士",filter:e=>e.attr.includes("Earth")&&e.types.includes("Warrior")&&(e.atk??9999)<=1500,qtyList:[1],posList:["Attack"],destoryTypes:["BattleDestroy"],executableCells:["Graveyard"]},{name:"リトル・トルーパー",filter:e=>e.types.includes("Warrior")&&(e.lvl??9999)<3,qtyList:[1],posList:["Set"],destoryTypes:["BattleDestroy"],executableCells:["Graveyard","Banished"]},{name:"破面竜",filter:e=>e.types.includes("Warrior")&&(e.def??9999)<=1500,qtyList:[1],posList:["Attack","Defense"],destoryTypes:["BattleDestroy"],executableCells:["Graveyard"]},{name:"共鳴虫",filter:e=>e.types.includes("Insect")&&(e.atk??9999)<=1500,qtyList:[1],posList:["Attack","Defense"],destoryTypes:["BattleDestroy"],executableCells:["Graveyard"]},{name:"ピラミッド・タートル",filter:e=>e.types.includes("Zombie")&&(e.def??9999)<=2e3,qtyList:[1],posList:["Attack","Defense"],destoryTypes:["BattleDestroy"],executableCells:["Graveyard"]},{name:"ユーフォロイド",filter:e=>e.types.includes("Machine")&&(e.atk??9999)<=1500,qtyList:[1],posList:["Attack"],destoryTypes:["BattleDestroy"],executableCells:["Graveyard"]},{name:"ヘル・セキュリティ",filter:e=>e.types.includes("Fiend")&&(e.lvl??9999)===1,qtyList:[1],posList:["Attack","Defense"],destoryTypes:["BattleDestroy"],executableCells:["Graveyard"]},{name:"ガスタ・イグル",filter:e=>(e.status.nameTags??[]).includes("ガスタ")&&(e.status.monsterCategories??[]).includes("Tuner"),qtyList:[1],posList:["Attack","Defense"],destoryTypes:["BattleDestroy"],executableCells:["Graveyard"]},{name:"幻影の魔術士",filter:e=>(e.status.nameTags??[]).includes("ＨＥＲＯ")&&(e.atk??9999)<=1e3,qtyList:[1],posList:["Defense"],destoryTypes:["BattleDestroy"],executableCells:["Graveyard"]},{name:"ジェネクス・サーチャー",filter:e=>(e.status.nameTags??[]).includes("ジェネクス")&&(e.atk??9999)<=1500,qtyList:[1],posList:["Attack"],destoryTypes:["BattleDestroy"],executableCells:["Graveyard"]},{name:"紫炎の足軽",filter:e=>(e.status.nameTags??[]).includes("六武衆")&&(e.lvl??12)<=3,qtyList:[1],posList:["Attack","Defense"],destoryTypes:["BattleDestroy"],executableCells:["Graveyard"]},{name:"スレイブ・エイプ",filter:e=>(e.status.nameTags??[]).includes("剣闘獣")&&(e.lvl??12)<=4,qtyList:[1],posList:["Attack","Defense"],destoryTypes:["BattleDestroy"],executableCells:["Graveyard"]},{name:"ゼンマイハニー",filter:e=>(e.status.nameTags??[]).includes("ゼンマイ")&&(e.lvl??12)<=4,qtyList:[1],posList:["Attack","Defense"],destoryTypes:["BattleDestroy"],executableCells:["Graveyard"]},{name:"ＸＸ－セイバー エマーズブレイド",filter:e=>(e.status.nameTags??[]).includes("Ｘ－セイバー")&&(e.lvl??12)<=4,qtyList:[1],posList:["Attack","Defense"],destoryTypes:["BattleDestroy"],executableCells:["Graveyard"]},{name:"軍隊竜",filter:e=>e.nm==="軍隊竜",qtyList:[1],posList:["Attack","Defense"],destoryTypes:["BattleDestroy"],executableCells:["Graveyard"]},{name:"アサルト・ガンドッグ",filter:e=>e.nm==="アサルト・ガンドッグ",qtyList:[1,2,3,4,5],posList:["Attack","Defense"],destoryTypes:["BattleDestroy"],executableCells:["Graveyard"]},{name:"ハイエナ",filter:e=>e.nm==="ハイエナ",qtyList:[1,2,3,4,5],posList:["Attack","Defense"],destoryTypes:["BattleDestroy"],executableCells:["Graveyard"]}].forEach(e=>{t.push({name:e.name,actions:[et(e.filter,e.qtyList,e.posList,e.destoryTypes,e.executableCells),g,f,S,k]})}),t},at=()=>{const t=[],e={name:"おろかな埋葬",actions:[{title:"発動",isMandatory:!1,playType:"CardActivation",spellSpeed:"Normal",executableCells:["Hand","SpellAndTrapZone"],executablePeriods:["main1","main2"],executableDuelistTypes:["Controller"],priorityForNPC:40,validate:l=>{if(l.activator.getDeckCell().cardEntities.filter(c=>c.kind==="Monster").length!==0)return C(l)},prepare:async()=>({selectedEntities:[],chainBlockTags:["SendToGraveyardFromDeck"],prepared:void 0}),execute:async l=>{const c=l.activator.getDeckCell().cardEntities.filter(d=>d.kind==="Monster");if(c.length===0)return!1;const o=await l.activator.waitSelectEntity(c,"墓地に送るモンスターを選択",!1);if(!o)throw new w(l);return await o.sendToGraveyard(["Effect"],l.action.entity,l.activator),await l.activator.getDeckCell().shuffle(),!0},settle:async()=>!0},y]};t.push(e);const a={name:"おろかな副葬",actions:[{title:"発動",isMandatory:!1,playType:"CardActivation",spellSpeed:"Normal",executableCells:["Hand","SpellAndTrapZone"],executablePeriods:["main1","main2"],executableDuelistTypes:["Controller"],isOnlyNTimesPerTurn:1,priorityForNPC:40,validate:l=>{if(l.activator.getDeckCell().cardEntities.filter(c=>c.kind!=="Monster").length!==0)return C(l)},prepare:async()=>({selectedEntities:[],chainBlockTags:["SendToGraveyardFromDeck"],prepared:void 0}),execute:async l=>{const c=l.activator.getDeckCell().cardEntities.filter(d=>d.kind!=="Monster");if(c.length===0)return!1;const o=await l.activator.waitSelectEntity(c,"墓地に送る魔法罠を選択",!1);if(!o)throw new w(l);return await o.sendToGraveyard(["Effect"],l.action.entity,l.activator),!0},settle:async()=>!0},y]};t.push(a);const i={name:"死者蘇生",actions:[{title:"発動",isMandatory:!1,playType:"CardActivation",spellSpeed:"Normal",executableCells:["Hand","SpellAndTrapZone"],executablePeriods:["main1","main2"],executableDuelistTypes:["Controller"],hasToTargetCards:!0,validate:l=>{const c=l.activator.getMonsterZones();if(l.activator.getEnableSummonList(l.activator,"SpecialSummon",["Effect"],l.action,l.activator.duel.field.getCells("Graveyard").flatMap(d=>d.cardEntities).filter(d=>d.kind==="Monster").filter(d=>d.canBeTargetOfEffect(l)).map(d=>({monster:d,posList:m,cells:c})),[],!1).length)return C(l)},prepare:l=>Z(l,l.activator.duel.field.getCells("Graveyard").flatMap(c=>c.cardEntities).filter(c=>c.kind==="Monster").filter(c=>c.canBeTargetOfEffect(l))),execute:async l=>H(l),settle:async()=>!0},y]};t.push(i),[{name:"大嵐",cellTypes:G,isOnlyEnemies:!1},{name:"ハーピィの羽根帚",cellTypes:G,isOnlyEnemies:!0},{name:"ブラック・ホール",cellTypes:A,isOnlyEnemies:!1},{name:"サンダー・ボルト",cellTypes:A,isOnlyEnemies:!0}].forEach(l=>{t.push({name:l.name,actions:[{title:"発動",isMandatory:!1,playType:"CardActivation",spellSpeed:"Normal",executableCells:["Hand","SpellAndTrapZone"],executablePeriods:["main1","main2"],executableDuelistTypes:["Controller"],validate:c=>{let o=c.action.entity.field.getCells(...l.cellTypes).flatMap(d=>d.cardEntities).filter(d=>d!==c.action.entity);if(l.isOnlyEnemies&&(o=o.filter(d=>d.controller!==c.activator)),!!o.length)return C(c)},prepare:async c=>{let o=c.action.entity.field.getCells(...l.cellTypes).flatMap(d=>d.cardEntities).filter(d=>d!==c.action.entity);return l.isOnlyEnemies&&(o=o.filter(d=>d.controller!==c.activator)),{selectedEntities:[],chainBlockTags:c.action.calcChainBlockTagsForDestroy(o),prepared:void 0}},execute:async c=>{let o=c.action.entity.field.getCells(...l.cellTypes).flatMap(d=>d.cardEntities).filter(d=>d!==c.action.entity);return l.isOnlyEnemies&&(o=o.filter(d=>d.controller!==c.activator)),await E.tryDestroy(o,c),!0},settle:async()=>!0},y]})});const n={name:"ハリケーン",actions:[{title:"発動",isMandatory:!1,playType:"CardActivation",spellSpeed:"Normal",executableCells:["Hand","SpellAndTrapZone"],executablePeriods:["main1","main2"],executableDuelistTypes:["Controller"],validate:l=>{if(l.action.entity.field.getCells("SpellAndTrapZone","FieldSpellZone").flatMap(o=>o.cardEntities).filter(o=>o!==l.action.entity).length)return C(l)},prepare:async()=>({selectedEntities:[],chainBlockTags:["BounceToHand"],prepared:void 0}),execute:async(l,c)=>{const o=c.map(v=>v.action).filter(v=>v.playType==="CardActivation").map(v=>v.entity).filter(v=>v.isOnFieldStrictly).filter(v=>v.face==="FaceUp").filter(v=>!v.isLikeContinuousSpell),d=l.action.entity.field.getCells("SpellAndTrapZone","FieldSpellZone").flatMap(v=>v.cardEntities).filter(v=>!o.includes(v));return await E.returnManyToHandForTheSameReason(d,["Effect"],l.action.entity,l.activator),!0},settle:async()=>!0},y]};t.push(n);const r={name:"光の援軍",actions:[{title:"発動",isMandatory:!1,playType:"CardActivation",spellSpeed:"Normal",executableCells:["Hand","SpellAndTrapZone"],executablePeriods:["main1","main2"],executableDuelistTypes:["Controller"],priorityForNPC:40,canPayCosts:l=>l.activator.getDeckCell().cardEntities.length>3,validate:l=>{if(l.activator.getDeckCell().cardEntities.filter(c=>c.kind==="Monster").filter(c=>(c.lvl??13)<5).filter(c=>c.status.nameTags&&c.status.nameTags.includes("ライトロード")).length!==0)return C(l)},payCosts:async l=>{const c=l.activator.getDeckCell().cardEntities.slice(0,3);return await E.sendManyToGraveyardForTheSameReason(c,["Cost"],l.action.entity,l.activator),{sendToGraveyard:c}},prepare:async()=>({selectedEntities:[],chainBlockTags:["SearchFromDeck"],prepared:void 0}),execute:async l=>{const c=l.activator.getDeckCell().cardEntities.filter(d=>d.kind==="Monster").filter(d=>(d.lvl??13)<5).filter(d=>d.status.nameTags&&d.status.nameTags.includes("ライトロード"));if(c.length===0)return!1;const o=await l.activator.waitSelectEntity(c,"手札に加えるモンスターを選択",!1);if(!o)throw new w(l);return await o.addToHand(["Effect"],l.action.entity,l.activator),!0},settle:async()=>!0},y]};t.push(r);const s={name:"調律",actions:[{title:"発動",isMandatory:!1,playType:"CardActivation",spellSpeed:"Normal",executableCells:["Hand","SpellAndTrapZone"],executablePeriods:["main1","main2"],executableDuelistTypes:["Controller"],priorityForNPC:40,validate:l=>{const c=l.activator.getDeckCell().cardEntities;if(!(c.length<2)&&c.filter(o=>{var d;return(d=o.status.nameTags)==null?void 0:d.includes("シンクロン")}).filter(o=>{var d;return(d=o.status.monsterCategories)==null?void 0:d.includes("Tuner")}).length!==0)return C(l)},prepare:async()=>({selectedEntities:[],chainBlockTags:["SearchFromDeck","SendToGraveyardFromDeck"],prepared:void 0}),execute:async l=>{const c=l.activator.getDeckCell().cardEntities;if(c.length<2)return;const o=c.filter(v=>{var T;return(T=v.status.nameTags)==null?void 0:T.includes("シンクロン")}).filter(v=>{var T;return(T=v.status.monsterCategories)==null?void 0:T.includes("Tuner")});if(o.length===0)return!1;const d=await l.activator.waitSelectEntity(o,"手札に加えるモンスターを選択",!1);if(!d)throw new w(l);return await d.addToHand(["Effect"],l.action.entity,l.activator),l.activator.getDeckCell().shuffle(),l.activator.duel.clock.incrementProcSeq(),await l.activator.getDeckCell().cardEntities[0].sendToGraveyard(["Effect"],l.action.entity,l.activator),!0},settle:async()=>!0},y]};t.push(s);const u={name:"ワン・フォー・ワン",actions:[{title:"発動",isMandatory:!1,playType:"CardActivation",spellSpeed:"Normal",executableCells:["Hand","SpellAndTrapZone"],executablePeriods:["main1","main2"],executableDuelistTypes:["Controller"],priorityForNPC:40,canPayCosts:l=>{if(l.activator.getDeckCell().cardEntities.every(c=>(c.lvl??12)>1)){if(l.activator.getHandCell().cardEntities.every(c=>(c.lvl??12)>1)||l.activator.getHandCell().cardEntities.filter(c=>c.kind==="Monster").length<2)return!1}else if(l.activator.getHandCell().cardEntities.filter(c=>c.kind==="Monster").length===0)return!1;return!0},validate:l=>{let c=[...l.activator.getDeckCell().cardEntities.filter(T=>(T.lvl??12)===1),...l.activator.getHandCell().cardEntities.filter(T=>(T.lvl??12)===1)];const o=l.activator.getHandCell().cardEntities;(o.length<2||!l.ignoreCost)&&(c=c.filter(T=>!o.includes(T)));const d=l.activator.getMonsterZones();if(l.activator.getEnableSummonList(l.activator,"SpecialSummon",["Effect"],l.action,c.map(T=>({monster:T,posList:m,cells:d})),[],!1).length)return C(l)},payCosts:async(l,c,o)=>{const d=[...l.activator.getDeckCell().cardEntities.filter(O=>(O.lvl??12)===1),...l.activator.getHandCell().cardEntities.filter(O=>(O.lvl??12)===1)],v=l.activator.getMonsterZones(),T=l.activator.getEnableSummonList(l.activator,"SpecialSummon",["Effect"],l.action,d.map(O=>({monster:O,posList:m,cells:v})),[],!1);let F=l.activator.getHandCell().cardEntities.filter(O=>O.kind==="Monster");T.length===1&&(F=F.filter(O=>!T.map(pe=>pe.monster).includes(O)));const X=await l.activator.waitSelectEntity(F,"墓地へ送るモンスターを選択",o);if(!X)throw new w(l);return await X.sendToGraveyard(["Cost"],l.action.entity,l.activator),{sendToGraveyard:[X]}},prepare:async()=>({selectedEntities:[],chainBlockTags:["SpecialSummonFromDeck"],prepared:void 0}),execute:async l=>{const c=[...l.activator.getDeckCell().cardEntities.filter(v=>v.lvl===1),...l.activator.getHandCell().cardEntities.filter(v=>v.lvl===1)],o=l.activator.getMonsterZones();return!!await l.activator.summonOne(l.activator,"SpecialSummon",["Effect"],l.action,c.map(v=>({monster:v,posList:m,cells:o})),[],!1,!1)},settle:async()=>!0},y]};t.push(u);const p={name:"封印の黄金櫃",actions:[{title:"発動",isMandatory:!1,playType:"CardActivation",spellSpeed:"Normal",executableCells:["Hand","SpellAndTrapZone"],executablePeriods:["main1","main2"],executableDuelistTypes:["Controller"],validate:l=>{if(!l.activator.getDeckCell().cardEntities.every(c=>!l.activator.canTryBanish(c,"BanishAsEffect",l.action)))return C(l)},prepare:async()=>({selectedEntities:[],chainBlockTags:["BanishFromDeck"],prepared:void 0}),execute:async l=>{const c=l.activator.getDeckCell().cardEntities.filter(v=>l.activator.canTryBanish(v,"BanishAsEffect",l.action)),o=await l.activator.waitSelectEntity(c,"除外するカードを選択。",!1);if(!o)throw new w(l);return(await E.tryBanish("BanishAsEffect",[o],l)).forEach(v=>v.counterHolder.removeAll("GoldSarcophagus")),!0},settle:async()=>!0},Ae("回収カウント進行",["stanby"],l=>{l.activator.isTurnPlayer&&l.action.entity.field.getCells("Banished").flatMap(c=>c.cardEntities).filter(c=>c.moveLog.latestRecord.movedBy===l.action.entity).filter(c=>c.moveLog.latestRecord.actionOwner===l.activator).forEach(c=>{c.counterHolder.add("GoldSarcophagus",1,l.action.entity);const o=c.counterHolder.getQty("GoldSarcophagus",l.action.entity);o<3&&l.activator.duel.log.info(`${c.toString()}のターンカウント：${o-1}⇒${o}`)})}),{title:"回収",isMandatory:!0,playType:"LingeringEffect",spellSpeed:"Normal",executableCells:J,executablePeriods:["stanby"],executableDuelistTypes:["Controller","Opponent"],validate:l=>{if(l.activator.isTurnPlayer)return l.action.entity.field.getCells("Banished").flatMap(c=>c.cardEntities).filter(c=>c.moveLog.latestRecord.movedBy===l.action.entity).filter(c=>c.moveLog.latestRecord.actionOwner===l.activator).some(c=>c.counterHolder.getQty("GoldSarcophagus")===2)?[]:void 0},prepare:x,execute:async l=>{const c=l.action.entity.field.getCells("Banished").flatMap(d=>d.cardEntities).filter(d=>d.moveLog.latestRecord.movedBy===l.action.entity).filter(d=>d.moveLog.latestRecord.actionOwner===l.activator).filter(d=>d.counterHolder.getQty("GoldSarcophagus")===2);if(!c.length)throw new b("想定されない状態",l);let o=c[0];if(c.length>1){const d=await l.activator.waitSelectEntity(c,"回収するカードを選択。",!1);if(!d)throw new w(l);o=d}return await o.addToHand(["Effect"],l.action.entity,l.activator),!0},settle:async()=>!0},y]};return t.push(p),t},it=()=>{const t=[];t.push({name:"強欲な壺",actions:[{title:"発動",isMandatory:!1,playType:"CardActivation",spellSpeed:"Normal",executableCells:["Hand","SpellAndTrapZone"],executablePeriods:["main1","main2"],executableDuelistTypes:["Controller"],priorityForNPC:20,validate:r=>{if(!(r.activator.getDeckCell().cardEntities.length<2)&&r.activator.canDraw&&r.activator.canAddToHandFromDeck)return C(r)},prepare:async()=>({selectedEntities:[],chainBlockTags:["Draw"],prepared:void 0}),execute:async r=>(await r.activator.draw(2,r.action.entity,r.activator),!0),settle:async()=>!0},y]});const e={name:"貪欲な壺",actions:[{title:"発動",isMandatory:!1,playType:"CardActivation",spellSpeed:"Normal",executableCells:["Hand","SpellAndTrapZone"],executablePeriods:["main1","main2"],executableDuelistTypes:["Controller"],priorityForNPC:30,validate:r=>{if(!(r.activator.getGraveyard().cardEntities.filter(s=>s.kind==="Monster").filter(s=>s.canBeTargetOfEffect(r)).length<5)&&r.activator.canDraw&&r.activator.canAddToHandFromDeck)return C(r)},prepare:async r=>{const s=await r.activator.waitSelectEntities(r.activator.getGraveyard().cardEntities.filter(u=>u.kind==="Monster").filter(u=>u.canBeTargetOfEffect(r)),5,u=>u.length===5,"デッキに戻すモンスターを選択。",!1);if(s)return{selectedEntities:s,chainBlockTags:["Draw","ReturnToDeckFromGraveyard"],prepared:void 0}},execute:async r=>r.selectedEntities.some(s=>s.wasMovedAtCurrentChain)?!1:(await E.returnManyToDeckForTheSameReason("Random",r.selectedEntities,["Effect"],r.action.entity,r.activator),await r.activator.draw(2,r.action.entity,r.activator),!0),settle:async()=>!0},y]};t.push(e);const a={name:"天使の施し",actions:[{title:"発動",isMandatory:!1,playType:"CardActivation",spellSpeed:"Normal",executableCells:["Hand","SpellAndTrapZone"],executablePeriods:["main1","main2"],executableDuelistTypes:["Controller"],priorityForNPC:30,validate:r=>{if(!(r.activator.getDeckCell().cardEntities.length<3))return C(r)},prepare:async()=>({selectedEntities:[],chainBlockTags:["Draw","DiscordAsEffect"],prepared:void 0}),execute:async r=>(await r.activator.draw(3,r.action.entity,r.activator),await r.activator.discard(2,["Effect","Discard"],r.action.entity,r.activator,()=>!0,r.activator),!0),settle:async()=>!0},y]};t.push(a);const i={name:"成金ゴブリン",actions:[{title:"発動",isMandatory:!1,playType:"CardActivation",spellSpeed:"Normal",executableCells:["Hand","SpellAndTrapZone"],executablePeriods:["main1","main2"],executableDuelistTypes:["Controller"],priorityForNPC:20,validate:r=>{if(!(r.activator.getDeckCell().cardEntities.length<1))return C(r)},prepare:async()=>({selectedEntities:[],chainBlockTags:["Draw"],prepared:void 0}),execute:async r=>(await r.activator.draw(1,r.action.entity,r.activator),r.action.entity.field.duel.clock.incrementProcSeq(),r.activator.getOpponentPlayer().heal(1e3,r.action.entity),!0),settle:async()=>!0},y]};t.push(i);const n={name:"手札抹殺",actions:[{title:"発動",isMandatory:!1,playType:"CardActivation",spellSpeed:"Normal",executableCells:["Hand","SpellAndTrapZone"],executablePeriods:["main1","main2"],executableDuelistTypes:["Controller"],validate:r=>{if(!(r.activator.getDeckCell().cardEntities.length<r.activator.getHandCell().cardEntities.filter(s=>s.seq!==r.action.entity.seq).length)&&r.action.entity.field.getAllCells().filter(s=>s.cellType==="Hand").flatMap(s=>s.cardEntities).filter(s=>s.seq!==r.action.entity.seq).length!==0)return C(r)},prepare:async()=>({selectedEntities:[],chainBlockTags:["SearchFromDeck"],prepared:void 0}),execute:async r=>{const s=r.activator.getHandCell().cardEntities.length,u=r.activator.getOpponentPlayer().getHandCell().cardEntities.length;return await E.sendManyToGraveyardForTheSameReason(r.action.entity.field.getCells("Hand").flatMap(p=>p.cardEntities),["Effect","Discard"],r.action.entity,r.activator),r.activator.duel.clock.incrementProcSeq(),await r.action.entity.field.drawAtSameTime(r.activator,s,r.activator.getOpponentPlayer(),u,r.action.entity,r.activator),!0},settle:async()=>!0},y]};return t.push(n),t},rt=t=>({title:"発動",isMandatory:!1,playType:"CardActivation",spellSpeed:"Normal",executableCells:["Hand","SpellAndTrapZone"],executablePeriods:["main1","main2"],executableDuelistTypes:["Controller"],priorityForNPC:40,validate:e=>{if(e.activator.getDeckCell().cardEntities.filter(t).length!==0&&e.activator.canDraw)return C(e)},prepare:async()=>({selectedEntities:[],chainBlockTags:["SearchFromDeck"],prepared:void 0}),execute:async e=>{const a=e.activator.getDeckCell().cardEntities.filter(t);if(!a.length)return!1;const i=await e.activator.waitSelectEntity(a,"手札に加えるカードを選択",!1);return i?(await i.addToHand(["Effect"],e.action.entity,e.activator),e.activator.getDeckCell().shuffle(),!0):!1},settle:async()=>!0}),nt=(t,e)=>({title:"発動",isMandatory:!1,playType:"CardActivation",spellSpeed:"Normal",executableCells:["Hand","SpellAndTrapZone"],executablePeriods:["main1","main2"],executableDuelistTypes:["Controller"],hasToTargetCards:!0,priorityForNPC:40,validate:a=>{if(!(a.activator.getGraveyard().cardEntities.filter(t).length<e))return C(a)},prepare:async()=>({selectedEntities:[],chainBlockTags:["AddToHandFromGraveyard"],prepared:void 0}),execute:async a=>{const i=a.activator.getGraveyard().cardEntities.filter(t);if(i.length===0)return!1;const n=await a.activator.waitSelectEntities(i,e,r=>r.length===e,"手札に加えるカードを選択",!1);for(const r of n??[])await r.addToHand(["Effect"],a.action.entity,a.activator);return!0},settle:async()=>!0}),st=t=>({title:"発動",isMandatory:!1,playType:"CardActivation",spellSpeed:"Normal",executableCells:["Hand","SpellAndTrapZone"],executablePeriods:["main1","main2"],executableDuelistTypes:["Controller"],priorityForNPC:40,canPayCosts:e=>e.activator.getHandCell().cardEntities.filter(t).some(a=>e.activator.canDiscard([a])),validate:e=>{if(!(e.activator.getDeckCell().cardEntities.length<2))return C(e)},payCosts:async e=>({discard:await e.activator.discard(1,["Discard","Cost"],e.action.entity,e.activator,t)}),prepare:async()=>({selectedEntities:[],chainBlockTags:["Draw"],prepared:void 0}),execute:async e=>(await e.activator.draw(2,e.action.entity,e.activator),!0),settle:async()=>!0}),lt=t=>({title:"発動",isMandatory:!1,playType:"CardActivation",spellSpeed:"Normal",executableCells:["Hand","SpellAndTrapZone"],executablePeriods:["main1","main2"],executableDuelistTypes:["Controller"],validate:C,prepare:async e=>{const[a,i]=t(e.action.entity),n=[];return a<0&&n.push("DamageToSelf"),i<0&&n.push("DamageToOpponent"),{selectedEntities:[],chainBlockTags:n,prepared:void 0}},execute:async e=>{const[a,i]=t(e.action.entity);return i>0?e.activator.getOpponentPlayer().heal(i,e.action.entity):i<0&&e.activator.getOpponentPlayer().effectDamage(Math.abs(i),e.action.entity),a>0?e.activator.heal(a,e.action.entity):a<0&&e.activator.effectDamage(Math.abs(a),e.action.entity),!0},settle:async()=>!0}),ct=()=>{const t=[];return[{name:"増援",filter:e=>e.origin.kind==="Monster"&&e.types.includes("Warrior")&&(e.origin.level??5)<5},{name:"化石調査",filter:e=>e.origin.kind==="Monster"&&e.types.includes("Dinosaur")&&(e.origin.level??6)<6},{name:"Ｅ－エマージェンシーコール",filter:e=>e.origin.kind==="Monster"&&(e.origin.nameTags??[]).includes("Ｅ・ＨＥＲＯ")},{name:"召集の聖刻印",filter:e=>e.origin.kind==="Monster"&&(e.origin.nameTags??[]).includes("聖刻")},{name:"召喚師のスキル",filter:e=>e.origin.kind==="Monster"&&(e.origin.monsterCategories??[]).includes("Normal")&&(e.origin.level??4)>4},{name:"トゥーンのもくじ",filter:e=>(e.origin.nameTags??[]).includes("トゥーン")},{name:"融合賢者",filter:e=>e.origin.name==="融合"},{name:"虹の架け橋",filter:e=>e.origin.kind!=="Monster"&&(e.origin.nameTags??[]).includes("宝玉")},{name:"紫炎の狼煙",filter:e=>e.origin.kind==="Monster"&&(e.origin.nameTags??[]).includes("六武衆")&&(e.origin.level??4)<4},{name:"テラ・フォーミング",filter:e=>e.origin.kind==="Spell"&&e.origin.spellCategory==="Field"},{name:"コール・リゾネーター",filter:e=>e.origin.kind==="Monster"&&(e.origin.nameTags??[]).includes("リゾネーター")}].forEach(e=>{t.push({name:e.name,actions:[rt(e.filter),y]})}),[{name:"戦士の生還",filter:e=>e.kind==="Monster"&&e.types.includes("Warrior"),qty:1},{name:"ダーク・バースト",filter:e=>e.kind==="Monster"&&e.attr.includes("Dark")&&(e.atk??9999)<=1500,qty:1},{name:"悪夢再び",filter:e=>e.kind==="Monster"&&e.attr.includes("Dark")&&(e.def??9999)===0,qty:2},{name:"サルベージ",filter:e=>e.kind==="Monster"&&e.attr.includes("Water")&&(e.atk??9999)<=1500,qty:2},{name:"バッテリーリサイクル",filter:e=>e.kind==="Monster"&&e.types.includes("Thunder")&&(e.atk??9999)<=1500,qty:2},{name:"闇の量産工場",filter:e=>e.kind==="Monster"&&(e.status.monsterCategories??[]).includes("Normal"),qty:2}].forEach(e=>{t.push({name:e.name,actions:[nt(e.filter,e.qty),y]})}),[{name:"トレード・イン",filter:e=>e.kind==="Monster"&&(e.lvl??0)===8},{name:"調和の宝札",filter:e=>e.kind==="Monster"&&(e.origin.monsterCategories??[]).includes("Tuner")&&e.types.includes("Dragon")&&(e.atk??9999)<=1e3},{name:"デステニー・ドロー",filter:e=>e.kind==="Monster"&&(e.origin.nameTags??[]).includes("Ｄ－ＨＥＲＯ")}].forEach(e=>{t.push({name:e.name,actions:[st(e.filter),y]})}),[{name:"火の粉",calcHeal:()=>[0,-200]},{name:"雷鳴",calcHeal:()=>[0,-300]},{name:"ファイヤー・ボール",calcHeal:()=>[0,-500]},{name:"火あぶりの刑",calcHeal:()=>[0,-600]},{name:"昼夜の大火事",calcHeal:()=>[0,-800]},{name:"火炎地獄",calcHeal:()=>[-500,-1e3]},{name:"盗人ゴブリン",calcHeal:()=>[500,-500]},{name:"ブルー・ポーション",calcHeal:()=>[400,0]},{name:"レッド・ポーション",calcHeal:()=>[500,0]},{name:"ゴブリンの秘薬",calcHeal:()=>[600,0]},{name:"天使の生き血",calcHeal:()=>[800,0]},{name:"治療の神 ディアン・ケト",calcHeal:()=>[1e3,0]},{name:"恵みの雨",calcHeal:()=>[1e3,1e3]}].forEach(e=>{t.push({name:e.name,actions:[lt(e.calcHeal),y]})}),t},ot=()=>{const t=[];return t.push({name:"強欲な瓶",actions:[y,{title:"発動",isMandatory:!1,playType:"CardActivation",spellSpeed:"Quick",executableCells:["SpellAndTrapZone"],executablePeriods:h,executableDuelistTypes:["Controller"],validate:e=>{if(!(e.activator.getDeckCell().cardEntities.length<2)&&e.activator.canDraw&&e.activator.canAddToHandFromDeck)return C(e)},prepare:async()=>({selectedEntities:[],chainBlockTags:["Draw"],prepared:void 0}),execute:async e=>(await e.activator.draw(1,e.action.entity,e.activator),!0),settle:async()=>!0}]}),t.push({name:"戦線復帰",actions:[{title:"発動",isMandatory:!1,playType:"CardActivation",spellSpeed:"Quick",executableCells:["SpellAndTrapZone"],executablePeriods:h,executableDuelistTypes:["Controller"],hasToTargetCards:!0,validate:e=>{const a=e.activator.getMonsterZones();if(e.activator.getEnableSummonList(e.activator,"SpecialSummon",["Effect"],e.action,e.activator.getGraveyard().cardEntities.filter(n=>n.kind==="Monster").filter(n=>n.canBeTargetOfEffect(e)).map(n=>({monster:n,posList:["Defense"],cells:a})),[],!1).length)return C(e)},prepare:e=>Z(e,e.activator.getGraveyard().cardEntities.filter(a=>a.kind==="Monster").filter(a=>a.canBeTargetOfEffect(e)),["Defense"]),execute:async e=>H(e,["Defense"]),settle:async()=>!0},y]}),t},ut=()=>{const t=[];return["炸裂装甲","次元幽閉"].forEach(e=>{t.push({name:e,actions:[y,{title:"発動",playType:"CardActivation",spellSpeed:"Quick",executableCells:["SpellAndTrapZone"],executablePeriods:["b1Battle","b2Battle"],executableDuelistTypes:["Controller"],hasToTargetCards:!0,validate:a=>{if(!a.activator.duel.clock.isUponAttackDeclaration()||a.activator.isTurnPlayer)return;const i=a.activator.duel.attackingMonster;if(!i)throw new b("想定されない状態",a,i);if(i.canBeTargetOfEffect(a))return e==="次元幽閉"&&!a.activator.canTryBanish(i,"BanishAsEffect",a.action)?!1:C(a)},prepare:async a=>{const i=a.activator.duel.attackingMonster;if(!i)throw new b("想定されない状態",a,i);const n=e==="炸裂装甲"?a.action.calcChainBlockTagsForDestroy([i]):["BanishFromField"];return{selectedEntities:[i],chainBlockTags:n,prepared:void 0}},execute:async a=>(e==="炸裂装甲"?await E.tryDestroy(a.selectedEntities,a):await E.tryBanish("BanishAsEffect",a.selectedEntities,a),!0),settle:async()=>!0}]})}),t},dt=()=>{const t=[],e={name:"ご隠居の猛毒薬",actions:[y,{title:"発動",isMandatory:!1,playType:"CardActivation",spellSpeed:"Quick",executableCells:["Hand","SpellAndTrapZone"],executablePeriods:h,executableDuelistTypes:["Controller"],validate:C,prepare:async(i,n,r)=>{const s=await i.action.entity.field.duel.view.waitSelectText([{seq:0,text:"●自分は１２００ＬＰ回復する。"},{seq:1,text:"●相手に８００ダメージを与える。"}],"使用する効果を選択",!1);if(s===void 0&&!r)throw new w(i);const u=[];return s===1&&u.push("DamageToOpponent"),{selectedEntities:[],chainBlockTags:u,prepared:s??0}},execute:async i=>i.prepared===1?(i.activator.getOpponentPlayer().effectDamage(800,i.action.entity),!0):(i.activator.heal(1200,i.action.entity),!0),settle:async()=>!0}]};t.push(e);const a={name:"月の書",actions:[{title:"発動",isMandatory:!1,playType:"CardActivation",spellSpeed:"Quick",executableCells:["Hand","SpellAndTrapZone"],executablePeriods:h,executableDuelistTypes:["Controller"],hasToTargetCards:!0,validate:i=>{if(i.action.entity.field.getMonstersOnFieldStrictly().filter(r=>r.canBeTargetOfEffect(i)).filter(r=>r.face==="FaceUp").length)return C(i)},prepare:async(i,n,r)=>{const s=i.action.entity.field.getMonstersOnFieldStrictly().filter(p=>p.canBeTargetOfEffect(i)).filter(p=>p.face==="FaceUp"),u=await i.activator.waitSelectEntity(s,"対象とするモンスターを選択",r);if(u)return{selectedEntities:[u],chainBlockTags:[],prepared:void 0}},execute:async i=>{const n=i.selectedEntities[0];if(!n.isOnFieldAsMonsterStrictly||n.battlePosition==="Set")return!1;if(!n.canBeEffected(i.activator,i.action.entity,i.action)){i.activator.duel.log.info(`${n.toString()}は${i.action.entity.toString()}の効果を受けない。`);return}return await n.setBattlePosition("Set",["Effect"],i.action.entity,i.activator),!0},settle:async()=>!0},y]};return t.push(a),t.push({name:"突進",actions:[{title:"発動",isMandatory:!1,playType:"CardActivation",spellSpeed:"Quick",executableCells:["Hand","SpellAndTrapZone"],executablePeriods:[...h,...D],executableDuelistTypes:["Controller"],hasToTargetCards:!0,validate:i=>{if(i.action.entity.field.getMonstersOnFieldStrictly().filter(r=>r.canBeTargetOfEffect(i)).length)return C(i)},prepare:async(i,n,r)=>{const s=i.action.entity.field.getMonstersOnFieldStrictly().filter(p=>p.canBeTargetOfEffect(i)),u=await i.activator.waitSelectEntity(s,"対象とするモンスターを選択",r);if(u)return{selectedEntities:[u],chainBlockTags:[],prepared:void 0}},execute:async i=>{const n=i.selectedEntities[0];if(!n.isOnFieldAsMonsterStrictly||n.battlePosition==="Set")return!1;if(!n.canBeEffected(i.activator,i.action.entity,i.action)){i.activator.duel.log.info(`${n.toString()}は${i.action.entity.toString()}の効果を受けない。`);return}return n.numericOprsBundle.push(B.createLingeringAddition("攻撃力上昇",r=>r.effectOwner.duel.clock.isSameTurn(r.isSpawnedAt),i.action.entity,i.action,"attack",(r,s,u)=>u+700)),!0},settle:async()=>!0},y]}),t},pt=(t,e,a,i,n,r)=>{if(!t.action.entity.origin.level||i.some(l=>!l.lvl)||i.map(l=>l.lvl??0).reduce((l,c)=>l+c,0)!==t.action.entity.origin.level)return;const s=i.filter(l=>{var c;return(c=l.status.monsterCategories)==null?void 0:c.some(o=>o==="Tuner")}),u=i.filter(l=>{var c;return(c=l.status.monsterCategories)==null?void 0:c.every(o=>o!=="Tuner")});if(!n(s)||!r(u))return;const p=[...s.map(l=>({material:l,cell:l.fieldCell,isAsTuner:!0})),...u.map(l=>({material:l,cell:l.fieldCell,isAsTuner:!1}))];if(t.activator.getEnableSummonList(t.activator,"SyncroSummon",["Rule","SpecialSummon"],t.action,[{monster:t.action.entity,posList:e,cells:a}],p,!1).length)return p},vt=(t,e=i=>i.length===1,a=i=>i.length>0)=>{let i=[...t.activator.getMonstersOnField().filter(s=>s.battlePosition!=="Set"),...t.activator.getHandCell().cardEntities.filter(s=>s.origin.kind==="Monster")];if(i.every(s=>!s.status.allowHandSyncro)&&(i=i.filter(s=>s.fieldCell.isPlayFieldCell)),i.length<2)return[];const n=[...t.activator.getMonsterZones(),...t.activator.duel.field.getCells("ExtraMonsterZone")],r=["Attack","Defense"];return i.getAllOnOffPattern().filter(s=>s.some(u=>u.status.allowHandSyncro)||s.every(u=>u.isOnFieldAsMonsterStrictly)).map(s=>pt(t,r,n,s,e,a)??[]).filter(s=>s.length)},gt=async(t,e,a)=>{var p;const i=t.action.getEnableMaterialPatterns(t),n=i.map(l=>({infos:l,materialSeqList:l.map(c=>c.material.seq).sort()}));let r=i[0].map(l=>l.material);if(i.length>1){const l=i.flatMap(o=>o.map(d=>d.material)).getDistinct(),c=await t.activator.waitSelectEntities(l,void 0,o=>{const d=o.map(v=>v.seq).sort();return n.some(v=>d.length===v.materialSeqList.length&&d.every((T,F)=>T===v.materialSeqList[F]))},"シンクロ素材とするモンスターを選択",a);if(!c)return;r=c}const s=r.map(l=>l.seq).sort(),u=(p=n.find(l=>s.length===l.materialSeqList.length&&s.every((c,o)=>c===l.materialSeqList[o])))==null?void 0:p.infos;if(!u)throw new b("想定されない状態",t,r);return await E.sendManyToGraveyardForTheSameReason(r,["SyncroMaterial","Cost","Rule","SpecialSummonMaterial"],t.action.entity,t.activator),{summonMaterialInfos:u}},P=(t=a=>a.length===1,e=a=>a.length>0)=>({title:"シンクロ召喚",isMandatory:!1,playType:"SpecialSummon",spellSpeed:"Normal",executableCells:["ExtraDeck"],executablePeriods:["main1","main2"],executableDuelistTypes:["Controller"],getEnableMaterialPatterns:a=>vt(a,t,e),canPayCosts:a=>a.action.getEnableMaterialPatterns(a).length>0,validate:a=>!a.ignoreCost||a.activator.getAvailableExtraZones().length+a.activator.getAvailableMonsterZones().length>0?[]:void 0,payCosts:gt,prepare:a=>R(a,"SyncroSummon",["Rule","SpecialSummon","SyncroSummon"],["Attack","Defense"]),execute:q,settle:async()=>!0}),ft=()=>{const t=[];return["大地の騎士ガイアナイト","スクラップ・デスデーモン"].forEach(e=>t.push({name:e,actions:[g,f,S,P()],defaultSummonFilter:M})),t.push({name:"ナチュル・ガオドレイク",actions:[g,f,S,P(e=>e.length===1&&e.every(a=>a.attr.some(i=>i==="Earth")),e=>e.length>0&&e.every(a=>a.attr.some(i=>i==="Earth")))],defaultSummonFilter:M}),t.push({name:"マジカル・アンドロイド",actions:[g,f,S,P(),{title:"回復",isMandatory:!0,playType:"IgnitionEffect",spellSpeed:"Normal",executableCells:["MonsterZone","ExtraMonsterZone"],executablePeriods:["end"],executableDuelistTypes:["Controller"],isOnlyNTimesPerTurnIfFaceup:1,validate:e=>e.action.entity.duel.phase==="end"&&e.activator.isTurnPlayer&&e.action.entity.face==="FaceUp"?[]:void 0,prepare:x,execute:async e=>(e.activator.heal(e.activator.getMonstersOnField().filter(a=>a.face==="FaceUp").filter(a=>a.types.includes("Psychic")).length*600,e.action.entity),!0),settle:async()=>!0}],defaultSummonFilter:M}),t},yt=()=>{const t=[],e={name:"にせアバター",actions:[k,g,f,S],continuousEffects:[U("THE_DEVILS_AVATAR","Monster",i=>[i],i=>i.isOnFieldStrictly&&i.face==="FaceUp",i=>["attack","defense"].map(n=>B.createContinuous("THE_DEVILS_AVATAR",r=>r.isSpawnedBy.isOnFieldStrictly&&r.isSpawnedBy.face==="FaceUp",i,(r,s)=>s.isOnFieldStrictly&&s.face==="FaceUp",n,"calculated","THE_DEVILS_AVATAR",()=>Number.MIN_VALUE)))]};t.push(e);const a={name:"にせドレッド・ルート",actions:[k,g,f,S],continuousEffects:[W("THE_DEVILS_DREAD-ROOT","Monster",i=>i.isOnFieldStrictly&&i.face==="FaceUp",i=>["attack","defense"].map(n=>B.createContinuous("THE_DEVILS_DREAD-ROOT",r=>r.isSpawnedBy.isOnFieldStrictly&&r.isSpawnedBy.face==="FaceUp",i,(r,s)=>s.kind==="Monster"&&s.isOnFieldStrictly&&s.face==="FaceUp"&&s!==r.isSpawnedBy,n,"calculated","THE_DEVILS_DREAD-ROOT",(r,s,u)=>Math.round(u/2))))]};return t.push(a),t},St=(t,e,a,i,n=2,r=2,s)=>{if(!t.action.entity.origin.rank||i.length<n||i.length>r||i.some(p=>!p.lvl)||i.some(p=>p.lvl!==t.action.entity.rank)||!s(i))return;const u=i.map(p=>({material:p,cell:p.fieldCell,level:p.status.level}));if(t.activator.getEnableSummonList(t.activator,"XyzSummon",["Rule","XyzSummon","SpecialSummon"],t.action,[{monster:t.action.entity,posList:e,cells:a}],u,!1).length)return u},Ct=(t,e=2,a=2,i=n=>n.length>1)=>{const n=t.activator.getMonstersOnField().filter(s=>s.battlePosition!=="Set");if(n.length<e)return[];const r=[...t.activator.getMonsterZones(),...t.activator.getAvailableExtraZones()];return n.getAllOnOffPattern().filter(s=>s.length>=e).filter(s=>s.length<=a).map(s=>St(t,m,r,s,e,a,i)??[]).filter(s=>s.length)},Tt=async(t,e,a)=>{var p;const i=t.action.getEnableMaterialPatterns(t),n=i.map(l=>({infos:l,materialSeqList:l.map(c=>c.material.seq).sort()}));let r=i[0].map(l=>l.material);if(i.length>1){const l=i.flatMap(o=>o.map(d=>d.material)).getDistinct(),c=await t.activator.waitSelectEntities(l,void 0,o=>{const d=o.map(v=>v.seq).sort();return n.some(v=>d.length===v.materialSeqList.length&&d.every((T,F)=>T===v.materialSeqList[F]))},"エクシーズ素材とするモンスターを選択",a);if(!c)return;r=c}const s=r.map(l=>l.seq).sort(),u=(p=n.find(l=>s.length===l.materialSeqList.length&&s.every((c,o)=>c===l.materialSeqList[o])))==null?void 0:p.infos;if(!u)throw new b("想定されない状態",t,r);return console.log(u),await E.convertManyToXyzMaterials(u.map(l=>l.material),["XyzMaterial","Rule","Cost"],t.action.entity,t.activator),console.log(u.map(l=>l.material.kind)),{summonMaterialInfos:u}},ht=(t=2,e=2,a=i=>i.length>1)=>({title:"エクシーズ召喚",isMandatory:!1,playType:"SpecialSummon",spellSpeed:"Normal",executableCells:["ExtraDeck"],executablePeriods:["main1","main2"],executableDuelistTypes:["Controller"],getEnableMaterialPatterns:i=>Ct(i,t,e,a),canPayCosts:i=>i.action.getEnableMaterialPatterns(i).length>0,validate:i=>!i.ignoreCost||i.activator.getAvailableExtraZones().length+i.activator.getAvailableMonsterZones().length>0?[]:void 0,payCosts:Tt,prepare:i=>R(i,"XyzSummon",["Rule","SpecialSummon","XyzSummon"],["Attack","Defense"]),execute:q,settle:async()=>!0}),Et=()=>{const t=[];return[{name:"ジェムナイト・パール",qty:2},{name:"覚醒の勇士 ガガギゴ",qty:3}].forEach(e=>t.push({name:e.name,actions:[g,f,S,ht(e.qty,e.qty)],defaultSummonFilter:M})),t},kt=()=>{const t=[];return t.push({name:"シューティング・ライザー・ドラゴン",actions:[g,f,S,P(),{title:"①墓地送り",isMandatory:!1,playType:"TriggerEffect",spellSpeed:"Normal",executableCells:A,executablePeriods:[...h,...D],executableDuelistTypes:["Controller"],isOnlyNTimesPerTurn:1,validate:e=>{if(e.action.entity.hasBeenSummonedNow(["SyncroSummon"])&&e.activator.getDeckCell().cardEntities.some(a=>(a.lvl??12)<(e.action.entity.lvl??0)))return[]},prepare:async()=>({selectedEntities:[],chainBlockTags:["SendToGraveyardFromDeck","IfSpecialSummonSucceed"],prepared:void 0}),execute:async e=>{const a=e.activator.getDeckCell().cardEntities.filter(r=>(r.lvl??12)<(e.action.entity.lvl??0));if(a.length===0)return!1;const i=await e.activator.waitSelectEntity(a,"墓地に送るモンスターを選択",!1);if(!i)throw new b("想定されない状況",e);await i.sendToGraveyard(["Effect"],e.action.entity,e.activator);const n=i.lvl??0;return e.action.entity.numericOprsBundle.push(B.createLingeringAddition("レベル減少",()=>!0,e.action.entity,e.action,"level",(r,s,u)=>u-n)),!0},settle:async()=>!0},oe({title:"②シンクロ召喚",isOnlyNTimesPerChain:1})],defaultSummonFilter:M}),t},mt=()=>{const t=[];return t.push({name:"折れ竹光",actions:[_(),y]}),t.push({name:"妖刀竹光",actions:[_(),y,{title:"②直接攻撃付与",isMandatory:!1,playType:"IgnitionEffect",spellSpeed:"Normal",executableCells:["SpellAndTrapZone"],executablePeriods:["main1","main2"],executableDuelistTypes:["Controller"],isOnlyNTimesPerTurn:1,validate:e=>{if(!e.activator.getSpellTrapsOnField().filter(i=>{var n;return(n=i.status.nameTags)==null?void 0:n.includes("竹光")}).filter(i=>i!==e.action.entity).some(i=>i.status.spellCategory==="Equip"))return;const a=e.action.entity.info.equipedBy;if(a&&!a.status.canDirectAttack)return[]},prepare:async(e,a,i)=>{const n=await e.activator.waitSelectEntity(e.activator.getSpellTrapsOnField().filter(r=>{var s;return(s=r.status.nameTags)==null?void 0:s.includes("竹光")}).filter(r=>r!==e.action.entity).filter(r=>r.status.spellCategory==="Equip"),"手札に戻すカードを選択。",i);if(n)return{selectedEntities:[n],chainBlockTags:[],prepared:void 0}},execute:async e=>{const a=e.action.entity.info.equipedBy;return a?(await E.returnManyToHandForTheSameReason(e.selectedEntities,["Effect"],e.action.entity,e.activator),a.statusOperatorBundle.push(new $("直接攻撃",i=>(console.log(i.effectOwner.duel.clock.turn,i.isSpawnedAt.turn),i.effectOwner.duel.clock.isSameTurn(i.isSpawnedAt)),!1,e.action.entity,e.action,()=>!0,(i,n)=>({...n,canDirectAttack:!0}))),!0):!1},settle:async()=>!0},{title:"③サーチ",isMandatory:!1,playType:"TriggerEffect",spellSpeed:"Normal",executableCells:["Graveyard"],executablePeriods:[...h,...D],executableDuelistTypes:["Controller"],validate:e=>{if(e.action.entity.wasMovedAtPreviousChain&&e.activator.canAddToHandFromDeck)return e.activator.getDeckCell().cardEntities.filter(a=>{var i;return(i=a.status.nameTags)==null?void 0:i.includes("竹光")}).some(a=>a.status.name!=="妖刀竹光")?[]:void 0},prepare:async()=>({selectedEntities:[],chainBlockTags:["SearchFromDeck"],prepared:void 0}),execute:async e=>{const a=e.activator.getDeckCell().cardEntities.filter(n=>{var r;return(r=n.status.nameTags)==null?void 0:r.includes("竹光")}).filter(n=>n.status.name!=="妖刀竹光");if(!a.length)return!1;const i=await e.activator.waitSelectEntity(a,"手札に加えるカードを選択。",!1);if(!i)throw new w(e);return(await i.addToHand(["Effect"],e.action.entity,e.activator)).cellType==="Hand"},settle:async()=>!0}]}),t.push({name:"真刀竹光",actions:[_(),y,{title:"②相手モンスター破壊",isMandatory:!1,playType:"TriggerEffect",spellSpeed:"Normal",executableCells:["SpellAndTrapZone"],executablePeriods:["b1DAfterDmgCalc","b2DAfterDmgCalc"],executableDuelistTypes:["Controller"],validate:e=>{const a=e.action.entity.info.equipedBy;if(a&&a.info.battleLog.filter(i=>e.activator.duel.clock.isPreviousStage(i.timestamp)).some(i=>i.enemy.entityType==="Duelist")&&e.activator.getOpponentPlayer().getMonstersOnField().length&&e.activator.getOpponentPlayer().lifeLog.filter(i=>e.activator.duel.clock.isPreviousStage(i.clock)).some(i=>i.entity===a))return[]},prepare:async e=>({selectedEntities:[],chainBlockTags:e.action.calcChainBlockTagsForDestroy(e.activator.getOpponentPlayer().getMonstersOnField()),prepared:void 0}),execute:async e=>(await E.tryDestroy(e.activator.getOpponentPlayer().getMonstersOnField(),e)).length>0,settle:async()=>!0},{title:"③竹光入替",isMandatory:!1,playType:"IgnitionEffect",spellSpeed:"Normal",executableCells:["SpellAndTrapZone"],executablePeriods:["main1","main2"],executableDuelistTypes:["Controller"],canPayCosts:e=>e.action.entity.info.equipedBy?De(e):!1,validate:e=>{if(!(!e.action.entity.info.equipedBy||!e.activator.getDeckCell().cardEntities.filter(n=>{var r;return(r=n.status.nameTags)==null?void 0:r.includes("竹光")}).filter(n=>n.status.name!=="真刀竹光").filter(n=>n.status.spellCategory==="Equip").length))return e.activator.duel.field.getMonstersOnFieldStrictly().some(n=>n.canBeTargetOfEffect(e))?[]:void 0},payCosts:be,prepare:x,execute:async e=>{const a=e.activator.getDeckCell().cardEntities.filter(p=>{var l;return(l=p.status.nameTags)==null?void 0:l.includes("竹光")}).filter(p=>p.status.name!=="真刀竹光").filter(p=>p.status.spellCategory==="Equip");if(!a.length)return!1;const i=e.activator.getAvailableSpellTrapZones();if(!i.length)return!1;const n=e.activator.duel.field.getMonstersOnFieldStrictly().filter(p=>p.canBeTargetOfEffect(e));if(!n.length)return!1;const r=await e.activator.waitSelectEntity(a,"装備するカードを選択。",!1);if(!r)throw new w("竹光選択",e);const s=await e.activator.duel.view.waitSelectDestination(e.activator,r,i,"装備カードを置く場所を選択。","装備",!1);if(!s)throw new w("配置場所選択",e);await r.putDirectly(s,"Spell",["Effect"],e.action.entity,e.activator);const u=await e.activator.waitSelectEntity(n,"装備する対象を選択。",!1);if(!u)throw new w("装備対象選択",e);return r.info.equipedBy=u,r.info.effectTargets[e.action.seq]=[u],u.info.equipEntities.push(r),!0},settle:async()=>!0}]}),t},Dt=()=>{const t=[];return t.push({name:"黄金色の竹光",actions:[{title:"発動",isMandatory:!1,playType:"CardActivation",spellSpeed:"Normal",executableCells:["Hand","SpellAndTrapZone"],executablePeriods:["main1","main2"],executableDuelistTypes:["Controller"],priorityForNPC:20,validate:e=>{if(!(e.activator.getDeckCell().cardEntities.length<2)&&e.activator.canDraw&&e.activator.canAddToHandFromDeck&&e.activator.getSpellTrapsOnField().filter(a=>{var i;return(i=a.status.nameTags)==null?void 0:i.includes("竹光")}).some(a=>a.status.spellCategory==="Equip"))return C(e)},prepare:async()=>({selectedEntities:[],chainBlockTags:["Draw"],prepared:void 0}),execute:async e=>(await e.activator.draw(2,e.action.entity,e.activator),!0),settle:async()=>!0},y]}),t},bt=()=>{const t=[];return t.push({name:"ＢＦ－疾風のゲイル",actions:[k,g,f,S,{title:"①特殊召喚",isMandatory:!1,playType:"SpecialSummon",spellSpeed:"Normal",executableCells:["Hand"],executablePeriods:["main1","main2"],executableDuelistTypes:["Controller"],validate:e=>{if(e.activator.getMonstersOnField().filter(i=>(i.status.nameTags??[]).includes("ＢＦ")).filter(i=>i.nm!==e.action.entity.origin.name).length)return j(e,["Attack","Defense"],[])},prepare:e=>R(e,"SpecialSummon",["SpecialSummon","Rule"],m),execute:q,settle:async()=>!0},{title:"②攻守半減",isMandatory:!1,playType:"IgnitionEffect",spellSpeed:"Normal",executableCells:["MonsterZone"],executablePeriods:["main1","main2"],executableDuelistTypes:["Controller"],hasToTargetCards:!0,isOnlyNTimesPerTurnIfFaceup:1,validate:e=>{const a=e.activator.getOpponentPlayer().getMonstersOnField().filter(i=>i.face==="FaceUp").filter(i=>i.canBeTargetOfEffect(e));if(a.length)return a.length?a:void 0},prepare:async(e,a,i)=>{var r;let n=(r=e.dest)==null?void 0:r.cardEntities[0];if(!n){const s=e.activator.getOpponentPlayer().getMonstersOnField().filter(p=>p.face==="FaceUp").filter(p=>p.canBeTargetOfEffect(e)),u=await e.activator.waitSelectEntity(s,"効果対象を選択。",i);if(!u)return;n=u}return{selectedEntities:[n],chainBlockTags:[],prepared:void 0}},execute:async e=>{const a=e.selectedEntities.filter(i=>i.isOnFieldAsMonsterStrictly).filter(i=>i.face==="FaceUp").find(i=>i.canBeEffected(e.activator,e.action.entity,e.action));if(a)return["attack","defense"].map(i=>B.createLingeringFixation("②攻守半減",()=>!0,e.action.entity,e.action,i,(n,r,s)=>Math.round(s/2))).forEach(i=>a.numericOprsBundle.push(i)),!0},settle:async()=>!0}]}),t},xt=()=>{const t=[];return t.push({name:"水晶機巧－ハリファイバー",actions:[g,ee(e=>e.length===2&&e.some(a=>{var i;return(i=a.status.monsterCategories)==null?void 0:i.includes("Tuner")})),{title:"①リクルート",isMandatory:!1,playType:"TriggerEffect",spellSpeed:"Normal",executableCells:A,executablePeriods:[...h,...D],executableDuelistTypes:["Controller"],validate:e=>{if(!e.action.entity.hasBeenSummonedNow(["LinkSummon"]))return;const a=[e.activator.getHandCell(),e.activator.getDeckCell()].flatMap(r=>r.cardEntities).filter(r=>(r.lvl??12)<4).filter(r=>{var s;return(s=r.status.monsterCategories)==null?void 0:s.includes("Tuner")}),i=e.activator.getMonsterZones();return e.activator.getEnableSummonList(e.activator,"SpecialSummon",["Effect"],e.action,a.map(r=>({monster:r,cells:i,posList:["Defense"]})),[],!1).length?[]:void 0},prepare:async()=>({selectedEntities:[],chainBlockTags:["SpecialSummonFromDeck"],prepared:void 0}),execute:async e=>{const a=[e.activator.getHandCell(),e.activator.getDeckCell()].flatMap(r=>r.cardEntities).filter(r=>(r.lvl??12)<4).filter(r=>{var s;return(s=r.status.monsterCategories)==null?void 0:s.includes("Tuner")}),i=e.activator.getMonsterZones(),n=await e.activator.summonOne(e.activator,"SpecialSummon",["Effect"],e.action,a.map(r=>({monster:r,cells:i,posList:["Defense"]})),[],!1,!1)??[];return n.forEach(r=>r.statusOperatorBundle.push(new $("効果発動不可",s=>s.effectOwner.duel.clock.isSameTurn(s.isSpawnedAt),!1,e.action.entity,e.action,()=>!0,()=>({canActivateEffect:!1})))),n.length==1},settle:async()=>!0},{title:"②シンクロ召喚",isMandatory:!1,playType:"QuickEffect",spellSpeed:"Quick",executableCells:A,executablePeriods:["main1","main2"],executableDuelistTypes:["Controller"],isOnlyNTimesPerChain:1,canPayCosts:Q,validate:e=>{if(e.activator.isTurnPlayer)return;const a=[...e.activator.getMonsterZones(),...e.activator.duel.field.getCells("ExtraMonsterZone")],i=e.activator.getExtraDeck().cardEntities.filter(r=>{var s;return(s=r.status.monsterCategories)==null?void 0:s.includes("Syncro")}).filter(r=>{var s;return(s=r.status.monsterCategories)==null?void 0:s.includes("Tuner")});return e.activator.getEnableSummonList(e.activator,"SyncroSummon",["SpecialSummon","Effect"],e.action,i.map(r=>({monster:r,cells:a,posList:m})),[{material:e.action.entity,cell:e.action.entity.fieldCell}],!1).length?[]:void 0},payCosts:V,prepare:x,execute:async e=>{const a=[...e.activator.getMonsterZones(),...e.activator.duel.field.getCells("ExtraMonsterZone")],i=e.activator.getExtraDeck().cardEntities.filter(n=>{var r;return(r=n.status.monsterCategories)==null?void 0:r.includes("Syncro")}).filter(n=>{var r;return(r=n.status.monsterCategories)==null?void 0:r.includes("Tuner")});return await e.activator.summonOne(e.activator,"SyncroSummon",["SpecialSummon","Effect"],e.action,i.map(n=>({monster:n,cells:a,posList:m})),[],!1,!1),!0},settle:async()=>!0}],defaultSummonFilter:M}),t},Mt=()=>{const t=[];return t.push({name:"封印されしエクゾディア",actions:[g,f,k,S,{title:"封印開放",isMandatory:!0,playType:"Exodia",spellSpeed:"Normal",executableCells:["Hand"],executablePeriods:L,executableDuelistTypes:["Controller"],validate:e=>{const a=e.activator.getHandCell().cardEntities.filter(i=>{var n;return(n=i.origin.nameTags)==null?void 0:n.includes("封印されし")}).map(i=>i.origin.name).getDistinct();return console.log(e.action.entity.toString(),a),a.length===5?[]:void 0},prepare:async e=>(await E.sendManyToGraveyardForTheSameReason(e.activator.duel.field.getCardsOnFieldStrictly(),["Rule"],e.action.entity,e.activator),{selectedEntities:[],chainBlockTags:[""],prepared:void 0,nextChainBlockFilter:()=>!1}),execute:async e=>{const a=e.activator.getOpponentPlayer().getHandCell().cardEntities.filter(n=>{var r;return(r=n.origin.nameTags)==null?void 0:r.includes("封印されし")}).map(n=>n.origin.name).getDistinct().length===5,i=[{name:"封印されし者の左足",column:4},{name:"封印されし者の右足",column:2},{name:"封印されし者の左腕",column:5},{name:"封印されし者の右腕",column:1},{name:"封印されしエクゾディア",column:3}];for(const n of i){const r=[e.activator.getHandCell().cardEntities.find(s=>s.origin.name===n.name),e.activator.getOpponentPlayer().getHandCell().cardEntities.find(s=>s.origin.name===n.name)].filter(s=>s!==void 0);if(!r.length)throw new b("想定されない状態",e.activator.getHandCell().cardEntities,n.name);await fe.moveMany(r.map(s=>[s,s.controller.getMonsterZones().find(u=>u.column===(s.controller.seat==="Above"?6-n.column:n.column))??s.controller.getFieldZone(),"Monster","FaceUp","Vertical","Top",["Rule"],void 0,void 0,void 0]))}throw a?new te(void 0,`お互いが、${e.action.entity.toString()}の特殊勝利条件を同時に満たした。`):new te(e.activator,`${e.action.entity.toString()}の特殊勝利条件を満たした。`)},settle:async()=>!0}]}),t},wt=()=>{const t=[];return t.push({name:"ファイアウォール・ドラゴン・シンギュラリティ",actions:[g,ee(e=>e.length>2),{title:"①バウンス＆自己強化",isMandatory:!1,playType:"QuickEffect",spellSpeed:"Quick",executableCells:A,executablePeriods:[...h,...D],executableDuelistTypes:["Controller"],isOnlyNTimesPerTurn:1,validate:e=>[...e.activator.getGraveyard().cardEntities,...e.activator.getMonstersOnField()].flatMap(r=>r.status.monsterCategories??[]).getDistinct().union(["Ritual","Fusion","Syncro","Xyz"]).length<1?void 0:[...e.activator.getOpponentPlayer().getGraveyard().cardEntities,...e.activator.getOpponentPlayer().getEntiteisOnField()].filter(r=>r.canBeTargetOfEffect(e)).length?[]:void 0,prepare:async e=>{const i=[...e.activator.getGraveyard().cardEntities,...e.activator.getMonstersOnField()].flatMap(s=>s.status.monsterCategories??[]).getDistinct().union(["Ritual","Fusion","Syncro","Xyz"]).length;if(i<1)return;const n=[...e.activator.getOpponentPlayer().getGraveyard().cardEntities,...e.activator.getOpponentPlayer().getEntiteisOnField()].filter(s=>s.canBeTargetOfEffect(e));if(n.length<1)return;const r=await e.action.entity.duel.view.waitSelectEntities(e.activator,{selectables:n,qty:void 0,validator:s=>s.length>0&&s.length<=i,cancelable:!1},"手札に戻すカードを選択。")??[];if(r.length)return{selectedEntities:r,chainBlockTags:[],prepared:void 0}},execute:async e=>{const a=e.selectedEntities.filter(n=>n.isOnFieldStrictly||n.fieldCell.cellType==="Graveyard").filter(n=>n.canBeEffected(e.activator,e.action.entity,e.action));await E.returnManyToHandForTheSameReason(a,["Effect"],e.action.entity,e.activator);const i=a.filter(n=>n.fieldCell.cellType==="Hand"||n.fieldCell.cellType==="ExtraDeck").length;return e.action.entity.numericOprsBundle.push(B.createLingeringAddition(e.action.title,n=>n.isSpawnedBy.isEffective,e.action.entity,e.action,"attack",(n,r,s)=>s+500*i)),!0},settle:async()=>!0},{title:"②蘇生",isMandatory:!1,playType:"TriggerEffect",spellSpeed:"Normal",executableCells:A,executablePeriods:L,executableDuelistTypes:["Controller"],isOnlyNTimesPerTurn:1,validate:e=>{const a=e.action.entity.moveLog.latestRecord.movedAt,i=e.action.duel.field.moveLog.getPriviousChainLog().filter(s=>(console.log(s,s.entity.fieldCell.cellType==="Graveyard",s.movedAs.includes("BattleDestroy")),s.entity.fieldCell.cellType==="Graveyard"||s.movedAs.includes("BattleDestroy"))).filter(s=>s.movedAt.totalProcSeq>a.totalProcSeq).map(s=>s.entity.wasMovedFrom).toArray();if(!e.action.entity.linkArrowDests.union(i).length)return;const n=e.activator.getMonsterZones();if(e.activator.getEnableSummonList(e.activator,"SpecialSummon",["Effect"],e.action,e.activator.getGraveyard().cardEntities.filter(s=>s.kind==="Monster").filter(s=>s.types.includes("Cyberse")).filter(s=>s.canBeTargetOfEffect(e)).map(s=>({monster:s,posList:m,cells:n})),[],!1).length)return C(e)},prepare:e=>Z(e,e.activator.getGraveyard().cardEntities.filter(a=>a.kind==="Monster").filter(a=>a.types.includes("Cyberse")).filter(a=>a.canBeTargetOfEffect(e)),m),execute:e=>H(e,m),settle:async()=>!0}],defaultSummonFilter:M}),t},At=()=>{const t=[];return["イグナイト・イーグル","イグナイト・マグナム","イグナイト・ドラグノフ","イグナイト・マスケット","イグナイト・デリンジャー","イグナイト・ライオット","イグナイト・ウージー","イグナイト・キャリバー"].forEach(e=>{t.push({name:e,actions:[g,f,S,k,ue,{title:"①サーチ",isMandatory:!1,playType:"IgnitionEffect",spellSpeed:"Normal",executableCells:["SpellAndTrapZone"],executablePeriods:["main1","main2"],executableDuelistTypes:["Controller"],validate:a=>{var n;const i=a.activator.getPendulumScaleMonsters().find(r=>r!==a.action.entity);if(i&&(n=i.status.nameTags)!=null&&n.includes("イグナイト"))return a.activator.getDeckCell().cardEntities.some(r=>{var s;return(s=r.status.nameTags)==null?void 0:s.includes("イグナイト")})?[]:void 0},prepare:async a=>({selectedEntities:[],chainBlockTags:["SearchFromDeck",...a.action.calcChainBlockTagsForDestroy(a.activator.getPendulumScaleMonsters())],prepared:void 0}),execute:async a=>{if(!(await E.tryDestroy(a.activator.getPendulumScaleMonsters(),a)).length)return!1;const n=a.activator.getDeckCell().cardEntities.filter(s=>{var u;return(u=s.status.nameTags)==null?void 0:u.includes("イグナイト")});if(!n.length)return!1;const r=await a.activator.waitSelectEntity(n,"手札に加えるカードを選択。",!1);return r?(await r.addToHand(["Effect"],a.action.entity,a.activator),!0):!1},settle:async()=>!0}]})}),t},Bt=()=>{const t=[];return t.push({name:"ジャンク・コレクター",actions:[g,f,S,k,{title:"罠コピー",isMandatory:!1,playType:"QuickEffect",spellSpeed:"Quick",executableCells:A,executablePeriods:h,executableDuelistTypes:["Controller"],canPayCosts:e=>e.activator.getGraveyard().cardEntities.filter(i=>i.kind==="Trap").filter(i=>i.status.trapCategory==="Normal").filter(i=>e.activator.canTryBanish(i,"BanishAsCost",e.action)).filter(i=>i.canBeBanished("BanishAsCost",e.activator,e.action.entity,e.action)).flatMap(i=>i.actions).filter(i=>i.playType==="CardActivation").filter(i=>!i.needsToPayCost).filter(i=>i.validate(e.activator,[],!0)).length?Q(e):!1,validate:()=>[],payCosts:async(e,a,i)=>{const n=e.activator.getGraveyard().cardEntities.filter(u=>u.kind==="Trap").filter(u=>u.status.trapCategory==="Normal").filter(u=>e.activator.canTryBanish(u,"BanishAsCost",e.action)).filter(u=>u.canBeBanished("BanishAsCost",e.activator,e.action.entity,e.action)).flatMap(u=>u.actions).filter(u=>u.playType==="CardActivation").filter(u=>!u.needsToPayCost).filter(u=>u.validate(e.activator,[],!0)).map(u=>u.entity),r=await e.activator.waitSelectEntity(n,"コピーする罠を選択。",i);if(!r)return;const s=[e.action.entity,r];return await E.banishManyForTheSameReason(s,["Cost"],e.action.entity,e.activator),{banish:s}},prepare:async(e,a)=>{var r;const i=(r=e.costInfo.banish)==null?void 0:r.find(s=>s!==e.action.entity);if(!i)throw new b("想定されない状況",e,e.costInfo);const n=i.actions.find(s=>s.playType==="CardActivation");if(!n)throw new b("想定されない状況",e,e.costInfo,i);return await n.prepare(e.activator,void 0,void 0,a,!1,!0)},execute:async(e,a)=>{var r;const i=(r=e.costInfo.banish)==null?void 0:r.find(s=>s!==e.action.entity);if(!i)throw new b("想定されない状況",e,e.costInfo);const n=i.actions.find(s=>s.playType==="CardActivation");if(!n)throw new b("想定されない状況",e,e.costInfo,i);return await n.execute(e,a)},settle:async()=>!0}]}),t},Pt=()=>{const t=[];return t.push({name:"ダーク・リゾネーター",actions:[g,f,S,k],substituteEffects:[Ze(1)]}),t.push({name:"レッド・リゾネーター",actions:[g,f,S,k,{title:"①特殊召喚",isMandatory:!1,playType:"TriggerEffect",spellSpeed:"Normal",executableCells:["MonsterZone"],executablePeriods:[...h,...D],executableDuelistTypes:["Controller"],validate:e=>{if(!e.action.entity.hasBeenSummonedNow(["NormalSummon"]))return;const a=e.activator.getMonsterZones();if(e.activator.getEnableSummonList(e.activator,"SpecialSummon",["Effect"],e.action,e.activator.getHandCell().cardEntities.filter(n=>n.kind==="Monster").filter(n=>(n.lvl??12)<5).map(n=>({monster:n,posList:m,cells:a})),[],!1).length)return[]},prepare:async()=>({selectedEntities:[],chainBlockTags:["SpecialSummonFromHand"],prepared:void 0}),execute:async e=>{const a=e.activator.getMonsterZones(),i=e.activator.getHandCell().cardEntities.filter(r=>r.kind==="Monster").filter(r=>(r.lvl??12)<5).map(r=>({monster:r,posList:m,cells:a}));return!!await e.activator.summonOne(e.activator,"SpecialSummon",["Effect"],e.action,i,[],!1,!1)},settle:async()=>!0},{title:"②回復",isMandatory:!1,playType:"TriggerEffect",spellSpeed:"Normal",executableCells:["MonsterZone"],executablePeriods:[...h,...D],executableDuelistTypes:["Controller"],hasToTargetCards:!0,isOnlyNTimesPerTurn:1,validate:e=>{if(e.action.entity.hasBeenSummonedNow(["SpecialSummon"]))return e.activator.getMonstersOnField().filter(a=>a.canBeTargetOfEffect(e)).filter(a=>(a.atk??0)>0).some(a=>a.info.summonKinds.includes("SpecialSummon"))?[]:void 0},prepare:async e=>{const a=await e.activator.waitSelectEntity(e.activator.getMonstersOnField().filter(i=>i.canBeTargetOfEffect(e)).filter(i=>(i.atk??0)>0).filter(i=>i.info.summonKinds.includes("SpecialSummon")),"対象とするモンスターを選択",!1);if(a)return{selectedEntities:[a],chainBlockTags:[],prepared:void 0}},execute:async e=>{const a=e.activator.lp;return e.selectedEntities.filter(i=>i.isOnFieldAsMonsterStrictly).forEach(i=>e.activator.heal(i.atk??0,e.action.entity)),e.activator.lp!==a},settle:async()=>!0}]}),t},ae=(t,e)=>{const a=e?`魔力充填可能(${e})`:"魔力充填可能";return ne(a,t,i=>[i],()=>!0,i=>[new $(a,()=>!0,!0,i,{},(n,r)=>n.isSpawnedBy===r,(n,r)=>(r.maxCounterQty.SpellCounter=e??Number.MAX_VALUE,{...r,maxCounterQty:r.maxCounterQty}))])},K={},Ft=(t,e=1)=>(K[e]||(K[e]={title:`魔力回収(${e})`,isMandatory:!0,playType:"AfterChainBlock",spellSpeed:"Normal",executableCells:["MonsterZone"],executablePeriods:L,executableDuelistTypes:["Controller"],validate:a=>{if(!a.targetChainBlock||a.targetChainBlock.action.playType!=="CardActivation"||a.targetChainBlock.action.entity.kind!=="Spell"||!a.action.entity.isEffective||a.action.entity.face==="FaceDown")return;const i=a.action.entity.status.maxCounterQty.SpellCounter??0;if(!(a.action.entity.counterHolder.getQty("SpellCounter")>=i)&&!(a.action.entity.hadArrivedToFieldAt().totalProcSeq>a.targetChainBlock.isActivatedAt.totalProcSeq))return[]},prepare:x,execute:async a=>a.action.entity.face==="FaceDown"||!a.action.entity.isOnFieldAsMonsterStrictly||!a.action.entity.isEffective?!1:(a.action.entity.counterHolder.add("SpellCounter",e,a.action.entity),!0),settle:async()=>!0}),{...K[e],title:`${t}魔力回収(${e})`}),ie=(t,e,a)=>t.action.entity.counterHolder.getQty("SpellCounter")>=a,re=(t,e,a,i)=>{const n=i[0];return t.action.entity.counterHolder.remove("SpellCounter",n),{counter:n}},Ot=()=>{const t=[];return t.push({name:"魔導戦士 ブレイカー",actions:[g,f,S,k,{title:"①魔力充填",isMandatory:!0,playType:"TriggerEffect",spellSpeed:"Normal",executableCells:["MonsterZone"],executablePeriods:["main1","main2"],executableDuelistTypes:["Controller"],validate:e=>{if(e.action.entity.hasBeenSummonedNow(["NormalSummon"]))return[]},prepare:async()=>({selectedEntities:[],chainBlockTags:["IfNormarlSummonSucceed"],prepared:void 0}),execute:async e=>e.action.entity.face==="FaceDown"?!1:(e.action.entity.counterHolder.setQty("SpellCounter",1,e.action.entity),!0),settle:async()=>!0},{title:"③マナブレイク",isMandatory:!1,playType:"IgnitionEffect",spellSpeed:"Normal",executableCells:["MonsterZone"],executablePeriods:["main1","main2"],executableDuelistTypes:["Controller"],hasToTargetCards:!0,canPayCosts:(e,a)=>ie(e,a,1),validate:e=>{const a=e.action.entity.field.getCells(...G).flatMap(i=>i.cardEntities).filter(i=>i.canBeTargetOfEffect(e));if(a.length)return a.map(i=>i.fieldCell)},payCosts:async(e,a,i)=>re(e,a,i,[1]),prepare:async(e,a,i)=>{var r;let n=(r=e.dest)==null?void 0:r.cardEntities[0];if(!n){const s=e.action.entity.field.getCells(...G).flatMap(p=>p.cardEntities).filter(p=>p.canBeTargetOfEffect(e)),u=await e.activator.waitSelectEntity(s,"破壊する対象を選択。",i);if(!u)return;n=u}return{selectedEntities:[n],chainBlockTags:e.action.calcChainBlockTagsForDestroy([n]),prepared:void 0}},execute:async e=>e.selectedEntities.every(a=>!a.isOnFieldAsSpellTrapStrictly)?!1:(await E.tryDestroy(e.selectedEntities,e),!0),settle:async()=>!0}],continuousEffects:[ae("Monster",1),U("②攻撃力上昇","Monster",e=>[e],()=>!0,e=>[B.createContinuous("②攻撃力上昇",()=>!0,e,()=>!0,"attack","wip","Addition",(a,i,n)=>a.isEffective?n+a.counterHolder.getQty("SpellCounter")*300:n)])]}),t.push({name:"王立魔法図書館",actions:[g,f,S,k,{...Ft("①",1)},{title:"②ドロー",isMandatory:!1,playType:"IgnitionEffect",spellSpeed:"Normal",executableCells:["MonsterZone"],executablePeriods:["main1","main2"],executableDuelistTypes:["Controller"],canPayCosts:(e,a)=>ie(e,a,3),validate:e=>{if(e.activator.getDeckCell().cardEntities.length)return[]},payCosts:async(e,a,i)=>re(e,a,i,[3]),prepare:x,execute:async e=>(await e.activator.draw(1,e.action.entity,e.activator),!0),settle:async()=>!0}],continuousEffects:[ae("Monster",3)]}),t},Lt=()=>{const t=[];return t.push({name:"スターダスト・ドラゴン",actions:[g,f,S,P(),{title:"①ヴィクテム・サンクチュアリ",isMandatory:!1,playType:"QuickEffect",spellSpeed:"Quick",executableCells:["MonsterZone","ExtraMonsterZone"],executablePeriods:L,executableDuelistTypes:["Controller"],canPayCosts:Y,validate:(e,a)=>a.length===0?void 0:a[e.index-1].chainBlockTags.includes("DestroyOnField")?[]:void 0,payCosts:I,prepare:async(e,a)=>{const i=a.slice(-1)[0];return{selectedEntities:[],chainBlockTags:e.action.calcChainBlockTagsForDestroy([i.action.entity]),prepared:void 0}},execute:async(e,a)=>{const i=a[e.index-1];return i.isNegatedActivationBy=e.action,await E.tryDestroy([i.action.entity],e),!0},settle:async()=>!0},{title:"②自己再生",playType:"IgnitionEffect",isMandatory:!1,spellSpeed:"Normal",executableCells:["Graveyard"],executablePeriods:["end"],executableDuelistTypes:["Controller"],validate:e=>{const a=e.action.entity.moveLog.latestRecord;if(a.movedBy!==e.action.entity||!e.activator.duel.clock.isSameTurn(a.movedAt)||!a.movedAs.includes("Cost"))return;const i=e.activator.duel,n=e.action.entity.actionLogRecords.filter(s=>i.clock.isSameTurn(s.clock)).map(s=>s.chainBlockInfo).findLast(s=>s.action.title==="①ヴィクテム・サンクチュアリ");return!n||n.state!=="done"?void 0:e.activator.getAvailableMonsterZones().length>0?[]:void 0},prepare:x,execute:e=>N(e),settle:async()=>!0}],defaultSummonFilter:M}),t.push({name:"閃珖竜 スターダスト",defaultSummonFilter:M,actions:[g,f,P(),{title:"波動音壁",isMandatory:!1,playType:"QuickEffect",spellSpeed:"Quick",executableCells:A,executablePeriods:h,executableDuelistTypes:["Controller"],isOnlyNTimesPerTurnIfFaceup:1,hasToTargetCards:!0,validate:e=>{const a=e.activator.getEntiteisOnField().filter(i=>i.face==="FaceUp").filter(i=>i.canBeTargetOfEffect(e));if(a.length)return a.map(i=>i.fieldCell)},prepare:async(e,a,i)=>{if(e.dest)return{selectedEntities:e.dest.cardEntities,chainBlockTags:[],prepared:void 0};const n=e.activator.getEntiteisOnField().filter(s=>s.face==="FaceUp").filter(s=>s.canBeTargetOfEffect(e));if(!n.length)return;const r=await e.activator.waitSelectEntity(n,"対象とするカードを選択",i);if(r)return{selectedEntities:[r],chainBlockTags:[],prepared:void 0}},execute:async e=>(e.selectedEntities.filter(a=>a.isOnFieldStrictly).filter(a=>a.face==="FaceUp").filter(a=>a.canBeEffected(e.activator,e.action.entity,e.action)).forEach(a=>{a.counterHolder.add("SonicBarrier",1,e.action.entity)}),!0),settle:async()=>!0}],substituteEffects:[{title:"波動音壁（適用）",isMandatory:!0,executableCells:J,executablePeriods:L,executableDuelistTypes:["Controller"],isApplicableTo:(e,a,i)=>i.filter(n=>n.counterHolder.getQty("SonicBarrier",e.entity)>0),substitute:async(e,a,i)=>{const n=i.filter(r=>r.counterHolder.getQty("SonicBarrier",e.entity)>0);return n.forEach(r=>{r.counterHolder.removeAll("SonicBarrier",e.entity),e.entity.controller.writeInfoLog(`波動音壁により${r.toString()}は１ターンに１度だけ戦闘効果では破壊されない。`)}),n}}]}),t.push({name:"真閃珖竜 スターダスト・クロニクル",defaultSummonFilter:M,actions:[g,f,P(e=>e.length===1&&e.every(a=>{var i;return(i=a.status.monsterCategories)==null?void 0:i.includes("Syncro")}),e=>e.length>0&&e.every(a=>{var i;return(i=a.status.monsterCategories)==null?void 0:i.includes("Syncro")})),{title:"波動護魂",isMandatory:!1,playType:"QuickEffect",spellSpeed:"Quick",executableCells:A,executablePeriods:h,executableDuelistTypes:["Controller"],isOnlyNTimesPerTurnIfFaceup:1,canPayCosts:e=>xe(e,e.activator.getGraveyard().cardEntities.filter(a=>{var i;return(i=a.status.monsterCategories)==null?void 0:i.includes("Syncro")})),validate:()=>[],payCosts:e=>Me(e,e.activator.getGraveyard().cardEntities.filter(a=>{var i;return(i=a.status.monsterCategories)==null?void 0:i.includes("Syncro")}),a=>a.length===1,1),prepare:x,execute:async e=>(e.action.entity.procFilterBundle.push(se.createLingering(e.action.title,a=>a.effectOwner.duel.clock.isSameTurn(a.isSpawnedAt),e.action.entity,e.action,()=>!0,["Effect"],()=>!1)),!0),settle:async()=>!0},{title:"②蘇生",isMandatory:!1,playType:"TriggerEffect",spellSpeed:"Normal",executableCells:["Banished"],executablePeriods:[...h,...D],executableDuelistTypes:["Controller"],validate:e=>{if(!e.action.entity.wasMovedAtPreviousChain)return;const a=e.activator.getMonsterZones();if(e.activator.getEnableSummonList(e.activator,"SpecialSummon",["Effect"],e.action,e.activator.getBanished().cardEntities.filter(n=>n.kind==="Monster").filter(n=>n.face==="FaceUp").filter(n=>n.types.includes("Dragon")).filter(n=>{var r;return(r=n.status.monsterCategories)==null?void 0:r.includes("Syncro")}).filter(n=>n.canBeTargetOfEffect(e)).map(n=>({monster:n,posList:m,cells:a})),[],!1).length)return[]},prepare:e=>Z(e,e.activator.getBanished().cardEntities.filter(a=>a.kind==="Monster").filter(a=>a.face==="FaceUp").filter(a=>a.types.includes("Dragon")).filter(a=>{var i;return(i=a.status.monsterCategories)==null?void 0:i.includes("Syncro")}).filter(a=>a.canBeTargetOfEffect(e))),execute:async e=>H(e),settle:async()=>!0}]}),t.push({name:"聖珖神竜 スターダスト・シフル",defaultSummonFilter:M,actions:[g,f,P(e=>e.length===1&&e.every(a=>{var i;return(i=a.status.monsterCategories)==null?void 0:i.includes("Syncro")}),e=>e.length>1&&e.every(a=>{var i;return(i=a.status.monsterCategories)==null?void 0:i.includes("Syncro")})),{title:"②珖波動反撃",isMandatory:!1,playType:"QuickEffect",spellSpeed:"Quick",executableCells:["Hand"],executablePeriods:h,executableDuelistTypes:["Controller"],isOnlyNTimesPerTurnIfFaceup:1,negatePreviousBlock:!0,validate:e=>{if(e.targetChainBlock&&e.activator!==e.targetChainBlock.activator&&e.targetChainBlock.action.entity.kind==="Monster"&&e.targetChainBlock.action.isWithChainBlock)return[]},prepare:async()=>({selectedEntities:[],chainBlockTags:["NegateCardEffect","DestroyOnField"],prepared:void 0}),execute:async e=>{if(!e.targetChainBlock)return!1;const a=e.targetChainBlock;a.isNegatedEffectBy=e.action;const i=await e.activator.waitSelectEntity(e.action.duel.field.getCardsOnFieldStrictly(),"破壊するカードを選択。",!1);return(await E.tryDestroy(i?[i]:[],e)).length>0},settle:async()=>!0},{title:"③蘇生",isMandatory:!1,playType:"IgnitionEffect",spellSpeed:"Normal",executableCells:["Graveyard"],executablePeriods:["main1","main2"],executableDuelistTypes:["Controller"],priorityForNPC:10,canPayCosts:Q,validate:e=>e.activator.getBanished().cardEntities.filter(i=>{var n;return(n=i.status.nameTags)==null?void 0:n.includes("スターダスト")}).filter(i=>(i.lvl??12)<9).length===0?void 0:e.activator.getAvailableMonsterZones().length>0?[]:void 0,payCosts:V,prepare:e=>Z(e,e.activator.getBanished().cardEntities.filter(a=>{var i;return(i=a.status.nameTags)==null?void 0:i.includes("スターダスト")}).filter(a=>(a.lvl??12)<9),m,a=>a.length===1),execute:e=>H(e,m),settle:async()=>!0}],substituteEffects:[{title:"波動聖句",isMandatory:!0,executableCells:["MonsterZone"],executablePeriods:L,executableDuelistTypes:["Controller"],isApplicableTo:(e,a,i)=>i.filter(n=>n.controller===e.entity.controller).filter(n=>n.counterHolder.getQty("SonicVerse",e.entity)===0),substitute:async(e,a,i)=>{if(!e.entity.isEffective)return[];const n=i.filter(r=>r.controller===e.entity.controller).filter(r=>r.counterHolder.getQty("SonicVerse",e.entity)===0);return n.forEach(r=>{r.counterHolder.add("SonicVerse",1,e.entity),e.entity.controller.writeInfoLog(`${e.entity.toString()}の効果により${r.toString()}は１ターンに１度だけ破壊されない。`)}),n}}]}),t},Nt=()=>{const t=[];return t.push({name:"フォーミュラ・シンクロン",actions:[g,f,S,P(),{title:"①ドロー",isMandatory:!1,playType:"TriggerEffect",spellSpeed:"Normal",executableCells:A,executablePeriods:[...h,...D],executableDuelistTypes:["Controller"],validate:e=>{if(e.action.entity.hasBeenSummonedJustNow(["SyncroSummon"])&&e.activator.getDeckCell().cardEntities.length)return[]},prepare:async()=>({selectedEntities:[],chainBlockTags:["Draw"],prepared:void 0}),execute:async e=>(await e.activator.draw(1,e.action.entity,e.activator),!0),settle:async()=>!0},oe({title:"②シンクロ召喚",isOnlyNTimesPerChain:1})],defaultSummonFilter:M}),t},Zt=()=>{const t=[];return t.push({name:"星杯の妖精リース",actions:[g,f,S,k,{title:"①サーチ",isMandatory:!1,playType:"TriggerEffect",spellSpeed:"Normal",executableCells:["MonsterZone"],executablePeriods:[...h,...D],executableDuelistTypes:["Controller"],isOnlyNTimesPerTurn:1,validate:e=>{if(e.action.entity.hasBeenSummonedNow(["NormalSummon","SpecialSummon"])&&e.activator.getDeckCell().cardEntities.filter(a=>a.kind==="Monster").filter(a=>{var i;return(i=a.status.nameTags)==null?void 0:i.includes("星杯")}).length!==0)return[]},prepare:async()=>({selectedEntities:[],chainBlockTags:["SearchFromDeck"],prepared:void 0}),execute:async e=>{const a=e.activator.getDeckCell().cardEntities.filter(n=>n.kind==="Monster").filter(n=>{var r;return(r=n.status.nameTags)==null?void 0:r.includes("星杯")});if(a.length===0)return!1;const i=await e.activator.waitSelectEntity(a,"手札に加えるモンスターを選択",!1);if(!i)throw new b("想定されない状態",e);return await i.addToHand(["Effect"],e.action.entity,e.activator),!0},settle:async()=>!0},{title:"②自己サルベージ",isMandatory:!1,playType:"IgnitionEffect",spellSpeed:"Normal",executableCells:["Graveyard"],executablePeriods:["main1","main2"],executableDuelistTypes:["Controller"],isOnlyNTimesPerTurn:1,canPayCosts:e=>[...e.activator.getMonstersOnField(),...e.activator.getHandCell().cardEntities.filter(a=>a.kind==="Monster")].some(a=>a.canBeSentToGraveyard(e.activator,e.action.entity,"SendToGraveyardAsCost",e.action)),validate:()=>[],payCosts:async e=>{const a=[...e.activator.getMonstersOnField(),...e.activator.getHandCell().cardEntities.filter(n=>n.kind==="Monster")].filter(n=>n.canBeSentToGraveyard(e.activator,e.action.entity,"SendToGraveyardAsCost",e.action)),i=await e.activator.waitSelectEntity(a,"墓地に送るモンスターを選択。",!0);if(i)return await i.sendToGraveyard(["Cost"],e.action.entity,e.activator),{sendToGraveyard:[i]}},prepare:async()=>({selectedEntities:[],chainBlockTags:["SearchFromDeck"],prepared:void 0}),execute:async e=>e.action.entity.wasMovedAfter(e.isActivatedAt)?!1:(await e.action.entity.addToHand(["Effect"],e.action.entity,e.activator),!0),settle:async()=>!0}]}),t.push({name:"星遺物－『星杯』",actions:[g,f,S,k,{title:"①墓地送り",isMandatory:!1,playType:"TriggerEffect",spellSpeed:"Normal",executableCells:["MonsterZone"],executablePeriods:[...h,...D],executableDuelistTypes:["Controller"],canPayCosts:Y,validate:e=>e.activator.duel.field.moveLog.getPriviousChainLog().filter(a=>a.movedAs.includes("SpecialSummon")).map(a=>a.entity).some(a=>a.wasMovedFrom.cellType==="ExtraDeck")?[]:void 0,payCosts:I,prepare:x,execute:async e=>{const a=e.activator.duel.field.moveLog.getPriviousChainLog().filter(i=>i.movedAs.includes("SpecialSummon")).map(i=>i.entity).filter(i=>i.wasMovedFrom.cellType==="ExtraDeck").filter(i=>i.isOnFieldAsMonsterStrictly).filter(i=>i.canBeEffected(e.activator,e.action.entity,e.action)).toArray();return await E.sendManyToGraveyardForTheSameReason(a,["Effect"],e.action.entity,e.activator),!0},settle:async()=>!0},{title:"②リクルート",isMandatory:!1,playType:"TriggerEffect",spellSpeed:"Normal",executableCells:["Hand","Graveyard","Banished"],executablePeriods:[...h,...D],executableDuelistTypes:["Controller"],validate:e=>{if(!e.action.entity.wasMovedAtPreviousChain||!e.action.entity.info.summonKinds.includes("NormalSummon")||e.action.entity.moveLog.previousPlaceRecord.face==="FaceDown")return;const a=e.activator.getDeckCell().cardEntities.filter(r=>r.kind==="Monster").filter(r=>{var s;return(s=r.status.nameTags)==null?void 0:s.includes("星杯")}).filter(r=>r.nm!=="星遺物－『星杯』"),i=e.activator.getMonsterZones();return e.activator.getEnableSummonList(e.activator,"SpecialSummon",["Effect"],e.action,a.map(r=>({monster:r,cells:i,posList:m})),[],!1).length>1?[]:void 0},prepare:x,execute:async e=>{const a=e.activator.getDeckCell().cardEntities.filter(r=>r.kind==="Monster").filter(r=>{var s;return(s=r.status.nameTags)==null?void 0:s.includes("星杯")}).filter(r=>r.nm!=="星遺物－『星杯』"),i=e.activator.getMonsterZones();return(await e.activator.summonMany(e.activator,"SpecialSummon",["Effect"],e.action,a.map(r=>({monster:r,cells:i,posList:m})),[],!1,2,r=>r.length==2,!1)??[]).length==2},settle:async()=>!0},{title:"③サーチ",isMandatory:!1,playType:"IgnitionEffect",spellSpeed:"Normal",executableCells:["Graveyard"],executablePeriods:["main1","main2"],executableDuelistTypes:["Controller"],canPayCosts:Q,validate:e=>{if(!e.action.entity.wasMovedAtCurrentTurn)return e.activator.getDeckCell().cardEntities.filter(a=>{var i;return(i=a.status.nameTags)==null?void 0:i.includes("星遺物")}).length>0?[]:void 0},payCosts:V,prepare:async()=>({selectedEntities:[],chainBlockTags:["SearchFromDeck"],prepared:void 0}),execute:async e=>{const a=await e.activator.waitSelectEntity(e.activator.getDeckCell().cardEntities.filter(i=>{var n;return(n=i.status.nameTags)==null?void 0:n.includes("星遺物")}),"手札に加えるカードを選択",!1);return a?(await a.addToHand(["Effect"],e.action.entity,e.activator),!0):!1},settle:async()=>!0}]}),t},Ht=()=>{const t=[];return t.push({name:"ドットスケーパー",actions:[g,f,k,S,{title:"①自己再生",isMandatory:!1,playType:"TriggerEffect",spellSpeed:"Normal",executableCells:["Graveyard"],executablePeriods:[...h,...D],executableDuelistTypes:["Controller"],isOnlyNTimesPerDuel:1,actionGroupName:"ドットスケーパー",validate:e=>{if(e.action.entity.wasMovedAtPreviousChain)return e.activator.getAvailableMonsterZones().length>0?[]:void 0},prepare:async()=>({selectedEntities:[],chainBlockTags:["SpecialSummonFromGraveyard"],prepared:void 0}),execute:e=>N(e),settle:async()=>!0},{title:"②自己帰還",isMandatory:!1,playType:"TriggerEffect",spellSpeed:"Normal",executableCells:["Banished"],executablePeriods:[...h,...D],executableDuelistTypes:["Controller"],isOnlyNTimesPerDuel:1,actionGroupName:"ドットスケーパー",validate:e=>{if(e.action.entity.wasMovedAtPreviousChain)return e.activator.getAvailableMonsterZones().length>0?[]:void 0},prepare:async()=>({selectedEntities:[],chainBlockTags:["SpecialSummonFromBanished"],prepared:void 0}),execute:e=>N(e),settle:async()=>!0}]}),t},Rt=()=>{const t=[];return t.push({name:"ゼラの天使",actions:[g,f,S,P(),{title:"②自己帰還",isMandatory:!0,playType:"IgnitionEffect",spellSpeed:"Normal",executableCells:["Banished"],executablePeriods:["stanby"],executableDuelistTypes:["Controller"],validate:e=>{if(e.action.entity.wasMovedAtPreviousTurn)return e.activator.getAvailableMonsterZones().length>0?[]:void 0},prepare:async()=>({selectedEntities:[],chainBlockTags:["SpecialSummonFromBanished"],prepared:void 0}),execute:e=>N(e),settle:async()=>!0}],continuousEffects:[U("②攻撃力上昇","Monster",e=>[e],()=>!0,e=>[B.createContinuous("①攻撃力上昇",()=>!0,e,()=>!0,"attack","wip","Addition",(a,i,n)=>a.isEffective?n+a.controller.getOpponentPlayer().getBanished().cardEntities.length*100:n)])],defaultSummonFilter:M}),t},qt=()=>{const t=[];return t.push({name:"死霊騎士デスカリバー・ナイト",actions:[g,f,k,S,{title:"①モンスター効果無効",isMandatory:!0,playType:"TriggerEffect",spellSpeed:"Quick",executableCells:A,executablePeriods:[...h,...D],executableDuelistTypes:["Controller"],negatePreviousBlock:!0,canPayCosts:Y,validate:e=>e.targetChainBlock&&e.targetChainBlock.action.entity.kind==="Monster"&&e.targetChainBlock.action.isWithChainBlock?[]:void 0,payCosts:I,prepare:async(e,a)=>{const i=e.targetChainBlock,n=a[e.index-1];return i!==n?{selectedEntities:[],chainBlockTags:[],prepared:void 0}:{selectedEntities:[],chainBlockTags:["NegateCardEffect",...e.action.calcChainBlockTagsForDestroy([i.action.entity])],prepared:void 0}},execute:async(e,a)=>{const i=a.find(r=>r.action.entity.kind!=="Monster"&&r.action.isWithChainBlock),n=a[e.index-1];return n!==i?!1:(n.isNegatedActivationBy=e.action,await E.tryDestroy([n.action.entity],e),!0)},settle:async()=>!0}],defaultSummonFilter:M}),t},_t=()=>{const t=[];return t.push({name:"エキセントリック・ボーイ",actions:[g,f,k,S],defaultSummonFilter:(e,a,i,n,r,s,u,p,l,c)=>{const o={posList:l,cells:c},d={posList:[],cells:[]};if(!r.includes("SyncroSummon"))return o;const v=p.find(T=>T.material===e.isSpawnedBy);return v?!v.cell.isMonsterZoneLikeCell||p.length!==2?d:p.filter(T=>T!==v).every(T=>T.cell.cellType==="Hand")?o:d:o},defaultStatus:{allowHandSyncro:!0},onUsedAsMaterial:(e,a)=>{a.info.summonKinds.includes("SyncroSummon")&&(a.info.willBeBanished=!0,a.info.isEffectiveIn=a.info.isEffectiveIn.filter(i=>i!=="ExtraMonsterZone").filter(i=>i!=="MonsterZone"))}}),t};try{const t=Object.assign({});Object.keys(t).forEach(e=>{t[e].default&&console.log(e,...t[e].default())})}catch(t){console.log("(´・ω・｀)"),console.error(t)}const oa=()=>{const t=[...qe(),...tt(),...ft(),...at(),...ct(),...dt(),...ze(),...Qe(),...Ve(),...Xe(),...yt(),...Ot(),...bt(),...ot(),...ut(),...We(),...it(),...Et(),...Pt(),...Lt(),...Ye(),...wt(),...Ht(),...$e(),...Nt(),...qt(),...Rt(),...Zt(),...xt(),..._t(),...kt(),...Bt(),...At(),...Mt(),...Ie(),...Dt(),...mt()],e=t.map(i=>i.name);console.info(e);const a=Object.values(Object.groupBy(e,i=>i)).filter(i=>((i==null?void 0:i.length)??2)>1).map(i=>i==null?void 0:i[0]);if(a.length>0)throw new b("カード定義重複",...a);return t};export{It as A,Jt as B,jt as C,zt as D,$t as E,le as a,ta as b,M as c,ca as d,aa as e,k as f,ia as g,g as h,f as i,S as j,la as k,ke as l,oa as m,na as n,ra as o,Xt as p,Vt as q,Yt as r,Se as s,ea as t,Kt as u,Wt as v,Qt as w,Ut as x,sa as y,ye as z};
